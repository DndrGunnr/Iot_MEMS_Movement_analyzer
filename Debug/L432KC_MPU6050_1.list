
L432KC_MPU6050_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b08  0800cb80  0800cb80  0001cb80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d688  0800d688  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  0800d688  0800d688  0001d688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d690  0800d690  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d690  0800d690  0001d690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d694  0800d694  0001d694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0800d698  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  20000270  0800d908  00020270  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a60  0800d908  00020a60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018aab  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000318a  00000000  00000000  00038d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  0003bed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001430  00000000  00000000  0003d450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000231e5  00000000  00000000  0003e880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194cd  00000000  00000000  00061a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf893  00000000  00000000  0007af32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014a7c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007454  00000000  00000000  0014a818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cb64 	.word	0x0800cb64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	0800cb64 	.word	0x0800cb64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <Wifi_SendRaw>:
#include "ESP8266.h"
#include "ESP8266Config.h"
//#########################################################################################################
bool Wifi_SendRaw(uint8_t *data,uint16_t len)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
	if(len <= _WIFI_TX_SIZE)
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800100a:	d813      	bhi.n	8001034 <Wifi_SendRaw+0x3c>
	{
		// Send the information in data through the UART of the ESP8266
		memcpy(Wifi.TxBuffer,data,len);
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	461a      	mov	r2, r3
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	480b      	ldr	r0, [pc, #44]	; (8001040 <Wifi_SendRaw+0x48>)
 8001014:	f005 ff60 	bl	8006ed8 <memcpy>
		if(HAL_UART_Transmit(&_WIFI_USART,data,len,HAL_MAX_DELAY) == HAL_OK)
 8001018:	887a      	ldrh	r2, [r7, #2]
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4808      	ldr	r0, [pc, #32]	; (8001044 <Wifi_SendRaw+0x4c>)
 8001022:	f004 fc8f 	bl	8005944 <HAL_UART_Transmit>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <Wifi_SendRaw+0x38>
			return true;
 800102c:	2301      	movs	r3, #1
 800102e:	e002      	b.n	8001036 <Wifi_SendRaw+0x3e>
		else
			return false;
 8001030:	2300      	movs	r3, #0
 8001032:	e000      	b.n	8001036 <Wifi_SendRaw+0x3e>
	}
	else
		return false;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000691 	.word	0x20000691
 8001044:	2000032c 	.word	0x2000032c

08001048 <Wifi_SendString>:
//#########################################################################################################
bool Wifi_SendString(char *data)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	return Wifi_SendRaw((uint8_t*)data,strlen(data));
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff f8bd 	bl	80001d0 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	b29b      	uxth	r3, r3
 800105a:	4619      	mov	r1, r3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ffcb 	bl	8000ff8 <Wifi_SendRaw>
 8001062:	4603      	mov	r3, r0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <Wifi_WaitForString>:
	DWT_Delay_us(DelayUs);
	return true;
}
//#########################################################################################################
bool Wifi_WaitForString(uint32_t TimeOut_ms,uint8_t *result,uint8_t CountOfParameter,...)
{
 800106c:	b40c      	push	{r2, r3}
 800106e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	466b      	mov	r3, sp
 800107c:	461e      	mov	r6, r3
	 *
	 * If the ESP8266 return a AT+OK after the last command, the function is going to
	 * return a true value and the result number would be 1.
	 */

	if(result == NULL)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <Wifi_WaitForString+0x1c>
		return false;
 8001084:	2300      	movs	r3, #0
 8001086:	e075      	b.n	8001174 <Wifi_WaitForString+0x108>
	if(CountOfParameter == 0)
 8001088:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <Wifi_WaitForString+0x28>
		return false;
 8001090:	2300      	movs	r3, #0
 8001092:	e06f      	b.n	8001174 <Wifi_WaitForString+0x108>

	*result=0;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]

	va_list tag;
		va_start (tag,CountOfParameter);
 800109a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800109e:	60bb      	str	r3, [r7, #8]
		char *arg[CountOfParameter];
 80010a0:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 80010a4:	460b      	mov	r3, r1
 80010a6:	3b01      	subs	r3, #1
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	b2cb      	uxtb	r3, r1
 80010ac:	2200      	movs	r2, #0
 80010ae:	4698      	mov	r8, r3
 80010b0:	4691      	mov	r9, r2
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	f04f 0300 	mov.w	r3, #0
 80010ba:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80010be:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80010c2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80010c6:	b2cb      	uxtb	r3, r1
 80010c8:	2200      	movs	r2, #0
 80010ca:	461c      	mov	r4, r3
 80010cc:	4615      	mov	r5, r2
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	016b      	lsls	r3, r5, #5
 80010d8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80010dc:	0162      	lsls	r2, r4, #5
 80010de:	460b      	mov	r3, r1
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	3307      	adds	r3, #7
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	ebad 0d03 	sub.w	sp, sp, r3
 80010ec:	466b      	mov	r3, sp
 80010ee:	3303      	adds	r3, #3
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	60fb      	str	r3, [r7, #12]
		for(uint8_t i=0; i<CountOfParameter ; i++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	75fb      	strb	r3, [r7, #23]
 80010fa:	e00a      	b.n	8001112 <Wifi_WaitForString+0xa6>
			arg[i] = va_arg (tag, char *);
 80010fc:	7dfa      	ldrb	r2, [r7, #23]
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1d19      	adds	r1, r3, #4
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	6819      	ldr	r1, [r3, #0]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(uint8_t i=0; i<CountOfParameter ; i++)
 800110c:	7dfb      	ldrb	r3, [r7, #23]
 800110e:	3301      	adds	r3, #1
 8001110:	75fb      	strb	r3, [r7, #23]
 8001112:	7dfa      	ldrb	r2, [r7, #23]
 8001114:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001118:	429a      	cmp	r2, r3
 800111a:	d3ef      	bcc.n	80010fc <Wifi_WaitForString+0x90>
	va_end (tag);

	for(uint32_t t=0 ; t<TimeOut_ms ; t+=20)
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
 8001120:	e023      	b.n	800116a <Wifi_WaitForString+0xfe>
	{
		DWT_Delay_us(20000);
 8001122:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001126:	f000 fadb 	bl	80016e0 <DWT_Delay_us>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 800112a:	2300      	movs	r3, #0
 800112c:	77fb      	strb	r3, [r7, #31]
 800112e:	e014      	b.n	800115a <Wifi_WaitForString+0xee>
		{
			if(strstr((char*)Wifi.RxBuffer,arg[mx])!=NULL)
 8001130:	7ffa      	ldrb	r2, [r7, #31]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001138:	4619      	mov	r1, r3
 800113a:	4812      	ldr	r0, [pc, #72]	; (8001184 <Wifi_WaitForString+0x118>)
 800113c:	f006 fdc5 	bl	8007cca <strstr>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d006      	beq.n	8001154 <Wifi_WaitForString+0xe8>
			{
				*result = mx+1;
 8001146:	7ffb      	ldrb	r3, [r7, #31]
 8001148:	3301      	adds	r3, #1
 800114a:	b2da      	uxtb	r2, r3
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	701a      	strb	r2, [r3, #0]
				return true;
 8001150:	2301      	movs	r3, #1
 8001152:	e00f      	b.n	8001174 <Wifi_WaitForString+0x108>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8001154:	7ffb      	ldrb	r3, [r7, #31]
 8001156:	3301      	adds	r3, #1
 8001158:	77fb      	strb	r3, [r7, #31]
 800115a:	7ffa      	ldrb	r2, [r7, #31]
 800115c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001160:	429a      	cmp	r2, r3
 8001162:	d3e5      	bcc.n	8001130 <Wifi_WaitForString+0xc4>
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=20)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	3314      	adds	r3, #20
 8001168:	61bb      	str	r3, [r7, #24]
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	429a      	cmp	r2, r3
 8001170:	d3d7      	bcc.n	8001122 <Wifi_WaitForString+0xb6>
			}
		}
	}
	// timeout
	return false;
 8001172:	2300      	movs	r3, #0
 8001174:	46b5      	mov	sp, r6

}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001180:	b002      	add	sp, #8
 8001182:	4770      	bx	lr
 8001184:	20000491 	.word	0x20000491

08001188 <Wifi_RxClear>:
  }
  *dst = '\0';
}
//#########################################################################################################
void Wifi_RxClear(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	memset(Wifi.RxBuffer,0,_WIFI_RX_SIZE);
 800118c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001190:	2100      	movs	r1, #0
 8001192:	4807      	ldr	r0, [pc, #28]	; (80011b0 <Wifi_RxClear+0x28>)
 8001194:	f005 feae 	bl	8006ef4 <memset>
	Wifi.RxIndex=0;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <Wifi_RxClear+0x2c>)
 800119a:	2200      	movs	r2, #0
 800119c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	4904      	ldr	r1, [pc, #16]	; (80011b4 <Wifi_RxClear+0x2c>)
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <Wifi_RxClear+0x30>)
 80011a6:	f004 fc61 	bl	8005a6c <HAL_UART_Receive_IT>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000491 	.word	0x20000491
 80011b4:	20000490 	.word	0x20000490
 80011b8:	2000032c 	.word	0x2000032c

080011bc <Wifi_TxClear>:
//#########################################################################################################
void Wifi_TxClear(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	memset(Wifi.TxBuffer,0,_WIFI_TX_SIZE);
 80011c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c4:	2100      	movs	r1, #0
 80011c6:	4802      	ldr	r0, [pc, #8]	; (80011d0 <Wifi_TxClear+0x14>)
 80011c8:	f005 fe94 	bl	8006ef4 <memset>
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000691 	.word	0x20000691

080011d4 <Wifi_RxCallBack>:
//#########################################################################################################
void Wifi_RxCallBack(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	Wifi.RxBuffer[Wifi.RxIndex] = Wifi.usartBuff;
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <Wifi_RxCallBack+0x40>)
 80011da:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80011de:	4619      	mov	r1, r3
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <Wifi_RxCallBack+0x40>)
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <Wifi_RxCallBack+0x40>)
 80011e6:	440b      	add	r3, r1
 80011e8:	705a      	strb	r2, [r3, #1]
	if(Wifi.RxIndex < _WIFI_RX_SIZE)
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <Wifi_RxCallBack+0x40>)
 80011ec:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80011f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011f4:	d207      	bcs.n	8001206 <Wifi_RxCallBack+0x32>
	  Wifi.RxIndex++;
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <Wifi_RxCallBack+0x40>)
 80011f8:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80011fc:	3301      	adds	r3, #1
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <Wifi_RxCallBack+0x40>)
 8001202:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8001206:	2201      	movs	r2, #1
 8001208:	4902      	ldr	r1, [pc, #8]	; (8001214 <Wifi_RxCallBack+0x40>)
 800120a:	4803      	ldr	r0, [pc, #12]	; (8001218 <Wifi_RxCallBack+0x44>)
 800120c:	f004 fc2e 	bl	8005a6c <HAL_UART_Receive_IT>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000490 	.word	0x20000490
 8001218:	2000032c 	.word	0x2000032c

0800121c <Wifi_Init>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool Wifi_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af02      	add	r7, sp, #8
	uint8_t result;
	bool returnVal=false;
 8001222:	2300      	movs	r3, #0
 8001224:	71fb      	strb	r3, [r7, #7]
	// Clean the variables and start the interruption to work with the UART
	do
	{
		Wifi_RxClear();
 8001226:	f7ff ffaf 	bl	8001188 <Wifi_RxClear>

		if(Wifi_SendString("AT\r\n")==false)
 800122a:	4815      	ldr	r0, [pc, #84]	; (8001280 <Wifi_Init+0x64>)
 800122c:	f7ff ff0c 	bl	8001048 <Wifi_SendString>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d01a      	beq.n	800126c <Wifi_Init+0x50>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001236:	1db9      	adds	r1, r7, #6
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <Wifi_Init+0x68>)
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <Wifi_Init+0x6c>)
 800123e:	2202      	movs	r2, #2
 8001240:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001244:	f7ff ff12 	bl	800106c <Wifi_WaitForString>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d010      	beq.n	8001270 <Wifi_Init+0x54>
			break;
		if(result==2)
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d00f      	beq.n	8001274 <Wifi_Init+0x58>
			break;
		returnVal = true;
 8001254:	2301      	movs	r3, #1
 8001256:	71fb      	strb	r3, [r7, #7]
		Wifi_RxClear();
 8001258:	f7ff ff96 	bl	8001188 <Wifi_RxClear>
		Wifi_TxClear();
 800125c:	f7ff ffae 	bl	80011bc <Wifi_TxClear>
		HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8001260:	2201      	movs	r2, #1
 8001262:	490a      	ldr	r1, [pc, #40]	; (800128c <Wifi_Init+0x70>)
 8001264:	480a      	ldr	r0, [pc, #40]	; (8001290 <Wifi_Init+0x74>)
 8001266:	f004 fc01 	bl	8005a6c <HAL_UART_Receive_IT>
 800126a:	e004      	b.n	8001276 <Wifi_Init+0x5a>
			break;
 800126c:	bf00      	nop
 800126e:	e002      	b.n	8001276 <Wifi_Init+0x5a>
			break;
 8001270:	bf00      	nop
 8001272:	e000      	b.n	8001276 <Wifi_Init+0x5a>
			break;
 8001274:	bf00      	nop
	}while(0);
	return returnVal;
 8001276:	79fb      	ldrb	r3, [r7, #7]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	0800cb80 	.word	0x0800cb80
 8001284:	0800cb8c 	.word	0x0800cb8c
 8001288:	0800cb88 	.word	0x0800cb88
 800128c:	20000490 	.word	0x20000490
 8001290:	2000032c 	.word	0x2000032c

08001294 <Wifi_Restart>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_Restart(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af02      	add	r7, sp, #8
	// Make a restart of the ESP8266 using the AT Commands

	uint8_t result;
	bool	returnVal=false;
 800129a:	2300      	movs	r3, #0
 800129c:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 800129e:	f7ff ff73 	bl	8001188 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+RST\r\n");
 80012a2:	4913      	ldr	r1, [pc, #76]	; (80012f0 <Wifi_Restart+0x5c>)
 80012a4:	4813      	ldr	r0, [pc, #76]	; (80012f4 <Wifi_Restart+0x60>)
 80012a6:	f006 fcad 	bl	8007c04 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80012aa:	4812      	ldr	r0, [pc, #72]	; (80012f4 <Wifi_Restart+0x60>)
 80012ac:	f7ff fecc 	bl	8001048 <Wifi_SendString>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d011      	beq.n	80012da <Wifi_Restart+0x46>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80012b6:	1db9      	adds	r1, r7, #6
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <Wifi_Restart+0x64>)
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <Wifi_Restart+0x68>)
 80012be:	2202      	movs	r2, #2
 80012c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012c4:	f7ff fed2 	bl	800106c <Wifi_WaitForString>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d007      	beq.n	80012de <Wifi_Restart+0x4a>
			break;			// The timeout was completed and the string was not there
		if(result == 2)		// It was find the "ERROR" String in the receiving information
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d006      	beq.n	80012e2 <Wifi_Restart+0x4e>
			break;
		returnVal=true;
 80012d4:	2301      	movs	r3, #1
 80012d6:	71fb      	strb	r3, [r7, #7]
 80012d8:	e004      	b.n	80012e4 <Wifi_Restart+0x50>
			break;
 80012da:	bf00      	nop
 80012dc:	e002      	b.n	80012e4 <Wifi_Restart+0x50>
			break;			// The timeout was completed and the string was not there
 80012de:	bf00      	nop
 80012e0:	e000      	b.n	80012e4 <Wifi_Restart+0x50>
			break;
 80012e2:	bf00      	nop
	}while(0);
	return returnVal;
 80012e4:	79fb      	ldrb	r3, [r7, #7]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	0800cb94 	.word	0x0800cb94
 80012f4:	20000691 	.word	0x20000691
 80012f8:	0800cb8c 	.word	0x0800cb8c
 80012fc:	0800cb88 	.word	0x0800cb88

08001300 <Wifi_SetMode>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_SetMode(WifiMode_t	WifiMode_)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af02      	add	r7, sp, #8
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
	uint8_t result;
	bool	returnVal=false;
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 800130e:	f7ff ff3b 	bl	8001188 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR=%d\r\n",WifiMode_);
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	461a      	mov	r2, r3
 8001316:	4915      	ldr	r1, [pc, #84]	; (800136c <Wifi_SetMode+0x6c>)
 8001318:	4815      	ldr	r0, [pc, #84]	; (8001370 <Wifi_SetMode+0x70>)
 800131a:	f006 fc73 	bl	8007c04 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <Wifi_SetMode+0x70>)
 8001320:	f7ff fe92 	bl	8001048 <Wifi_SendString>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d016      	beq.n	8001358 <Wifi_SetMode+0x58>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800132a:	f107 010e 	add.w	r1, r7, #14
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <Wifi_SetMode+0x74>)
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <Wifi_SetMode+0x78>)
 8001334:	2202      	movs	r2, #2
 8001336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800133a:	f7ff fe97 	bl	800106c <Wifi_WaitForString>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00b      	beq.n	800135c <Wifi_SetMode+0x5c>
			break;			// The timeout was completed and the string was not there
		if(result == 2)		// It was find the "ERROR" String in the receiving information
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d00a      	beq.n	8001360 <Wifi_SetMode+0x60>
			break;
		Wifi.Mode = WifiMode_;
 800134a:	4a0c      	ldr	r2, [pc, #48]	; (800137c <Wifi_SetMode+0x7c>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f882 3405 	strb.w	r3, [r2, #1029]	; 0x405
		returnVal=true;
 8001352:	2301      	movs	r3, #1
 8001354:	73fb      	strb	r3, [r7, #15]
 8001356:	e004      	b.n	8001362 <Wifi_SetMode+0x62>
			break;
 8001358:	bf00      	nop
 800135a:	e002      	b.n	8001362 <Wifi_SetMode+0x62>
			break;			// The timeout was completed and the string was not there
 800135c:	bf00      	nop
 800135e:	e000      	b.n	8001362 <Wifi_SetMode+0x62>
			break;
 8001360:	bf00      	nop
	}while(0);
	return returnVal;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	0800cbe0 	.word	0x0800cbe0
 8001370:	20000691 	.word	0x20000691
 8001374:	0800cb8c 	.word	0x0800cb8c
 8001378:	0800cb88 	.word	0x0800cb88
 800137c:	20000490 	.word	0x20000490

08001380 <Wifi_Station_ConnectToAp>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_Station_ConnectToAp(char *SSID,char *Pass,char *MAC)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af02      	add	r7, sp, #8
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
	uint8_t result;
	bool	returnVal=false;
 800138c:	2300      	movs	r3, #0
 800138e:	75fb      	strb	r3, [r7, #23]
	do
	{
		/*
		 * It connects to a WiFi network who has all the parameters correctly
		 */
		Wifi_RxClear();
 8001390:	f7ff fefa 	bl	8001188 <Wifi_RxClear>
		if(MAC==NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d106      	bne.n	80013a8 <Wifi_Station_ConnectToAp+0x28>
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\"\r\n",SSID,Pass);
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	4919      	ldr	r1, [pc, #100]	; (8001404 <Wifi_Station_ConnectToAp+0x84>)
 80013a0:	4819      	ldr	r0, [pc, #100]	; (8001408 <Wifi_Station_ConnectToAp+0x88>)
 80013a2:	f006 fc2f 	bl	8007c04 <siprintf>
 80013a6:	e007      	b.n	80013b8 <Wifi_Station_ConnectToAp+0x38>
		else
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\",\"%s\"\r\n",SSID,Pass,MAC);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4916      	ldr	r1, [pc, #88]	; (800140c <Wifi_Station_ConnectToAp+0x8c>)
 80013b2:	4815      	ldr	r0, [pc, #84]	; (8001408 <Wifi_Station_ConnectToAp+0x88>)
 80013b4:	f006 fc26 	bl	8007c04 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80013b8:	4813      	ldr	r0, [pc, #76]	; (8001408 <Wifi_Station_ConnectToAp+0x88>)
 80013ba:	f7ff fe45 	bl	8001048 <Wifi_SendString>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d014      	beq.n	80013ee <Wifi_Station_ConnectToAp+0x6e>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_VERYHIGH,&result,3,"\r\nOK\r\n","\r\nERROR\r\n","\r\nFAIL\r\n")==false)
 80013c4:	f107 0116 	add.w	r1, r7, #22
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <Wifi_Station_ConnectToAp+0x90>)
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <Wifi_Station_ConnectToAp+0x94>)
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <Wifi_Station_ConnectToAp+0x98>)
 80013d2:	2203      	movs	r2, #3
 80013d4:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80013d8:	f7ff fe48 	bl	800106c <Wifi_WaitForString>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d007      	beq.n	80013f2 <Wifi_Station_ConnectToAp+0x72>
			break;
		if(result > 1)		// If the result is higher to 1 is because there were an error
 80013e2:	7dbb      	ldrb	r3, [r7, #22]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d806      	bhi.n	80013f6 <Wifi_Station_ConnectToAp+0x76>
			break;			// in the communication
		returnVal=true;
 80013e8:	2301      	movs	r3, #1
 80013ea:	75fb      	strb	r3, [r7, #23]
 80013ec:	e004      	b.n	80013f8 <Wifi_Station_ConnectToAp+0x78>
			break;
 80013ee:	bf00      	nop
 80013f0:	e002      	b.n	80013f8 <Wifi_Station_ConnectToAp+0x78>
			break;
 80013f2:	bf00      	nop
 80013f4:	e000      	b.n	80013f8 <Wifi_Station_ConnectToAp+0x78>
			break;			// in the communication
 80013f6:	bf00      	nop
	}while(0);
	return returnVal;
 80013f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	0800cc58 	.word	0x0800cc58
 8001408:	20000691 	.word	0x20000691
 800140c:	0800cc74 	.word	0x0800cc74
 8001410:	0800cc9c 	.word	0x0800cc9c
 8001414:	0800cca8 	.word	0x0800cca8
 8001418:	0800cc94 	.word	0x0800cc94

0800141c <Wifi_TcpIp_SetMultiConnection>:
	}while(0);
	return returnVal;
}
//#########################################################################################################
bool  Wifi_TcpIp_SetMultiConnection(bool EnableMultiConnections)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af02      	add	r7, sp, #8
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
	uint8_t result;
	bool	returnVal=false;
 8001426:	2300      	movs	r3, #0
 8001428:	73fb      	strb	r3, [r7, #15]
	do
	{
		// Enable or Disable the multiconnection possibility
		Wifi_RxClear();
 800142a:	f7ff fead 	bl	8001188 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX=%d\r\n",EnableMultiConnections);
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	461a      	mov	r2, r3
 8001432:	4915      	ldr	r1, [pc, #84]	; (8001488 <Wifi_TcpIp_SetMultiConnection+0x6c>)
 8001434:	4815      	ldr	r0, [pc, #84]	; (800148c <Wifi_TcpIp_SetMultiConnection+0x70>)
 8001436:	f006 fbe5 	bl	8007c04 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800143a:	4814      	ldr	r0, [pc, #80]	; (800148c <Wifi_TcpIp_SetMultiConnection+0x70>)
 800143c:	f7ff fe04 	bl	8001048 <Wifi_SendString>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d016      	beq.n	8001474 <Wifi_TcpIp_SetMultiConnection+0x58>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001446:	f107 010e 	add.w	r1, r7, #14
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <Wifi_TcpIp_SetMultiConnection+0x74>)
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <Wifi_TcpIp_SetMultiConnection+0x78>)
 8001450:	2202      	movs	r2, #2
 8001452:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001456:	f7ff fe09 	bl	800106c <Wifi_WaitForString>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00b      	beq.n	8001478 <Wifi_TcpIp_SetMultiConnection+0x5c>
			break;
		if(result == 2)
 8001460:	7bbb      	ldrb	r3, [r7, #14]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d00a      	beq.n	800147c <Wifi_TcpIp_SetMultiConnection+0x60>
			break;
    Wifi.TcpIpMultiConnection=EnableMultiConnections;
 8001466:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <Wifi_TcpIp_SetMultiConnection+0x7c>)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	f882 3518 	strb.w	r3, [r2, #1304]	; 0x518
		returnVal=true;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e004      	b.n	800147e <Wifi_TcpIp_SetMultiConnection+0x62>
			break;
 8001474:	bf00      	nop
 8001476:	e002      	b.n	800147e <Wifi_TcpIp_SetMultiConnection+0x62>
			break;
 8001478:	bf00      	nop
 800147a:	e000      	b.n	800147e <Wifi_TcpIp_SetMultiConnection+0x62>
			break;
 800147c:	bf00      	nop
	}while(0);
	return returnVal;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	0800cdc0 	.word	0x0800cdc0
 800148c:	20000691 	.word	0x20000691
 8001490:	0800cb8c 	.word	0x0800cb8c
 8001494:	0800cb88 	.word	0x0800cb88
 8001498:	20000490 	.word	0x20000490

0800149c <Wifi_TcpIp_StartTcpConnection>:
	}while(0);
	return returnVal;
}
//#########################################################################################################
bool  Wifi_TcpIp_StartTcpConnection(uint8_t LinkId,char *RemoteIp,uint16_t RemotePort,uint16_t TimeOut)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af02      	add	r7, sp, #8
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	4611      	mov	r1, r2
 80014a6:	461a      	mov	r2, r3
 80014a8:	4603      	mov	r3, r0
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	460b      	mov	r3, r1
 80014ae:	81bb      	strh	r3, [r7, #12]
 80014b0:	4613      	mov	r3, r2
 80014b2:	80fb      	strh	r3, [r7, #6]
	uint8_t result;
	bool	returnVal=false;
 80014b4:	2300      	movs	r3, #0
 80014b6:	75fb      	strb	r3, [r7, #23]
		/*
		 * It makes a TCP server and then it creates a TCP Connection according to the
		 * settings in the function. It uses a very high time of waiting because the
		 * ESP8266 takes a lot of time to create a connection with a TCP the first time.
		 */
		Wifi_RxClear();
 80014b8:	f7ff fe66 	bl	8001188 <Wifi_RxClear>
		if(Wifi.TcpIpMultiConnection==true){
 80014bc:	4b33      	ldr	r3, [pc, #204]	; (800158c <Wifi_TcpIp_StartTcpConnection+0xf0>)
 80014be:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d11b      	bne.n	80014fe <Wifi_TcpIp_StartTcpConnection+0x62>
			sprintf((char*)Wifi.TxBuffer,"AT+CIPSERVER=1,%d\r\n",RemotePort);
 80014c6:	89bb      	ldrh	r3, [r7, #12]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4931      	ldr	r1, [pc, #196]	; (8001590 <Wifi_TcpIp_StartTcpConnection+0xf4>)
 80014cc:	4831      	ldr	r0, [pc, #196]	; (8001594 <Wifi_TcpIp_StartTcpConnection+0xf8>)
 80014ce:	f006 fb99 	bl	8007c04 <siprintf>
			if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80014d2:	4830      	ldr	r0, [pc, #192]	; (8001594 <Wifi_TcpIp_StartTcpConnection+0xf8>)
 80014d4:	f7ff fdb8 	bl	8001048 <Wifi_SendString>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d046      	beq.n	800156c <Wifi_TcpIp_StartTcpConnection+0xd0>
				break;
			if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80014de:	f107 0116 	add.w	r1, r7, #22
 80014e2:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <Wifi_TcpIp_StartTcpConnection+0xfc>)
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <Wifi_TcpIp_StartTcpConnection+0x100>)
 80014e8:	2202      	movs	r2, #2
 80014ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ee:	f7ff fdbd 	bl	800106c <Wifi_WaitForString>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d03b      	beq.n	8001570 <Wifi_TcpIp_StartTcpConnection+0xd4>
				break;			// The timeout was completed and the string was not there
			if(result == 2)		// It was find the "ERROR" String in the receiving information
 80014f8:	7dbb      	ldrb	r3, [r7, #22]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d03a      	beq.n	8001574 <Wifi_TcpIp_StartTcpConnection+0xd8>
				break;
		}
		Wifi_RxClear();
 80014fe:	f7ff fe43 	bl	8001188 <Wifi_RxClear>
		if(Wifi.TcpIpMultiConnection==false)
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <Wifi_TcpIp_StartTcpConnection+0xf0>)
 8001504:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 8001508:	2b00      	cmp	r3, #0
 800150a:	d109      	bne.n	8001520 <Wifi_TcpIp_StartTcpConnection+0x84>
		  sprintf((char*)Wifi.TxBuffer,"AT+CIPSTART=\"TCP\",\"%s\",%d,%d\r\n",RemoteIp,RemotePort,TimeOut);
 800150c:	89ba      	ldrh	r2, [r7, #12]
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	4613      	mov	r3, r2
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	4922      	ldr	r1, [pc, #136]	; (80015a0 <Wifi_TcpIp_StartTcpConnection+0x104>)
 8001518:	481e      	ldr	r0, [pc, #120]	; (8001594 <Wifi_TcpIp_StartTcpConnection+0xf8>)
 800151a:	f006 fb73 	bl	8007c04 <siprintf>
 800151e:	e00a      	b.n	8001536 <Wifi_TcpIp_StartTcpConnection+0x9a>
		else
		  sprintf((char*)Wifi.TxBuffer,"AT+CIPSTART=%d,\"TCP\",\"%s\",%d,%d\r\n",LinkId,RemoteIp,RemotePort,TimeOut);
 8001520:	7bf9      	ldrb	r1, [r7, #15]
 8001522:	89bb      	ldrh	r3, [r7, #12]
 8001524:	88fa      	ldrh	r2, [r7, #6]
 8001526:	9201      	str	r2, [sp, #4]
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	460a      	mov	r2, r1
 800152e:	491d      	ldr	r1, [pc, #116]	; (80015a4 <Wifi_TcpIp_StartTcpConnection+0x108>)
 8001530:	4818      	ldr	r0, [pc, #96]	; (8001594 <Wifi_TcpIp_StartTcpConnection+0xf8>)
 8001532:	f006 fb67 	bl	8007c04 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001536:	4817      	ldr	r0, [pc, #92]	; (8001594 <Wifi_TcpIp_StartTcpConnection+0xf8>)
 8001538:	f7ff fd86 	bl	8001048 <Wifi_SendString>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d01a      	beq.n	8001578 <Wifi_TcpIp_StartTcpConnection+0xdc>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_HIGH,&result,3,"OK","CONNECT","ERROR")==false)
 8001542:	f107 0116 	add.w	r1, r7, #22
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <Wifi_TcpIp_StartTcpConnection+0xfc>)
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <Wifi_TcpIp_StartTcpConnection+0x10c>)
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <Wifi_TcpIp_StartTcpConnection+0x100>)
 8001550:	2203      	movs	r2, #3
 8001552:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001556:	f7ff fd89 	bl	800106c <Wifi_WaitForString>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00d      	beq.n	800157c <Wifi_TcpIp_StartTcpConnection+0xe0>
			break;
		if(result == 3)
 8001560:	7dbb      	ldrb	r3, [r7, #22]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d00c      	beq.n	8001580 <Wifi_TcpIp_StartTcpConnection+0xe4>
			break;
		returnVal=true;
 8001566:	2301      	movs	r3, #1
 8001568:	75fb      	strb	r3, [r7, #23]
 800156a:	e00a      	b.n	8001582 <Wifi_TcpIp_StartTcpConnection+0xe6>
				break;
 800156c:	bf00      	nop
 800156e:	e008      	b.n	8001582 <Wifi_TcpIp_StartTcpConnection+0xe6>
				break;			// The timeout was completed and the string was not there
 8001570:	bf00      	nop
 8001572:	e006      	b.n	8001582 <Wifi_TcpIp_StartTcpConnection+0xe6>
				break;
 8001574:	bf00      	nop
 8001576:	e004      	b.n	8001582 <Wifi_TcpIp_StartTcpConnection+0xe6>
			break;
 8001578:	bf00      	nop
 800157a:	e002      	b.n	8001582 <Wifi_TcpIp_StartTcpConnection+0xe6>
			break;
 800157c:	bf00      	nop
 800157e:	e000      	b.n	8001582 <Wifi_TcpIp_StartTcpConnection+0xe6>
			break;
 8001580:	bf00      	nop
	}while(0);
	return returnVal;
 8001582:	7dfb      	ldrb	r3, [r7, #23]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000490 	.word	0x20000490
 8001590:	0800cde0 	.word	0x0800cde0
 8001594:	20000691 	.word	0x20000691
 8001598:	0800cb8c 	.word	0x0800cb8c
 800159c:	0800cb88 	.word	0x0800cb88
 80015a0:	0800cdf4 	.word	0x0800cdf4
 80015a4:	0800ce14 	.word	0x0800ce14
 80015a8:	0800ce38 	.word	0x0800ce38

080015ac <Wifi_TcpIp_SendData_PartialTcp>:
	}while(0);
	return returnVal;
}
//#########################################################################################################
bool  Wifi_TcpIp_SendData_PartialTcp(uint8_t LinkId,uint16_t dataLen,uint8_t *data)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	4603      	mov	r3, r0
 80015b4:	603a      	str	r2, [r7, #0]
 80015b6:	71fb      	strb	r3, [r7, #7]
 80015b8:	460b      	mov	r3, r1
 80015ba:	80bb      	strh	r3, [r7, #4]
	uint8_t result;
	bool	returnVal=false;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 80015c0:	f7ff fde2 	bl	8001188 <Wifi_RxClear>
		if(Wifi.TcpIpMultiConnection==false)
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <Wifi_TcpIp_SendData_PartialTcp+0xb8>)
 80015c6:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d106      	bne.n	80015dc <Wifi_TcpIp_SendData_PartialTcp+0x30>
			sprintf((char*)Wifi.TxBuffer,"AT+CIPSEND=%d\r\n",dataLen);
 80015ce:	88bb      	ldrh	r3, [r7, #4]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4925      	ldr	r1, [pc, #148]	; (8001668 <Wifi_TcpIp_SendData_PartialTcp+0xbc>)
 80015d4:	4825      	ldr	r0, [pc, #148]	; (800166c <Wifi_TcpIp_SendData_PartialTcp+0xc0>)
 80015d6:	f006 fb15 	bl	8007c04 <siprintf>
 80015da:	e005      	b.n	80015e8 <Wifi_TcpIp_SendData_PartialTcp+0x3c>
		else
			sprintf((char*)Wifi.TxBuffer,"AT+CIPSEND=%d,%d\r\n",LinkId,dataLen);
 80015dc:	79fa      	ldrb	r2, [r7, #7]
 80015de:	88bb      	ldrh	r3, [r7, #4]
 80015e0:	4923      	ldr	r1, [pc, #140]	; (8001670 <Wifi_TcpIp_SendData_PartialTcp+0xc4>)
 80015e2:	4822      	ldr	r0, [pc, #136]	; (800166c <Wifi_TcpIp_SendData_PartialTcp+0xc0>)
 80015e4:	f006 fb0e 	bl	8007c04 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80015e8:	4820      	ldr	r0, [pc, #128]	; (800166c <Wifi_TcpIp_SendData_PartialTcp+0xc0>)
 80015ea:	f7ff fd2d 	bl	8001048 <Wifi_SendString>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d029      	beq.n	8001648 <Wifi_TcpIp_SendData_PartialTcp+0x9c>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,">","ERROR")==false)
 80015f4:	f107 010e 	add.w	r1, r7, #14
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <Wifi_TcpIp_SendData_PartialTcp+0xc8>)
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <Wifi_TcpIp_SendData_PartialTcp+0xcc>)
 80015fe:	2202      	movs	r2, #2
 8001600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001604:	f7ff fd32 	bl	800106c <Wifi_WaitForString>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d01e      	beq.n	800164c <Wifi_TcpIp_SendData_PartialTcp+0xa0>
			break;			// The timeout was completed and the string was not there
		if(result == 2)		// It was find the "ERROR" String in the receiving information
 800160e:	7bbb      	ldrb	r3, [r7, #14]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d01d      	beq.n	8001650 <Wifi_TcpIp_SendData_PartialTcp+0xa4>
			break;
		Wifi_RxClear();
 8001614:	f7ff fdb8 	bl	8001188 <Wifi_RxClear>
		// Send in this time the information through the connection
		Wifi_SendRaw(data,dataLen);
 8001618:	88bb      	ldrh	r3, [r7, #4]
 800161a:	4619      	mov	r1, r3
 800161c:	6838      	ldr	r0, [r7, #0]
 800161e:	f7ff fceb 	bl	8000ff8 <Wifi_SendRaw>
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001622:	f107 010e 	add.w	r1, r7, #14
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <Wifi_TcpIp_SendData_PartialTcp+0xc8>)
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <Wifi_TcpIp_SendData_PartialTcp+0xd0>)
 800162c:	2202      	movs	r2, #2
 800162e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001632:	f7ff fd1b 	bl	800106c <Wifi_WaitForString>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00b      	beq.n	8001654 <Wifi_TcpIp_SendData_PartialTcp+0xa8>
			break;			// The timeout was completed and the string was not there
		if(result == 2)		// It was find the "ERROR" String in the receiving information
 800163c:	7bbb      	ldrb	r3, [r7, #14]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d00a      	beq.n	8001658 <Wifi_TcpIp_SendData_PartialTcp+0xac>
			break;
		returnVal=true;
 8001642:	2301      	movs	r3, #1
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	e008      	b.n	800165a <Wifi_TcpIp_SendData_PartialTcp+0xae>
			break;
 8001648:	bf00      	nop
 800164a:	e006      	b.n	800165a <Wifi_TcpIp_SendData_PartialTcp+0xae>
			break;			// The timeout was completed and the string was not there
 800164c:	bf00      	nop
 800164e:	e004      	b.n	800165a <Wifi_TcpIp_SendData_PartialTcp+0xae>
			break;
 8001650:	bf00      	nop
 8001652:	e002      	b.n	800165a <Wifi_TcpIp_SendData_PartialTcp+0xae>
			break;			// The timeout was completed and the string was not there
 8001654:	bf00      	nop
 8001656:	e000      	b.n	800165a <Wifi_TcpIp_SendData_PartialTcp+0xae>
			break;
 8001658:	bf00      	nop
	}while(0);
	return returnVal;
 800165a:	7bfb      	ldrb	r3, [r7, #15]

}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000490 	.word	0x20000490
 8001668:	0800ced4 	.word	0x0800ced4
 800166c:	20000691 	.word	0x20000691
 8001670:	0800cee4 	.word	0x0800cee4
 8001674:	0800cb8c 	.word	0x0800cb8c
 8001678:	0800cef8 	.word	0x0800cef8
 800167c:	0800cb88 	.word	0x0800cb88

08001680 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <DWT_Delay_Init+0x58>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	4a13      	ldr	r2, [pc, #76]	; (80016d8 <DWT_Delay_Init+0x58>)
 800168a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800168e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <DWT_Delay_Init+0x58>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <DWT_Delay_Init+0x58>)
 8001696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800169a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <DWT_Delay_Init+0x5c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <DWT_Delay_Init+0x5c>)
 80016a2:	f023 0301 	bic.w	r3, r3, #1
 80016a6:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <DWT_Delay_Init+0x5c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <DWT_Delay_Init+0x5c>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <DWT_Delay_Init+0x5c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80016ba:	bf00      	nop
     __ASM volatile ("NOP");
 80016bc:	bf00      	nop
  __ASM volatile ("NOP");
 80016be:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <DWT_Delay_Init+0x5c>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80016c8:	2300      	movs	r3, #0
 80016ca:	e000      	b.n	80016ce <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80016cc:	2301      	movs	r3, #1
  }
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000edf0 	.word	0xe000edf0
 80016dc:	e0001000 	.word	0xe0001000

080016e0 <DWT_Delay_us>:


void DWT_Delay_us(volatile uint32_t microseconds)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <DWT_Delay_us+0x40>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80016ee:	f003 f90d 	bl	800490c <HAL_RCC_GetHCLKFreq>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <DWT_Delay_us+0x44>)
 80016f6:	fba2 2303 	umull	r2, r3, r2, r3
 80016fa:	0c9b      	lsrs	r3, r3, #18
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001704:	bf00      	nop
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <DWT_Delay_us+0x40>)
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1ad2      	subs	r2, r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	d3f8      	bcc.n	8001706 <DWT_Delay_us+0x26>
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e0001000 	.word	0xe0001000
 8001724:	431bde83 	.word	0x431bde83

08001728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800172c:	f001 f933 	bl	8002996 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001730:	f000 f854 	bl	80017dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001734:	f000 f9a2 	bl	8001a7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001738:	f000 f970 	bl	8001a1c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800173c:	f000 f8b0 	bl	80018a0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001740:	f000 f93c 	bl	80019bc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001744:	f000 f8ec 	bl	8001920 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //int wifi comunication with ESP01S
  DWT_Delay_Init();
 8001748:	f7ff ff9a 	bl	8001680 <DWT_Delay_Init>
  Wifi_Restart();
 800174c:	f7ff fda2 	bl	8001294 <Wifi_Restart>
  while(!Wifi_Init())
 8001750:	e005      	b.n	800175e <main+0x36>
  {
	  while(!Wifi_Restart());
 8001752:	bf00      	nop
 8001754:	f7ff fd9e 	bl	8001294 <Wifi_Restart>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0fa      	beq.n	8001754 <main+0x2c>
  while(!Wifi_Init())
 800175e:	f7ff fd5d 	bl	800121c <Wifi_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f4      	beq.n	8001752 <main+0x2a>
  }

  HAL_Delay(500);
 8001768:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800176c:	f001 f988 	bl	8002a80 <HAL_Delay>
  while(!Wifi_SetMode(WifiMode_Station));
 8001770:	bf00      	nop
 8001772:	2001      	movs	r0, #1
 8001774:	f7ff fdc4 	bl	8001300 <Wifi_SetMode>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f9      	beq.n	8001772 <main+0x4a>
  while(!Wifi_Station_ConnectToAp(SSID_W,PASSWD_W,NULL));
 800177e:	bf00      	nop
 8001780:	2200      	movs	r2, #0
 8001782:	4911      	ldr	r1, [pc, #68]	; (80017c8 <main+0xa0>)
 8001784:	4811      	ldr	r0, [pc, #68]	; (80017cc <main+0xa4>)
 8001786:	f7ff fdfb 	bl	8001380 <Wifi_Station_ConnectToAp>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f7      	beq.n	8001780 <main+0x58>
  HAL_Delay(500);
 8001790:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001794:	f001 f974 	bl	8002a80 <HAL_Delay>
  Wifi_TcpIp_SetMultiConnection(1);
 8001798:	2001      	movs	r0, #1
 800179a:	f7ff fe3f 	bl	800141c <Wifi_TcpIp_SetMultiConnection>
  Wifi_TcpIp_StartTcpConnection(0,ACCSESS_POINT_IP,PORT_AP,10);
 800179e:	230a      	movs	r3, #10
 80017a0:	2250      	movs	r2, #80	; 0x50
 80017a2:	490b      	ldr	r1, [pc, #44]	; (80017d0 <main+0xa8>)
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7ff fe79 	bl	800149c <Wifi_TcpIp_StartTcpConnection>

  //initialize MPU6050

  while (MPU6050_Init(&hi2c1) == 1);
 80017aa:	bf00      	nop
 80017ac:	4809      	ldr	r0, [pc, #36]	; (80017d4 <main+0xac>)
 80017ae:	f000 fac6 	bl	8001d3e <MPU6050_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d0f9      	beq.n	80017ac <main+0x84>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  char temp;
#ifndef TIMING
  HAL_TIM_Base_Start_IT(&htim2);
 80017b8:	4807      	ldr	r0, [pc, #28]	; (80017d8 <main+0xb0>)
 80017ba:	f003 fc8f 	bl	80050dc <HAL_TIM_Base_Start_IT>
  while (1)
  {
#ifdef TIMING
	  send_data();
#else
	  HAL_Delay(500);
 80017be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017c2:	f001 f95d 	bl	8002a80 <HAL_Delay>
 80017c6:	e7fa      	b.n	80017be <main+0x96>
 80017c8:	0800cf34 	.word	0x0800cf34
 80017cc:	0800cf40 	.word	0x0800cf40
 80017d0:	0800cf48 	.word	0x0800cf48
 80017d4:	2000028c 	.word	0x2000028c
 80017d8:	200002e0 	.word	0x200002e0

080017dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b096      	sub	sp, #88	; 0x58
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	2244      	movs	r2, #68	; 0x44
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f005 fb82 	bl	8006ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	463b      	mov	r3, r7
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001802:	f002 fa8d 	bl	8003d20 <HAL_PWREx_ControlVoltageScaling>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800180c:	f000 fa92 	bl	8001d34 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001810:	f002 fa68 	bl	8003ce4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001814:	4b21      	ldr	r3, [pc, #132]	; (800189c <SystemClock_Config+0xc0>)
 8001816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181a:	4a20      	ldr	r2, [pc, #128]	; (800189c <SystemClock_Config+0xc0>)
 800181c:	f023 0318 	bic.w	r3, r3, #24
 8001820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001824:	2314      	movs	r3, #20
 8001826:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001828:	2301      	movs	r3, #1
 800182a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800182c:	2301      	movs	r3, #1
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001834:	2360      	movs	r3, #96	; 0x60
 8001836:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001838:	2302      	movs	r3, #2
 800183a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800183c:	2301      	movs	r3, #1
 800183e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001840:	2301      	movs	r3, #1
 8001842:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001844:	2310      	movs	r3, #16
 8001846:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001848:	2307      	movs	r3, #7
 800184a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800184c:	2302      	movs	r3, #2
 800184e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001850:	2302      	movs	r3, #2
 8001852:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4618      	mov	r0, r3
 800185a:	f002 fab7 	bl	8003dcc <HAL_RCC_OscConfig>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001864:	f000 fa66 	bl	8001d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001868:	230f      	movs	r3, #15
 800186a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800186c:	2303      	movs	r3, #3
 800186e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800187c:	463b      	mov	r3, r7
 800187e:	2101      	movs	r1, #1
 8001880:	4618      	mov	r0, r3
 8001882:	f002 feb7 	bl	80045f4 <HAL_RCC_ClockConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800188c:	f000 fa52 	bl	8001d34 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001890:	f003 faca 	bl	8004e28 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001894:	bf00      	nop
 8001896:	3758      	adds	r7, #88	; 0x58
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40021000 	.word	0x40021000

080018a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <MX_I2C1_Init+0x74>)
 80018a6:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <MX_I2C1_Init+0x78>)
 80018a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <MX_I2C1_Init+0x74>)
 80018ac:	4a1b      	ldr	r2, [pc, #108]	; (800191c <MX_I2C1_Init+0x7c>)
 80018ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <MX_I2C1_Init+0x74>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <MX_I2C1_Init+0x74>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <MX_I2C1_Init+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <MX_I2C1_Init+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <MX_I2C1_Init+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <MX_I2C1_Init+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <MX_I2C1_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018da:	480e      	ldr	r0, [pc, #56]	; (8001914 <MX_I2C1_Init+0x74>)
 80018dc:	f001 fc06 	bl	80030ec <HAL_I2C_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018e6:	f000 fa25 	bl	8001d34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018ea:	2100      	movs	r1, #0
 80018ec:	4809      	ldr	r0, [pc, #36]	; (8001914 <MX_I2C1_Init+0x74>)
 80018ee:	f002 f961 	bl	8003bb4 <HAL_I2CEx_ConfigAnalogFilter>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018f8:	f000 fa1c 	bl	8001d34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018fc:	2100      	movs	r1, #0
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <MX_I2C1_Init+0x74>)
 8001900:	f002 f9a3 	bl	8003c4a <HAL_I2CEx_ConfigDigitalFilter>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800190a:	f000 fa13 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2000028c 	.word	0x2000028c
 8001918:	40005400 	.word	0x40005400
 800191c:	00300f38 	.word	0x00300f38

08001920 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800193e:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <MX_TIM2_Init+0x98>)
 8001940:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001944:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <MX_TIM2_Init+0x98>)
 8001948:	2220      	movs	r2, #32
 800194a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <MX_TIM2_Init+0x98>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <MX_TIM2_Init+0x98>)
 8001954:	f242 720f 	movw	r2, #9999	; 0x270f
 8001958:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <MX_TIM2_Init+0x98>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <MX_TIM2_Init+0x98>)
 8001962:	2200      	movs	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001966:	4814      	ldr	r0, [pc, #80]	; (80019b8 <MX_TIM2_Init+0x98>)
 8001968:	f003 fb60 	bl	800502c <HAL_TIM_Base_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001972:	f000 f9df 	bl	8001d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800197a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	4619      	mov	r1, r3
 8001982:	480d      	ldr	r0, [pc, #52]	; (80019b8 <MX_TIM2_Init+0x98>)
 8001984:	f003 fd1d 	bl	80053c2 <HAL_TIM_ConfigClockSource>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800198e:	f000 f9d1 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	4619      	mov	r1, r3
 800199e:	4806      	ldr	r0, [pc, #24]	; (80019b8 <MX_TIM2_Init+0x98>)
 80019a0:	f003 fefe 	bl	80057a0 <HAL_TIMEx_MasterConfigSynchronization>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80019aa:	f000 f9c3 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	3720      	adds	r7, #32
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200002e0 	.word	0x200002e0

080019bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <MX_USART1_UART_Init+0x58>)
 80019c2:	4a15      	ldr	r2, [pc, #84]	; (8001a18 <MX_USART1_UART_Init+0x5c>)
 80019c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <MX_USART1_UART_Init+0x58>)
 80019c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_USART1_UART_Init+0x58>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <MX_USART1_UART_Init+0x58>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_USART1_UART_Init+0x58>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_USART1_UART_Init+0x58>)
 80019e2:	220c      	movs	r2, #12
 80019e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <MX_USART1_UART_Init+0x58>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_USART1_UART_Init+0x58>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <MX_USART1_UART_Init+0x58>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_USART1_UART_Init+0x58>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_USART1_UART_Init+0x58>)
 8001a00:	f003 ff52 	bl	80058a8 <HAL_UART_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a0a:	f000 f993 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	2000032c 	.word	0x2000032c
 8001a18:	40013800 	.word	0x40013800

08001a1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_USART2_UART_Init+0x58>)
 8001a22:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <MX_USART2_UART_Init+0x5c>)
 8001a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <MX_USART2_UART_Init+0x58>)
 8001a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_USART2_UART_Init+0x58>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_USART2_UART_Init+0x58>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_USART2_UART_Init+0x58>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_USART2_UART_Init+0x58>)
 8001a42:	220c      	movs	r2, #12
 8001a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <MX_USART2_UART_Init+0x58>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_USART2_UART_Init+0x58>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <MX_USART2_UART_Init+0x58>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_USART2_UART_Init+0x58>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_USART2_UART_Init+0x58>)
 8001a60:	f003 ff22 	bl	80058a8 <HAL_UART_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a6a:	f000 f963 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200003b0 	.word	0x200003b0
 8001a78:	40004400 	.word	0x40004400

08001a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a92:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <MX_GPIO_Init+0xb8>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	4a27      	ldr	r2, [pc, #156]	; (8001b34 <MX_GPIO_Init+0xb8>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9e:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <MX_GPIO_Init+0xb8>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <MX_GPIO_Init+0xb8>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <MX_GPIO_Init+0xb8>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <MX_GPIO_Init+0xb8>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <MX_GPIO_Init+0xb8>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <MX_GPIO_Init+0xb8>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <MX_GPIO_Init+0xb8>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_ESP8266_GPIO_Port, EN_ESP8266_Pin, GPIO_PIN_SET);
 8001ada:	2201      	movs	r2, #1
 8001adc:	2102      	movs	r1, #2
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae2:	f001 faeb 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2108      	movs	r1, #8
 8001aea:	4813      	ldr	r0, [pc, #76]	; (8001b38 <MX_GPIO_Init+0xbc>)
 8001aec:	f001 fae6 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EN_ESP8266_Pin */
  GPIO_InitStruct.Pin = EN_ESP8266_Pin;
 8001af0:	2302      	movs	r3, #2
 8001af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af4:	2301      	movs	r3, #1
 8001af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EN_ESP8266_GPIO_Port, &GPIO_InitStruct);
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	4619      	mov	r1, r3
 8001b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0a:	f001 f96d 	bl	8002de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001b0e:	2308      	movs	r3, #8
 8001b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	4619      	mov	r1, r3
 8001b24:	4804      	ldr	r0, [pc, #16]	; (8001b38 <MX_GPIO_Init+0xbc>)
 8001b26:	f001 f95f 	bl	8002de8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b2a:	bf00      	nop
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	48000400 	.word	0x48000400

08001b3c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	Wifi_RxCallBack();
 8001b44:	f7ff fb46 	bl	80011d4 <Wifi_RxCallBack>
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <module>:
	offset_accel->offset_y = (positive.offset_y + negative.offset_y) / 2.0;
	offset_accel->offset_z = (positive.offset_z + negative.offset_z) / 2.0;

}

float module(float acc_x, float acc_y, float acc_z){
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b5a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b5e:	ed87 1a01 	vstr	s2, [r7, #4]

	return sqrt(pow(acc_x+OFFX,2)+pow(acc_y+OFFY,2)+pow(acc_z+OFFZ,2));
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f7fe fcf0 	bl	8000548 <__aeabi_f2d>
 8001b68:	a333      	add	r3, pc, #204	; (adr r3, 8001c38 <module+0xe8>)
 8001b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6e:	f7fe fb8b 	bl	8000288 <__aeabi_dsub>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	ec43 2b17 	vmov	d7, r2, r3
 8001b7a:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 8001c30 <module+0xe0>
 8001b7e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b82:	eef0 0a67 	vmov.f32	s1, s15
 8001b86:	f009 ffe3 	bl	800bb50 <pow>
 8001b8a:	ec55 4b10 	vmov	r4, r5, d0
 8001b8e:	68b8      	ldr	r0, [r7, #8]
 8001b90:	f7fe fcda 	bl	8000548 <__aeabi_f2d>
 8001b94:	a32a      	add	r3, pc, #168	; (adr r3, 8001c40 <module+0xf0>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	f7fe fb77 	bl	800028c <__adddf3>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	ec43 2b17 	vmov	d7, r2, r3
 8001ba6:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8001c30 <module+0xe0>
 8001baa:	eeb0 0a47 	vmov.f32	s0, s14
 8001bae:	eef0 0a67 	vmov.f32	s1, s15
 8001bb2:	f009 ffcd 	bl	800bb50 <pow>
 8001bb6:	ec53 2b10 	vmov	r2, r3, d0
 8001bba:	4620      	mov	r0, r4
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	f7fe fb65 	bl	800028c <__adddf3>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4614      	mov	r4, r2
 8001bc8:	461d      	mov	r5, r3
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7fe fcbc 	bl	8000548 <__aeabi_f2d>
 8001bd0:	a319      	add	r3, pc, #100	; (adr r3, 8001c38 <module+0xe8>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	f7fe fb59 	bl	800028c <__adddf3>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	ec43 2b17 	vmov	d7, r2, r3
 8001be2:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001c30 <module+0xe0>
 8001be6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bea:	eef0 0a67 	vmov.f32	s1, s15
 8001bee:	f009 ffaf 	bl	800bb50 <pow>
 8001bf2:	ec53 2b10 	vmov	r2, r3, d0
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	f7fe fb47 	bl	800028c <__adddf3>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	ec43 2b17 	vmov	d7, r2, r3
 8001c06:	eeb0 0a47 	vmov.f32	s0, s14
 8001c0a:	eef0 0a67 	vmov.f32	s1, s15
 8001c0e:	f00a f80f 	bl	800bc30 <sqrt>
 8001c12:	ec53 2b10 	vmov	r2, r3, d0
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f7fe ffe5 	bl	8000be8 <__aeabi_d2f>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	ee07 3a90 	vmov	s15, r3
}
 8001c24:	eeb0 0a67 	vmov.f32	s0, s15
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	00000000 	.word	0x00000000
 8001c34:	40000000 	.word	0x40000000
 8001c38:	47ae147b 	.word	0x47ae147b
 8001c3c:	3f947ae1 	.word	0x3f947ae1
 8001c40:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c44:	3f80624d 	.word	0x3f80624d

08001c48 <send_data>:



void send_data() {
 8001c48:	b5b0      	push	{r4, r5, r7, lr}
 8001c4a:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 8001c4e:	af00      	add	r7, sp, #0
#ifdef TIMING
	unsigned int tick = HAL_GetTick();
#endif
	MPU6050_Read_All(&hi2c1, &MPU6050);
 8001c50:	492f      	ldr	r1, [pc, #188]	; (8001d10 <send_data+0xc8>)
 8001c52:	4830      	ldr	r0, [pc, #192]	; (8001d14 <send_data+0xcc>)
 8001c54:	f000 f8cc 	bl	8001df0 <MPU6050_Read_All>
	char mybuffer[1000];

	float mod;

	mod=module(MPU6050.Ax,MPU6050.Ay,MPU6050.Az);
 8001c58:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <send_data+0xc8>)
 8001c5a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f7fe ffc1 	bl	8000be8 <__aeabi_d2f>
 8001c66:	4604      	mov	r4, r0
 8001c68:	4b29      	ldr	r3, [pc, #164]	; (8001d10 <send_data+0xc8>)
 8001c6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	f7fe ffb9 	bl	8000be8 <__aeabi_d2f>
 8001c76:	4605      	mov	r5, r0
 8001c78:	4b25      	ldr	r3, [pc, #148]	; (8001d10 <send_data+0xc8>)
 8001c7a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	f7fe ffb1 	bl	8000be8 <__aeabi_d2f>
 8001c86:	4603      	mov	r3, r0
 8001c88:	ee01 3a10 	vmov	s2, r3
 8001c8c:	ee00 5a90 	vmov	s1, r5
 8001c90:	ee00 4a10 	vmov	s0, r4
 8001c94:	f7ff ff5c 	bl	8001b50 <module>
 8001c98:	ed87 0afb 	vstr	s0, [r7, #1004]	; 0x3ec

	if(mod>=2){
 8001c9c:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8001ca0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cac:	db15      	blt.n	8001cda <send_data+0x92>
		sprintf(mybuffer, "Attenzione accelerazione >2g :  = %fg \n\r", mod);
 8001cae:	f8d7 03ec 	ldr.w	r0, [r7, #1004]	; 0x3ec
 8001cb2:	f7fe fc49 	bl	8000548 <__aeabi_f2d>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	1d38      	adds	r0, r7, #4
 8001cbc:	4916      	ldr	r1, [pc, #88]	; (8001d18 <send_data+0xd0>)
 8001cbe:	f005 ffa1 	bl	8007c04 <siprintf>
		Wifi_Transmit(0, strlen(mybuffer), mybuffer);
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fa83 	bl	80001d0 <strlen>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	1d3a      	adds	r2, r7, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f7ff fc6a 	bl	80015ac <Wifi_TcpIp_SendData_PartialTcp>
		HAL_UART_Transmit(&huart2, temp, strlen(temp), HAL_MAX_DELAY);
		measures = 0;
		interval = 0;
	}
#endif
}
 8001cd8:	e014      	b.n	8001d04 <send_data+0xbc>
		sprintf(mybuffer, "Accelerazione nella norma (<2g) : =%fg \n\r",mod);
 8001cda:	f8d7 03ec 	ldr.w	r0, [r7, #1004]	; 0x3ec
 8001cde:	f7fe fc33 	bl	8000548 <__aeabi_f2d>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	1d38      	adds	r0, r7, #4
 8001ce8:	490c      	ldr	r1, [pc, #48]	; (8001d1c <send_data+0xd4>)
 8001cea:	f005 ff8b 	bl	8007c04 <siprintf>
		Wifi_Transmit(0, strlen(mybuffer), mybuffer);
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fa6d 	bl	80001d0 <strlen>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	1d3a      	adds	r2, r7, #4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f7ff fc54 	bl	80015ac <Wifi_TcpIp_SendData_PartialTcp>
}
 8001d04:	bf00      	nop
 8001d06:	f507 777c 	add.w	r7, r7, #1008	; 0x3f0
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000438 	.word	0x20000438
 8001d14:	2000028c 	.word	0x2000028c
 8001d18:	0800d0a0 	.word	0x0800d0a0
 8001d1c:	0800d0cc 	.word	0x0800d0cc

08001d20 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	send_data();
 8001d28:	f7ff ff8e 	bl	8001c48 <send_data>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d38:	b672      	cpsid	i
}
 8001d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <Error_Handler+0x8>

08001d3e <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b088      	sub	sp, #32
 8001d42:	af04      	add	r7, sp, #16
 8001d44:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001d46:	2364      	movs	r3, #100	; 0x64
 8001d48:	9302      	str	r3, [sp, #8]
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	f107 030f 	add.w	r3, r7, #15
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	2301      	movs	r3, #1
 8001d56:	2275      	movs	r2, #117	; 0x75
 8001d58:	21d0      	movs	r1, #208	; 0xd0
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f001 fb6a 	bl	8003434 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	2b68      	cmp	r3, #104	; 0x68
 8001d64:	d13d      	bne.n	8001de2 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001d6a:	2364      	movs	r3, #100	; 0x64
 8001d6c:	9302      	str	r3, [sp, #8]
 8001d6e:	2301      	movs	r3, #1
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	f107 030e 	add.w	r3, r7, #14
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2301      	movs	r3, #1
 8001d7a:	226b      	movs	r2, #107	; 0x6b
 8001d7c:	21d0      	movs	r1, #208	; 0xd0
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f001 fa44 	bl	800320c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001d84:	2307      	movs	r3, #7
 8001d86:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001d88:	2364      	movs	r3, #100	; 0x64
 8001d8a:	9302      	str	r3, [sp, #8]
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	f107 030e 	add.w	r3, r7, #14
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	2301      	movs	r3, #1
 8001d98:	2219      	movs	r2, #25
 8001d9a:	21d0      	movs	r1, #208	; 0xd0
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f001 fa35 	bl	800320c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001da6:	2364      	movs	r3, #100	; 0x64
 8001da8:	9302      	str	r3, [sp, #8]
 8001daa:	2301      	movs	r3, #1
 8001dac:	9301      	str	r3, [sp, #4]
 8001dae:	f107 030e 	add.w	r3, r7, #14
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2301      	movs	r3, #1
 8001db6:	221c      	movs	r2, #28
 8001db8:	21d0      	movs	r1, #208	; 0xd0
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f001 fa26 	bl	800320c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001dc4:	2364      	movs	r3, #100	; 0x64
 8001dc6:	9302      	str	r3, [sp, #8]
 8001dc8:	2301      	movs	r3, #1
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	f107 030e 	add.w	r3, r7, #14
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	221b      	movs	r2, #27
 8001dd6:	21d0      	movs	r1, #208	; 0xd0
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f001 fa17 	bl	800320c <HAL_I2C_Mem_Write>
        return 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <MPU6050_Init+0xa6>
    }
    return 1;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	0000      	movs	r0, r0
	...

08001df0 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001df4:	b094      	sub	sp, #80	; 0x50
 8001df6:	af04      	add	r7, sp, #16
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001dfc:	2364      	movs	r3, #100	; 0x64
 8001dfe:	9302      	str	r3, [sp, #8]
 8001e00:	230e      	movs	r3, #14
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	f107 0308 	add.w	r3, r7, #8
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	223b      	movs	r2, #59	; 0x3b
 8001e0e:	21d0      	movs	r1, #208	; 0xd0
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f001 fb0f 	bl	8003434 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001e16:	7a3b      	ldrb	r3, [r7, #8]
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	b21a      	sxth	r2, r3
 8001e1c:	7a7b      	ldrb	r3, [r7, #9]
 8001e1e:	b21b      	sxth	r3, r3
 8001e20:	4313      	orrs	r3, r2
 8001e22:	b21a      	sxth	r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001e28:	7abb      	ldrb	r3, [r7, #10]
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	b21a      	sxth	r2, r3
 8001e2e:	7afb      	ldrb	r3, [r7, #11]
 8001e30:	b21b      	sxth	r3, r3
 8001e32:	4313      	orrs	r3, r2
 8001e34:	b21a      	sxth	r2, r3
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001e3a:	7b3b      	ldrb	r3, [r7, #12]
 8001e3c:	021b      	lsls	r3, r3, #8
 8001e3e:	b21a      	sxth	r2, r3
 8001e40:	7b7b      	ldrb	r3, [r7, #13]
 8001e42:	b21b      	sxth	r3, r3
 8001e44:	4313      	orrs	r3, r2
 8001e46:	b21a      	sxth	r2, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001e4c:	7bbb      	ldrb	r3, [r7, #14]
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	b21a      	sxth	r2, r3
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	b21b      	sxth	r3, r3
 8001e56:	4313      	orrs	r3, r2
 8001e58:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001e5a:	7c3b      	ldrb	r3, [r7, #16]
 8001e5c:	021b      	lsls	r3, r3, #8
 8001e5e:	b21a      	sxth	r2, r3
 8001e60:	7c7b      	ldrb	r3, [r7, #17]
 8001e62:	b21b      	sxth	r3, r3
 8001e64:	4313      	orrs	r3, r2
 8001e66:	b21a      	sxth	r2, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001e6c:	7cbb      	ldrb	r3, [r7, #18]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	b21a      	sxth	r2, r3
 8001e72:	7cfb      	ldrb	r3, [r7, #19]
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	4313      	orrs	r3, r2
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001e7e:	7d3b      	ldrb	r3, [r7, #20]
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	7d7b      	ldrb	r3, [r7, #21]
 8001e86:	b21b      	sxth	r3, r3
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fb44 	bl	8000524 <__aeabi_i2d>
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	4bbd      	ldr	r3, [pc, #756]	; (8002198 <MPU6050_Read_All+0x3a8>)
 8001ea2:	f7fe fcd3 	bl	800084c <__aeabi_ddiv>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	6839      	ldr	r1, [r7, #0]
 8001eac:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fb34 	bl	8000524 <__aeabi_i2d>
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	4bb5      	ldr	r3, [pc, #724]	; (8002198 <MPU6050_Read_All+0x3a8>)
 8001ec2:	f7fe fcc3 	bl	800084c <__aeabi_ddiv>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	6839      	ldr	r1, [r7, #0]
 8001ecc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fb24 	bl	8000524 <__aeabi_i2d>
 8001edc:	a3a8      	add	r3, pc, #672	; (adr r3, 8002180 <MPU6050_Read_All+0x390>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f7fe fcb3 	bl	800084c <__aeabi_ddiv>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	6839      	ldr	r1, [r7, #0]
 8001eec:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001ef0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001ef4:	ee07 3a90 	vmov	s15, r3
 8001ef8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001efc:	eddf 6aa7 	vldr	s13, [pc, #668]	; 800219c <MPU6050_Read_All+0x3ac>
 8001f00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f04:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80021a0 <MPU6050_Read_All+0x3b0>
 8001f08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fb03 	bl	8000524 <__aeabi_i2d>
 8001f1e:	a39a      	add	r3, pc, #616	; (adr r3, 8002188 <MPU6050_Read_All+0x398>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	f7fe fc92 	bl	800084c <__aeabi_ddiv>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	6839      	ldr	r1, [r7, #0]
 8001f2e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe faf3 	bl	8000524 <__aeabi_i2d>
 8001f3e:	a392      	add	r3, pc, #584	; (adr r3, 8002188 <MPU6050_Read_All+0x398>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fc82 	bl	800084c <__aeabi_ddiv>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	6839      	ldr	r1, [r7, #0]
 8001f4e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe fae3 	bl	8000524 <__aeabi_i2d>
 8001f5e:	a38a      	add	r3, pc, #552	; (adr r3, 8002188 <MPU6050_Read_All+0x398>)
 8001f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f64:	f7fe fc72 	bl	800084c <__aeabi_ddiv>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	6839      	ldr	r1, [r7, #0]
 8001f6e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001f72:	f000 fd79 	bl	8002a68 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	4b8a      	ldr	r3, [pc, #552]	; (80021a4 <MPU6050_Read_All+0x3b4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fac0 	bl	8000504 <__aeabi_ui2d>
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	4b87      	ldr	r3, [pc, #540]	; (80021a8 <MPU6050_Read_All+0x3b8>)
 8001f8a:	f7fe fc5f 	bl	800084c <__aeabi_ddiv>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001f96:	f000 fd67 	bl	8002a68 <HAL_GetTick>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4a81      	ldr	r2, [pc, #516]	; (80021a4 <MPU6050_Read_All+0x3b4>)
 8001f9e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fae:	fb03 f202 	mul.w	r2, r3, r2
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe faac 	bl	8000524 <__aeabi_i2d>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	ec43 2b10 	vmov	d0, r2, r3
 8001fd4:	f009 fe2c 	bl	800bc30 <sqrt>
 8001fd8:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	f04f 0300 	mov.w	r3, #0
 8001fe4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fe8:	f7fe fd6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d11f      	bne.n	8002032 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fa93 	bl	8000524 <__aeabi_i2d>
 8001ffe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002002:	f7fe fc23 	bl	800084c <__aeabi_ddiv>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	ec43 2b17 	vmov	d7, r2, r3
 800200e:	eeb0 0a47 	vmov.f32	s0, s14
 8002012:	eef0 0a67 	vmov.f32	s1, s15
 8002016:	f009 fbef 	bl	800b7f8 <atan>
 800201a:	ec51 0b10 	vmov	r0, r1, d0
 800201e:	a35c      	add	r3, pc, #368	; (adr r3, 8002190 <MPU6050_Read_All+0x3a0>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	f7fe fae8 	bl	80005f8 <__aeabi_dmul>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002030:	e005      	b.n	800203e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002044:	425b      	negs	r3, r3
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa6c 	bl	8000524 <__aeabi_i2d>
 800204c:	4682      	mov	sl, r0
 800204e:	468b      	mov	fp, r1
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fa64 	bl	8000524 <__aeabi_i2d>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	ec43 2b11 	vmov	d1, r2, r3
 8002064:	ec4b ab10 	vmov	d0, sl, fp
 8002068:	f009 fd6f 	bl	800bb4a <atan2>
 800206c:	ec51 0b10 	vmov	r0, r1, d0
 8002070:	a347      	add	r3, pc, #284	; (adr r3, 8002190 <MPU6050_Read_All+0x3a0>)
 8002072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002076:	f7fe fabf 	bl	80005f8 <__aeabi_dmul>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	4b49      	ldr	r3, [pc, #292]	; (80021ac <MPU6050_Read_All+0x3bc>)
 8002088:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800208c:	f7fe fd26 	bl	8000adc <__aeabi_dcmplt>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <MPU6050_Read_All+0x2bc>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	4b43      	ldr	r3, [pc, #268]	; (80021b0 <MPU6050_Read_All+0x3c0>)
 80020a2:	f7fe fd39 	bl	8000b18 <__aeabi_dcmpgt>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d114      	bne.n	80020d6 <MPU6050_Read_All+0x2e6>
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	4b3f      	ldr	r3, [pc, #252]	; (80021b0 <MPU6050_Read_All+0x3c0>)
 80020b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020b6:	f7fe fd2f 	bl	8000b18 <__aeabi_dcmpgt>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d015      	beq.n	80020ec <MPU6050_Read_All+0x2fc>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	4b38      	ldr	r3, [pc, #224]	; (80021ac <MPU6050_Read_All+0x3bc>)
 80020cc:	f7fe fd06 	bl	8000adc <__aeabi_dcmplt>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00a      	beq.n	80020ec <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 80020d6:	4937      	ldr	r1, [pc, #220]	; (80021b4 <MPU6050_Read_All+0x3c4>)
 80020d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80020e0:	6839      	ldr	r1, [r7, #0]
 80020e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80020ea:	e014      	b.n	8002116 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80020f2:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80020f6:	eeb0 1a47 	vmov.f32	s2, s14
 80020fa:	eef0 1a67 	vmov.f32	s3, s15
 80020fe:	ed97 0b06 	vldr	d0, [r7, #24]
 8002102:	482c      	ldr	r0, [pc, #176]	; (80021b4 <MPU6050_Read_All+0x3c4>)
 8002104:	f000 f85a 	bl	80021bc <Kalman_getAngle>
 8002108:	eeb0 7a40 	vmov.f32	s14, s0
 800210c:	eef0 7a60 	vmov.f32	s15, s1
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800211c:	4690      	mov	r8, r2
 800211e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <MPU6050_Read_All+0x3c0>)
 8002128:	4640      	mov	r0, r8
 800212a:	4649      	mov	r1, r9
 800212c:	f7fe fcf4 	bl	8000b18 <__aeabi_dcmpgt>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d008      	beq.n	8002148 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800213c:	4614      	mov	r4, r2
 800213e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800214e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002152:	eeb0 1a47 	vmov.f32	s2, s14
 8002156:	eef0 1a67 	vmov.f32	s3, s15
 800215a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800215e:	4816      	ldr	r0, [pc, #88]	; (80021b8 <MPU6050_Read_All+0x3c8>)
 8002160:	f000 f82c 	bl	80021bc <Kalman_getAngle>
 8002164:	eeb0 7a40 	vmov.f32	s14, s0
 8002168:	eef0 7a60 	vmov.f32	s15, s1
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8002172:	bf00      	nop
 8002174:	3740      	adds	r7, #64	; 0x40
 8002176:	46bd      	mov	sp, r7
 8002178:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800217c:	f3af 8000 	nop.w
 8002180:	00000000 	.word	0x00000000
 8002184:	40cc2900 	.word	0x40cc2900
 8002188:	00000000 	.word	0x00000000
 800218c:	40606000 	.word	0x40606000
 8002190:	1a63c1f8 	.word	0x1a63c1f8
 8002194:	404ca5dc 	.word	0x404ca5dc
 8002198:	40d00000 	.word	0x40d00000
 800219c:	43aa0000 	.word	0x43aa0000
 80021a0:	42121eb8 	.word	0x42121eb8
 80021a4:	20000a44 	.word	0x20000a44
 80021a8:	408f4000 	.word	0x408f4000
 80021ac:	c0568000 	.word	0xc0568000
 80021b0:	40568000 	.word	0x40568000
 80021b4:	20000048 	.word	0x20000048
 80021b8:	20000000 	.word	0x20000000

080021bc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80021bc:	b5b0      	push	{r4, r5, r7, lr}
 80021be:	b096      	sub	sp, #88	; 0x58
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	61f8      	str	r0, [r7, #28]
 80021c4:	ed87 0b04 	vstr	d0, [r7, #16]
 80021c8:	ed87 1b02 	vstr	d1, [r7, #8]
 80021cc:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80021d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021da:	f7fe f855 	bl	8000288 <__aeabi_dsub>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80021ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021f4:	f7fe fa00 	bl	80005f8 <__aeabi_dmul>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4620      	mov	r0, r4
 80021fe:	4629      	mov	r1, r5
 8002200:	f7fe f844 	bl	800028c <__adddf3>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	69f9      	ldr	r1, [r7, #28]
 800220a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800221a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800221e:	f7fe f9eb 	bl	80005f8 <__aeabi_dmul>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002230:	f7fe f82a 	bl	8000288 <__aeabi_dsub>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002242:	f7fe f821 	bl	8000288 <__aeabi_dsub>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4610      	mov	r0, r2
 800224c:	4619      	mov	r1, r3
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f7fe f81a 	bl	800028c <__adddf3>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002264:	f7fe f9c8 	bl	80005f8 <__aeabi_dmul>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4620      	mov	r0, r4
 800226e:	4629      	mov	r1, r5
 8002270:	f7fe f80c 	bl	800028c <__adddf3>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	69f9      	ldr	r1, [r7, #28]
 800227a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800228a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800228e:	f7fe f9b3 	bl	80005f8 <__aeabi_dmul>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4620      	mov	r0, r4
 8002298:	4629      	mov	r1, r5
 800229a:	f7fd fff5 	bl	8000288 <__aeabi_dsub>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	69f9      	ldr	r1, [r7, #28]
 80022a4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80022b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022b8:	f7fe f99e 	bl	80005f8 <__aeabi_dmul>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4620      	mov	r0, r4
 80022c2:	4629      	mov	r1, r5
 80022c4:	f7fd ffe0 	bl	8000288 <__aeabi_dsub>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	69f9      	ldr	r1, [r7, #28]
 80022ce:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80022de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022e2:	f7fe f989 	bl	80005f8 <__aeabi_dmul>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4620      	mov	r0, r4
 80022ec:	4629      	mov	r1, r5
 80022ee:	f7fd ffcd 	bl	800028c <__adddf3>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	69f9      	ldr	r1, [r7, #28]
 80022f8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002308:	f7fd ffc0 	bl	800028c <__adddf3>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800231a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800231e:	f7fe fa95 	bl	800084c <__aeabi_ddiv>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002330:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002334:	f7fe fa8a 	bl	800084c <__aeabi_ddiv>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002346:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800234a:	f7fd ff9d 	bl	8000288 <__aeabi_dsub>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800235c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002360:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002364:	f7fe f948 	bl	80005f8 <__aeabi_dmul>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4620      	mov	r0, r4
 800236e:	4629      	mov	r1, r5
 8002370:	f7fd ff8c 	bl	800028c <__adddf3>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	69f9      	ldr	r1, [r7, #28]
 800237a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002384:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002388:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800238c:	f7fe f934 	bl	80005f8 <__aeabi_dmul>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4620      	mov	r0, r4
 8002396:	4629      	mov	r1, r5
 8002398:	f7fd ff78 	bl	800028c <__adddf3>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	69f9      	ldr	r1, [r7, #28]
 80023a2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80023ac:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80023b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80023c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023c8:	f7fe f916 	bl	80005f8 <__aeabi_dmul>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4620      	mov	r0, r4
 80023d2:	4629      	mov	r1, r5
 80023d4:	f7fd ff58 	bl	8000288 <__aeabi_dsub>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	69f9      	ldr	r1, [r7, #28]
 80023de:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80023e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023f0:	f7fe f902 	bl	80005f8 <__aeabi_dmul>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4620      	mov	r0, r4
 80023fa:	4629      	mov	r1, r5
 80023fc:	f7fd ff44 	bl	8000288 <__aeabi_dsub>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	69f9      	ldr	r1, [r7, #28]
 8002406:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002410:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002414:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002418:	f7fe f8ee 	bl	80005f8 <__aeabi_dmul>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4620      	mov	r0, r4
 8002422:	4629      	mov	r1, r5
 8002424:	f7fd ff30 	bl	8000288 <__aeabi_dsub>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	69f9      	ldr	r1, [r7, #28]
 800242e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002438:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800243c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002440:	f7fe f8da 	bl	80005f8 <__aeabi_dmul>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4620      	mov	r0, r4
 800244a:	4629      	mov	r1, r5
 800244c:	f7fd ff1c 	bl	8000288 <__aeabi_dsub>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	69f9      	ldr	r1, [r7, #28]
 8002456:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002460:	ec43 2b17 	vmov	d7, r2, r3
}
 8002464:	eeb0 0a47 	vmov.f32	s0, s14
 8002468:	eef0 0a67 	vmov.f32	s1, s15
 800246c:	3758      	adds	r7, #88	; 0x58
 800246e:	46bd      	mov	sp, r7
 8002470:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247a:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <HAL_MspInit+0x44>)
 800247c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800247e:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <HAL_MspInit+0x44>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6613      	str	r3, [r2, #96]	; 0x60
 8002486:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <HAL_MspInit+0x44>)
 8002488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	607b      	str	r3, [r7, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_MspInit+0x44>)
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002496:	4a08      	ldr	r2, [pc, #32]	; (80024b8 <HAL_MspInit+0x44>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249c:	6593      	str	r3, [r2, #88]	; 0x58
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_MspInit+0x44>)
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000

080024bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b09e      	sub	sp, #120	; 0x78
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024d4:	f107 0310 	add.w	r3, r7, #16
 80024d8:	2254      	movs	r2, #84	; 0x54
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f004 fd09 	bl	8006ef4 <memset>
  if(hi2c->Instance==I2C1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a1f      	ldr	r2, [pc, #124]	; (8002564 <HAL_I2C_MspInit+0xa8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d137      	bne.n	800255c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80024ec:	2340      	movs	r3, #64	; 0x40
 80024ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80024f0:	2300      	movs	r3, #0
 80024f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024f4:	f107 0310 	add.w	r3, r7, #16
 80024f8:	4618      	mov	r0, r3
 80024fa:	f002 fa9f 	bl	8004a3c <HAL_RCCEx_PeriphCLKConfig>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002504:	f7ff fc16 	bl	8001d34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002508:	4b17      	ldr	r3, [pc, #92]	; (8002568 <HAL_I2C_MspInit+0xac>)
 800250a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250c:	4a16      	ldr	r2, [pc, #88]	; (8002568 <HAL_I2C_MspInit+0xac>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002514:	4b14      	ldr	r3, [pc, #80]	; (8002568 <HAL_I2C_MspInit+0xac>)
 8002516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002520:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002524:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002526:	2312      	movs	r3, #18
 8002528:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002532:	2304      	movs	r3, #4
 8002534:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800253a:	4619      	mov	r1, r3
 800253c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002540:	f000 fc52 	bl	8002de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <HAL_I2C_MspInit+0xac>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	4a07      	ldr	r2, [pc, #28]	; (8002568 <HAL_I2C_MspInit+0xac>)
 800254a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800254e:	6593      	str	r3, [r2, #88]	; 0x58
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_I2C_MspInit+0xac>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800255c:	bf00      	nop
 800255e:	3778      	adds	r7, #120	; 0x78
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40005400 	.word	0x40005400
 8002568:	40021000 	.word	0x40021000

0800256c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257c:	d113      	bne.n	80025a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800257e:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <HAL_TIM_Base_MspInit+0x44>)
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <HAL_TIM_Base_MspInit+0x44>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6593      	str	r3, [r2, #88]	; 0x58
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_TIM_Base_MspInit+0x44>)
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2101      	movs	r1, #1
 800259a:	201c      	movs	r0, #28
 800259c:	f000 fb6f 	bl	8002c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025a0:	201c      	movs	r0, #28
 80025a2:	f000 fb88 	bl	8002cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000

080025b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b0a0      	sub	sp, #128	; 0x80
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025cc:	f107 0318 	add.w	r3, r7, #24
 80025d0:	2254      	movs	r2, #84	; 0x54
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f004 fc8d 	bl	8006ef4 <memset>
  if(huart->Instance==USART1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a4a      	ldr	r2, [pc, #296]	; (8002708 <HAL_UART_MspInit+0x154>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d13e      	bne.n	8002662 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025e4:	2301      	movs	r3, #1
 80025e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80025e8:	2300      	movs	r3, #0
 80025ea:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025ec:	f107 0318 	add.w	r3, r7, #24
 80025f0:	4618      	mov	r0, r3
 80025f2:	f002 fa23 	bl	8004a3c <HAL_RCCEx_PeriphCLKConfig>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025fc:	f7ff fb9a 	bl	8001d34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002600:	4b42      	ldr	r3, [pc, #264]	; (800270c <HAL_UART_MspInit+0x158>)
 8002602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002604:	4a41      	ldr	r2, [pc, #260]	; (800270c <HAL_UART_MspInit+0x158>)
 8002606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800260a:	6613      	str	r3, [r2, #96]	; 0x60
 800260c:	4b3f      	ldr	r3, [pc, #252]	; (800270c <HAL_UART_MspInit+0x158>)
 800260e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002618:	4b3c      	ldr	r3, [pc, #240]	; (800270c <HAL_UART_MspInit+0x158>)
 800261a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261c:	4a3b      	ldr	r2, [pc, #236]	; (800270c <HAL_UART_MspInit+0x158>)
 800261e:	f043 0302 	orr.w	r3, r3, #2
 8002622:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002624:	4b39      	ldr	r3, [pc, #228]	; (800270c <HAL_UART_MspInit+0x158>)
 8002626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002630:	23c0      	movs	r3, #192	; 0xc0
 8002632:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	2302      	movs	r3, #2
 8002636:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263c:	2303      	movs	r3, #3
 800263e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002640:	2307      	movs	r3, #7
 8002642:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002644:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002648:	4619      	mov	r1, r3
 800264a:	4831      	ldr	r0, [pc, #196]	; (8002710 <HAL_UART_MspInit+0x15c>)
 800264c:	f000 fbcc 	bl	8002de8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002650:	2200      	movs	r2, #0
 8002652:	2100      	movs	r1, #0
 8002654:	2025      	movs	r0, #37	; 0x25
 8002656:	f000 fb12 	bl	8002c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800265a:	2025      	movs	r0, #37	; 0x25
 800265c:	f000 fb2b 	bl	8002cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002660:	e04d      	b.n	80026fe <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART2)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a2b      	ldr	r2, [pc, #172]	; (8002714 <HAL_UART_MspInit+0x160>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d148      	bne.n	80026fe <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800266c:	2302      	movs	r3, #2
 800266e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002670:	2300      	movs	r3, #0
 8002672:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002674:	f107 0318 	add.w	r3, r7, #24
 8002678:	4618      	mov	r0, r3
 800267a:	f002 f9df 	bl	8004a3c <HAL_RCCEx_PeriphCLKConfig>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002684:	f7ff fb56 	bl	8001d34 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002688:	4b20      	ldr	r3, [pc, #128]	; (800270c <HAL_UART_MspInit+0x158>)
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	4a1f      	ldr	r2, [pc, #124]	; (800270c <HAL_UART_MspInit+0x158>)
 800268e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002692:	6593      	str	r3, [r2, #88]	; 0x58
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <HAL_UART_MspInit+0x158>)
 8002696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a0:	4b1a      	ldr	r3, [pc, #104]	; (800270c <HAL_UART_MspInit+0x158>)
 80026a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a4:	4a19      	ldr	r2, [pc, #100]	; (800270c <HAL_UART_MspInit+0x158>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ac:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_UART_MspInit+0x158>)
 80026ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80026b8:	2304      	movs	r3, #4
 80026ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c4:	2303      	movs	r3, #3
 80026c6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026c8:	2307      	movs	r3, #7
 80026ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80026cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026d0:	4619      	mov	r1, r3
 80026d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d6:	f000 fb87 	bl	8002de8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80026da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026de:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e8:	2303      	movs	r3, #3
 80026ea:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80026ec:	2303      	movs	r3, #3
 80026ee:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80026f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026f4:	4619      	mov	r1, r3
 80026f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026fa:	f000 fb75 	bl	8002de8 <HAL_GPIO_Init>
}
 80026fe:	bf00      	nop
 8002700:	3780      	adds	r7, #128	; 0x80
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40013800 	.word	0x40013800
 800270c:	40021000 	.word	0x40021000
 8002710:	48000400 	.word	0x48000400
 8002714:	40004400 	.word	0x40004400

08002718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800271c:	e7fe      	b.n	800271c <NMI_Handler+0x4>

0800271e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002722:	e7fe      	b.n	8002722 <HardFault_Handler+0x4>

08002724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002728:	e7fe      	b.n	8002728 <MemManage_Handler+0x4>

0800272a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800272e:	e7fe      	b.n	800272e <BusFault_Handler+0x4>

08002730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002734:	e7fe      	b.n	8002734 <UsageFault_Handler+0x4>

08002736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002764:	f000 f96c 	bl	8002a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	bd80      	pop	{r7, pc}

0800276c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002770:	4802      	ldr	r0, [pc, #8]	; (800277c <TIM2_IRQHandler+0x10>)
 8002772:	f002 fd07 	bl	8005184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200002e0 	.word	0x200002e0

08002780 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <USART1_IRQHandler+0x10>)
 8002786:	f003 f9c7 	bl	8005b18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	2000032c 	.word	0x2000032c

08002794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return 1;
 8002798:	2301      	movs	r3, #1
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <_kill>:

int _kill(int pid, int sig)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027ae:	f004 fb69 	bl	8006e84 <__errno>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2216      	movs	r2, #22
 80027b6:	601a      	str	r2, [r3, #0]
  return -1;
 80027b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <_exit>:

void _exit (int status)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027cc:	f04f 31ff 	mov.w	r1, #4294967295
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ffe7 	bl	80027a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027d6:	e7fe      	b.n	80027d6 <_exit+0x12>

080027d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	e00a      	b.n	8002800 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027ea:	f3af 8000 	nop.w
 80027ee:	4601      	mov	r1, r0
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	60ba      	str	r2, [r7, #8]
 80027f6:	b2ca      	uxtb	r2, r1
 80027f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	3301      	adds	r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	429a      	cmp	r2, r3
 8002806:	dbf0      	blt.n	80027ea <_read+0x12>
  }

  return len;
 8002808:	687b      	ldr	r3, [r7, #4]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b086      	sub	sp, #24
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e009      	b.n	8002838 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	60ba      	str	r2, [r7, #8]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	3301      	adds	r3, #1
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	429a      	cmp	r2, r3
 800283e:	dbf1      	blt.n	8002824 <_write+0x12>
  }
  return len;
 8002840:	687b      	ldr	r3, [r7, #4]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <_close>:

int _close(int file)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002872:	605a      	str	r2, [r3, #4]
  return 0;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <_isatty>:

int _isatty(int file)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800288a:	2301      	movs	r3, #1
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028bc:	4a14      	ldr	r2, [pc, #80]	; (8002910 <_sbrk+0x5c>)
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <_sbrk+0x60>)
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <_sbrk+0x64>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <_sbrk+0x64>)
 80028d2:	4a12      	ldr	r2, [pc, #72]	; (800291c <_sbrk+0x68>)
 80028d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <_sbrk+0x64>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d207      	bcs.n	80028f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028e4:	f004 face 	bl	8006e84 <__errno>
 80028e8:	4603      	mov	r3, r0
 80028ea:	220c      	movs	r2, #12
 80028ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295
 80028f2:	e009      	b.n	8002908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <_sbrk+0x64>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028fa:	4b07      	ldr	r3, [pc, #28]	; (8002918 <_sbrk+0x64>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	4a05      	ldr	r2, [pc, #20]	; (8002918 <_sbrk+0x64>)
 8002904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002906:	68fb      	ldr	r3, [r7, #12]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20010000 	.word	0x20010000
 8002914:	00000400 	.word	0x00000400
 8002918:	20000a48 	.word	0x20000a48
 800291c:	20000a60 	.word	0x20000a60

08002920 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <SystemInit+0x20>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	4a05      	ldr	r2, [pc, #20]	; (8002940 <SystemInit+0x20>)
 800292c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800297c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002948:	f7ff ffea 	bl	8002920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800294c:	480c      	ldr	r0, [pc, #48]	; (8002980 <LoopForever+0x6>)
  ldr r1, =_edata
 800294e:	490d      	ldr	r1, [pc, #52]	; (8002984 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002950:	4a0d      	ldr	r2, [pc, #52]	; (8002988 <LoopForever+0xe>)
  movs r3, #0
 8002952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002954:	e002      	b.n	800295c <LoopCopyDataInit>

08002956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800295a:	3304      	adds	r3, #4

0800295c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800295c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800295e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002960:	d3f9      	bcc.n	8002956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002962:	4a0a      	ldr	r2, [pc, #40]	; (800298c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002964:	4c0a      	ldr	r4, [pc, #40]	; (8002990 <LoopForever+0x16>)
  movs r3, #0
 8002966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002968:	e001      	b.n	800296e <LoopFillZerobss>

0800296a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800296a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800296c:	3204      	adds	r2, #4

0800296e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800296e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002970:	d3fb      	bcc.n	800296a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002972:	f004 fa8d 	bl	8006e90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002976:	f7fe fed7 	bl	8001728 <main>

0800297a <LoopForever>:

LoopForever:
    b LoopForever
 800297a:	e7fe      	b.n	800297a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800297c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002984:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8002988:	0800d698 	.word	0x0800d698
  ldr r2, =_sbss
 800298c:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8002990:	20000a60 	.word	0x20000a60

08002994 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002994:	e7fe      	b.n	8002994 <ADC1_IRQHandler>

08002996 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a0:	2003      	movs	r0, #3
 80029a2:	f000 f961 	bl	8002c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029a6:	2000      	movs	r0, #0
 80029a8:	f000 f80e 	bl	80029c8 <HAL_InitTick>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	71fb      	strb	r3, [r7, #7]
 80029b6:	e001      	b.n	80029bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029b8:	f7ff fd5c 	bl	8002474 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029bc:	79fb      	ldrb	r3, [r7, #7]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029d4:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <HAL_InitTick+0x6c>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d023      	beq.n	8002a24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029dc:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <HAL_InitTick+0x70>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <HAL_InitTick+0x6c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	4619      	mov	r1, r3
 80029e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 f96d 	bl	8002cd2 <HAL_SYSTICK_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10f      	bne.n	8002a1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b0f      	cmp	r3, #15
 8002a02:	d809      	bhi.n	8002a18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a04:	2200      	movs	r2, #0
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	f04f 30ff 	mov.w	r0, #4294967295
 8002a0c:	f000 f937 	bl	8002c7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a10:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <HAL_InitTick+0x74>)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e007      	b.n	8002a28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	e004      	b.n	8002a28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
 8002a22:	e001      	b.n	8002a28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000098 	.word	0x20000098
 8002a38:	20000090 	.word	0x20000090
 8002a3c:	20000094 	.word	0x20000094

08002a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_IncTick+0x20>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_IncTick+0x24>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4413      	add	r3, r2
 8002a50:	4a04      	ldr	r2, [pc, #16]	; (8002a64 <HAL_IncTick+0x24>)
 8002a52:	6013      	str	r3, [r2, #0]
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000098 	.word	0x20000098
 8002a64:	20000a4c 	.word	0x20000a4c

08002a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <HAL_GetTick+0x14>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000a4c 	.word	0x20000a4c

08002a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a88:	f7ff ffee 	bl	8002a68 <HAL_GetTick>
 8002a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d005      	beq.n	8002aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_Delay+0x44>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aa6:	bf00      	nop
 8002aa8:	f7ff ffde 	bl	8002a68 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d8f7      	bhi.n	8002aa8 <HAL_Delay+0x28>
  {
  }
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000098 	.word	0x20000098

08002ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <__NVIC_SetPriorityGrouping+0x44>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002afa:	4a04      	ldr	r2, [pc, #16]	; (8002b0c <__NVIC_SetPriorityGrouping+0x44>)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	60d3      	str	r3, [r2, #12]
}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <__NVIC_GetPriorityGrouping+0x18>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	0a1b      	lsrs	r3, r3, #8
 8002b1a:	f003 0307 	and.w	r3, r3, #7
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	db0b      	blt.n	8002b56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	f003 021f 	and.w	r2, r3, #31
 8002b44:	4907      	ldr	r1, [pc, #28]	; (8002b64 <__NVIC_EnableIRQ+0x38>)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	e000e100 	.word	0xe000e100

08002b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	6039      	str	r1, [r7, #0]
 8002b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	db0a      	blt.n	8002b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	490c      	ldr	r1, [pc, #48]	; (8002bb4 <__NVIC_SetPriority+0x4c>)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	0112      	lsls	r2, r2, #4
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b90:	e00a      	b.n	8002ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4908      	ldr	r1, [pc, #32]	; (8002bb8 <__NVIC_SetPriority+0x50>)
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	3b04      	subs	r3, #4
 8002ba0:	0112      	lsls	r2, r2, #4
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	761a      	strb	r2, [r3, #24]
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	e000e100 	.word	0xe000e100
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b089      	sub	sp, #36	; 0x24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f1c3 0307 	rsb	r3, r3, #7
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	bf28      	it	cs
 8002bda:	2304      	movcs	r3, #4
 8002bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3304      	adds	r3, #4
 8002be2:	2b06      	cmp	r3, #6
 8002be4:	d902      	bls.n	8002bec <NVIC_EncodePriority+0x30>
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3b03      	subs	r3, #3
 8002bea:	e000      	b.n	8002bee <NVIC_EncodePriority+0x32>
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	401a      	ands	r2, r3
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c04:	f04f 31ff 	mov.w	r1, #4294967295
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0e:	43d9      	mvns	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c14:	4313      	orrs	r3, r2
         );
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3724      	adds	r7, #36	; 0x24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c34:	d301      	bcc.n	8002c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c36:	2301      	movs	r3, #1
 8002c38:	e00f      	b.n	8002c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <SysTick_Config+0x40>)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c42:	210f      	movs	r1, #15
 8002c44:	f04f 30ff 	mov.w	r0, #4294967295
 8002c48:	f7ff ff8e 	bl	8002b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <SysTick_Config+0x40>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c52:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <SysTick_Config+0x40>)
 8002c54:	2207      	movs	r2, #7
 8002c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	e000e010 	.word	0xe000e010

08002c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff ff29 	bl	8002ac8 <__NVIC_SetPriorityGrouping>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b086      	sub	sp, #24
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	4603      	mov	r3, r0
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
 8002c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c90:	f7ff ff3e 	bl	8002b10 <__NVIC_GetPriorityGrouping>
 8002c94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68b9      	ldr	r1, [r7, #8]
 8002c9a:	6978      	ldr	r0, [r7, #20]
 8002c9c:	f7ff ff8e 	bl	8002bbc <NVIC_EncodePriority>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff5d 	bl	8002b68 <__NVIC_SetPriority>
}
 8002cae:	bf00      	nop
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff31 	bl	8002b2c <__NVIC_EnableIRQ>
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff ffa2 	bl	8002c24 <SysTick_Config>
 8002ce0:	4603      	mov	r3, r0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b085      	sub	sp, #20
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d008      	beq.n	8002d14 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2204      	movs	r2, #4
 8002d06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e022      	b.n	8002d5a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 020e 	bic.w	r2, r2, #14
 8002d22:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	f003 021c 	and.w	r2, r3, #28
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	2101      	movs	r1, #1
 8002d42:	fa01 f202 	lsl.w	r2, r1, r2
 8002d46:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d005      	beq.n	8002d8a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2204      	movs	r2, #4
 8002d82:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
 8002d88:	e029      	b.n	8002dde <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 020e 	bic.w	r2, r2, #14
 8002d98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0201 	bic.w	r2, r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	f003 021c 	and.w	r2, r3, #28
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	2101      	movs	r1, #1
 8002db8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	4798      	blx	r3
    }
  }
  return status;
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002df6:	e148      	b.n	800308a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	fa01 f303 	lsl.w	r3, r1, r3
 8002e04:	4013      	ands	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 813a 	beq.w	8003084 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d005      	beq.n	8002e28 <HAL_GPIO_Init+0x40>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d130      	bne.n	8002e8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2203      	movs	r2, #3
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e5e:	2201      	movs	r2, #1
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	f003 0201 	and.w	r2, r3, #1
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d017      	beq.n	8002ec6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d123      	bne.n	8002f1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	08da      	lsrs	r2, r3, #3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3208      	adds	r2, #8
 8002eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ede:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	220f      	movs	r2, #15
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	08da      	lsrs	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3208      	adds	r2, #8
 8002f14:	6939      	ldr	r1, [r7, #16]
 8002f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	2203      	movs	r2, #3
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0203 	and.w	r2, r3, #3
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8094 	beq.w	8003084 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5c:	4b52      	ldr	r3, [pc, #328]	; (80030a8 <HAL_GPIO_Init+0x2c0>)
 8002f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f60:	4a51      	ldr	r2, [pc, #324]	; (80030a8 <HAL_GPIO_Init+0x2c0>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6613      	str	r3, [r2, #96]	; 0x60
 8002f68:	4b4f      	ldr	r3, [pc, #316]	; (80030a8 <HAL_GPIO_Init+0x2c0>)
 8002f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f74:	4a4d      	ldr	r2, [pc, #308]	; (80030ac <HAL_GPIO_Init+0x2c4>)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	220f      	movs	r2, #15
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f9e:	d00d      	beq.n	8002fbc <HAL_GPIO_Init+0x1d4>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a43      	ldr	r2, [pc, #268]	; (80030b0 <HAL_GPIO_Init+0x2c8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d007      	beq.n	8002fb8 <HAL_GPIO_Init+0x1d0>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a42      	ldr	r2, [pc, #264]	; (80030b4 <HAL_GPIO_Init+0x2cc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d101      	bne.n	8002fb4 <HAL_GPIO_Init+0x1cc>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e004      	b.n	8002fbe <HAL_GPIO_Init+0x1d6>
 8002fb4:	2307      	movs	r3, #7
 8002fb6:	e002      	b.n	8002fbe <HAL_GPIO_Init+0x1d6>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_GPIO_Init+0x1d6>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	f002 0203 	and.w	r2, r2, #3
 8002fc4:	0092      	lsls	r2, r2, #2
 8002fc6:	4093      	lsls	r3, r2
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fce:	4937      	ldr	r1, [pc, #220]	; (80030ac <HAL_GPIO_Init+0x2c4>)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fdc:	4b36      	ldr	r3, [pc, #216]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003000:	4a2d      	ldr	r2, [pc, #180]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003006:	4b2c      	ldr	r3, [pc, #176]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	43db      	mvns	r3, r3
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800302a:	4a23      	ldr	r2, [pc, #140]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003030:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	43db      	mvns	r3, r3
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4013      	ands	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003054:	4a18      	ldr	r2, [pc, #96]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800305a:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	43db      	mvns	r3, r3
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4013      	ands	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800307e:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	3301      	adds	r3, #1
 8003088:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	f47f aeaf 	bne.w	8002df8 <HAL_GPIO_Init+0x10>
  }
}
 800309a:	bf00      	nop
 800309c:	bf00      	nop
 800309e:	371c      	adds	r7, #28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40010000 	.word	0x40010000
 80030b0:	48000400 	.word	0x48000400
 80030b4:	48000800 	.word	0x48000800
 80030b8:	40010400 	.word	0x40010400

080030bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
 80030c8:	4613      	mov	r3, r2
 80030ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030cc:	787b      	ldrb	r3, [r7, #1]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030d8:	e002      	b.n	80030e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030da:	887a      	ldrh	r2, [r7, #2]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e081      	b.n	8003202 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff f9d2 	bl	80024bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2224      	movs	r2, #36	; 0x24
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800313c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800314c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d107      	bne.n	8003166 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	e006      	b.n	8003174 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003172:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d104      	bne.n	8003186 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003184:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003198:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691a      	ldr	r2, [r3, #16]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69d9      	ldr	r1, [r3, #28]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1a      	ldr	r2, [r3, #32]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af02      	add	r7, sp, #8
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	4608      	mov	r0, r1
 8003216:	4611      	mov	r1, r2
 8003218:	461a      	mov	r2, r3
 800321a:	4603      	mov	r3, r0
 800321c:	817b      	strh	r3, [r7, #10]
 800321e:	460b      	mov	r3, r1
 8003220:	813b      	strh	r3, [r7, #8]
 8003222:	4613      	mov	r3, r2
 8003224:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b20      	cmp	r3, #32
 8003230:	f040 80f9 	bne.w	8003426 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_I2C_Mem_Write+0x34>
 800323a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800323c:	2b00      	cmp	r3, #0
 800323e:	d105      	bne.n	800324c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003246:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0ed      	b.n	8003428 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_I2C_Mem_Write+0x4e>
 8003256:	2302      	movs	r3, #2
 8003258:	e0e6      	b.n	8003428 <HAL_I2C_Mem_Write+0x21c>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003262:	f7ff fc01 	bl	8002a68 <HAL_GetTick>
 8003266:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2319      	movs	r3, #25
 800326e:	2201      	movs	r2, #1
 8003270:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 fac3 	bl	8003800 <I2C_WaitOnFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0d1      	b.n	8003428 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2221      	movs	r2, #33	; 0x21
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2240      	movs	r2, #64	; 0x40
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a3a      	ldr	r2, [r7, #32]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032ac:	88f8      	ldrh	r0, [r7, #6]
 80032ae:	893a      	ldrh	r2, [r7, #8]
 80032b0:	8979      	ldrh	r1, [r7, #10]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	9301      	str	r3, [sp, #4]
 80032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	4603      	mov	r3, r0
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f9d3 	bl	8003668 <I2C_RequestMemoryWrite>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0a9      	b.n	8003428 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2bff      	cmp	r3, #255	; 0xff
 80032dc:	d90e      	bls.n	80032fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	22ff      	movs	r2, #255	; 0xff
 80032e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	8979      	ldrh	r1, [r7, #10]
 80032ec:	2300      	movs	r3, #0
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 fc2b 	bl	8003b50 <I2C_TransferConfig>
 80032fa:	e00f      	b.n	800331c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	b2da      	uxtb	r2, r3
 800330c:	8979      	ldrh	r1, [r7, #10]
 800330e:	2300      	movs	r3, #0
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fc1a 	bl	8003b50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 faad 	bl	8003880 <I2C_WaitOnTXISFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e07b      	b.n	8003428 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	781a      	ldrb	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d034      	beq.n	80033d4 <HAL_I2C_Mem_Write+0x1c8>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	2b00      	cmp	r3, #0
 8003370:	d130      	bne.n	80033d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	2200      	movs	r2, #0
 800337a:	2180      	movs	r1, #128	; 0x80
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 fa3f 	bl	8003800 <I2C_WaitOnFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e04d      	b.n	8003428 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	2bff      	cmp	r3, #255	; 0xff
 8003394:	d90e      	bls.n	80033b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	22ff      	movs	r2, #255	; 0xff
 800339a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	8979      	ldrh	r1, [r7, #10]
 80033a4:	2300      	movs	r3, #0
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fbcf 	bl	8003b50 <I2C_TransferConfig>
 80033b2:	e00f      	b.n	80033d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	8979      	ldrh	r1, [r7, #10]
 80033c6:	2300      	movs	r3, #0
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 fbbe 	bl	8003b50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d19e      	bne.n	800331c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 fa8c 	bl	8003900 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e01a      	b.n	8003428 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2220      	movs	r2, #32
 80033f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b0a      	ldr	r3, [pc, #40]	; (8003430 <HAL_I2C_Mem_Write+0x224>)
 8003406:	400b      	ands	r3, r1
 8003408:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e000      	b.n	8003428 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003426:	2302      	movs	r3, #2
  }
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	fe00e800 	.word	0xfe00e800

08003434 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	4608      	mov	r0, r1
 800343e:	4611      	mov	r1, r2
 8003440:	461a      	mov	r2, r3
 8003442:	4603      	mov	r3, r0
 8003444:	817b      	strh	r3, [r7, #10]
 8003446:	460b      	mov	r3, r1
 8003448:	813b      	strh	r3, [r7, #8]
 800344a:	4613      	mov	r3, r2
 800344c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b20      	cmp	r3, #32
 8003458:	f040 80fd 	bne.w	8003656 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <HAL_I2C_Mem_Read+0x34>
 8003462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003464:	2b00      	cmp	r3, #0
 8003466:	d105      	bne.n	8003474 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800346e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0f1      	b.n	8003658 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_I2C_Mem_Read+0x4e>
 800347e:	2302      	movs	r3, #2
 8003480:	e0ea      	b.n	8003658 <HAL_I2C_Mem_Read+0x224>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800348a:	f7ff faed 	bl	8002a68 <HAL_GetTick>
 800348e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	2319      	movs	r3, #25
 8003496:	2201      	movs	r2, #1
 8003498:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f9af 	bl	8003800 <I2C_WaitOnFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0d5      	b.n	8003658 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2222      	movs	r2, #34	; 0x22
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2240      	movs	r2, #64	; 0x40
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a3a      	ldr	r2, [r7, #32]
 80034c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034d4:	88f8      	ldrh	r0, [r7, #6]
 80034d6:	893a      	ldrh	r2, [r7, #8]
 80034d8:	8979      	ldrh	r1, [r7, #10]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	4603      	mov	r3, r0
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f913 	bl	8003710 <I2C_RequestMemoryRead>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0ad      	b.n	8003658 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003500:	b29b      	uxth	r3, r3
 8003502:	2bff      	cmp	r3, #255	; 0xff
 8003504:	d90e      	bls.n	8003524 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	22ff      	movs	r2, #255	; 0xff
 800350a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003510:	b2da      	uxtb	r2, r3
 8003512:	8979      	ldrh	r1, [r7, #10]
 8003514:	4b52      	ldr	r3, [pc, #328]	; (8003660 <HAL_I2C_Mem_Read+0x22c>)
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 fb17 	bl	8003b50 <I2C_TransferConfig>
 8003522:	e00f      	b.n	8003544 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003532:	b2da      	uxtb	r2, r3
 8003534:	8979      	ldrh	r1, [r7, #10]
 8003536:	4b4a      	ldr	r3, [pc, #296]	; (8003660 <HAL_I2C_Mem_Read+0x22c>)
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 fb06 	bl	8003b50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	2200      	movs	r2, #0
 800354c:	2104      	movs	r1, #4
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f956 	bl	8003800 <I2C_WaitOnFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e07c      	b.n	8003658 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d034      	beq.n	8003604 <HAL_I2C_Mem_Read+0x1d0>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d130      	bne.n	8003604 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	2200      	movs	r2, #0
 80035aa:	2180      	movs	r1, #128	; 0x80
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f927 	bl	8003800 <I2C_WaitOnFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e04d      	b.n	8003658 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2bff      	cmp	r3, #255	; 0xff
 80035c4:	d90e      	bls.n	80035e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	22ff      	movs	r2, #255	; 0xff
 80035ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	8979      	ldrh	r1, [r7, #10]
 80035d4:	2300      	movs	r3, #0
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 fab7 	bl	8003b50 <I2C_TransferConfig>
 80035e2:	e00f      	b.n	8003604 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	8979      	ldrh	r1, [r7, #10]
 80035f6:	2300      	movs	r3, #0
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 faa6 	bl	8003b50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d19a      	bne.n	8003544 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f974 	bl	8003900 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e01a      	b.n	8003658 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2220      	movs	r2, #32
 8003628:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_I2C_Mem_Read+0x230>)
 8003636:	400b      	ands	r3, r1
 8003638:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e000      	b.n	8003658 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003656:	2302      	movs	r3, #2
  }
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	80002400 	.word	0x80002400
 8003664:	fe00e800 	.word	0xfe00e800

08003668 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	4608      	mov	r0, r1
 8003672:	4611      	mov	r1, r2
 8003674:	461a      	mov	r2, r3
 8003676:	4603      	mov	r3, r0
 8003678:	817b      	strh	r3, [r7, #10]
 800367a:	460b      	mov	r3, r1
 800367c:	813b      	strh	r3, [r7, #8]
 800367e:	4613      	mov	r3, r2
 8003680:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	8979      	ldrh	r1, [r7, #10]
 8003688:	4b20      	ldr	r3, [pc, #128]	; (800370c <I2C_RequestMemoryWrite+0xa4>)
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 fa5d 	bl	8003b50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	69b9      	ldr	r1, [r7, #24]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f8f0 	bl	8003880 <I2C_WaitOnTXISFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e02c      	b.n	8003704 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d105      	bne.n	80036bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036b0:	893b      	ldrh	r3, [r7, #8]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	629a      	str	r2, [r3, #40]	; 0x28
 80036ba:	e015      	b.n	80036e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036bc:	893b      	ldrh	r3, [r7, #8]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	69b9      	ldr	r1, [r7, #24]
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f8d6 	bl	8003880 <I2C_WaitOnTXISFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e012      	b.n	8003704 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036de:	893b      	ldrh	r3, [r7, #8]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	2200      	movs	r2, #0
 80036f0:	2180      	movs	r1, #128	; 0x80
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f884 	bl	8003800 <I2C_WaitOnFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	80002000 	.word	0x80002000

08003710 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	4608      	mov	r0, r1
 800371a:	4611      	mov	r1, r2
 800371c:	461a      	mov	r2, r3
 800371e:	4603      	mov	r3, r0
 8003720:	817b      	strh	r3, [r7, #10]
 8003722:	460b      	mov	r3, r1
 8003724:	813b      	strh	r3, [r7, #8]
 8003726:	4613      	mov	r3, r2
 8003728:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	b2da      	uxtb	r2, r3
 800372e:	8979      	ldrh	r1, [r7, #10]
 8003730:	4b20      	ldr	r3, [pc, #128]	; (80037b4 <I2C_RequestMemoryRead+0xa4>)
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	2300      	movs	r3, #0
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 fa0a 	bl	8003b50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	69b9      	ldr	r1, [r7, #24]
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f89d 	bl	8003880 <I2C_WaitOnTXISFlagUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e02c      	b.n	80037aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003750:	88fb      	ldrh	r3, [r7, #6]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d105      	bne.n	8003762 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003756:	893b      	ldrh	r3, [r7, #8]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	629a      	str	r2, [r3, #40]	; 0x28
 8003760:	e015      	b.n	800378e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003762:	893b      	ldrh	r3, [r7, #8]
 8003764:	0a1b      	lsrs	r3, r3, #8
 8003766:	b29b      	uxth	r3, r3
 8003768:	b2da      	uxtb	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003770:	69fa      	ldr	r2, [r7, #28]
 8003772:	69b9      	ldr	r1, [r7, #24]
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f883 	bl	8003880 <I2C_WaitOnTXISFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e012      	b.n	80037aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003784:	893b      	ldrh	r3, [r7, #8]
 8003786:	b2da      	uxtb	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2200      	movs	r2, #0
 8003796:	2140      	movs	r1, #64	; 0x40
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 f831 	bl	8003800 <I2C_WaitOnFlagUntilTimeout>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	80002000 	.word	0x80002000

080037b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d103      	bne.n	80037d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2200      	movs	r2, #0
 80037d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d007      	beq.n	80037f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699a      	ldr	r2, [r3, #24]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	619a      	str	r2, [r3, #24]
  }
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	4613      	mov	r3, r2
 800380e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003810:	e022      	b.n	8003858 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003818:	d01e      	beq.n	8003858 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381a:	f7ff f925 	bl	8002a68 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d302      	bcc.n	8003830 <I2C_WaitOnFlagUntilTimeout+0x30>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d113      	bne.n	8003858 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e00f      	b.n	8003878 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	4013      	ands	r3, r2
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	429a      	cmp	r2, r3
 8003866:	bf0c      	ite	eq
 8003868:	2301      	moveq	r3, #1
 800386a:	2300      	movne	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	461a      	mov	r2, r3
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	429a      	cmp	r2, r3
 8003874:	d0cd      	beq.n	8003812 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800388c:	e02c      	b.n	80038e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	68b9      	ldr	r1, [r7, #8]
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f870 	bl	8003978 <I2C_IsErrorOccurred>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e02a      	b.n	80038f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a8:	d01e      	beq.n	80038e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038aa:	f7ff f8dd 	bl	8002a68 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d302      	bcc.n	80038c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d113      	bne.n	80038e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c4:	f043 0220 	orr.w	r2, r3, #32
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e007      	b.n	80038f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d1cb      	bne.n	800388e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800390c:	e028      	b.n	8003960 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	68b9      	ldr	r1, [r7, #8]
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f830 	bl	8003978 <I2C_IsErrorOccurred>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e026      	b.n	8003970 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003922:	f7ff f8a1 	bl	8002a68 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	429a      	cmp	r2, r3
 8003930:	d302      	bcc.n	8003938 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d113      	bne.n	8003960 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	f043 0220 	orr.w	r2, r3, #32
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e007      	b.n	8003970 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b20      	cmp	r3, #32
 800396c:	d1cf      	bne.n	800390e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	; 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d075      	beq.n	8003a90 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2210      	movs	r2, #16
 80039aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039ac:	e056      	b.n	8003a5c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b4:	d052      	beq.n	8003a5c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039b6:	f7ff f857 	bl	8002a68 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d302      	bcc.n	80039cc <I2C_IsErrorOccurred+0x54>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d147      	bne.n	8003a5c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ee:	d12e      	bne.n	8003a4e <I2C_IsErrorOccurred+0xd6>
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039f6:	d02a      	beq.n	8003a4e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80039f8:	7cfb      	ldrb	r3, [r7, #19]
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d027      	beq.n	8003a4e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a0c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a0e:	f7ff f82b 	bl	8002a68 <HAL_GetTick>
 8003a12:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a14:	e01b      	b.n	8003a4e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a16:	f7ff f827 	bl	8002a68 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b19      	cmp	r3, #25
 8003a22:	d914      	bls.n	8003a4e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a28:	f043 0220 	orr.w	r2, r3, #32
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d1dc      	bne.n	8003a16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d003      	beq.n	8003a72 <I2C_IsErrorOccurred+0xfa>
 8003a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d09d      	beq.n	80039ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	f043 0304 	orr.w	r3, r3, #4
 8003a88:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ab2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00b      	beq.n	8003adc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	f043 0308 	orr.w	r3, r3, #8
 8003aca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ad4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003afe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01c      	beq.n	8003b40 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f7ff fe56 	bl	80037b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6859      	ldr	r1, [r3, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <I2C_IsErrorOccurred+0x1d4>)
 8003b18:	400b      	ands	r3, r1
 8003b1a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3728      	adds	r7, #40	; 0x28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	fe00e800 	.word	0xfe00e800

08003b50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	607b      	str	r3, [r7, #4]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	817b      	strh	r3, [r7, #10]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b62:	897b      	ldrh	r3, [r7, #10]
 8003b64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b68:	7a7b      	ldrb	r3, [r7, #9]
 8003b6a:	041b      	lsls	r3, r3, #16
 8003b6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	0d5b      	lsrs	r3, r3, #21
 8003b8a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b8e:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <I2C_TransferConfig+0x60>)
 8003b90:	430b      	orrs	r3, r1
 8003b92:	43db      	mvns	r3, r3
 8003b94:	ea02 0103 	and.w	r1, r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	03ff63ff 	.word	0x03ff63ff

08003bb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	d138      	bne.n	8003c3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e032      	b.n	8003c3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2224      	movs	r2, #36	; 0x24
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6819      	ldr	r1, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e000      	b.n	8003c3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b085      	sub	sp, #20
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d139      	bne.n	8003cd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e033      	b.n	8003cd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2224      	movs	r2, #36	; 0x24
 8003c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0201 	bic.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e000      	b.n	8003cd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
  }
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
	...

08003ce4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf2:	6013      	str	r3, [r2, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40007000 	.word	0x40007000

08003d04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d08:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <HAL_PWREx_GetVoltageRange+0x18>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40007000 	.word	0x40007000

08003d20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2e:	d130      	bne.n	8003d92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d30:	4b23      	ldr	r3, [pc, #140]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d3c:	d038      	beq.n	8003db0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d3e:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d46:	4a1e      	ldr	r2, [pc, #120]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d4e:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2232      	movs	r2, #50	; 0x32
 8003d54:	fb02 f303 	mul.w	r3, r2, r3
 8003d58:	4a1b      	ldr	r2, [pc, #108]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	0c9b      	lsrs	r3, r3, #18
 8003d60:	3301      	adds	r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d64:	e002      	b.n	8003d6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d6c:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d78:	d102      	bne.n	8003d80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f2      	bne.n	8003d66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8c:	d110      	bne.n	8003db0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e00f      	b.n	8003db2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d92:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9e:	d007      	beq.n	8003db0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003da0:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003da8:	4a05      	ldr	r2, [pc, #20]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40007000 	.word	0x40007000
 8003dc4:	20000090 	.word	0x20000090
 8003dc8:	431bde83 	.word	0x431bde83

08003dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d102      	bne.n	8003de0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f000 bc02 	b.w	80045e4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003de0:	4b96      	ldr	r3, [pc, #600]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 030c 	and.w	r3, r3, #12
 8003de8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dea:	4b94      	ldr	r3, [pc, #592]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80e4 	beq.w	8003fca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d007      	beq.n	8003e18 <HAL_RCC_OscConfig+0x4c>
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2b0c      	cmp	r3, #12
 8003e0c:	f040 808b 	bne.w	8003f26 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	f040 8087 	bne.w	8003f26 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e18:	4b88      	ldr	r3, [pc, #544]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_RCC_OscConfig+0x64>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e3d9      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1a      	ldr	r2, [r3, #32]
 8003e34:	4b81      	ldr	r3, [pc, #516]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d004      	beq.n	8003e4a <HAL_RCC_OscConfig+0x7e>
 8003e40:	4b7e      	ldr	r3, [pc, #504]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e48:	e005      	b.n	8003e56 <HAL_RCC_OscConfig+0x8a>
 8003e4a:	4b7c      	ldr	r3, [pc, #496]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d223      	bcs.n	8003ea2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fd8c 	bl	800497c <RCC_SetFlashLatencyFromMSIRange>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e3ba      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e6e:	4b73      	ldr	r3, [pc, #460]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a72      	ldr	r2, [pc, #456]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003e74:	f043 0308 	orr.w	r3, r3, #8
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	4b70      	ldr	r3, [pc, #448]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	496d      	ldr	r1, [pc, #436]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e8c:	4b6b      	ldr	r3, [pc, #428]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	4968      	ldr	r1, [pc, #416]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]
 8003ea0:	e025      	b.n	8003eee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ea2:	4b66      	ldr	r3, [pc, #408]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a65      	ldr	r2, [pc, #404]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003ea8:	f043 0308 	orr.w	r3, r3, #8
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	4b63      	ldr	r3, [pc, #396]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	4960      	ldr	r1, [pc, #384]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ec0:	4b5e      	ldr	r3, [pc, #376]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	495b      	ldr	r1, [pc, #364]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fd4c 	bl	800497c <RCC_SetFlashLatencyFromMSIRange>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e37a      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eee:	f000 fc81 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	4b51      	ldr	r3, [pc, #324]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	4950      	ldr	r1, [pc, #320]	; (8004040 <HAL_RCC_OscConfig+0x274>)
 8003f00:	5ccb      	ldrb	r3, [r1, r3]
 8003f02:	f003 031f 	and.w	r3, r3, #31
 8003f06:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0a:	4a4e      	ldr	r2, [pc, #312]	; (8004044 <HAL_RCC_OscConfig+0x278>)
 8003f0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f0e:	4b4e      	ldr	r3, [pc, #312]	; (8004048 <HAL_RCC_OscConfig+0x27c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe fd58 	bl	80029c8 <HAL_InitTick>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d052      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	e35e      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d032      	beq.n	8003f94 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f2e:	4b43      	ldr	r3, [pc, #268]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a42      	ldr	r2, [pc, #264]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f3a:	f7fe fd95 	bl	8002a68 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f42:	f7fe fd91 	bl	8002a68 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e347      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f54:	4b39      	ldr	r3, [pc, #228]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f60:	4b36      	ldr	r3, [pc, #216]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a35      	ldr	r2, [pc, #212]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003f66:	f043 0308 	orr.w	r3, r3, #8
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	4b33      	ldr	r3, [pc, #204]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	4930      	ldr	r1, [pc, #192]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f7e:	4b2f      	ldr	r3, [pc, #188]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	021b      	lsls	r3, r3, #8
 8003f8c:	492b      	ldr	r1, [pc, #172]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	604b      	str	r3, [r1, #4]
 8003f92:	e01a      	b.n	8003fca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f94:	4b29      	ldr	r3, [pc, #164]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a28      	ldr	r2, [pc, #160]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003f9a:	f023 0301 	bic.w	r3, r3, #1
 8003f9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fa0:	f7fe fd62 	bl	8002a68 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fa8:	f7fe fd5e 	bl	8002a68 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e314      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fba:	4b20      	ldr	r3, [pc, #128]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f0      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x1dc>
 8003fc6:	e000      	b.n	8003fca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d073      	beq.n	80040be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x21c>
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b0c      	cmp	r3, #12
 8003fe0:	d10e      	bne.n	8004000 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d10b      	bne.n	8004000 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe8:	4b14      	ldr	r3, [pc, #80]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d063      	beq.n	80040bc <HAL_RCC_OscConfig+0x2f0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d15f      	bne.n	80040bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e2f1      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004008:	d106      	bne.n	8004018 <HAL_RCC_OscConfig+0x24c>
 800400a:	4b0c      	ldr	r3, [pc, #48]	; (800403c <HAL_RCC_OscConfig+0x270>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a0b      	ldr	r2, [pc, #44]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e025      	b.n	8004064 <HAL_RCC_OscConfig+0x298>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004020:	d114      	bne.n	800404c <HAL_RCC_OscConfig+0x280>
 8004022:	4b06      	ldr	r3, [pc, #24]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a05      	ldr	r2, [pc, #20]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8004028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	4b03      	ldr	r3, [pc, #12]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a02      	ldr	r2, [pc, #8]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8004034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e013      	b.n	8004064 <HAL_RCC_OscConfig+0x298>
 800403c:	40021000 	.word	0x40021000
 8004040:	0800d0f8 	.word	0x0800d0f8
 8004044:	20000090 	.word	0x20000090
 8004048:	20000094 	.word	0x20000094
 800404c:	4ba0      	ldr	r3, [pc, #640]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a9f      	ldr	r2, [pc, #636]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 8004052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	4b9d      	ldr	r3, [pc, #628]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a9c      	ldr	r2, [pc, #624]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 800405e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d013      	beq.n	8004094 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fe fcfc 	bl	8002a68 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004074:	f7fe fcf8 	bl	8002a68 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b64      	cmp	r3, #100	; 0x64
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e2ae      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004086:	4b92      	ldr	r3, [pc, #584]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x2a8>
 8004092:	e014      	b.n	80040be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fe fce8 	bl	8002a68 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800409c:	f7fe fce4 	bl	8002a68 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	; 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e29a      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ae:	4b88      	ldr	r3, [pc, #544]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x2d0>
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d060      	beq.n	800418c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_OscConfig+0x310>
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	2b0c      	cmp	r3, #12
 80040d4:	d119      	bne.n	800410a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d116      	bne.n	800410a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040dc:	4b7c      	ldr	r3, [pc, #496]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_RCC_OscConfig+0x328>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e277      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f4:	4b76      	ldr	r3, [pc, #472]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	061b      	lsls	r3, r3, #24
 8004102:	4973      	ldr	r1, [pc, #460]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 8004104:	4313      	orrs	r3, r2
 8004106:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004108:	e040      	b.n	800418c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d023      	beq.n	800415a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004112:	4b6f      	ldr	r3, [pc, #444]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a6e      	ldr	r2, [pc, #440]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 8004118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411e:	f7fe fca3 	bl	8002a68 <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004126:	f7fe fc9f 	bl	8002a68 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e255      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004138:	4b65      	ldr	r3, [pc, #404]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f0      	beq.n	8004126 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004144:	4b62      	ldr	r3, [pc, #392]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	061b      	lsls	r3, r3, #24
 8004152:	495f      	ldr	r1, [pc, #380]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 8004154:	4313      	orrs	r3, r2
 8004156:	604b      	str	r3, [r1, #4]
 8004158:	e018      	b.n	800418c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800415a:	4b5d      	ldr	r3, [pc, #372]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a5c      	ldr	r2, [pc, #368]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 8004160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004166:	f7fe fc7f 	bl	8002a68 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800416e:	f7fe fc7b 	bl	8002a68 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e231      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004180:	4b53      	ldr	r3, [pc, #332]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f0      	bne.n	800416e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d03c      	beq.n	8004212 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01c      	beq.n	80041da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041a0:	4b4b      	ldr	r3, [pc, #300]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 80041a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a6:	4a4a      	ldr	r2, [pc, #296]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b0:	f7fe fc5a 	bl	8002a68 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b8:	f7fe fc56 	bl	8002a68 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e20c      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ca:	4b41      	ldr	r3, [pc, #260]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 80041cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0ef      	beq.n	80041b8 <HAL_RCC_OscConfig+0x3ec>
 80041d8:	e01b      	b.n	8004212 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041da:	4b3d      	ldr	r3, [pc, #244]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 80041dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e0:	4a3b      	ldr	r2, [pc, #236]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ea:	f7fe fc3d 	bl	8002a68 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f2:	f7fe fc39 	bl	8002a68 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e1ef      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004204:	4b32      	ldr	r3, [pc, #200]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 8004206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1ef      	bne.n	80041f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 80a6 	beq.w	800436c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004220:	2300      	movs	r3, #0
 8004222:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004224:	4b2a      	ldr	r3, [pc, #168]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 8004226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10d      	bne.n	800424c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004230:	4b27      	ldr	r3, [pc, #156]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 8004232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004234:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 8004236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423a:	6593      	str	r3, [r2, #88]	; 0x58
 800423c:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004248:	2301      	movs	r3, #1
 800424a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424c:	4b21      	ldr	r3, [pc, #132]	; (80042d4 <HAL_RCC_OscConfig+0x508>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d118      	bne.n	800428a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004258:	4b1e      	ldr	r3, [pc, #120]	; (80042d4 <HAL_RCC_OscConfig+0x508>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1d      	ldr	r2, [pc, #116]	; (80042d4 <HAL_RCC_OscConfig+0x508>)
 800425e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004262:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004264:	f7fe fc00 	bl	8002a68 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426c:	f7fe fbfc 	bl	8002a68 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e1b2      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800427e:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <HAL_RCC_OscConfig+0x508>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d108      	bne.n	80042a4 <HAL_RCC_OscConfig+0x4d8>
 8004292:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004298:	4a0d      	ldr	r2, [pc, #52]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042a2:	e029      	b.n	80042f8 <HAL_RCC_OscConfig+0x52c>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2b05      	cmp	r3, #5
 80042aa:	d115      	bne.n	80042d8 <HAL_RCC_OscConfig+0x50c>
 80042ac:	4b08      	ldr	r3, [pc, #32]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	4a07      	ldr	r2, [pc, #28]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 80042b4:	f043 0304 	orr.w	r3, r3, #4
 80042b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042bc:	4b04      	ldr	r3, [pc, #16]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	4a03      	ldr	r2, [pc, #12]	; (80042d0 <HAL_RCC_OscConfig+0x504>)
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042cc:	e014      	b.n	80042f8 <HAL_RCC_OscConfig+0x52c>
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000
 80042d4:	40007000 	.word	0x40007000
 80042d8:	4b9a      	ldr	r3, [pc, #616]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042de:	4a99      	ldr	r2, [pc, #612]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042e8:	4b96      	ldr	r3, [pc, #600]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	4a95      	ldr	r2, [pc, #596]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 80042f0:	f023 0304 	bic.w	r3, r3, #4
 80042f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d016      	beq.n	800432e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004300:	f7fe fbb2 	bl	8002a68 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004306:	e00a      	b.n	800431e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004308:	f7fe fbae 	bl	8002a68 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	f241 3288 	movw	r2, #5000	; 0x1388
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e162      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800431e:	4b89      	ldr	r3, [pc, #548]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0ed      	beq.n	8004308 <HAL_RCC_OscConfig+0x53c>
 800432c:	e015      	b.n	800435a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432e:	f7fe fb9b 	bl	8002a68 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004334:	e00a      	b.n	800434c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004336:	f7fe fb97 	bl	8002a68 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	f241 3288 	movw	r2, #5000	; 0x1388
 8004344:	4293      	cmp	r3, r2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e14b      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800434c:	4b7d      	ldr	r3, [pc, #500]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1ed      	bne.n	8004336 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800435a:	7ffb      	ldrb	r3, [r7, #31]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d105      	bne.n	800436c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004360:	4b78      	ldr	r3, [pc, #480]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 8004362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004364:	4a77      	ldr	r2, [pc, #476]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 8004366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d03c      	beq.n	80043f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01c      	beq.n	80043ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004380:	4b70      	ldr	r3, [pc, #448]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 8004382:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004386:	4a6f      	ldr	r2, [pc, #444]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004390:	f7fe fb6a 	bl	8002a68 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004398:	f7fe fb66 	bl	8002a68 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e11c      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043aa:	4b66      	ldr	r3, [pc, #408]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 80043ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0ef      	beq.n	8004398 <HAL_RCC_OscConfig+0x5cc>
 80043b8:	e01b      	b.n	80043f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043ba:	4b62      	ldr	r3, [pc, #392]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 80043bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043c0:	4a60      	ldr	r2, [pc, #384]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 80043c2:	f023 0301 	bic.w	r3, r3, #1
 80043c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ca:	f7fe fb4d 	bl	8002a68 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043d2:	f7fe fb49 	bl	8002a68 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e0ff      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043e4:	4b57      	ldr	r3, [pc, #348]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 80043e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1ef      	bne.n	80043d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 80f3 	beq.w	80045e2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	2b02      	cmp	r3, #2
 8004402:	f040 80c9 	bne.w	8004598 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004406:	4b4f      	ldr	r3, [pc, #316]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f003 0203 	and.w	r2, r3, #3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	429a      	cmp	r2, r3
 8004418:	d12c      	bne.n	8004474 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	3b01      	subs	r3, #1
 8004426:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004428:	429a      	cmp	r2, r3
 800442a:	d123      	bne.n	8004474 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004436:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004438:	429a      	cmp	r2, r3
 800443a:	d11b      	bne.n	8004474 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004446:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d113      	bne.n	8004474 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	085b      	lsrs	r3, r3, #1
 8004458:	3b01      	subs	r3, #1
 800445a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800445c:	429a      	cmp	r2, r3
 800445e:	d109      	bne.n	8004474 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	085b      	lsrs	r3, r3, #1
 800446c:	3b01      	subs	r3, #1
 800446e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004470:	429a      	cmp	r2, r3
 8004472:	d06b      	beq.n	800454c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b0c      	cmp	r3, #12
 8004478:	d062      	beq.n	8004540 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800447a:	4b32      	ldr	r3, [pc, #200]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e0ac      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800448a:	4b2e      	ldr	r3, [pc, #184]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a2d      	ldr	r2, [pc, #180]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 8004490:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004494:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004496:	f7fe fae7 	bl	8002a68 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800449e:	f7fe fae3 	bl	8002a68 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e099      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b0:	4b24      	ldr	r3, [pc, #144]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1f0      	bne.n	800449e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044bc:	4b21      	ldr	r3, [pc, #132]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	4b21      	ldr	r3, [pc, #132]	; (8004548 <HAL_RCC_OscConfig+0x77c>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044cc:	3a01      	subs	r2, #1
 80044ce:	0112      	lsls	r2, r2, #4
 80044d0:	4311      	orrs	r1, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044d6:	0212      	lsls	r2, r2, #8
 80044d8:	4311      	orrs	r1, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044de:	0852      	lsrs	r2, r2, #1
 80044e0:	3a01      	subs	r2, #1
 80044e2:	0552      	lsls	r2, r2, #21
 80044e4:	4311      	orrs	r1, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044ea:	0852      	lsrs	r2, r2, #1
 80044ec:	3a01      	subs	r2, #1
 80044ee:	0652      	lsls	r2, r2, #25
 80044f0:	4311      	orrs	r1, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044f6:	06d2      	lsls	r2, r2, #27
 80044f8:	430a      	orrs	r2, r1
 80044fa:	4912      	ldr	r1, [pc, #72]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004500:	4b10      	ldr	r3, [pc, #64]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0f      	ldr	r2, [pc, #60]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 8004506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800450a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800450c:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4a0c      	ldr	r2, [pc, #48]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 8004512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004516:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004518:	f7fe faa6 	bl	8002a68 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004520:	f7fe faa2 	bl	8002a68 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e058      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004532:	4b04      	ldr	r3, [pc, #16]	; (8004544 <HAL_RCC_OscConfig+0x778>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800453e:	e050      	b.n	80045e2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e04f      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
 8004544:	40021000 	.word	0x40021000
 8004548:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800454c:	4b27      	ldr	r3, [pc, #156]	; (80045ec <HAL_RCC_OscConfig+0x820>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d144      	bne.n	80045e2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004558:	4b24      	ldr	r3, [pc, #144]	; (80045ec <HAL_RCC_OscConfig+0x820>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a23      	ldr	r2, [pc, #140]	; (80045ec <HAL_RCC_OscConfig+0x820>)
 800455e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004562:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004564:	4b21      	ldr	r3, [pc, #132]	; (80045ec <HAL_RCC_OscConfig+0x820>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	4a20      	ldr	r2, [pc, #128]	; (80045ec <HAL_RCC_OscConfig+0x820>)
 800456a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800456e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004570:	f7fe fa7a 	bl	8002a68 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004578:	f7fe fa76 	bl	8002a68 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e02c      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458a:	4b18      	ldr	r3, [pc, #96]	; (80045ec <HAL_RCC_OscConfig+0x820>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCC_OscConfig+0x7ac>
 8004596:	e024      	b.n	80045e2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2b0c      	cmp	r3, #12
 800459c:	d01f      	beq.n	80045de <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459e:	4b13      	ldr	r3, [pc, #76]	; (80045ec <HAL_RCC_OscConfig+0x820>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a12      	ldr	r2, [pc, #72]	; (80045ec <HAL_RCC_OscConfig+0x820>)
 80045a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045aa:	f7fe fa5d 	bl	8002a68 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b2:	f7fe fa59 	bl	8002a68 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e00f      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c4:	4b09      	ldr	r3, [pc, #36]	; (80045ec <HAL_RCC_OscConfig+0x820>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f0      	bne.n	80045b2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80045d0:	4b06      	ldr	r3, [pc, #24]	; (80045ec <HAL_RCC_OscConfig+0x820>)
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	4905      	ldr	r1, [pc, #20]	; (80045ec <HAL_RCC_OscConfig+0x820>)
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <HAL_RCC_OscConfig+0x824>)
 80045d8:	4013      	ands	r3, r2
 80045da:	60cb      	str	r3, [r1, #12]
 80045dc:	e001      	b.n	80045e2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3720      	adds	r7, #32
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40021000 	.word	0x40021000
 80045f0:	feeefffc 	.word	0xfeeefffc

080045f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0e7      	b.n	80047d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004608:	4b75      	ldr	r3, [pc, #468]	; (80047e0 <HAL_RCC_ClockConfig+0x1ec>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d910      	bls.n	8004638 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b72      	ldr	r3, [pc, #456]	; (80047e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 0207 	bic.w	r2, r3, #7
 800461e:	4970      	ldr	r1, [pc, #448]	; (80047e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004626:	4b6e      	ldr	r3, [pc, #440]	; (80047e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e0cf      	b.n	80047d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d010      	beq.n	8004666 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	4b66      	ldr	r3, [pc, #408]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004650:	429a      	cmp	r2, r3
 8004652:	d908      	bls.n	8004666 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004654:	4b63      	ldr	r3, [pc, #396]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4960      	ldr	r1, [pc, #384]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004662:	4313      	orrs	r3, r2
 8004664:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d04c      	beq.n	800470c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b03      	cmp	r3, #3
 8004678:	d107      	bne.n	800468a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800467a:	4b5a      	ldr	r3, [pc, #360]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d121      	bne.n	80046ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e0a6      	b.n	80047d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d107      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004692:	4b54      	ldr	r3, [pc, #336]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d115      	bne.n	80046ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e09a      	b.n	80047d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d107      	bne.n	80046ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046aa:	4b4e      	ldr	r3, [pc, #312]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d109      	bne.n	80046ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e08e      	b.n	80047d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ba:	4b4a      	ldr	r3, [pc, #296]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e086      	b.n	80047d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046ca:	4b46      	ldr	r3, [pc, #280]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f023 0203 	bic.w	r2, r3, #3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	4943      	ldr	r1, [pc, #268]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046dc:	f7fe f9c4 	bl	8002a68 <HAL_GetTick>
 80046e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e2:	e00a      	b.n	80046fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e4:	f7fe f9c0 	bl	8002a68 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e06e      	b.n	80047d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fa:	4b3a      	ldr	r3, [pc, #232]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 020c 	and.w	r2, r3, #12
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	429a      	cmp	r2, r3
 800470a:	d1eb      	bne.n	80046e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d010      	beq.n	800473a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	4b31      	ldr	r3, [pc, #196]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004724:	429a      	cmp	r2, r3
 8004726:	d208      	bcs.n	800473a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004728:	4b2e      	ldr	r3, [pc, #184]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	492b      	ldr	r1, [pc, #172]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800473a:	4b29      	ldr	r3, [pc, #164]	; (80047e0 <HAL_RCC_ClockConfig+0x1ec>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d210      	bcs.n	800476a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004748:	4b25      	ldr	r3, [pc, #148]	; (80047e0 <HAL_RCC_ClockConfig+0x1ec>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f023 0207 	bic.w	r2, r3, #7
 8004750:	4923      	ldr	r1, [pc, #140]	; (80047e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	4313      	orrs	r3, r2
 8004756:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004758:	4b21      	ldr	r3, [pc, #132]	; (80047e0 <HAL_RCC_ClockConfig+0x1ec>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d001      	beq.n	800476a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e036      	b.n	80047d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b00      	cmp	r3, #0
 8004774:	d008      	beq.n	8004788 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004776:	4b1b      	ldr	r3, [pc, #108]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	4918      	ldr	r1, [pc, #96]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004784:	4313      	orrs	r3, r2
 8004786:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d009      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004794:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	4910      	ldr	r1, [pc, #64]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047a8:	f000 f824 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 80047ac:	4602      	mov	r2, r0
 80047ae:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	091b      	lsrs	r3, r3, #4
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	490b      	ldr	r1, [pc, #44]	; (80047e8 <HAL_RCC_ClockConfig+0x1f4>)
 80047ba:	5ccb      	ldrb	r3, [r1, r3]
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	fa22 f303 	lsr.w	r3, r2, r3
 80047c4:	4a09      	ldr	r2, [pc, #36]	; (80047ec <HAL_RCC_ClockConfig+0x1f8>)
 80047c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047c8:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <HAL_RCC_ClockConfig+0x1fc>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fe f8fb 	bl	80029c8 <HAL_InitTick>
 80047d2:	4603      	mov	r3, r0
 80047d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80047d6:	7afb      	ldrb	r3, [r7, #11]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40022000 	.word	0x40022000
 80047e4:	40021000 	.word	0x40021000
 80047e8:	0800d0f8 	.word	0x0800d0f8
 80047ec:	20000090 	.word	0x20000090
 80047f0:	20000094 	.word	0x20000094

080047f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b089      	sub	sp, #36	; 0x24
 80047f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
 80047fe:	2300      	movs	r3, #0
 8004800:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004802:	4b3e      	ldr	r3, [pc, #248]	; (80048fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800480c:	4b3b      	ldr	r3, [pc, #236]	; (80048fc <HAL_RCC_GetSysClockFreq+0x108>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0303 	and.w	r3, r3, #3
 8004814:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_GetSysClockFreq+0x34>
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b0c      	cmp	r3, #12
 8004820:	d121      	bne.n	8004866 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d11e      	bne.n	8004866 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004828:	4b34      	ldr	r3, [pc, #208]	; (80048fc <HAL_RCC_GetSysClockFreq+0x108>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d107      	bne.n	8004844 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004834:	4b31      	ldr	r3, [pc, #196]	; (80048fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800483a:	0a1b      	lsrs	r3, r3, #8
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	e005      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004844:	4b2d      	ldr	r3, [pc, #180]	; (80048fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004850:	4a2b      	ldr	r2, [pc, #172]	; (8004900 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004858:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10d      	bne.n	800487c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004864:	e00a      	b.n	800487c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2b04      	cmp	r3, #4
 800486a:	d102      	bne.n	8004872 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800486c:	4b25      	ldr	r3, [pc, #148]	; (8004904 <HAL_RCC_GetSysClockFreq+0x110>)
 800486e:	61bb      	str	r3, [r7, #24]
 8004870:	e004      	b.n	800487c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d101      	bne.n	800487c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004878:	4b23      	ldr	r3, [pc, #140]	; (8004908 <HAL_RCC_GetSysClockFreq+0x114>)
 800487a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b0c      	cmp	r3, #12
 8004880:	d134      	bne.n	80048ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004882:	4b1e      	ldr	r3, [pc, #120]	; (80048fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d003      	beq.n	800489a <HAL_RCC_GetSysClockFreq+0xa6>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b03      	cmp	r3, #3
 8004896:	d003      	beq.n	80048a0 <HAL_RCC_GetSysClockFreq+0xac>
 8004898:	e005      	b.n	80048a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800489a:	4b1a      	ldr	r3, [pc, #104]	; (8004904 <HAL_RCC_GetSysClockFreq+0x110>)
 800489c:	617b      	str	r3, [r7, #20]
      break;
 800489e:	e005      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80048a0:	4b19      	ldr	r3, [pc, #100]	; (8004908 <HAL_RCC_GetSysClockFreq+0x114>)
 80048a2:	617b      	str	r3, [r7, #20]
      break;
 80048a4:	e002      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	617b      	str	r3, [r7, #20]
      break;
 80048aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048ac:	4b13      	ldr	r3, [pc, #76]	; (80048fc <HAL_RCC_GetSysClockFreq+0x108>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	3301      	adds	r3, #1
 80048b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048ba:	4b10      	ldr	r3, [pc, #64]	; (80048fc <HAL_RCC_GetSysClockFreq+0x108>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	fb03 f202 	mul.w	r2, r3, r2
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048d2:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <HAL_RCC_GetSysClockFreq+0x108>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	0e5b      	lsrs	r3, r3, #25
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	3301      	adds	r3, #1
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048ec:	69bb      	ldr	r3, [r7, #24]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3724      	adds	r7, #36	; 0x24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40021000 	.word	0x40021000
 8004900:	0800d110 	.word	0x0800d110
 8004904:	00f42400 	.word	0x00f42400
 8004908:	007a1200 	.word	0x007a1200

0800490c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <HAL_RCC_GetHCLKFreq+0x14>)
 8004912:	681b      	ldr	r3, [r3, #0]
}
 8004914:	4618      	mov	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	20000090 	.word	0x20000090

08004924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004928:	f7ff fff0 	bl	800490c <HAL_RCC_GetHCLKFreq>
 800492c:	4602      	mov	r2, r0
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	4904      	ldr	r1, [pc, #16]	; (800494c <HAL_RCC_GetPCLK1Freq+0x28>)
 800493a:	5ccb      	ldrb	r3, [r1, r3]
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004944:	4618      	mov	r0, r3
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40021000 	.word	0x40021000
 800494c:	0800d108 	.word	0x0800d108

08004950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004954:	f7ff ffda 	bl	800490c <HAL_RCC_GetHCLKFreq>
 8004958:	4602      	mov	r2, r0
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_RCC_GetPCLK2Freq+0x24>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	0adb      	lsrs	r3, r3, #11
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	4904      	ldr	r1, [pc, #16]	; (8004978 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004966:	5ccb      	ldrb	r3, [r1, r3]
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004970:	4618      	mov	r0, r3
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40021000 	.word	0x40021000
 8004978:	0800d108 	.word	0x0800d108

0800497c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004984:	2300      	movs	r3, #0
 8004986:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004988:	4b2a      	ldr	r3, [pc, #168]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800498a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004994:	f7ff f9b6 	bl	8003d04 <HAL_PWREx_GetVoltageRange>
 8004998:	6178      	str	r0, [r7, #20]
 800499a:	e014      	b.n	80049c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800499c:	4b25      	ldr	r3, [pc, #148]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800499e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a0:	4a24      	ldr	r2, [pc, #144]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a6:	6593      	str	r3, [r2, #88]	; 0x58
 80049a8:	4b22      	ldr	r3, [pc, #136]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049b4:	f7ff f9a6 	bl	8003d04 <HAL_PWREx_GetVoltageRange>
 80049b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049ba:	4b1e      	ldr	r3, [pc, #120]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049be:	4a1d      	ldr	r2, [pc, #116]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049cc:	d10b      	bne.n	80049e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b80      	cmp	r3, #128	; 0x80
 80049d2:	d919      	bls.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2ba0      	cmp	r3, #160	; 0xa0
 80049d8:	d902      	bls.n	80049e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049da:	2302      	movs	r3, #2
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	e013      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049e0:	2301      	movs	r3, #1
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	e010      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b80      	cmp	r3, #128	; 0x80
 80049ea:	d902      	bls.n	80049f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80049ec:	2303      	movs	r3, #3
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	e00a      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b80      	cmp	r3, #128	; 0x80
 80049f6:	d102      	bne.n	80049fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049f8:	2302      	movs	r3, #2
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	e004      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b70      	cmp	r3, #112	; 0x70
 8004a02:	d101      	bne.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a04:	2301      	movs	r3, #1
 8004a06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a08:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f023 0207 	bic.w	r2, r3, #7
 8004a10:	4909      	ldr	r1, [pc, #36]	; (8004a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a18:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d001      	beq.n	8004a2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000
 8004a38:	40022000 	.word	0x40022000

08004a3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a44:	2300      	movs	r3, #0
 8004a46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a48:	2300      	movs	r3, #0
 8004a4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d031      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a60:	d01a      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004a62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a66:	d814      	bhi.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d009      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a70:	d10f      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004a72:	4b5d      	ldr	r3, [pc, #372]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	4a5c      	ldr	r2, [pc, #368]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a7e:	e00c      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3304      	adds	r3, #4
 8004a84:	2100      	movs	r1, #0
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 f9de 	bl	8004e48 <RCCEx_PLLSAI1_Config>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a90:	e003      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	74fb      	strb	r3, [r7, #19]
      break;
 8004a96:	e000      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a9a:	7cfb      	ldrb	r3, [r7, #19]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004aa0:	4b51      	ldr	r3, [pc, #324]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	494e      	ldr	r1, [pc, #312]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ab6:	e001      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab8:	7cfb      	ldrb	r3, [r7, #19]
 8004aba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 809e 	beq.w	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aca:	2300      	movs	r3, #0
 8004acc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ace:	4b46      	ldr	r3, [pc, #280]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00d      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ae4:	4b40      	ldr	r3, [pc, #256]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae8:	4a3f      	ldr	r2, [pc, #252]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aee:	6593      	str	r3, [r2, #88]	; 0x58
 8004af0:	4b3d      	ldr	r3, [pc, #244]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004afc:	2301      	movs	r3, #1
 8004afe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b00:	4b3a      	ldr	r3, [pc, #232]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a39      	ldr	r2, [pc, #228]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b0c:	f7fd ffac 	bl	8002a68 <HAL_GetTick>
 8004b10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b12:	e009      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b14:	f7fd ffa8 	bl	8002a68 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d902      	bls.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	74fb      	strb	r3, [r7, #19]
        break;
 8004b26:	e005      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b28:	4b30      	ldr	r3, [pc, #192]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0ef      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004b34:	7cfb      	ldrb	r3, [r7, #19]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d15a      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b3a:	4b2b      	ldr	r3, [pc, #172]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01e      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d019      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b56:	4b24      	ldr	r3, [pc, #144]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b62:	4b21      	ldr	r3, [pc, #132]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	4a1f      	ldr	r2, [pc, #124]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b72:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	4a1b      	ldr	r2, [pc, #108]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b82:	4a19      	ldr	r2, [pc, #100]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d016      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fd ff68 	bl	8002a68 <HAL_GetTick>
 8004b98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b9a:	e00b      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b9c:	f7fd ff64 	bl	8002a68 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d902      	bls.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	74fb      	strb	r3, [r7, #19]
            break;
 8004bb2:	e006      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bb4:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0ec      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004bc2:	7cfb      	ldrb	r3, [r7, #19]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10b      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bc8:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd6:	4904      	ldr	r1, [pc, #16]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bde:	e009      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004be0:	7cfb      	ldrb	r3, [r7, #19]
 8004be2:	74bb      	strb	r3, [r7, #18]
 8004be4:	e006      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004be6:	bf00      	nop
 8004be8:	40021000 	.word	0x40021000
 8004bec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf0:	7cfb      	ldrb	r3, [r7, #19]
 8004bf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bf4:	7c7b      	ldrb	r3, [r7, #17]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d105      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfa:	4b8a      	ldr	r3, [pc, #552]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfe:	4a89      	ldr	r2, [pc, #548]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c12:	4b84      	ldr	r3, [pc, #528]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	f023 0203 	bic.w	r2, r3, #3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	4980      	ldr	r1, [pc, #512]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c34:	4b7b      	ldr	r3, [pc, #492]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3a:	f023 020c 	bic.w	r2, r3, #12
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	4978      	ldr	r1, [pc, #480]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c56:	4b73      	ldr	r3, [pc, #460]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	496f      	ldr	r1, [pc, #444]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c78:	4b6a      	ldr	r3, [pc, #424]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c86:	4967      	ldr	r1, [pc, #412]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c9a:	4b62      	ldr	r3, [pc, #392]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	495e      	ldr	r1, [pc, #376]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cbc:	4b59      	ldr	r3, [pc, #356]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cca:	4956      	ldr	r1, [pc, #344]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cde:	4b51      	ldr	r3, [pc, #324]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	494d      	ldr	r1, [pc, #308]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d028      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d00:	4b48      	ldr	r3, [pc, #288]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	4945      	ldr	r1, [pc, #276]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d1e:	d106      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d20:	4b40      	ldr	r3, [pc, #256]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	4a3f      	ldr	r2, [pc, #252]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d2a:	60d3      	str	r3, [r2, #12]
 8004d2c:	e011      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d36:	d10c      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 f882 	bl	8004e48 <RCCEx_PLLSAI1_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004d4e:	7cfb      	ldrb	r3, [r7, #19]
 8004d50:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d028      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d5e:	4b31      	ldr	r3, [pc, #196]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6c:	492d      	ldr	r1, [pc, #180]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d7c:	d106      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d7e:	4b29      	ldr	r3, [pc, #164]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	4a28      	ldr	r2, [pc, #160]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d88:	60d3      	str	r3, [r2, #12]
 8004d8a:	e011      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d94:	d10c      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 f853 	bl	8004e48 <RCCEx_PLLSAI1_Config>
 8004da2:	4603      	mov	r3, r0
 8004da4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004da6:	7cfb      	ldrb	r3, [r7, #19]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004dac:	7cfb      	ldrb	r3, [r7, #19]
 8004dae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01c      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dbc:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dca:	4916      	ldr	r1, [pc, #88]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dda:	d10c      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3304      	adds	r3, #4
 8004de0:	2102      	movs	r1, #2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 f830 	bl	8004e48 <RCCEx_PLLSAI1_Config>
 8004de8:	4603      	mov	r3, r0
 8004dea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dec:	7cfb      	ldrb	r3, [r7, #19]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004df2:	7cfb      	ldrb	r3, [r7, #19]
 8004df4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e02:	4b08      	ldr	r3, [pc, #32]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e08:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e10:	4904      	ldr	r1, [pc, #16]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e18:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40021000 	.word	0x40021000

08004e28 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a04      	ldr	r2, [pc, #16]	; (8004e44 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e32:	f043 0304 	orr.w	r3, r3, #4
 8004e36:	6013      	str	r3, [r2, #0]
}
 8004e38:	bf00      	nop
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	40021000 	.word	0x40021000

08004e48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e56:	4b74      	ldr	r3, [pc, #464]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d018      	beq.n	8004e94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e62:	4b71      	ldr	r3, [pc, #452]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f003 0203 	and.w	r2, r3, #3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d10d      	bne.n	8004e8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
       ||
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d009      	beq.n	8004e8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e7a:	4b6b      	ldr	r3, [pc, #428]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	091b      	lsrs	r3, r3, #4
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
       ||
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d047      	beq.n	8004f1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	73fb      	strb	r3, [r7, #15]
 8004e92:	e044      	b.n	8004f1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d018      	beq.n	8004ece <RCCEx_PLLSAI1_Config+0x86>
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d825      	bhi.n	8004eec <RCCEx_PLLSAI1_Config+0xa4>
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d002      	beq.n	8004eaa <RCCEx_PLLSAI1_Config+0x62>
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d009      	beq.n	8004ebc <RCCEx_PLLSAI1_Config+0x74>
 8004ea8:	e020      	b.n	8004eec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004eaa:	4b5f      	ldr	r3, [pc, #380]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d11d      	bne.n	8004ef2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eba:	e01a      	b.n	8004ef2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ebc:	4b5a      	ldr	r3, [pc, #360]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d116      	bne.n	8004ef6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ecc:	e013      	b.n	8004ef6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ece:	4b56      	ldr	r3, [pc, #344]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10f      	bne.n	8004efa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004eda:	4b53      	ldr	r3, [pc, #332]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d109      	bne.n	8004efa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004eea:	e006      	b.n	8004efa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef0:	e004      	b.n	8004efc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ef2:	bf00      	nop
 8004ef4:	e002      	b.n	8004efc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ef6:	bf00      	nop
 8004ef8:	e000      	b.n	8004efc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004efa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10d      	bne.n	8004f1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f02:	4b49      	ldr	r3, [pc, #292]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6819      	ldr	r1, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	430b      	orrs	r3, r1
 8004f18:	4943      	ldr	r1, [pc, #268]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d17c      	bne.n	800501e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f24:	4b40      	ldr	r3, [pc, #256]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a3f      	ldr	r2, [pc, #252]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f30:	f7fd fd9a 	bl	8002a68 <HAL_GetTick>
 8004f34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f36:	e009      	b.n	8004f4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f38:	f7fd fd96 	bl	8002a68 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d902      	bls.n	8004f4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	73fb      	strb	r3, [r7, #15]
        break;
 8004f4a:	e005      	b.n	8004f58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f4c:	4b36      	ldr	r3, [pc, #216]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1ef      	bne.n	8004f38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d15f      	bne.n	800501e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d110      	bne.n	8004f86 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f64:	4b30      	ldr	r3, [pc, #192]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004f6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6892      	ldr	r2, [r2, #8]
 8004f74:	0211      	lsls	r1, r2, #8
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	68d2      	ldr	r2, [r2, #12]
 8004f7a:	06d2      	lsls	r2, r2, #27
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	492a      	ldr	r1, [pc, #168]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	610b      	str	r3, [r1, #16]
 8004f84:	e027      	b.n	8004fd6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d112      	bne.n	8004fb2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f8c:	4b26      	ldr	r3, [pc, #152]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6892      	ldr	r2, [r2, #8]
 8004f9c:	0211      	lsls	r1, r2, #8
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6912      	ldr	r2, [r2, #16]
 8004fa2:	0852      	lsrs	r2, r2, #1
 8004fa4:	3a01      	subs	r2, #1
 8004fa6:	0552      	lsls	r2, r2, #21
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	491f      	ldr	r1, [pc, #124]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	610b      	str	r3, [r1, #16]
 8004fb0:	e011      	b.n	8004fd6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fb2:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6892      	ldr	r2, [r2, #8]
 8004fc2:	0211      	lsls	r1, r2, #8
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6952      	ldr	r2, [r2, #20]
 8004fc8:	0852      	lsrs	r2, r2, #1
 8004fca:	3a01      	subs	r2, #1
 8004fcc:	0652      	lsls	r2, r2, #25
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	4915      	ldr	r1, [pc, #84]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004fd6:	4b14      	ldr	r3, [pc, #80]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a13      	ldr	r2, [pc, #76]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fe0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe2:	f7fd fd41 	bl	8002a68 <HAL_GetTick>
 8004fe6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fe8:	e009      	b.n	8004ffe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fea:	f7fd fd3d 	bl	8002a68 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d902      	bls.n	8004ffe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	73fb      	strb	r3, [r7, #15]
          break;
 8004ffc:	e005      	b.n	800500a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ffe:	4b0a      	ldr	r3, [pc, #40]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0ef      	beq.n	8004fea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800500a:	7bfb      	ldrb	r3, [r7, #15]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005010:	4b05      	ldr	r3, [pc, #20]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	4903      	ldr	r1, [pc, #12]	; (8005028 <RCCEx_PLLSAI1_Config+0x1e0>)
 800501a:	4313      	orrs	r3, r2
 800501c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800501e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40021000 	.word	0x40021000

0800502c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e049      	b.n	80050d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d106      	bne.n	8005058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fd fa8a 	bl	800256c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3304      	adds	r3, #4
 8005068:	4619      	mov	r1, r3
 800506a:	4610      	mov	r0, r2
 800506c:	f000 fa9a 	bl	80055a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d001      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e03b      	b.n	800516c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a19      	ldr	r2, [pc, #100]	; (8005178 <HAL_TIM_Base_Start_IT+0x9c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d009      	beq.n	800512a <HAL_TIM_Base_Start_IT+0x4e>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511e:	d004      	beq.n	800512a <HAL_TIM_Base_Start_IT+0x4e>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a15      	ldr	r2, [pc, #84]	; (800517c <HAL_TIM_Base_Start_IT+0xa0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d115      	bne.n	8005156 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	4b13      	ldr	r3, [pc, #76]	; (8005180 <HAL_TIM_Base_Start_IT+0xa4>)
 8005132:	4013      	ands	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b06      	cmp	r3, #6
 800513a:	d015      	beq.n	8005168 <HAL_TIM_Base_Start_IT+0x8c>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005142:	d011      	beq.n	8005168 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005154:	e008      	b.n	8005168 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0201 	orr.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	e000      	b.n	800516a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005168:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	40012c00 	.word	0x40012c00
 800517c:	40014000 	.word	0x40014000
 8005180:	00010007 	.word	0x00010007

08005184 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b02      	cmp	r3, #2
 8005198:	d122      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d11b      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0202 	mvn.w	r2, #2
 80051b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f9ce 	bl	8005568 <HAL_TIM_IC_CaptureCallback>
 80051cc:	e005      	b.n	80051da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f9c0 	bl	8005554 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f9d1 	bl	800557c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d122      	bne.n	8005234 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d11b      	bne.n	8005234 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0204 	mvn.w	r2, #4
 8005204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2202      	movs	r2, #2
 800520a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f9a4 	bl	8005568 <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f996 	bl	8005554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f9a7 	bl	800557c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b08      	cmp	r3, #8
 8005240:	d122      	bne.n	8005288 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b08      	cmp	r3, #8
 800524e:	d11b      	bne.n	8005288 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0208 	mvn.w	r2, #8
 8005258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2204      	movs	r2, #4
 800525e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f97a 	bl	8005568 <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f96c 	bl	8005554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f97d 	bl	800557c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b10      	cmp	r3, #16
 8005294:	d122      	bne.n	80052dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b10      	cmp	r3, #16
 80052a2:	d11b      	bne.n	80052dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0210 	mvn.w	r2, #16
 80052ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2208      	movs	r2, #8
 80052b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f950 	bl	8005568 <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f942 	bl	8005554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f953 	bl	800557c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d10e      	bne.n	8005308 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d107      	bne.n	8005308 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0201 	mvn.w	r2, #1
 8005300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fc fd0c 	bl	8001d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005312:	2b80      	cmp	r3, #128	; 0x80
 8005314:	d10e      	bne.n	8005334 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005320:	2b80      	cmp	r3, #128	; 0x80
 8005322:	d107      	bne.n	8005334 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800532c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 faa6 	bl	8005880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005342:	d10e      	bne.n	8005362 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534e:	2b80      	cmp	r3, #128	; 0x80
 8005350:	d107      	bne.n	8005362 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800535a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fa99 	bl	8005894 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536c:	2b40      	cmp	r3, #64	; 0x40
 800536e:	d10e      	bne.n	800538e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537a:	2b40      	cmp	r3, #64	; 0x40
 800537c:	d107      	bne.n	800538e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f901 	bl	8005590 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f003 0320 	and.w	r3, r3, #32
 8005398:	2b20      	cmp	r3, #32
 800539a:	d10e      	bne.n	80053ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d107      	bne.n	80053ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f06f 0220 	mvn.w	r2, #32
 80053b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fa59 	bl	800586c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053ba:	bf00      	nop
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b084      	sub	sp, #16
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <HAL_TIM_ConfigClockSource+0x1c>
 80053da:	2302      	movs	r3, #2
 80053dc:	e0b6      	b.n	800554c <HAL_TIM_ConfigClockSource+0x18a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2202      	movs	r2, #2
 80053ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053fc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005400:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005408:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800541a:	d03e      	beq.n	800549a <HAL_TIM_ConfigClockSource+0xd8>
 800541c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005420:	f200 8087 	bhi.w	8005532 <HAL_TIM_ConfigClockSource+0x170>
 8005424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005428:	f000 8086 	beq.w	8005538 <HAL_TIM_ConfigClockSource+0x176>
 800542c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005430:	d87f      	bhi.n	8005532 <HAL_TIM_ConfigClockSource+0x170>
 8005432:	2b70      	cmp	r3, #112	; 0x70
 8005434:	d01a      	beq.n	800546c <HAL_TIM_ConfigClockSource+0xaa>
 8005436:	2b70      	cmp	r3, #112	; 0x70
 8005438:	d87b      	bhi.n	8005532 <HAL_TIM_ConfigClockSource+0x170>
 800543a:	2b60      	cmp	r3, #96	; 0x60
 800543c:	d050      	beq.n	80054e0 <HAL_TIM_ConfigClockSource+0x11e>
 800543e:	2b60      	cmp	r3, #96	; 0x60
 8005440:	d877      	bhi.n	8005532 <HAL_TIM_ConfigClockSource+0x170>
 8005442:	2b50      	cmp	r3, #80	; 0x50
 8005444:	d03c      	beq.n	80054c0 <HAL_TIM_ConfigClockSource+0xfe>
 8005446:	2b50      	cmp	r3, #80	; 0x50
 8005448:	d873      	bhi.n	8005532 <HAL_TIM_ConfigClockSource+0x170>
 800544a:	2b40      	cmp	r3, #64	; 0x40
 800544c:	d058      	beq.n	8005500 <HAL_TIM_ConfigClockSource+0x13e>
 800544e:	2b40      	cmp	r3, #64	; 0x40
 8005450:	d86f      	bhi.n	8005532 <HAL_TIM_ConfigClockSource+0x170>
 8005452:	2b30      	cmp	r3, #48	; 0x30
 8005454:	d064      	beq.n	8005520 <HAL_TIM_ConfigClockSource+0x15e>
 8005456:	2b30      	cmp	r3, #48	; 0x30
 8005458:	d86b      	bhi.n	8005532 <HAL_TIM_ConfigClockSource+0x170>
 800545a:	2b20      	cmp	r3, #32
 800545c:	d060      	beq.n	8005520 <HAL_TIM_ConfigClockSource+0x15e>
 800545e:	2b20      	cmp	r3, #32
 8005460:	d867      	bhi.n	8005532 <HAL_TIM_ConfigClockSource+0x170>
 8005462:	2b00      	cmp	r3, #0
 8005464:	d05c      	beq.n	8005520 <HAL_TIM_ConfigClockSource+0x15e>
 8005466:	2b10      	cmp	r3, #16
 8005468:	d05a      	beq.n	8005520 <HAL_TIM_ConfigClockSource+0x15e>
 800546a:	e062      	b.n	8005532 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6818      	ldr	r0, [r3, #0]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	6899      	ldr	r1, [r3, #8]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f000 f970 	bl	8005760 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800548e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	609a      	str	r2, [r3, #8]
      break;
 8005498:	e04f      	b.n	800553a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6899      	ldr	r1, [r3, #8]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f000 f959 	bl	8005760 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054bc:	609a      	str	r2, [r3, #8]
      break;
 80054be:	e03c      	b.n	800553a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6818      	ldr	r0, [r3, #0]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	6859      	ldr	r1, [r3, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	461a      	mov	r2, r3
 80054ce:	f000 f8cd 	bl	800566c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2150      	movs	r1, #80	; 0x50
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 f926 	bl	800572a <TIM_ITRx_SetConfig>
      break;
 80054de:	e02c      	b.n	800553a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6818      	ldr	r0, [r3, #0]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	6859      	ldr	r1, [r3, #4]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	461a      	mov	r2, r3
 80054ee:	f000 f8ec 	bl	80056ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2160      	movs	r1, #96	; 0x60
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 f916 	bl	800572a <TIM_ITRx_SetConfig>
      break;
 80054fe:	e01c      	b.n	800553a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6818      	ldr	r0, [r3, #0]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	6859      	ldr	r1, [r3, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	461a      	mov	r2, r3
 800550e:	f000 f8ad 	bl	800566c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2140      	movs	r1, #64	; 0x40
 8005518:	4618      	mov	r0, r3
 800551a:	f000 f906 	bl	800572a <TIM_ITRx_SetConfig>
      break;
 800551e:	e00c      	b.n	800553a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4619      	mov	r1, r3
 800552a:	4610      	mov	r0, r2
 800552c:	f000 f8fd 	bl	800572a <TIM_ITRx_SetConfig>
      break;
 8005530:	e003      	b.n	800553a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	73fb      	strb	r3, [r7, #15]
      break;
 8005536:	e000      	b.n	800553a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005538:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800554a:	7bfb      	ldrb	r3, [r7, #15]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a2a      	ldr	r2, [pc, #168]	; (8005660 <TIM_Base_SetConfig+0xbc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d003      	beq.n	80055c4 <TIM_Base_SetConfig+0x20>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c2:	d108      	bne.n	80055d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a21      	ldr	r2, [pc, #132]	; (8005660 <TIM_Base_SetConfig+0xbc>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00b      	beq.n	80055f6 <TIM_Base_SetConfig+0x52>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e4:	d007      	beq.n	80055f6 <TIM_Base_SetConfig+0x52>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a1e      	ldr	r2, [pc, #120]	; (8005664 <TIM_Base_SetConfig+0xc0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d003      	beq.n	80055f6 <TIM_Base_SetConfig+0x52>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a1d      	ldr	r2, [pc, #116]	; (8005668 <TIM_Base_SetConfig+0xc4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d108      	bne.n	8005608 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a0c      	ldr	r2, [pc, #48]	; (8005660 <TIM_Base_SetConfig+0xbc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d007      	beq.n	8005644 <TIM_Base_SetConfig+0xa0>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a0b      	ldr	r2, [pc, #44]	; (8005664 <TIM_Base_SetConfig+0xc0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_Base_SetConfig+0xa0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a0a      	ldr	r2, [pc, #40]	; (8005668 <TIM_Base_SetConfig+0xc4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d103      	bne.n	800564c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	615a      	str	r2, [r3, #20]
}
 8005652:	bf00      	nop
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40012c00 	.word	0x40012c00
 8005664:	40014000 	.word	0x40014000
 8005668:	40014400 	.word	0x40014400

0800566c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	f023 0201 	bic.w	r2, r3, #1
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4313      	orrs	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f023 030a 	bic.w	r3, r3, #10
 80056a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	621a      	str	r2, [r3, #32]
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b087      	sub	sp, #28
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	60f8      	str	r0, [r7, #12]
 80056d2:	60b9      	str	r1, [r7, #8]
 80056d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	f023 0210 	bic.w	r2, r3, #16
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	031b      	lsls	r3, r3, #12
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005706:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	621a      	str	r2, [r3, #32]
}
 800571e:	bf00      	nop
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800572a:	b480      	push	{r7}
 800572c:	b085      	sub	sp, #20
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005740:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	f043 0307 	orr.w	r3, r3, #7
 800574c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	609a      	str	r2, [r3, #8]
}
 8005754:	bf00      	nop
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800577a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	021a      	lsls	r2, r3, #8
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	431a      	orrs	r2, r3
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	4313      	orrs	r3, r2
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	609a      	str	r2, [r3, #8]
}
 8005794:	bf00      	nop
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e04f      	b.n	8005858 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a21      	ldr	r2, [pc, #132]	; (8005864 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d108      	bne.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a14      	ldr	r2, [pc, #80]	; (8005864 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d009      	beq.n	800582c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005820:	d004      	beq.n	800582c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a10      	ldr	r2, [pc, #64]	; (8005868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d10c      	bne.n	8005846 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005832:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	4313      	orrs	r3, r2
 800583c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	40012c00 	.word	0x40012c00
 8005868:	40014000 	.word	0x40014000

0800586c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e040      	b.n	800593c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d106      	bne.n	80058d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7fc fe72 	bl	80025b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2224      	movs	r2, #36	; 0x24
 80058d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0201 	bic.w	r2, r2, #1
 80058e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fc18 	bl	800611c <UART_SetConfig>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e022      	b.n	800593c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fe38 	bl	8006574 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0201 	orr.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 febf 	bl	80066b8 <UART_CheckIdleState>
 800593a:	4603      	mov	r3, r0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08a      	sub	sp, #40	; 0x28
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	603b      	str	r3, [r7, #0]
 8005950:	4613      	mov	r3, r2
 8005952:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005958:	2b20      	cmp	r3, #32
 800595a:	f040 8082 	bne.w	8005a62 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <HAL_UART_Transmit+0x26>
 8005964:	88fb      	ldrh	r3, [r7, #6]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e07a      	b.n	8005a64 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_UART_Transmit+0x38>
 8005978:	2302      	movs	r3, #2
 800597a:	e073      	b.n	8005a64 <HAL_UART_Transmit+0x120>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2221      	movs	r2, #33	; 0x21
 8005990:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005992:	f7fd f869 	bl	8002a68 <HAL_GetTick>
 8005996:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	88fa      	ldrh	r2, [r7, #6]
 800599c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	88fa      	ldrh	r2, [r7, #6]
 80059a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b0:	d108      	bne.n	80059c4 <HAL_UART_Transmit+0x80>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d104      	bne.n	80059c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	e003      	b.n	80059cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80059d4:	e02d      	b.n	8005a32 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2200      	movs	r2, #0
 80059de:	2180      	movs	r1, #128	; 0x80
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 feb2 	bl	800674a <UART_WaitOnFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e039      	b.n	8005a64 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10b      	bne.n	8005a0e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	881a      	ldrh	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a02:	b292      	uxth	r2, r2
 8005a04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	3302      	adds	r3, #2
 8005a0a:	61bb      	str	r3, [r7, #24]
 8005a0c:	e008      	b.n	8005a20 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	781a      	ldrb	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	b292      	uxth	r2, r2
 8005a18:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1cb      	bne.n	80059d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2200      	movs	r2, #0
 8005a46:	2140      	movs	r1, #64	; 0x40
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 fe7e 	bl	800674a <UART_WaitOnFlagUntilTimeout>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e005      	b.n	8005a64 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e000      	b.n	8005a64 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005a62:	2302      	movs	r3, #2
  }
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3720      	adds	r7, #32
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08a      	sub	sp, #40	; 0x28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	4613      	mov	r3, r2
 8005a78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	d142      	bne.n	8005b08 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <HAL_UART_Receive_IT+0x22>
 8005a88:	88fb      	ldrh	r3, [r7, #6]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e03b      	b.n	8005b0a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_UART_Receive_IT+0x34>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e034      	b.n	8005b0a <HAL_UART_Receive_IT+0x9e>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a18      	ldr	r2, [pc, #96]	; (8005b14 <HAL_UART_Receive_IT+0xa8>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d01f      	beq.n	8005af8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d018      	beq.n	8005af8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	e853 3f00 	ldrex	r3, [r3]
 8005ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	623b      	str	r3, [r7, #32]
 8005ae6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae8:	69f9      	ldr	r1, [r7, #28]
 8005aea:	6a3a      	ldr	r2, [r7, #32]
 8005aec:	e841 2300 	strex	r3, r2, [r1]
 8005af0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1e6      	bne.n	8005ac6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	461a      	mov	r2, r3
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 fee8 	bl	80068d4 <UART_Start_Receive_IT>
 8005b04:	4603      	mov	r3, r0
 8005b06:	e000      	b.n	8005b0a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005b08:	2302      	movs	r3, #2
  }
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3728      	adds	r7, #40	; 0x28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	40008000 	.word	0x40008000

08005b18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b0ba      	sub	sp, #232	; 0xe8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005b42:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b46:	4013      	ands	r3, r2
 8005b48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005b4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d115      	bne.n	8005b80 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00f      	beq.n	8005b80 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b64:	f003 0320 	and.w	r3, r3, #32
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d009      	beq.n	8005b80 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 82a6 	beq.w	80060c2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	4798      	blx	r3
      }
      return;
 8005b7e:	e2a0      	b.n	80060c2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005b80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 8117 	beq.w	8005db8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005b96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b9a:	4b85      	ldr	r3, [pc, #532]	; (8005db0 <HAL_UART_IRQHandler+0x298>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 810a 	beq.w	8005db8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d011      	beq.n	8005bd4 <HAL_UART_IRQHandler+0xbc>
 8005bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00b      	beq.n	8005bd4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bca:	f043 0201 	orr.w	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d011      	beq.n	8005c04 <HAL_UART_IRQHandler+0xec>
 8005be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00b      	beq.n	8005c04 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bfa:	f043 0204 	orr.w	r2, r3, #4
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d011      	beq.n	8005c34 <HAL_UART_IRQHandler+0x11c>
 8005c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00b      	beq.n	8005c34 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2204      	movs	r2, #4
 8005c22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c2a:	f043 0202 	orr.w	r2, r3, #2
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d017      	beq.n	8005c70 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c44:	f003 0320 	and.w	r3, r3, #32
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d105      	bne.n	8005c58 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005c4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c50:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00b      	beq.n	8005c70 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2208      	movs	r2, #8
 8005c5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c66:	f043 0208 	orr.w	r2, r3, #8
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d012      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x18a>
 8005c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00c      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c98:	f043 0220 	orr.w	r2, r3, #32
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 820c 	beq.w	80060c6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb2:	f003 0320 	and.w	r3, r3, #32
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00d      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d007      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cea:	2b40      	cmp	r3, #64	; 0x40
 8005cec:	d005      	beq.n	8005cfa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d04f      	beq.n	8005d9a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 feb4 	bl	8006a68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d141      	bne.n	8005d92 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3308      	adds	r3, #8
 8005d14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3308      	adds	r3, #8
 8005d36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1d9      	bne.n	8005d0e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d013      	beq.n	8005d8a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d66:	4a13      	ldr	r2, [pc, #76]	; (8005db4 <HAL_UART_IRQHandler+0x29c>)
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fc fff9 	bl	8002d66 <HAL_DMA_Abort_IT>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d017      	beq.n	8005daa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005d84:	4610      	mov	r0, r2
 8005d86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d88:	e00f      	b.n	8005daa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f9b0 	bl	80060f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d90:	e00b      	b.n	8005daa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f9ac 	bl	80060f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d98:	e007      	b.n	8005daa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f9a8 	bl	80060f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005da8:	e18d      	b.n	80060c6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005daa:	bf00      	nop
    return;
 8005dac:	e18b      	b.n	80060c6 <HAL_UART_IRQHandler+0x5ae>
 8005dae:	bf00      	nop
 8005db0:	04000120 	.word	0x04000120
 8005db4:	08006b2f 	.word	0x08006b2f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	f040 8146 	bne.w	800604e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc6:	f003 0310 	and.w	r3, r3, #16
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 813f 	beq.w	800604e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 8138 	beq.w	800604e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2210      	movs	r2, #16
 8005de4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df0:	2b40      	cmp	r3, #64	; 0x40
 8005df2:	f040 80b4 	bne.w	8005f5e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 815f 	beq.w	80060ca <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e16:	429a      	cmp	r2, r3
 8005e18:	f080 8157 	bcs.w	80060ca <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f040 8085 	bne.w	8005f42 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e44:	e853 3f00 	ldrex	r3, [r3]
 8005e48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1da      	bne.n	8005e38 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3308      	adds	r3, #8
 8005e88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e8c:	e853 3f00 	ldrex	r3, [r3]
 8005e90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e94:	f023 0301 	bic.w	r3, r3, #1
 8005e98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ea6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005eaa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005eae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1e1      	bne.n	8005e82 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3308      	adds	r3, #8
 8005ede:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ee2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ee4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ee8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e3      	bne.n	8005ebe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f12:	f023 0310 	bic.w	r3, r3, #16
 8005f16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f24:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f26:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f2c:	e841 2300 	strex	r3, r2, [r1]
 8005f30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e4      	bne.n	8005f02 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fc fed4 	bl	8002cea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f8d4 	bl	8006104 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f5c:	e0b5      	b.n	80060ca <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 80a7 	beq.w	80060ce <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005f80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 80a2 	beq.w	80060ce <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fac:	647b      	str	r3, [r7, #68]	; 0x44
 8005fae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fb4:	e841 2300 	strex	r3, r2, [r1]
 8005fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1e4      	bne.n	8005f8a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3308      	adds	r3, #8
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	e853 3f00 	ldrex	r3, [r3]
 8005fce:	623b      	str	r3, [r7, #32]
   return(result);
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	f023 0301 	bic.w	r3, r3, #1
 8005fd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3308      	adds	r3, #8
 8005fe0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fe4:	633a      	str	r2, [r7, #48]	; 0x30
 8005fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fec:	e841 2300 	strex	r3, r2, [r1]
 8005ff0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e3      	bne.n	8005fc0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	e853 3f00 	ldrex	r3, [r3]
 8006016:	60fb      	str	r3, [r7, #12]
   return(result);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0310 	bic.w	r3, r3, #16
 800601e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800602c:	61fb      	str	r3, [r7, #28]
 800602e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	69b9      	ldr	r1, [r7, #24]
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	617b      	str	r3, [r7, #20]
   return(result);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e4      	bne.n	800600a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006040:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f85c 	bl	8006104 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800604c:	e03f      	b.n	80060ce <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800604e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00e      	beq.n	8006078 <HAL_UART_IRQHandler+0x560>
 800605a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800605e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d008      	beq.n	8006078 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800606e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fefc 	bl	8006e6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006076:	e02d      	b.n	80060d4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00e      	beq.n	80060a2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608c:	2b00      	cmp	r3, #0
 800608e:	d008      	beq.n	80060a2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006094:	2b00      	cmp	r3, #0
 8006096:	d01c      	beq.n	80060d2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	4798      	blx	r3
    }
    return;
 80060a0:	e017      	b.n	80060d2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d012      	beq.n	80060d4 <HAL_UART_IRQHandler+0x5bc>
 80060ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00c      	beq.n	80060d4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fd4d 	bl	8006b5a <UART_EndTransmit_IT>
    return;
 80060c0:	e008      	b.n	80060d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80060c2:	bf00      	nop
 80060c4:	e006      	b.n	80060d4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80060c6:	bf00      	nop
 80060c8:	e004      	b.n	80060d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80060ca:	bf00      	nop
 80060cc:	e002      	b.n	80060d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80060ce:	bf00      	nop
 80060d0:	e000      	b.n	80060d4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80060d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80060d4:	37e8      	adds	r7, #232	; 0xe8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop

080060dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800611c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006120:	b08a      	sub	sp, #40	; 0x28
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	431a      	orrs	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	431a      	orrs	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	4313      	orrs	r3, r2
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	4bb4      	ldr	r3, [pc, #720]	; (800641c <UART_SetConfig+0x300>)
 800614c:	4013      	ands	r3, r2
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	6812      	ldr	r2, [r2, #0]
 8006152:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006154:	430b      	orrs	r3, r1
 8006156:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	68da      	ldr	r2, [r3, #12]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4aa9      	ldr	r2, [pc, #676]	; (8006420 <UART_SetConfig+0x304>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d004      	beq.n	8006188 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006184:	4313      	orrs	r3, r2
 8006186:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006198:	430a      	orrs	r2, r1
 800619a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4aa0      	ldr	r2, [pc, #640]	; (8006424 <UART_SetConfig+0x308>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d126      	bne.n	80061f4 <UART_SetConfig+0xd8>
 80061a6:	4ba0      	ldr	r3, [pc, #640]	; (8006428 <UART_SetConfig+0x30c>)
 80061a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ac:	f003 0303 	and.w	r3, r3, #3
 80061b0:	2b03      	cmp	r3, #3
 80061b2:	d81b      	bhi.n	80061ec <UART_SetConfig+0xd0>
 80061b4:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <UART_SetConfig+0xa0>)
 80061b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ba:	bf00      	nop
 80061bc:	080061cd 	.word	0x080061cd
 80061c0:	080061dd 	.word	0x080061dd
 80061c4:	080061d5 	.word	0x080061d5
 80061c8:	080061e5 	.word	0x080061e5
 80061cc:	2301      	movs	r3, #1
 80061ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061d2:	e080      	b.n	80062d6 <UART_SetConfig+0x1ba>
 80061d4:	2302      	movs	r3, #2
 80061d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061da:	e07c      	b.n	80062d6 <UART_SetConfig+0x1ba>
 80061dc:	2304      	movs	r3, #4
 80061de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061e2:	e078      	b.n	80062d6 <UART_SetConfig+0x1ba>
 80061e4:	2308      	movs	r3, #8
 80061e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ea:	e074      	b.n	80062d6 <UART_SetConfig+0x1ba>
 80061ec:	2310      	movs	r3, #16
 80061ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f2:	e070      	b.n	80062d6 <UART_SetConfig+0x1ba>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a8c      	ldr	r2, [pc, #560]	; (800642c <UART_SetConfig+0x310>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d138      	bne.n	8006270 <UART_SetConfig+0x154>
 80061fe:	4b8a      	ldr	r3, [pc, #552]	; (8006428 <UART_SetConfig+0x30c>)
 8006200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006204:	f003 030c 	and.w	r3, r3, #12
 8006208:	2b0c      	cmp	r3, #12
 800620a:	d82d      	bhi.n	8006268 <UART_SetConfig+0x14c>
 800620c:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <UART_SetConfig+0xf8>)
 800620e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006212:	bf00      	nop
 8006214:	08006249 	.word	0x08006249
 8006218:	08006269 	.word	0x08006269
 800621c:	08006269 	.word	0x08006269
 8006220:	08006269 	.word	0x08006269
 8006224:	08006259 	.word	0x08006259
 8006228:	08006269 	.word	0x08006269
 800622c:	08006269 	.word	0x08006269
 8006230:	08006269 	.word	0x08006269
 8006234:	08006251 	.word	0x08006251
 8006238:	08006269 	.word	0x08006269
 800623c:	08006269 	.word	0x08006269
 8006240:	08006269 	.word	0x08006269
 8006244:	08006261 	.word	0x08006261
 8006248:	2300      	movs	r3, #0
 800624a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800624e:	e042      	b.n	80062d6 <UART_SetConfig+0x1ba>
 8006250:	2302      	movs	r3, #2
 8006252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006256:	e03e      	b.n	80062d6 <UART_SetConfig+0x1ba>
 8006258:	2304      	movs	r3, #4
 800625a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800625e:	e03a      	b.n	80062d6 <UART_SetConfig+0x1ba>
 8006260:	2308      	movs	r3, #8
 8006262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006266:	e036      	b.n	80062d6 <UART_SetConfig+0x1ba>
 8006268:	2310      	movs	r3, #16
 800626a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800626e:	e032      	b.n	80062d6 <UART_SetConfig+0x1ba>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a6a      	ldr	r2, [pc, #424]	; (8006420 <UART_SetConfig+0x304>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d12a      	bne.n	80062d0 <UART_SetConfig+0x1b4>
 800627a:	4b6b      	ldr	r3, [pc, #428]	; (8006428 <UART_SetConfig+0x30c>)
 800627c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006280:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006284:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006288:	d01a      	beq.n	80062c0 <UART_SetConfig+0x1a4>
 800628a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800628e:	d81b      	bhi.n	80062c8 <UART_SetConfig+0x1ac>
 8006290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006294:	d00c      	beq.n	80062b0 <UART_SetConfig+0x194>
 8006296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800629a:	d815      	bhi.n	80062c8 <UART_SetConfig+0x1ac>
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <UART_SetConfig+0x18c>
 80062a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a4:	d008      	beq.n	80062b8 <UART_SetConfig+0x19c>
 80062a6:	e00f      	b.n	80062c8 <UART_SetConfig+0x1ac>
 80062a8:	2300      	movs	r3, #0
 80062aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ae:	e012      	b.n	80062d6 <UART_SetConfig+0x1ba>
 80062b0:	2302      	movs	r3, #2
 80062b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062b6:	e00e      	b.n	80062d6 <UART_SetConfig+0x1ba>
 80062b8:	2304      	movs	r3, #4
 80062ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062be:	e00a      	b.n	80062d6 <UART_SetConfig+0x1ba>
 80062c0:	2308      	movs	r3, #8
 80062c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062c6:	e006      	b.n	80062d6 <UART_SetConfig+0x1ba>
 80062c8:	2310      	movs	r3, #16
 80062ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ce:	e002      	b.n	80062d6 <UART_SetConfig+0x1ba>
 80062d0:	2310      	movs	r3, #16
 80062d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a51      	ldr	r2, [pc, #324]	; (8006420 <UART_SetConfig+0x304>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d17a      	bne.n	80063d6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d824      	bhi.n	8006332 <UART_SetConfig+0x216>
 80062e8:	a201      	add	r2, pc, #4	; (adr r2, 80062f0 <UART_SetConfig+0x1d4>)
 80062ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ee:	bf00      	nop
 80062f0:	08006315 	.word	0x08006315
 80062f4:	08006333 	.word	0x08006333
 80062f8:	0800631d 	.word	0x0800631d
 80062fc:	08006333 	.word	0x08006333
 8006300:	08006323 	.word	0x08006323
 8006304:	08006333 	.word	0x08006333
 8006308:	08006333 	.word	0x08006333
 800630c:	08006333 	.word	0x08006333
 8006310:	0800632b 	.word	0x0800632b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006314:	f7fe fb06 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 8006318:	61f8      	str	r0, [r7, #28]
        break;
 800631a:	e010      	b.n	800633e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800631c:	4b44      	ldr	r3, [pc, #272]	; (8006430 <UART_SetConfig+0x314>)
 800631e:	61fb      	str	r3, [r7, #28]
        break;
 8006320:	e00d      	b.n	800633e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006322:	f7fe fa67 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 8006326:	61f8      	str	r0, [r7, #28]
        break;
 8006328:	e009      	b.n	800633e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800632a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800632e:	61fb      	str	r3, [r7, #28]
        break;
 8006330:	e005      	b.n	800633e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800633c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 8107 	beq.w	8006554 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	4613      	mov	r3, r2
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	4413      	add	r3, r2
 8006350:	69fa      	ldr	r2, [r7, #28]
 8006352:	429a      	cmp	r2, r3
 8006354:	d305      	bcc.n	8006362 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800635c:	69fa      	ldr	r2, [r7, #28]
 800635e:	429a      	cmp	r2, r3
 8006360:	d903      	bls.n	800636a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006368:	e0f4      	b.n	8006554 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	2200      	movs	r2, #0
 800636e:	461c      	mov	r4, r3
 8006370:	4615      	mov	r5, r2
 8006372:	f04f 0200 	mov.w	r2, #0
 8006376:	f04f 0300 	mov.w	r3, #0
 800637a:	022b      	lsls	r3, r5, #8
 800637c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006380:	0222      	lsls	r2, r4, #8
 8006382:	68f9      	ldr	r1, [r7, #12]
 8006384:	6849      	ldr	r1, [r1, #4]
 8006386:	0849      	lsrs	r1, r1, #1
 8006388:	2000      	movs	r0, #0
 800638a:	4688      	mov	r8, r1
 800638c:	4681      	mov	r9, r0
 800638e:	eb12 0a08 	adds.w	sl, r2, r8
 8006392:	eb43 0b09 	adc.w	fp, r3, r9
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	603b      	str	r3, [r7, #0]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063a4:	4650      	mov	r0, sl
 80063a6:	4659      	mov	r1, fp
 80063a8:	f7fa fc6e 	bl	8000c88 <__aeabi_uldivmod>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4613      	mov	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063ba:	d308      	bcc.n	80063ce <UART_SetConfig+0x2b2>
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063c2:	d204      	bcs.n	80063ce <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	60da      	str	r2, [r3, #12]
 80063cc:	e0c2      	b.n	8006554 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063d4:	e0be      	b.n	8006554 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063de:	d16a      	bne.n	80064b6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80063e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d834      	bhi.n	8006452 <UART_SetConfig+0x336>
 80063e8:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <UART_SetConfig+0x2d4>)
 80063ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ee:	bf00      	nop
 80063f0:	08006415 	.word	0x08006415
 80063f4:	08006435 	.word	0x08006435
 80063f8:	0800643d 	.word	0x0800643d
 80063fc:	08006453 	.word	0x08006453
 8006400:	08006443 	.word	0x08006443
 8006404:	08006453 	.word	0x08006453
 8006408:	08006453 	.word	0x08006453
 800640c:	08006453 	.word	0x08006453
 8006410:	0800644b 	.word	0x0800644b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006414:	f7fe fa86 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 8006418:	61f8      	str	r0, [r7, #28]
        break;
 800641a:	e020      	b.n	800645e <UART_SetConfig+0x342>
 800641c:	efff69f3 	.word	0xefff69f3
 8006420:	40008000 	.word	0x40008000
 8006424:	40013800 	.word	0x40013800
 8006428:	40021000 	.word	0x40021000
 800642c:	40004400 	.word	0x40004400
 8006430:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006434:	f7fe fa8c 	bl	8004950 <HAL_RCC_GetPCLK2Freq>
 8006438:	61f8      	str	r0, [r7, #28]
        break;
 800643a:	e010      	b.n	800645e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800643c:	4b4c      	ldr	r3, [pc, #304]	; (8006570 <UART_SetConfig+0x454>)
 800643e:	61fb      	str	r3, [r7, #28]
        break;
 8006440:	e00d      	b.n	800645e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006442:	f7fe f9d7 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 8006446:	61f8      	str	r0, [r7, #28]
        break;
 8006448:	e009      	b.n	800645e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800644a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800644e:	61fb      	str	r3, [r7, #28]
        break;
 8006450:	e005      	b.n	800645e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800645c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d077      	beq.n	8006554 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	005a      	lsls	r2, r3, #1
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	085b      	lsrs	r3, r3, #1
 800646e:	441a      	add	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	fbb2 f3f3 	udiv	r3, r2, r3
 8006478:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	2b0f      	cmp	r3, #15
 800647e:	d916      	bls.n	80064ae <UART_SetConfig+0x392>
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006486:	d212      	bcs.n	80064ae <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	b29b      	uxth	r3, r3
 800648c:	f023 030f 	bic.w	r3, r3, #15
 8006490:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	085b      	lsrs	r3, r3, #1
 8006496:	b29b      	uxth	r3, r3
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	b29a      	uxth	r2, r3
 800649e:	8afb      	ldrh	r3, [r7, #22]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	8afa      	ldrh	r2, [r7, #22]
 80064aa:	60da      	str	r2, [r3, #12]
 80064ac:	e052      	b.n	8006554 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80064b4:	e04e      	b.n	8006554 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064ba:	2b08      	cmp	r3, #8
 80064bc:	d827      	bhi.n	800650e <UART_SetConfig+0x3f2>
 80064be:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <UART_SetConfig+0x3a8>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064e9 	.word	0x080064e9
 80064c8:	080064f1 	.word	0x080064f1
 80064cc:	080064f9 	.word	0x080064f9
 80064d0:	0800650f 	.word	0x0800650f
 80064d4:	080064ff 	.word	0x080064ff
 80064d8:	0800650f 	.word	0x0800650f
 80064dc:	0800650f 	.word	0x0800650f
 80064e0:	0800650f 	.word	0x0800650f
 80064e4:	08006507 	.word	0x08006507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e8:	f7fe fa1c 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 80064ec:	61f8      	str	r0, [r7, #28]
        break;
 80064ee:	e014      	b.n	800651a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064f0:	f7fe fa2e 	bl	8004950 <HAL_RCC_GetPCLK2Freq>
 80064f4:	61f8      	str	r0, [r7, #28]
        break;
 80064f6:	e010      	b.n	800651a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064f8:	4b1d      	ldr	r3, [pc, #116]	; (8006570 <UART_SetConfig+0x454>)
 80064fa:	61fb      	str	r3, [r7, #28]
        break;
 80064fc:	e00d      	b.n	800651a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064fe:	f7fe f979 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 8006502:	61f8      	str	r0, [r7, #28]
        break;
 8006504:	e009      	b.n	800651a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800650a:	61fb      	str	r3, [r7, #28]
        break;
 800650c:	e005      	b.n	800651a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006518:	bf00      	nop
    }

    if (pclk != 0U)
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d019      	beq.n	8006554 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	085a      	lsrs	r2, r3, #1
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	441a      	add	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006532:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	2b0f      	cmp	r3, #15
 8006538:	d909      	bls.n	800654e <UART_SetConfig+0x432>
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006540:	d205      	bcs.n	800654e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	b29a      	uxth	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60da      	str	r2, [r3, #12]
 800654c:	e002      	b.n	8006554 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006560:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006564:	4618      	mov	r0, r3
 8006566:	3728      	adds	r7, #40	; 0x28
 8006568:	46bd      	mov	sp, r7
 800656a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800656e:	bf00      	nop
 8006570:	00f42400 	.word	0x00f42400

08006574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00a      	beq.n	800659e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00a      	beq.n	80065e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	f003 0308 	and.w	r3, r3, #8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00a      	beq.n	8006604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	f003 0310 	and.w	r3, r3, #16
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00a      	beq.n	8006626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00a      	beq.n	8006648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006650:	2b00      	cmp	r3, #0
 8006652:	d01a      	beq.n	800668a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006672:	d10a      	bne.n	800668a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	605a      	str	r2, [r3, #4]
  }
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af02      	add	r7, sp, #8
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066c8:	f7fc f9ce 	bl	8002a68 <HAL_GetTick>
 80066cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d10e      	bne.n	80066fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f82d 	bl	800674a <UART_WaitOnFlagUntilTimeout>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e023      	b.n	8006742 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b04      	cmp	r3, #4
 8006706:	d10e      	bne.n	8006726 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f817 	bl	800674a <UART_WaitOnFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e00d      	b.n	8006742 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b09c      	sub	sp, #112	; 0x70
 800674e:	af00      	add	r7, sp, #0
 8006750:	60f8      	str	r0, [r7, #12]
 8006752:	60b9      	str	r1, [r7, #8]
 8006754:	603b      	str	r3, [r7, #0]
 8006756:	4613      	mov	r3, r2
 8006758:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800675a:	e0a5      	b.n	80068a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800675c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800675e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006762:	f000 80a1 	beq.w	80068a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006766:	f7fc f97f 	bl	8002a68 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006772:	429a      	cmp	r2, r3
 8006774:	d302      	bcc.n	800677c <UART_WaitOnFlagUntilTimeout+0x32>
 8006776:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006778:	2b00      	cmp	r3, #0
 800677a:	d13e      	bne.n	80067fa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006784:	e853 3f00 	ldrex	r3, [r3]
 8006788:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800678a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800678c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006790:	667b      	str	r3, [r7, #100]	; 0x64
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800679a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800679c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067a2:	e841 2300 	strex	r3, r2, [r1]
 80067a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1e6      	bne.n	800677c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3308      	adds	r3, #8
 80067b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b8:	e853 3f00 	ldrex	r3, [r3]
 80067bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c0:	f023 0301 	bic.w	r3, r3, #1
 80067c4:	663b      	str	r3, [r7, #96]	; 0x60
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3308      	adds	r3, #8
 80067cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80067d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067d6:	e841 2300 	strex	r3, r2, [r1]
 80067da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1e5      	bne.n	80067ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2220      	movs	r2, #32
 80067e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2220      	movs	r2, #32
 80067ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e067      	b.n	80068ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d04f      	beq.n	80068a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006816:	d147      	bne.n	80068a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006820:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682a:	e853 3f00 	ldrex	r3, [r3]
 800682e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006836:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	461a      	mov	r2, r3
 800683e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006840:	637b      	str	r3, [r7, #52]	; 0x34
 8006842:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006844:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006848:	e841 2300 	strex	r3, r2, [r1]
 800684c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800684e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1e6      	bne.n	8006822 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3308      	adds	r3, #8
 800685a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	e853 3f00 	ldrex	r3, [r3]
 8006862:	613b      	str	r3, [r7, #16]
   return(result);
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	f023 0301 	bic.w	r3, r3, #1
 800686a:	66bb      	str	r3, [r7, #104]	; 0x68
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3308      	adds	r3, #8
 8006872:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006874:	623a      	str	r2, [r7, #32]
 8006876:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006878:	69f9      	ldr	r1, [r7, #28]
 800687a:	6a3a      	ldr	r2, [r7, #32]
 800687c:	e841 2300 	strex	r3, r2, [r1]
 8006880:	61bb      	str	r3, [r7, #24]
   return(result);
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e5      	bne.n	8006854 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2220      	movs	r2, #32
 800688c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2220      	movs	r2, #32
 8006892:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2220      	movs	r2, #32
 8006898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e010      	b.n	80068ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	69da      	ldr	r2, [r3, #28]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	4013      	ands	r3, r2
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	bf0c      	ite	eq
 80068b8:	2301      	moveq	r3, #1
 80068ba:	2300      	movne	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	461a      	mov	r2, r3
 80068c0:	79fb      	ldrb	r3, [r7, #7]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	f43f af4a 	beq.w	800675c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3770      	adds	r7, #112	; 0x70
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
	...

080068d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b097      	sub	sp, #92	; 0x5c
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	4613      	mov	r3, r2
 80068e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	88fa      	ldrh	r2, [r7, #6]
 80068ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	88fa      	ldrh	r2, [r7, #6]
 80068f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006906:	d10e      	bne.n	8006926 <UART_Start_Receive_IT+0x52>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d105      	bne.n	800691c <UART_Start_Receive_IT+0x48>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006916:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800691a:	e02d      	b.n	8006978 <UART_Start_Receive_IT+0xa4>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	22ff      	movs	r2, #255	; 0xff
 8006920:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006924:	e028      	b.n	8006978 <UART_Start_Receive_IT+0xa4>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10d      	bne.n	800694a <UART_Start_Receive_IT+0x76>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d104      	bne.n	8006940 <UART_Start_Receive_IT+0x6c>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	22ff      	movs	r2, #255	; 0xff
 800693a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800693e:	e01b      	b.n	8006978 <UART_Start_Receive_IT+0xa4>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	227f      	movs	r2, #127	; 0x7f
 8006944:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006948:	e016      	b.n	8006978 <UART_Start_Receive_IT+0xa4>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006952:	d10d      	bne.n	8006970 <UART_Start_Receive_IT+0x9c>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d104      	bne.n	8006966 <UART_Start_Receive_IT+0x92>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	227f      	movs	r2, #127	; 0x7f
 8006960:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006964:	e008      	b.n	8006978 <UART_Start_Receive_IT+0xa4>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	223f      	movs	r2, #63	; 0x3f
 800696a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800696e:	e003      	b.n	8006978 <UART_Start_Receive_IT+0xa4>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2222      	movs	r2, #34	; 0x22
 8006984:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3308      	adds	r3, #8
 800698c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006998:	f043 0301 	orr.w	r3, r3, #1
 800699c:	657b      	str	r3, [r7, #84]	; 0x54
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3308      	adds	r3, #8
 80069a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80069a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80069a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e5      	bne.n	8006986 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c2:	d107      	bne.n	80069d4 <UART_Start_Receive_IT+0x100>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d103      	bne.n	80069d4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4a24      	ldr	r2, [pc, #144]	; (8006a60 <UART_Start_Receive_IT+0x18c>)
 80069d0:	665a      	str	r2, [r3, #100]	; 0x64
 80069d2:	e002      	b.n	80069da <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4a23      	ldr	r2, [pc, #140]	; (8006a64 <UART_Start_Receive_IT+0x190>)
 80069d8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d019      	beq.n	8006a1e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	e853 3f00 	ldrex	r3, [r3]
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80069fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	461a      	mov	r2, r3
 8006a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a08:	637b      	str	r3, [r7, #52]	; 0x34
 8006a0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a10:	e841 2300 	strex	r3, r2, [r1]
 8006a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e6      	bne.n	80069ea <UART_Start_Receive_IT+0x116>
 8006a1c:	e018      	b.n	8006a50 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f043 0320 	orr.w	r3, r3, #32
 8006a32:	653b      	str	r3, [r7, #80]	; 0x50
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a3c:	623b      	str	r3, [r7, #32]
 8006a3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	69f9      	ldr	r1, [r7, #28]
 8006a42:	6a3a      	ldr	r2, [r7, #32]
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e6      	bne.n	8006a1e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	375c      	adds	r7, #92	; 0x5c
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	08006d0f 	.word	0x08006d0f
 8006a64:	08006baf 	.word	0x08006baf

08006a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b095      	sub	sp, #84	; 0x54
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a8e:	643b      	str	r3, [r7, #64]	; 0x40
 8006a90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e6      	bne.n	8006a70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	f023 0301 	bic.w	r3, r3, #1
 8006ab8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3308      	adds	r3, #8
 8006ac0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e5      	bne.n	8006aa2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d118      	bne.n	8006b10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f023 0310 	bic.w	r3, r3, #16
 8006af2:	647b      	str	r3, [r7, #68]	; 0x44
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	461a      	mov	r2, r3
 8006afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006afc:	61bb      	str	r3, [r7, #24]
 8006afe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	6979      	ldr	r1, [r7, #20]
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	e841 2300 	strex	r3, r2, [r1]
 8006b08:	613b      	str	r3, [r7, #16]
   return(result);
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1e6      	bne.n	8006ade <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2220      	movs	r2, #32
 8006b14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006b22:	bf00      	nop
 8006b24:	3754      	adds	r7, #84	; 0x54
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f7ff facf 	bl	80060f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b52:	bf00      	nop
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b088      	sub	sp, #32
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	e853 3f00 	ldrex	r3, [r3]
 8006b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b76:	61fb      	str	r3, [r7, #28]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	61bb      	str	r3, [r7, #24]
 8006b82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b84:	6979      	ldr	r1, [r7, #20]
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	e841 2300 	strex	r3, r2, [r1]
 8006b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1e6      	bne.n	8006b62 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2220      	movs	r2, #32
 8006b98:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff fa9b 	bl	80060dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ba6:	bf00      	nop
 8006ba8:	3720      	adds	r7, #32
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b096      	sub	sp, #88	; 0x58
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bbc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bc4:	2b22      	cmp	r3, #34	; 0x22
 8006bc6:	f040 8094 	bne.w	8006cf2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006bd0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bd4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006bd8:	b2d9      	uxtb	r1, r3
 8006bda:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be4:	400a      	ands	r2, r1
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d179      	bne.n	8006d06 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c26:	653b      	str	r3, [r7, #80]	; 0x50
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c30:	647b      	str	r3, [r7, #68]	; 0x44
 8006c32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e6      	bne.n	8006c12 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3308      	adds	r3, #8
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	e853 3f00 	ldrex	r3, [r3]
 8006c52:	623b      	str	r3, [r7, #32]
   return(result);
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	f023 0301 	bic.w	r3, r3, #1
 8006c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3308      	adds	r3, #8
 8006c62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c64:	633a      	str	r2, [r7, #48]	; 0x30
 8006c66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c6c:	e841 2300 	strex	r3, r2, [r1]
 8006c70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e5      	bne.n	8006c44 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d12e      	bne.n	8006cea <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f023 0310 	bic.w	r3, r3, #16
 8006ca6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	461a      	mov	r2, r3
 8006cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb0:	61fb      	str	r3, [r7, #28]
 8006cb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	69b9      	ldr	r1, [r7, #24]
 8006cb6:	69fa      	ldr	r2, [r7, #28]
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e6      	bne.n	8006c92 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	f003 0310 	and.w	r3, r3, #16
 8006cce:	2b10      	cmp	r3, #16
 8006cd0:	d103      	bne.n	8006cda <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2210      	movs	r2, #16
 8006cd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7ff fa0e 	bl	8006104 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ce8:	e00d      	b.n	8006d06 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7fa ff26 	bl	8001b3c <HAL_UART_RxCpltCallback>
}
 8006cf0:	e009      	b.n	8006d06 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	8b1b      	ldrh	r3, [r3, #24]
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0208 	orr.w	r2, r2, #8
 8006d02:	b292      	uxth	r2, r2
 8006d04:	831a      	strh	r2, [r3, #24]
}
 8006d06:	bf00      	nop
 8006d08:	3758      	adds	r7, #88	; 0x58
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b096      	sub	sp, #88	; 0x58
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d24:	2b22      	cmp	r3, #34	; 0x22
 8006d26:	f040 8094 	bne.w	8006e52 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d30:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d38:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d3a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006d3e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d42:	4013      	ands	r3, r2
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4e:	1c9a      	adds	r2, r3, #2
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d179      	bne.n	8006e66 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7a:	e853 3f00 	ldrex	r3, [r3]
 8006d7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d90:	643b      	str	r3, [r7, #64]	; 0x40
 8006d92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d98:	e841 2300 	strex	r3, r2, [r1]
 8006d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1e6      	bne.n	8006d72 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3308      	adds	r3, #8
 8006daa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	e853 3f00 	ldrex	r3, [r3]
 8006db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	f023 0301 	bic.w	r3, r3, #1
 8006dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dcc:	e841 2300 	strex	r3, r2, [r1]
 8006dd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e5      	bne.n	8006da4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d12e      	bne.n	8006e4a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f023 0310 	bic.w	r3, r3, #16
 8006e06:	647b      	str	r3, [r7, #68]	; 0x44
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e10:	61bb      	str	r3, [r7, #24]
 8006e12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6979      	ldr	r1, [r7, #20]
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e6      	bne.n	8006df2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	f003 0310 	and.w	r3, r3, #16
 8006e2e:	2b10      	cmp	r3, #16
 8006e30:	d103      	bne.n	8006e3a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2210      	movs	r2, #16
 8006e38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7ff f95e 	bl	8006104 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e48:	e00d      	b.n	8006e66 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fa fe76 	bl	8001b3c <HAL_UART_RxCpltCallback>
}
 8006e50:	e009      	b.n	8006e66 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	8b1b      	ldrh	r3, [r3, #24]
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0208 	orr.w	r2, r2, #8
 8006e62:	b292      	uxth	r2, r2
 8006e64:	831a      	strh	r2, [r3, #24]
}
 8006e66:	bf00      	nop
 8006e68:	3758      	adds	r7, #88	; 0x58
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
	...

08006e84 <__errno>:
 8006e84:	4b01      	ldr	r3, [pc, #4]	; (8006e8c <__errno+0x8>)
 8006e86:	6818      	ldr	r0, [r3, #0]
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	2000009c 	.word	0x2000009c

08006e90 <__libc_init_array>:
 8006e90:	b570      	push	{r4, r5, r6, lr}
 8006e92:	4d0d      	ldr	r5, [pc, #52]	; (8006ec8 <__libc_init_array+0x38>)
 8006e94:	4c0d      	ldr	r4, [pc, #52]	; (8006ecc <__libc_init_array+0x3c>)
 8006e96:	1b64      	subs	r4, r4, r5
 8006e98:	10a4      	asrs	r4, r4, #2
 8006e9a:	2600      	movs	r6, #0
 8006e9c:	42a6      	cmp	r6, r4
 8006e9e:	d109      	bne.n	8006eb4 <__libc_init_array+0x24>
 8006ea0:	4d0b      	ldr	r5, [pc, #44]	; (8006ed0 <__libc_init_array+0x40>)
 8006ea2:	4c0c      	ldr	r4, [pc, #48]	; (8006ed4 <__libc_init_array+0x44>)
 8006ea4:	f005 fe5e 	bl	800cb64 <_init>
 8006ea8:	1b64      	subs	r4, r4, r5
 8006eaa:	10a4      	asrs	r4, r4, #2
 8006eac:	2600      	movs	r6, #0
 8006eae:	42a6      	cmp	r6, r4
 8006eb0:	d105      	bne.n	8006ebe <__libc_init_array+0x2e>
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}
 8006eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb8:	4798      	blx	r3
 8006eba:	3601      	adds	r6, #1
 8006ebc:	e7ee      	b.n	8006e9c <__libc_init_array+0xc>
 8006ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec2:	4798      	blx	r3
 8006ec4:	3601      	adds	r6, #1
 8006ec6:	e7f2      	b.n	8006eae <__libc_init_array+0x1e>
 8006ec8:	0800d690 	.word	0x0800d690
 8006ecc:	0800d690 	.word	0x0800d690
 8006ed0:	0800d690 	.word	0x0800d690
 8006ed4:	0800d694 	.word	0x0800d694

08006ed8 <memcpy>:
 8006ed8:	440a      	add	r2, r1
 8006eda:	4291      	cmp	r1, r2
 8006edc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ee0:	d100      	bne.n	8006ee4 <memcpy+0xc>
 8006ee2:	4770      	bx	lr
 8006ee4:	b510      	push	{r4, lr}
 8006ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eee:	4291      	cmp	r1, r2
 8006ef0:	d1f9      	bne.n	8006ee6 <memcpy+0xe>
 8006ef2:	bd10      	pop	{r4, pc}

08006ef4 <memset>:
 8006ef4:	4402      	add	r2, r0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d100      	bne.n	8006efe <memset+0xa>
 8006efc:	4770      	bx	lr
 8006efe:	f803 1b01 	strb.w	r1, [r3], #1
 8006f02:	e7f9      	b.n	8006ef8 <memset+0x4>

08006f04 <__cvt>:
 8006f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f08:	ec55 4b10 	vmov	r4, r5, d0
 8006f0c:	2d00      	cmp	r5, #0
 8006f0e:	460e      	mov	r6, r1
 8006f10:	4619      	mov	r1, r3
 8006f12:	462b      	mov	r3, r5
 8006f14:	bfbb      	ittet	lt
 8006f16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f1a:	461d      	movlt	r5, r3
 8006f1c:	2300      	movge	r3, #0
 8006f1e:	232d      	movlt	r3, #45	; 0x2d
 8006f20:	700b      	strb	r3, [r1, #0]
 8006f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f28:	4691      	mov	r9, r2
 8006f2a:	f023 0820 	bic.w	r8, r3, #32
 8006f2e:	bfbc      	itt	lt
 8006f30:	4622      	movlt	r2, r4
 8006f32:	4614      	movlt	r4, r2
 8006f34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f38:	d005      	beq.n	8006f46 <__cvt+0x42>
 8006f3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f3e:	d100      	bne.n	8006f42 <__cvt+0x3e>
 8006f40:	3601      	adds	r6, #1
 8006f42:	2102      	movs	r1, #2
 8006f44:	e000      	b.n	8006f48 <__cvt+0x44>
 8006f46:	2103      	movs	r1, #3
 8006f48:	ab03      	add	r3, sp, #12
 8006f4a:	9301      	str	r3, [sp, #4]
 8006f4c:	ab02      	add	r3, sp, #8
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	ec45 4b10 	vmov	d0, r4, r5
 8006f54:	4653      	mov	r3, sl
 8006f56:	4632      	mov	r2, r6
 8006f58:	f001 fe46 	bl	8008be8 <_dtoa_r>
 8006f5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f60:	4607      	mov	r7, r0
 8006f62:	d102      	bne.n	8006f6a <__cvt+0x66>
 8006f64:	f019 0f01 	tst.w	r9, #1
 8006f68:	d022      	beq.n	8006fb0 <__cvt+0xac>
 8006f6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f6e:	eb07 0906 	add.w	r9, r7, r6
 8006f72:	d110      	bne.n	8006f96 <__cvt+0x92>
 8006f74:	783b      	ldrb	r3, [r7, #0]
 8006f76:	2b30      	cmp	r3, #48	; 0x30
 8006f78:	d10a      	bne.n	8006f90 <__cvt+0x8c>
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	4620      	mov	r0, r4
 8006f80:	4629      	mov	r1, r5
 8006f82:	f7f9 fda1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f86:	b918      	cbnz	r0, 8006f90 <__cvt+0x8c>
 8006f88:	f1c6 0601 	rsb	r6, r6, #1
 8006f8c:	f8ca 6000 	str.w	r6, [sl]
 8006f90:	f8da 3000 	ldr.w	r3, [sl]
 8006f94:	4499      	add	r9, r3
 8006f96:	2200      	movs	r2, #0
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	f7f9 fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fa2:	b108      	cbz	r0, 8006fa8 <__cvt+0xa4>
 8006fa4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fa8:	2230      	movs	r2, #48	; 0x30
 8006faa:	9b03      	ldr	r3, [sp, #12]
 8006fac:	454b      	cmp	r3, r9
 8006fae:	d307      	bcc.n	8006fc0 <__cvt+0xbc>
 8006fb0:	9b03      	ldr	r3, [sp, #12]
 8006fb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fb4:	1bdb      	subs	r3, r3, r7
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	b004      	add	sp, #16
 8006fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc0:	1c59      	adds	r1, r3, #1
 8006fc2:	9103      	str	r1, [sp, #12]
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	e7f0      	b.n	8006faa <__cvt+0xa6>

08006fc8 <__exponent>:
 8006fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2900      	cmp	r1, #0
 8006fce:	bfb8      	it	lt
 8006fd0:	4249      	neglt	r1, r1
 8006fd2:	f803 2b02 	strb.w	r2, [r3], #2
 8006fd6:	bfb4      	ite	lt
 8006fd8:	222d      	movlt	r2, #45	; 0x2d
 8006fda:	222b      	movge	r2, #43	; 0x2b
 8006fdc:	2909      	cmp	r1, #9
 8006fde:	7042      	strb	r2, [r0, #1]
 8006fe0:	dd2a      	ble.n	8007038 <__exponent+0x70>
 8006fe2:	f10d 0407 	add.w	r4, sp, #7
 8006fe6:	46a4      	mov	ip, r4
 8006fe8:	270a      	movs	r7, #10
 8006fea:	46a6      	mov	lr, r4
 8006fec:	460a      	mov	r2, r1
 8006fee:	fb91 f6f7 	sdiv	r6, r1, r7
 8006ff2:	fb07 1516 	mls	r5, r7, r6, r1
 8006ff6:	3530      	adds	r5, #48	; 0x30
 8006ff8:	2a63      	cmp	r2, #99	; 0x63
 8006ffa:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ffe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007002:	4631      	mov	r1, r6
 8007004:	dcf1      	bgt.n	8006fea <__exponent+0x22>
 8007006:	3130      	adds	r1, #48	; 0x30
 8007008:	f1ae 0502 	sub.w	r5, lr, #2
 800700c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007010:	1c44      	adds	r4, r0, #1
 8007012:	4629      	mov	r1, r5
 8007014:	4561      	cmp	r1, ip
 8007016:	d30a      	bcc.n	800702e <__exponent+0x66>
 8007018:	f10d 0209 	add.w	r2, sp, #9
 800701c:	eba2 020e 	sub.w	r2, r2, lr
 8007020:	4565      	cmp	r5, ip
 8007022:	bf88      	it	hi
 8007024:	2200      	movhi	r2, #0
 8007026:	4413      	add	r3, r2
 8007028:	1a18      	subs	r0, r3, r0
 800702a:	b003      	add	sp, #12
 800702c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800702e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007032:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007036:	e7ed      	b.n	8007014 <__exponent+0x4c>
 8007038:	2330      	movs	r3, #48	; 0x30
 800703a:	3130      	adds	r1, #48	; 0x30
 800703c:	7083      	strb	r3, [r0, #2]
 800703e:	70c1      	strb	r1, [r0, #3]
 8007040:	1d03      	adds	r3, r0, #4
 8007042:	e7f1      	b.n	8007028 <__exponent+0x60>

08007044 <_printf_float>:
 8007044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007048:	ed2d 8b02 	vpush	{d8}
 800704c:	b08d      	sub	sp, #52	; 0x34
 800704e:	460c      	mov	r4, r1
 8007050:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007054:	4616      	mov	r6, r2
 8007056:	461f      	mov	r7, r3
 8007058:	4605      	mov	r5, r0
 800705a:	f002 ff35 	bl	8009ec8 <_localeconv_r>
 800705e:	f8d0 a000 	ldr.w	sl, [r0]
 8007062:	4650      	mov	r0, sl
 8007064:	f7f9 f8b4 	bl	80001d0 <strlen>
 8007068:	2300      	movs	r3, #0
 800706a:	930a      	str	r3, [sp, #40]	; 0x28
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	9305      	str	r3, [sp, #20]
 8007070:	f8d8 3000 	ldr.w	r3, [r8]
 8007074:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007078:	3307      	adds	r3, #7
 800707a:	f023 0307 	bic.w	r3, r3, #7
 800707e:	f103 0208 	add.w	r2, r3, #8
 8007082:	f8c8 2000 	str.w	r2, [r8]
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800708e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007092:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007096:	9307      	str	r3, [sp, #28]
 8007098:	f8cd 8018 	str.w	r8, [sp, #24]
 800709c:	ee08 0a10 	vmov	s16, r0
 80070a0:	4b9f      	ldr	r3, [pc, #636]	; (8007320 <_printf_float+0x2dc>)
 80070a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070a6:	f04f 32ff 	mov.w	r2, #4294967295
 80070aa:	f7f9 fd3f 	bl	8000b2c <__aeabi_dcmpun>
 80070ae:	bb88      	cbnz	r0, 8007114 <_printf_float+0xd0>
 80070b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070b4:	4b9a      	ldr	r3, [pc, #616]	; (8007320 <_printf_float+0x2dc>)
 80070b6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ba:	f7f9 fd19 	bl	8000af0 <__aeabi_dcmple>
 80070be:	bb48      	cbnz	r0, 8007114 <_printf_float+0xd0>
 80070c0:	2200      	movs	r2, #0
 80070c2:	2300      	movs	r3, #0
 80070c4:	4640      	mov	r0, r8
 80070c6:	4649      	mov	r1, r9
 80070c8:	f7f9 fd08 	bl	8000adc <__aeabi_dcmplt>
 80070cc:	b110      	cbz	r0, 80070d4 <_printf_float+0x90>
 80070ce:	232d      	movs	r3, #45	; 0x2d
 80070d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070d4:	4b93      	ldr	r3, [pc, #588]	; (8007324 <_printf_float+0x2e0>)
 80070d6:	4894      	ldr	r0, [pc, #592]	; (8007328 <_printf_float+0x2e4>)
 80070d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80070dc:	bf94      	ite	ls
 80070de:	4698      	movls	r8, r3
 80070e0:	4680      	movhi	r8, r0
 80070e2:	2303      	movs	r3, #3
 80070e4:	6123      	str	r3, [r4, #16]
 80070e6:	9b05      	ldr	r3, [sp, #20]
 80070e8:	f023 0204 	bic.w	r2, r3, #4
 80070ec:	6022      	str	r2, [r4, #0]
 80070ee:	f04f 0900 	mov.w	r9, #0
 80070f2:	9700      	str	r7, [sp, #0]
 80070f4:	4633      	mov	r3, r6
 80070f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80070f8:	4621      	mov	r1, r4
 80070fa:	4628      	mov	r0, r5
 80070fc:	f000 f9d8 	bl	80074b0 <_printf_common>
 8007100:	3001      	adds	r0, #1
 8007102:	f040 8090 	bne.w	8007226 <_printf_float+0x1e2>
 8007106:	f04f 30ff 	mov.w	r0, #4294967295
 800710a:	b00d      	add	sp, #52	; 0x34
 800710c:	ecbd 8b02 	vpop	{d8}
 8007110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007114:	4642      	mov	r2, r8
 8007116:	464b      	mov	r3, r9
 8007118:	4640      	mov	r0, r8
 800711a:	4649      	mov	r1, r9
 800711c:	f7f9 fd06 	bl	8000b2c <__aeabi_dcmpun>
 8007120:	b140      	cbz	r0, 8007134 <_printf_float+0xf0>
 8007122:	464b      	mov	r3, r9
 8007124:	2b00      	cmp	r3, #0
 8007126:	bfbc      	itt	lt
 8007128:	232d      	movlt	r3, #45	; 0x2d
 800712a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800712e:	487f      	ldr	r0, [pc, #508]	; (800732c <_printf_float+0x2e8>)
 8007130:	4b7f      	ldr	r3, [pc, #508]	; (8007330 <_printf_float+0x2ec>)
 8007132:	e7d1      	b.n	80070d8 <_printf_float+0x94>
 8007134:	6863      	ldr	r3, [r4, #4]
 8007136:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800713a:	9206      	str	r2, [sp, #24]
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	d13f      	bne.n	80071c0 <_printf_float+0x17c>
 8007140:	2306      	movs	r3, #6
 8007142:	6063      	str	r3, [r4, #4]
 8007144:	9b05      	ldr	r3, [sp, #20]
 8007146:	6861      	ldr	r1, [r4, #4]
 8007148:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800714c:	2300      	movs	r3, #0
 800714e:	9303      	str	r3, [sp, #12]
 8007150:	ab0a      	add	r3, sp, #40	; 0x28
 8007152:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007156:	ab09      	add	r3, sp, #36	; 0x24
 8007158:	ec49 8b10 	vmov	d0, r8, r9
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	6022      	str	r2, [r4, #0]
 8007160:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007164:	4628      	mov	r0, r5
 8007166:	f7ff fecd 	bl	8006f04 <__cvt>
 800716a:	9b06      	ldr	r3, [sp, #24]
 800716c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800716e:	2b47      	cmp	r3, #71	; 0x47
 8007170:	4680      	mov	r8, r0
 8007172:	d108      	bne.n	8007186 <_printf_float+0x142>
 8007174:	1cc8      	adds	r0, r1, #3
 8007176:	db02      	blt.n	800717e <_printf_float+0x13a>
 8007178:	6863      	ldr	r3, [r4, #4]
 800717a:	4299      	cmp	r1, r3
 800717c:	dd41      	ble.n	8007202 <_printf_float+0x1be>
 800717e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007182:	fa5f fb8b 	uxtb.w	fp, fp
 8007186:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800718a:	d820      	bhi.n	80071ce <_printf_float+0x18a>
 800718c:	3901      	subs	r1, #1
 800718e:	465a      	mov	r2, fp
 8007190:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007194:	9109      	str	r1, [sp, #36]	; 0x24
 8007196:	f7ff ff17 	bl	8006fc8 <__exponent>
 800719a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800719c:	1813      	adds	r3, r2, r0
 800719e:	2a01      	cmp	r2, #1
 80071a0:	4681      	mov	r9, r0
 80071a2:	6123      	str	r3, [r4, #16]
 80071a4:	dc02      	bgt.n	80071ac <_printf_float+0x168>
 80071a6:	6822      	ldr	r2, [r4, #0]
 80071a8:	07d2      	lsls	r2, r2, #31
 80071aa:	d501      	bpl.n	80071b0 <_printf_float+0x16c>
 80071ac:	3301      	adds	r3, #1
 80071ae:	6123      	str	r3, [r4, #16]
 80071b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d09c      	beq.n	80070f2 <_printf_float+0xae>
 80071b8:	232d      	movs	r3, #45	; 0x2d
 80071ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071be:	e798      	b.n	80070f2 <_printf_float+0xae>
 80071c0:	9a06      	ldr	r2, [sp, #24]
 80071c2:	2a47      	cmp	r2, #71	; 0x47
 80071c4:	d1be      	bne.n	8007144 <_printf_float+0x100>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1bc      	bne.n	8007144 <_printf_float+0x100>
 80071ca:	2301      	movs	r3, #1
 80071cc:	e7b9      	b.n	8007142 <_printf_float+0xfe>
 80071ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80071d2:	d118      	bne.n	8007206 <_printf_float+0x1c2>
 80071d4:	2900      	cmp	r1, #0
 80071d6:	6863      	ldr	r3, [r4, #4]
 80071d8:	dd0b      	ble.n	80071f2 <_printf_float+0x1ae>
 80071da:	6121      	str	r1, [r4, #16]
 80071dc:	b913      	cbnz	r3, 80071e4 <_printf_float+0x1a0>
 80071de:	6822      	ldr	r2, [r4, #0]
 80071e0:	07d0      	lsls	r0, r2, #31
 80071e2:	d502      	bpl.n	80071ea <_printf_float+0x1a6>
 80071e4:	3301      	adds	r3, #1
 80071e6:	440b      	add	r3, r1
 80071e8:	6123      	str	r3, [r4, #16]
 80071ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80071ec:	f04f 0900 	mov.w	r9, #0
 80071f0:	e7de      	b.n	80071b0 <_printf_float+0x16c>
 80071f2:	b913      	cbnz	r3, 80071fa <_printf_float+0x1b6>
 80071f4:	6822      	ldr	r2, [r4, #0]
 80071f6:	07d2      	lsls	r2, r2, #31
 80071f8:	d501      	bpl.n	80071fe <_printf_float+0x1ba>
 80071fa:	3302      	adds	r3, #2
 80071fc:	e7f4      	b.n	80071e8 <_printf_float+0x1a4>
 80071fe:	2301      	movs	r3, #1
 8007200:	e7f2      	b.n	80071e8 <_printf_float+0x1a4>
 8007202:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007208:	4299      	cmp	r1, r3
 800720a:	db05      	blt.n	8007218 <_printf_float+0x1d4>
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	6121      	str	r1, [r4, #16]
 8007210:	07d8      	lsls	r0, r3, #31
 8007212:	d5ea      	bpl.n	80071ea <_printf_float+0x1a6>
 8007214:	1c4b      	adds	r3, r1, #1
 8007216:	e7e7      	b.n	80071e8 <_printf_float+0x1a4>
 8007218:	2900      	cmp	r1, #0
 800721a:	bfd4      	ite	le
 800721c:	f1c1 0202 	rsble	r2, r1, #2
 8007220:	2201      	movgt	r2, #1
 8007222:	4413      	add	r3, r2
 8007224:	e7e0      	b.n	80071e8 <_printf_float+0x1a4>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	055a      	lsls	r2, r3, #21
 800722a:	d407      	bmi.n	800723c <_printf_float+0x1f8>
 800722c:	6923      	ldr	r3, [r4, #16]
 800722e:	4642      	mov	r2, r8
 8007230:	4631      	mov	r1, r6
 8007232:	4628      	mov	r0, r5
 8007234:	47b8      	blx	r7
 8007236:	3001      	adds	r0, #1
 8007238:	d12c      	bne.n	8007294 <_printf_float+0x250>
 800723a:	e764      	b.n	8007106 <_printf_float+0xc2>
 800723c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007240:	f240 80e0 	bls.w	8007404 <_printf_float+0x3c0>
 8007244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007248:	2200      	movs	r2, #0
 800724a:	2300      	movs	r3, #0
 800724c:	f7f9 fc3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007250:	2800      	cmp	r0, #0
 8007252:	d034      	beq.n	80072be <_printf_float+0x27a>
 8007254:	4a37      	ldr	r2, [pc, #220]	; (8007334 <_printf_float+0x2f0>)
 8007256:	2301      	movs	r3, #1
 8007258:	4631      	mov	r1, r6
 800725a:	4628      	mov	r0, r5
 800725c:	47b8      	blx	r7
 800725e:	3001      	adds	r0, #1
 8007260:	f43f af51 	beq.w	8007106 <_printf_float+0xc2>
 8007264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007268:	429a      	cmp	r2, r3
 800726a:	db02      	blt.n	8007272 <_printf_float+0x22e>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	07d8      	lsls	r0, r3, #31
 8007270:	d510      	bpl.n	8007294 <_printf_float+0x250>
 8007272:	ee18 3a10 	vmov	r3, s16
 8007276:	4652      	mov	r2, sl
 8007278:	4631      	mov	r1, r6
 800727a:	4628      	mov	r0, r5
 800727c:	47b8      	blx	r7
 800727e:	3001      	adds	r0, #1
 8007280:	f43f af41 	beq.w	8007106 <_printf_float+0xc2>
 8007284:	f04f 0800 	mov.w	r8, #0
 8007288:	f104 091a 	add.w	r9, r4, #26
 800728c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800728e:	3b01      	subs	r3, #1
 8007290:	4543      	cmp	r3, r8
 8007292:	dc09      	bgt.n	80072a8 <_printf_float+0x264>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	079b      	lsls	r3, r3, #30
 8007298:	f100 8105 	bmi.w	80074a6 <_printf_float+0x462>
 800729c:	68e0      	ldr	r0, [r4, #12]
 800729e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072a0:	4298      	cmp	r0, r3
 80072a2:	bfb8      	it	lt
 80072a4:	4618      	movlt	r0, r3
 80072a6:	e730      	b.n	800710a <_printf_float+0xc6>
 80072a8:	2301      	movs	r3, #1
 80072aa:	464a      	mov	r2, r9
 80072ac:	4631      	mov	r1, r6
 80072ae:	4628      	mov	r0, r5
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	f43f af27 	beq.w	8007106 <_printf_float+0xc2>
 80072b8:	f108 0801 	add.w	r8, r8, #1
 80072bc:	e7e6      	b.n	800728c <_printf_float+0x248>
 80072be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	dc39      	bgt.n	8007338 <_printf_float+0x2f4>
 80072c4:	4a1b      	ldr	r2, [pc, #108]	; (8007334 <_printf_float+0x2f0>)
 80072c6:	2301      	movs	r3, #1
 80072c8:	4631      	mov	r1, r6
 80072ca:	4628      	mov	r0, r5
 80072cc:	47b8      	blx	r7
 80072ce:	3001      	adds	r0, #1
 80072d0:	f43f af19 	beq.w	8007106 <_printf_float+0xc2>
 80072d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072d8:	4313      	orrs	r3, r2
 80072da:	d102      	bne.n	80072e2 <_printf_float+0x29e>
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	07d9      	lsls	r1, r3, #31
 80072e0:	d5d8      	bpl.n	8007294 <_printf_float+0x250>
 80072e2:	ee18 3a10 	vmov	r3, s16
 80072e6:	4652      	mov	r2, sl
 80072e8:	4631      	mov	r1, r6
 80072ea:	4628      	mov	r0, r5
 80072ec:	47b8      	blx	r7
 80072ee:	3001      	adds	r0, #1
 80072f0:	f43f af09 	beq.w	8007106 <_printf_float+0xc2>
 80072f4:	f04f 0900 	mov.w	r9, #0
 80072f8:	f104 0a1a 	add.w	sl, r4, #26
 80072fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072fe:	425b      	negs	r3, r3
 8007300:	454b      	cmp	r3, r9
 8007302:	dc01      	bgt.n	8007308 <_printf_float+0x2c4>
 8007304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007306:	e792      	b.n	800722e <_printf_float+0x1ea>
 8007308:	2301      	movs	r3, #1
 800730a:	4652      	mov	r2, sl
 800730c:	4631      	mov	r1, r6
 800730e:	4628      	mov	r0, r5
 8007310:	47b8      	blx	r7
 8007312:	3001      	adds	r0, #1
 8007314:	f43f aef7 	beq.w	8007106 <_printf_float+0xc2>
 8007318:	f109 0901 	add.w	r9, r9, #1
 800731c:	e7ee      	b.n	80072fc <_printf_float+0x2b8>
 800731e:	bf00      	nop
 8007320:	7fefffff 	.word	0x7fefffff
 8007324:	0800d144 	.word	0x0800d144
 8007328:	0800d148 	.word	0x0800d148
 800732c:	0800d150 	.word	0x0800d150
 8007330:	0800d14c 	.word	0x0800d14c
 8007334:	0800d154 	.word	0x0800d154
 8007338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800733a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800733c:	429a      	cmp	r2, r3
 800733e:	bfa8      	it	ge
 8007340:	461a      	movge	r2, r3
 8007342:	2a00      	cmp	r2, #0
 8007344:	4691      	mov	r9, r2
 8007346:	dc37      	bgt.n	80073b8 <_printf_float+0x374>
 8007348:	f04f 0b00 	mov.w	fp, #0
 800734c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007350:	f104 021a 	add.w	r2, r4, #26
 8007354:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007356:	9305      	str	r3, [sp, #20]
 8007358:	eba3 0309 	sub.w	r3, r3, r9
 800735c:	455b      	cmp	r3, fp
 800735e:	dc33      	bgt.n	80073c8 <_printf_float+0x384>
 8007360:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007364:	429a      	cmp	r2, r3
 8007366:	db3b      	blt.n	80073e0 <_printf_float+0x39c>
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	07da      	lsls	r2, r3, #31
 800736c:	d438      	bmi.n	80073e0 <_printf_float+0x39c>
 800736e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007370:	9a05      	ldr	r2, [sp, #20]
 8007372:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007374:	1a9a      	subs	r2, r3, r2
 8007376:	eba3 0901 	sub.w	r9, r3, r1
 800737a:	4591      	cmp	r9, r2
 800737c:	bfa8      	it	ge
 800737e:	4691      	movge	r9, r2
 8007380:	f1b9 0f00 	cmp.w	r9, #0
 8007384:	dc35      	bgt.n	80073f2 <_printf_float+0x3ae>
 8007386:	f04f 0800 	mov.w	r8, #0
 800738a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800738e:	f104 0a1a 	add.w	sl, r4, #26
 8007392:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007396:	1a9b      	subs	r3, r3, r2
 8007398:	eba3 0309 	sub.w	r3, r3, r9
 800739c:	4543      	cmp	r3, r8
 800739e:	f77f af79 	ble.w	8007294 <_printf_float+0x250>
 80073a2:	2301      	movs	r3, #1
 80073a4:	4652      	mov	r2, sl
 80073a6:	4631      	mov	r1, r6
 80073a8:	4628      	mov	r0, r5
 80073aa:	47b8      	blx	r7
 80073ac:	3001      	adds	r0, #1
 80073ae:	f43f aeaa 	beq.w	8007106 <_printf_float+0xc2>
 80073b2:	f108 0801 	add.w	r8, r8, #1
 80073b6:	e7ec      	b.n	8007392 <_printf_float+0x34e>
 80073b8:	4613      	mov	r3, r2
 80073ba:	4631      	mov	r1, r6
 80073bc:	4642      	mov	r2, r8
 80073be:	4628      	mov	r0, r5
 80073c0:	47b8      	blx	r7
 80073c2:	3001      	adds	r0, #1
 80073c4:	d1c0      	bne.n	8007348 <_printf_float+0x304>
 80073c6:	e69e      	b.n	8007106 <_printf_float+0xc2>
 80073c8:	2301      	movs	r3, #1
 80073ca:	4631      	mov	r1, r6
 80073cc:	4628      	mov	r0, r5
 80073ce:	9205      	str	r2, [sp, #20]
 80073d0:	47b8      	blx	r7
 80073d2:	3001      	adds	r0, #1
 80073d4:	f43f ae97 	beq.w	8007106 <_printf_float+0xc2>
 80073d8:	9a05      	ldr	r2, [sp, #20]
 80073da:	f10b 0b01 	add.w	fp, fp, #1
 80073de:	e7b9      	b.n	8007354 <_printf_float+0x310>
 80073e0:	ee18 3a10 	vmov	r3, s16
 80073e4:	4652      	mov	r2, sl
 80073e6:	4631      	mov	r1, r6
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	d1be      	bne.n	800736e <_printf_float+0x32a>
 80073f0:	e689      	b.n	8007106 <_printf_float+0xc2>
 80073f2:	9a05      	ldr	r2, [sp, #20]
 80073f4:	464b      	mov	r3, r9
 80073f6:	4442      	add	r2, r8
 80073f8:	4631      	mov	r1, r6
 80073fa:	4628      	mov	r0, r5
 80073fc:	47b8      	blx	r7
 80073fe:	3001      	adds	r0, #1
 8007400:	d1c1      	bne.n	8007386 <_printf_float+0x342>
 8007402:	e680      	b.n	8007106 <_printf_float+0xc2>
 8007404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007406:	2a01      	cmp	r2, #1
 8007408:	dc01      	bgt.n	800740e <_printf_float+0x3ca>
 800740a:	07db      	lsls	r3, r3, #31
 800740c:	d538      	bpl.n	8007480 <_printf_float+0x43c>
 800740e:	2301      	movs	r3, #1
 8007410:	4642      	mov	r2, r8
 8007412:	4631      	mov	r1, r6
 8007414:	4628      	mov	r0, r5
 8007416:	47b8      	blx	r7
 8007418:	3001      	adds	r0, #1
 800741a:	f43f ae74 	beq.w	8007106 <_printf_float+0xc2>
 800741e:	ee18 3a10 	vmov	r3, s16
 8007422:	4652      	mov	r2, sl
 8007424:	4631      	mov	r1, r6
 8007426:	4628      	mov	r0, r5
 8007428:	47b8      	blx	r7
 800742a:	3001      	adds	r0, #1
 800742c:	f43f ae6b 	beq.w	8007106 <_printf_float+0xc2>
 8007430:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007434:	2200      	movs	r2, #0
 8007436:	2300      	movs	r3, #0
 8007438:	f7f9 fb46 	bl	8000ac8 <__aeabi_dcmpeq>
 800743c:	b9d8      	cbnz	r0, 8007476 <_printf_float+0x432>
 800743e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007440:	f108 0201 	add.w	r2, r8, #1
 8007444:	3b01      	subs	r3, #1
 8007446:	4631      	mov	r1, r6
 8007448:	4628      	mov	r0, r5
 800744a:	47b8      	blx	r7
 800744c:	3001      	adds	r0, #1
 800744e:	d10e      	bne.n	800746e <_printf_float+0x42a>
 8007450:	e659      	b.n	8007106 <_printf_float+0xc2>
 8007452:	2301      	movs	r3, #1
 8007454:	4652      	mov	r2, sl
 8007456:	4631      	mov	r1, r6
 8007458:	4628      	mov	r0, r5
 800745a:	47b8      	blx	r7
 800745c:	3001      	adds	r0, #1
 800745e:	f43f ae52 	beq.w	8007106 <_printf_float+0xc2>
 8007462:	f108 0801 	add.w	r8, r8, #1
 8007466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007468:	3b01      	subs	r3, #1
 800746a:	4543      	cmp	r3, r8
 800746c:	dcf1      	bgt.n	8007452 <_printf_float+0x40e>
 800746e:	464b      	mov	r3, r9
 8007470:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007474:	e6dc      	b.n	8007230 <_printf_float+0x1ec>
 8007476:	f04f 0800 	mov.w	r8, #0
 800747a:	f104 0a1a 	add.w	sl, r4, #26
 800747e:	e7f2      	b.n	8007466 <_printf_float+0x422>
 8007480:	2301      	movs	r3, #1
 8007482:	4642      	mov	r2, r8
 8007484:	e7df      	b.n	8007446 <_printf_float+0x402>
 8007486:	2301      	movs	r3, #1
 8007488:	464a      	mov	r2, r9
 800748a:	4631      	mov	r1, r6
 800748c:	4628      	mov	r0, r5
 800748e:	47b8      	blx	r7
 8007490:	3001      	adds	r0, #1
 8007492:	f43f ae38 	beq.w	8007106 <_printf_float+0xc2>
 8007496:	f108 0801 	add.w	r8, r8, #1
 800749a:	68e3      	ldr	r3, [r4, #12]
 800749c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800749e:	1a5b      	subs	r3, r3, r1
 80074a0:	4543      	cmp	r3, r8
 80074a2:	dcf0      	bgt.n	8007486 <_printf_float+0x442>
 80074a4:	e6fa      	b.n	800729c <_printf_float+0x258>
 80074a6:	f04f 0800 	mov.w	r8, #0
 80074aa:	f104 0919 	add.w	r9, r4, #25
 80074ae:	e7f4      	b.n	800749a <_printf_float+0x456>

080074b0 <_printf_common>:
 80074b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b4:	4616      	mov	r6, r2
 80074b6:	4699      	mov	r9, r3
 80074b8:	688a      	ldr	r2, [r1, #8]
 80074ba:	690b      	ldr	r3, [r1, #16]
 80074bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074c0:	4293      	cmp	r3, r2
 80074c2:	bfb8      	it	lt
 80074c4:	4613      	movlt	r3, r2
 80074c6:	6033      	str	r3, [r6, #0]
 80074c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074cc:	4607      	mov	r7, r0
 80074ce:	460c      	mov	r4, r1
 80074d0:	b10a      	cbz	r2, 80074d6 <_printf_common+0x26>
 80074d2:	3301      	adds	r3, #1
 80074d4:	6033      	str	r3, [r6, #0]
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	0699      	lsls	r1, r3, #26
 80074da:	bf42      	ittt	mi
 80074dc:	6833      	ldrmi	r3, [r6, #0]
 80074de:	3302      	addmi	r3, #2
 80074e0:	6033      	strmi	r3, [r6, #0]
 80074e2:	6825      	ldr	r5, [r4, #0]
 80074e4:	f015 0506 	ands.w	r5, r5, #6
 80074e8:	d106      	bne.n	80074f8 <_printf_common+0x48>
 80074ea:	f104 0a19 	add.w	sl, r4, #25
 80074ee:	68e3      	ldr	r3, [r4, #12]
 80074f0:	6832      	ldr	r2, [r6, #0]
 80074f2:	1a9b      	subs	r3, r3, r2
 80074f4:	42ab      	cmp	r3, r5
 80074f6:	dc26      	bgt.n	8007546 <_printf_common+0x96>
 80074f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074fc:	1e13      	subs	r3, r2, #0
 80074fe:	6822      	ldr	r2, [r4, #0]
 8007500:	bf18      	it	ne
 8007502:	2301      	movne	r3, #1
 8007504:	0692      	lsls	r2, r2, #26
 8007506:	d42b      	bmi.n	8007560 <_printf_common+0xb0>
 8007508:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800750c:	4649      	mov	r1, r9
 800750e:	4638      	mov	r0, r7
 8007510:	47c0      	blx	r8
 8007512:	3001      	adds	r0, #1
 8007514:	d01e      	beq.n	8007554 <_printf_common+0xa4>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	68e5      	ldr	r5, [r4, #12]
 800751a:	6832      	ldr	r2, [r6, #0]
 800751c:	f003 0306 	and.w	r3, r3, #6
 8007520:	2b04      	cmp	r3, #4
 8007522:	bf08      	it	eq
 8007524:	1aad      	subeq	r5, r5, r2
 8007526:	68a3      	ldr	r3, [r4, #8]
 8007528:	6922      	ldr	r2, [r4, #16]
 800752a:	bf0c      	ite	eq
 800752c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007530:	2500      	movne	r5, #0
 8007532:	4293      	cmp	r3, r2
 8007534:	bfc4      	itt	gt
 8007536:	1a9b      	subgt	r3, r3, r2
 8007538:	18ed      	addgt	r5, r5, r3
 800753a:	2600      	movs	r6, #0
 800753c:	341a      	adds	r4, #26
 800753e:	42b5      	cmp	r5, r6
 8007540:	d11a      	bne.n	8007578 <_printf_common+0xc8>
 8007542:	2000      	movs	r0, #0
 8007544:	e008      	b.n	8007558 <_printf_common+0xa8>
 8007546:	2301      	movs	r3, #1
 8007548:	4652      	mov	r2, sl
 800754a:	4649      	mov	r1, r9
 800754c:	4638      	mov	r0, r7
 800754e:	47c0      	blx	r8
 8007550:	3001      	adds	r0, #1
 8007552:	d103      	bne.n	800755c <_printf_common+0xac>
 8007554:	f04f 30ff 	mov.w	r0, #4294967295
 8007558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755c:	3501      	adds	r5, #1
 800755e:	e7c6      	b.n	80074ee <_printf_common+0x3e>
 8007560:	18e1      	adds	r1, r4, r3
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	2030      	movs	r0, #48	; 0x30
 8007566:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800756a:	4422      	add	r2, r4
 800756c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007570:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007574:	3302      	adds	r3, #2
 8007576:	e7c7      	b.n	8007508 <_printf_common+0x58>
 8007578:	2301      	movs	r3, #1
 800757a:	4622      	mov	r2, r4
 800757c:	4649      	mov	r1, r9
 800757e:	4638      	mov	r0, r7
 8007580:	47c0      	blx	r8
 8007582:	3001      	adds	r0, #1
 8007584:	d0e6      	beq.n	8007554 <_printf_common+0xa4>
 8007586:	3601      	adds	r6, #1
 8007588:	e7d9      	b.n	800753e <_printf_common+0x8e>
	...

0800758c <_printf_i>:
 800758c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007590:	7e0f      	ldrb	r7, [r1, #24]
 8007592:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007594:	2f78      	cmp	r7, #120	; 0x78
 8007596:	4691      	mov	r9, r2
 8007598:	4680      	mov	r8, r0
 800759a:	460c      	mov	r4, r1
 800759c:	469a      	mov	sl, r3
 800759e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075a2:	d807      	bhi.n	80075b4 <_printf_i+0x28>
 80075a4:	2f62      	cmp	r7, #98	; 0x62
 80075a6:	d80a      	bhi.n	80075be <_printf_i+0x32>
 80075a8:	2f00      	cmp	r7, #0
 80075aa:	f000 80d8 	beq.w	800775e <_printf_i+0x1d2>
 80075ae:	2f58      	cmp	r7, #88	; 0x58
 80075b0:	f000 80a3 	beq.w	80076fa <_printf_i+0x16e>
 80075b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075bc:	e03a      	b.n	8007634 <_printf_i+0xa8>
 80075be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075c2:	2b15      	cmp	r3, #21
 80075c4:	d8f6      	bhi.n	80075b4 <_printf_i+0x28>
 80075c6:	a101      	add	r1, pc, #4	; (adr r1, 80075cc <_printf_i+0x40>)
 80075c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075cc:	08007625 	.word	0x08007625
 80075d0:	08007639 	.word	0x08007639
 80075d4:	080075b5 	.word	0x080075b5
 80075d8:	080075b5 	.word	0x080075b5
 80075dc:	080075b5 	.word	0x080075b5
 80075e0:	080075b5 	.word	0x080075b5
 80075e4:	08007639 	.word	0x08007639
 80075e8:	080075b5 	.word	0x080075b5
 80075ec:	080075b5 	.word	0x080075b5
 80075f0:	080075b5 	.word	0x080075b5
 80075f4:	080075b5 	.word	0x080075b5
 80075f8:	08007745 	.word	0x08007745
 80075fc:	08007669 	.word	0x08007669
 8007600:	08007727 	.word	0x08007727
 8007604:	080075b5 	.word	0x080075b5
 8007608:	080075b5 	.word	0x080075b5
 800760c:	08007767 	.word	0x08007767
 8007610:	080075b5 	.word	0x080075b5
 8007614:	08007669 	.word	0x08007669
 8007618:	080075b5 	.word	0x080075b5
 800761c:	080075b5 	.word	0x080075b5
 8007620:	0800772f 	.word	0x0800772f
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	1d1a      	adds	r2, r3, #4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	602a      	str	r2, [r5, #0]
 800762c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007634:	2301      	movs	r3, #1
 8007636:	e0a3      	b.n	8007780 <_printf_i+0x1f4>
 8007638:	6820      	ldr	r0, [r4, #0]
 800763a:	6829      	ldr	r1, [r5, #0]
 800763c:	0606      	lsls	r6, r0, #24
 800763e:	f101 0304 	add.w	r3, r1, #4
 8007642:	d50a      	bpl.n	800765a <_printf_i+0xce>
 8007644:	680e      	ldr	r6, [r1, #0]
 8007646:	602b      	str	r3, [r5, #0]
 8007648:	2e00      	cmp	r6, #0
 800764a:	da03      	bge.n	8007654 <_printf_i+0xc8>
 800764c:	232d      	movs	r3, #45	; 0x2d
 800764e:	4276      	negs	r6, r6
 8007650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007654:	485e      	ldr	r0, [pc, #376]	; (80077d0 <_printf_i+0x244>)
 8007656:	230a      	movs	r3, #10
 8007658:	e019      	b.n	800768e <_printf_i+0x102>
 800765a:	680e      	ldr	r6, [r1, #0]
 800765c:	602b      	str	r3, [r5, #0]
 800765e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007662:	bf18      	it	ne
 8007664:	b236      	sxthne	r6, r6
 8007666:	e7ef      	b.n	8007648 <_printf_i+0xbc>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	6820      	ldr	r0, [r4, #0]
 800766c:	1d19      	adds	r1, r3, #4
 800766e:	6029      	str	r1, [r5, #0]
 8007670:	0601      	lsls	r1, r0, #24
 8007672:	d501      	bpl.n	8007678 <_printf_i+0xec>
 8007674:	681e      	ldr	r6, [r3, #0]
 8007676:	e002      	b.n	800767e <_printf_i+0xf2>
 8007678:	0646      	lsls	r6, r0, #25
 800767a:	d5fb      	bpl.n	8007674 <_printf_i+0xe8>
 800767c:	881e      	ldrh	r6, [r3, #0]
 800767e:	4854      	ldr	r0, [pc, #336]	; (80077d0 <_printf_i+0x244>)
 8007680:	2f6f      	cmp	r7, #111	; 0x6f
 8007682:	bf0c      	ite	eq
 8007684:	2308      	moveq	r3, #8
 8007686:	230a      	movne	r3, #10
 8007688:	2100      	movs	r1, #0
 800768a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800768e:	6865      	ldr	r5, [r4, #4]
 8007690:	60a5      	str	r5, [r4, #8]
 8007692:	2d00      	cmp	r5, #0
 8007694:	bfa2      	ittt	ge
 8007696:	6821      	ldrge	r1, [r4, #0]
 8007698:	f021 0104 	bicge.w	r1, r1, #4
 800769c:	6021      	strge	r1, [r4, #0]
 800769e:	b90e      	cbnz	r6, 80076a4 <_printf_i+0x118>
 80076a0:	2d00      	cmp	r5, #0
 80076a2:	d04d      	beq.n	8007740 <_printf_i+0x1b4>
 80076a4:	4615      	mov	r5, r2
 80076a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80076aa:	fb03 6711 	mls	r7, r3, r1, r6
 80076ae:	5dc7      	ldrb	r7, [r0, r7]
 80076b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076b4:	4637      	mov	r7, r6
 80076b6:	42bb      	cmp	r3, r7
 80076b8:	460e      	mov	r6, r1
 80076ba:	d9f4      	bls.n	80076a6 <_printf_i+0x11a>
 80076bc:	2b08      	cmp	r3, #8
 80076be:	d10b      	bne.n	80076d8 <_printf_i+0x14c>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	07de      	lsls	r6, r3, #31
 80076c4:	d508      	bpl.n	80076d8 <_printf_i+0x14c>
 80076c6:	6923      	ldr	r3, [r4, #16]
 80076c8:	6861      	ldr	r1, [r4, #4]
 80076ca:	4299      	cmp	r1, r3
 80076cc:	bfde      	ittt	le
 80076ce:	2330      	movle	r3, #48	; 0x30
 80076d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076d8:	1b52      	subs	r2, r2, r5
 80076da:	6122      	str	r2, [r4, #16]
 80076dc:	f8cd a000 	str.w	sl, [sp]
 80076e0:	464b      	mov	r3, r9
 80076e2:	aa03      	add	r2, sp, #12
 80076e4:	4621      	mov	r1, r4
 80076e6:	4640      	mov	r0, r8
 80076e8:	f7ff fee2 	bl	80074b0 <_printf_common>
 80076ec:	3001      	adds	r0, #1
 80076ee:	d14c      	bne.n	800778a <_printf_i+0x1fe>
 80076f0:	f04f 30ff 	mov.w	r0, #4294967295
 80076f4:	b004      	add	sp, #16
 80076f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076fa:	4835      	ldr	r0, [pc, #212]	; (80077d0 <_printf_i+0x244>)
 80076fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007700:	6829      	ldr	r1, [r5, #0]
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	f851 6b04 	ldr.w	r6, [r1], #4
 8007708:	6029      	str	r1, [r5, #0]
 800770a:	061d      	lsls	r5, r3, #24
 800770c:	d514      	bpl.n	8007738 <_printf_i+0x1ac>
 800770e:	07df      	lsls	r7, r3, #31
 8007710:	bf44      	itt	mi
 8007712:	f043 0320 	orrmi.w	r3, r3, #32
 8007716:	6023      	strmi	r3, [r4, #0]
 8007718:	b91e      	cbnz	r6, 8007722 <_printf_i+0x196>
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	f023 0320 	bic.w	r3, r3, #32
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	2310      	movs	r3, #16
 8007724:	e7b0      	b.n	8007688 <_printf_i+0xfc>
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	f043 0320 	orr.w	r3, r3, #32
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	2378      	movs	r3, #120	; 0x78
 8007730:	4828      	ldr	r0, [pc, #160]	; (80077d4 <_printf_i+0x248>)
 8007732:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007736:	e7e3      	b.n	8007700 <_printf_i+0x174>
 8007738:	0659      	lsls	r1, r3, #25
 800773a:	bf48      	it	mi
 800773c:	b2b6      	uxthmi	r6, r6
 800773e:	e7e6      	b.n	800770e <_printf_i+0x182>
 8007740:	4615      	mov	r5, r2
 8007742:	e7bb      	b.n	80076bc <_printf_i+0x130>
 8007744:	682b      	ldr	r3, [r5, #0]
 8007746:	6826      	ldr	r6, [r4, #0]
 8007748:	6961      	ldr	r1, [r4, #20]
 800774a:	1d18      	adds	r0, r3, #4
 800774c:	6028      	str	r0, [r5, #0]
 800774e:	0635      	lsls	r5, r6, #24
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	d501      	bpl.n	8007758 <_printf_i+0x1cc>
 8007754:	6019      	str	r1, [r3, #0]
 8007756:	e002      	b.n	800775e <_printf_i+0x1d2>
 8007758:	0670      	lsls	r0, r6, #25
 800775a:	d5fb      	bpl.n	8007754 <_printf_i+0x1c8>
 800775c:	8019      	strh	r1, [r3, #0]
 800775e:	2300      	movs	r3, #0
 8007760:	6123      	str	r3, [r4, #16]
 8007762:	4615      	mov	r5, r2
 8007764:	e7ba      	b.n	80076dc <_printf_i+0x150>
 8007766:	682b      	ldr	r3, [r5, #0]
 8007768:	1d1a      	adds	r2, r3, #4
 800776a:	602a      	str	r2, [r5, #0]
 800776c:	681d      	ldr	r5, [r3, #0]
 800776e:	6862      	ldr	r2, [r4, #4]
 8007770:	2100      	movs	r1, #0
 8007772:	4628      	mov	r0, r5
 8007774:	f7f8 fd34 	bl	80001e0 <memchr>
 8007778:	b108      	cbz	r0, 800777e <_printf_i+0x1f2>
 800777a:	1b40      	subs	r0, r0, r5
 800777c:	6060      	str	r0, [r4, #4]
 800777e:	6863      	ldr	r3, [r4, #4]
 8007780:	6123      	str	r3, [r4, #16]
 8007782:	2300      	movs	r3, #0
 8007784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007788:	e7a8      	b.n	80076dc <_printf_i+0x150>
 800778a:	6923      	ldr	r3, [r4, #16]
 800778c:	462a      	mov	r2, r5
 800778e:	4649      	mov	r1, r9
 8007790:	4640      	mov	r0, r8
 8007792:	47d0      	blx	sl
 8007794:	3001      	adds	r0, #1
 8007796:	d0ab      	beq.n	80076f0 <_printf_i+0x164>
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	079b      	lsls	r3, r3, #30
 800779c:	d413      	bmi.n	80077c6 <_printf_i+0x23a>
 800779e:	68e0      	ldr	r0, [r4, #12]
 80077a0:	9b03      	ldr	r3, [sp, #12]
 80077a2:	4298      	cmp	r0, r3
 80077a4:	bfb8      	it	lt
 80077a6:	4618      	movlt	r0, r3
 80077a8:	e7a4      	b.n	80076f4 <_printf_i+0x168>
 80077aa:	2301      	movs	r3, #1
 80077ac:	4632      	mov	r2, r6
 80077ae:	4649      	mov	r1, r9
 80077b0:	4640      	mov	r0, r8
 80077b2:	47d0      	blx	sl
 80077b4:	3001      	adds	r0, #1
 80077b6:	d09b      	beq.n	80076f0 <_printf_i+0x164>
 80077b8:	3501      	adds	r5, #1
 80077ba:	68e3      	ldr	r3, [r4, #12]
 80077bc:	9903      	ldr	r1, [sp, #12]
 80077be:	1a5b      	subs	r3, r3, r1
 80077c0:	42ab      	cmp	r3, r5
 80077c2:	dcf2      	bgt.n	80077aa <_printf_i+0x21e>
 80077c4:	e7eb      	b.n	800779e <_printf_i+0x212>
 80077c6:	2500      	movs	r5, #0
 80077c8:	f104 0619 	add.w	r6, r4, #25
 80077cc:	e7f5      	b.n	80077ba <_printf_i+0x22e>
 80077ce:	bf00      	nop
 80077d0:	0800d156 	.word	0x0800d156
 80077d4:	0800d167 	.word	0x0800d167

080077d8 <_scanf_float>:
 80077d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077dc:	b087      	sub	sp, #28
 80077de:	4617      	mov	r7, r2
 80077e0:	9303      	str	r3, [sp, #12]
 80077e2:	688b      	ldr	r3, [r1, #8]
 80077e4:	1e5a      	subs	r2, r3, #1
 80077e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80077ea:	bf83      	ittte	hi
 80077ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80077f0:	195b      	addhi	r3, r3, r5
 80077f2:	9302      	strhi	r3, [sp, #8]
 80077f4:	2300      	movls	r3, #0
 80077f6:	bf86      	itte	hi
 80077f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80077fc:	608b      	strhi	r3, [r1, #8]
 80077fe:	9302      	strls	r3, [sp, #8]
 8007800:	680b      	ldr	r3, [r1, #0]
 8007802:	468b      	mov	fp, r1
 8007804:	2500      	movs	r5, #0
 8007806:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800780a:	f84b 3b1c 	str.w	r3, [fp], #28
 800780e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007812:	4680      	mov	r8, r0
 8007814:	460c      	mov	r4, r1
 8007816:	465e      	mov	r6, fp
 8007818:	46aa      	mov	sl, r5
 800781a:	46a9      	mov	r9, r5
 800781c:	9501      	str	r5, [sp, #4]
 800781e:	68a2      	ldr	r2, [r4, #8]
 8007820:	b152      	cbz	r2, 8007838 <_scanf_float+0x60>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b4e      	cmp	r3, #78	; 0x4e
 8007828:	d864      	bhi.n	80078f4 <_scanf_float+0x11c>
 800782a:	2b40      	cmp	r3, #64	; 0x40
 800782c:	d83c      	bhi.n	80078a8 <_scanf_float+0xd0>
 800782e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007832:	b2c8      	uxtb	r0, r1
 8007834:	280e      	cmp	r0, #14
 8007836:	d93a      	bls.n	80078ae <_scanf_float+0xd6>
 8007838:	f1b9 0f00 	cmp.w	r9, #0
 800783c:	d003      	beq.n	8007846 <_scanf_float+0x6e>
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007844:	6023      	str	r3, [r4, #0]
 8007846:	f10a 3aff 	add.w	sl, sl, #4294967295
 800784a:	f1ba 0f01 	cmp.w	sl, #1
 800784e:	f200 8113 	bhi.w	8007a78 <_scanf_float+0x2a0>
 8007852:	455e      	cmp	r6, fp
 8007854:	f200 8105 	bhi.w	8007a62 <_scanf_float+0x28a>
 8007858:	2501      	movs	r5, #1
 800785a:	4628      	mov	r0, r5
 800785c:	b007      	add	sp, #28
 800785e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007862:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007866:	2a0d      	cmp	r2, #13
 8007868:	d8e6      	bhi.n	8007838 <_scanf_float+0x60>
 800786a:	a101      	add	r1, pc, #4	; (adr r1, 8007870 <_scanf_float+0x98>)
 800786c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007870:	080079af 	.word	0x080079af
 8007874:	08007839 	.word	0x08007839
 8007878:	08007839 	.word	0x08007839
 800787c:	08007839 	.word	0x08007839
 8007880:	08007a0f 	.word	0x08007a0f
 8007884:	080079e7 	.word	0x080079e7
 8007888:	08007839 	.word	0x08007839
 800788c:	08007839 	.word	0x08007839
 8007890:	080079bd 	.word	0x080079bd
 8007894:	08007839 	.word	0x08007839
 8007898:	08007839 	.word	0x08007839
 800789c:	08007839 	.word	0x08007839
 80078a0:	08007839 	.word	0x08007839
 80078a4:	08007975 	.word	0x08007975
 80078a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80078ac:	e7db      	b.n	8007866 <_scanf_float+0x8e>
 80078ae:	290e      	cmp	r1, #14
 80078b0:	d8c2      	bhi.n	8007838 <_scanf_float+0x60>
 80078b2:	a001      	add	r0, pc, #4	; (adr r0, 80078b8 <_scanf_float+0xe0>)
 80078b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80078b8:	08007967 	.word	0x08007967
 80078bc:	08007839 	.word	0x08007839
 80078c0:	08007967 	.word	0x08007967
 80078c4:	080079fb 	.word	0x080079fb
 80078c8:	08007839 	.word	0x08007839
 80078cc:	08007915 	.word	0x08007915
 80078d0:	08007951 	.word	0x08007951
 80078d4:	08007951 	.word	0x08007951
 80078d8:	08007951 	.word	0x08007951
 80078dc:	08007951 	.word	0x08007951
 80078e0:	08007951 	.word	0x08007951
 80078e4:	08007951 	.word	0x08007951
 80078e8:	08007951 	.word	0x08007951
 80078ec:	08007951 	.word	0x08007951
 80078f0:	08007951 	.word	0x08007951
 80078f4:	2b6e      	cmp	r3, #110	; 0x6e
 80078f6:	d809      	bhi.n	800790c <_scanf_float+0x134>
 80078f8:	2b60      	cmp	r3, #96	; 0x60
 80078fa:	d8b2      	bhi.n	8007862 <_scanf_float+0x8a>
 80078fc:	2b54      	cmp	r3, #84	; 0x54
 80078fe:	d077      	beq.n	80079f0 <_scanf_float+0x218>
 8007900:	2b59      	cmp	r3, #89	; 0x59
 8007902:	d199      	bne.n	8007838 <_scanf_float+0x60>
 8007904:	2d07      	cmp	r5, #7
 8007906:	d197      	bne.n	8007838 <_scanf_float+0x60>
 8007908:	2508      	movs	r5, #8
 800790a:	e029      	b.n	8007960 <_scanf_float+0x188>
 800790c:	2b74      	cmp	r3, #116	; 0x74
 800790e:	d06f      	beq.n	80079f0 <_scanf_float+0x218>
 8007910:	2b79      	cmp	r3, #121	; 0x79
 8007912:	e7f6      	b.n	8007902 <_scanf_float+0x12a>
 8007914:	6821      	ldr	r1, [r4, #0]
 8007916:	05c8      	lsls	r0, r1, #23
 8007918:	d51a      	bpl.n	8007950 <_scanf_float+0x178>
 800791a:	9b02      	ldr	r3, [sp, #8]
 800791c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007920:	6021      	str	r1, [r4, #0]
 8007922:	f109 0901 	add.w	r9, r9, #1
 8007926:	b11b      	cbz	r3, 8007930 <_scanf_float+0x158>
 8007928:	3b01      	subs	r3, #1
 800792a:	3201      	adds	r2, #1
 800792c:	9302      	str	r3, [sp, #8]
 800792e:	60a2      	str	r2, [r4, #8]
 8007930:	68a3      	ldr	r3, [r4, #8]
 8007932:	3b01      	subs	r3, #1
 8007934:	60a3      	str	r3, [r4, #8]
 8007936:	6923      	ldr	r3, [r4, #16]
 8007938:	3301      	adds	r3, #1
 800793a:	6123      	str	r3, [r4, #16]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	3b01      	subs	r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	607b      	str	r3, [r7, #4]
 8007944:	f340 8084 	ble.w	8007a50 <_scanf_float+0x278>
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	3301      	adds	r3, #1
 800794c:	603b      	str	r3, [r7, #0]
 800794e:	e766      	b.n	800781e <_scanf_float+0x46>
 8007950:	eb1a 0f05 	cmn.w	sl, r5
 8007954:	f47f af70 	bne.w	8007838 <_scanf_float+0x60>
 8007958:	6822      	ldr	r2, [r4, #0]
 800795a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800795e:	6022      	str	r2, [r4, #0]
 8007960:	f806 3b01 	strb.w	r3, [r6], #1
 8007964:	e7e4      	b.n	8007930 <_scanf_float+0x158>
 8007966:	6822      	ldr	r2, [r4, #0]
 8007968:	0610      	lsls	r0, r2, #24
 800796a:	f57f af65 	bpl.w	8007838 <_scanf_float+0x60>
 800796e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007972:	e7f4      	b.n	800795e <_scanf_float+0x186>
 8007974:	f1ba 0f00 	cmp.w	sl, #0
 8007978:	d10e      	bne.n	8007998 <_scanf_float+0x1c0>
 800797a:	f1b9 0f00 	cmp.w	r9, #0
 800797e:	d10e      	bne.n	800799e <_scanf_float+0x1c6>
 8007980:	6822      	ldr	r2, [r4, #0]
 8007982:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007986:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800798a:	d108      	bne.n	800799e <_scanf_float+0x1c6>
 800798c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007990:	6022      	str	r2, [r4, #0]
 8007992:	f04f 0a01 	mov.w	sl, #1
 8007996:	e7e3      	b.n	8007960 <_scanf_float+0x188>
 8007998:	f1ba 0f02 	cmp.w	sl, #2
 800799c:	d055      	beq.n	8007a4a <_scanf_float+0x272>
 800799e:	2d01      	cmp	r5, #1
 80079a0:	d002      	beq.n	80079a8 <_scanf_float+0x1d0>
 80079a2:	2d04      	cmp	r5, #4
 80079a4:	f47f af48 	bne.w	8007838 <_scanf_float+0x60>
 80079a8:	3501      	adds	r5, #1
 80079aa:	b2ed      	uxtb	r5, r5
 80079ac:	e7d8      	b.n	8007960 <_scanf_float+0x188>
 80079ae:	f1ba 0f01 	cmp.w	sl, #1
 80079b2:	f47f af41 	bne.w	8007838 <_scanf_float+0x60>
 80079b6:	f04f 0a02 	mov.w	sl, #2
 80079ba:	e7d1      	b.n	8007960 <_scanf_float+0x188>
 80079bc:	b97d      	cbnz	r5, 80079de <_scanf_float+0x206>
 80079be:	f1b9 0f00 	cmp.w	r9, #0
 80079c2:	f47f af3c 	bne.w	800783e <_scanf_float+0x66>
 80079c6:	6822      	ldr	r2, [r4, #0]
 80079c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80079cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80079d0:	f47f af39 	bne.w	8007846 <_scanf_float+0x6e>
 80079d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80079d8:	6022      	str	r2, [r4, #0]
 80079da:	2501      	movs	r5, #1
 80079dc:	e7c0      	b.n	8007960 <_scanf_float+0x188>
 80079de:	2d03      	cmp	r5, #3
 80079e0:	d0e2      	beq.n	80079a8 <_scanf_float+0x1d0>
 80079e2:	2d05      	cmp	r5, #5
 80079e4:	e7de      	b.n	80079a4 <_scanf_float+0x1cc>
 80079e6:	2d02      	cmp	r5, #2
 80079e8:	f47f af26 	bne.w	8007838 <_scanf_float+0x60>
 80079ec:	2503      	movs	r5, #3
 80079ee:	e7b7      	b.n	8007960 <_scanf_float+0x188>
 80079f0:	2d06      	cmp	r5, #6
 80079f2:	f47f af21 	bne.w	8007838 <_scanf_float+0x60>
 80079f6:	2507      	movs	r5, #7
 80079f8:	e7b2      	b.n	8007960 <_scanf_float+0x188>
 80079fa:	6822      	ldr	r2, [r4, #0]
 80079fc:	0591      	lsls	r1, r2, #22
 80079fe:	f57f af1b 	bpl.w	8007838 <_scanf_float+0x60>
 8007a02:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007a06:	6022      	str	r2, [r4, #0]
 8007a08:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a0c:	e7a8      	b.n	8007960 <_scanf_float+0x188>
 8007a0e:	6822      	ldr	r2, [r4, #0]
 8007a10:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007a14:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007a18:	d006      	beq.n	8007a28 <_scanf_float+0x250>
 8007a1a:	0550      	lsls	r0, r2, #21
 8007a1c:	f57f af0c 	bpl.w	8007838 <_scanf_float+0x60>
 8007a20:	f1b9 0f00 	cmp.w	r9, #0
 8007a24:	f43f af0f 	beq.w	8007846 <_scanf_float+0x6e>
 8007a28:	0591      	lsls	r1, r2, #22
 8007a2a:	bf58      	it	pl
 8007a2c:	9901      	ldrpl	r1, [sp, #4]
 8007a2e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a32:	bf58      	it	pl
 8007a34:	eba9 0101 	subpl.w	r1, r9, r1
 8007a38:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007a3c:	bf58      	it	pl
 8007a3e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a42:	6022      	str	r2, [r4, #0]
 8007a44:	f04f 0900 	mov.w	r9, #0
 8007a48:	e78a      	b.n	8007960 <_scanf_float+0x188>
 8007a4a:	f04f 0a03 	mov.w	sl, #3
 8007a4e:	e787      	b.n	8007960 <_scanf_float+0x188>
 8007a50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007a54:	4639      	mov	r1, r7
 8007a56:	4640      	mov	r0, r8
 8007a58:	4798      	blx	r3
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	f43f aedf 	beq.w	800781e <_scanf_float+0x46>
 8007a60:	e6ea      	b.n	8007838 <_scanf_float+0x60>
 8007a62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a6a:	463a      	mov	r2, r7
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	4798      	blx	r3
 8007a70:	6923      	ldr	r3, [r4, #16]
 8007a72:	3b01      	subs	r3, #1
 8007a74:	6123      	str	r3, [r4, #16]
 8007a76:	e6ec      	b.n	8007852 <_scanf_float+0x7a>
 8007a78:	1e6b      	subs	r3, r5, #1
 8007a7a:	2b06      	cmp	r3, #6
 8007a7c:	d825      	bhi.n	8007aca <_scanf_float+0x2f2>
 8007a7e:	2d02      	cmp	r5, #2
 8007a80:	d836      	bhi.n	8007af0 <_scanf_float+0x318>
 8007a82:	455e      	cmp	r6, fp
 8007a84:	f67f aee8 	bls.w	8007858 <_scanf_float+0x80>
 8007a88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a8c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a90:	463a      	mov	r2, r7
 8007a92:	4640      	mov	r0, r8
 8007a94:	4798      	blx	r3
 8007a96:	6923      	ldr	r3, [r4, #16]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	6123      	str	r3, [r4, #16]
 8007a9c:	e7f1      	b.n	8007a82 <_scanf_float+0x2aa>
 8007a9e:	9802      	ldr	r0, [sp, #8]
 8007aa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007aa4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007aa8:	9002      	str	r0, [sp, #8]
 8007aaa:	463a      	mov	r2, r7
 8007aac:	4640      	mov	r0, r8
 8007aae:	4798      	blx	r3
 8007ab0:	6923      	ldr	r3, [r4, #16]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	6123      	str	r3, [r4, #16]
 8007ab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007aba:	fa5f fa8a 	uxtb.w	sl, sl
 8007abe:	f1ba 0f02 	cmp.w	sl, #2
 8007ac2:	d1ec      	bne.n	8007a9e <_scanf_float+0x2c6>
 8007ac4:	3d03      	subs	r5, #3
 8007ac6:	b2ed      	uxtb	r5, r5
 8007ac8:	1b76      	subs	r6, r6, r5
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	05da      	lsls	r2, r3, #23
 8007ace:	d52f      	bpl.n	8007b30 <_scanf_float+0x358>
 8007ad0:	055b      	lsls	r3, r3, #21
 8007ad2:	d510      	bpl.n	8007af6 <_scanf_float+0x31e>
 8007ad4:	455e      	cmp	r6, fp
 8007ad6:	f67f aebf 	bls.w	8007858 <_scanf_float+0x80>
 8007ada:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ade:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ae2:	463a      	mov	r2, r7
 8007ae4:	4640      	mov	r0, r8
 8007ae6:	4798      	blx	r3
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	6123      	str	r3, [r4, #16]
 8007aee:	e7f1      	b.n	8007ad4 <_scanf_float+0x2fc>
 8007af0:	46aa      	mov	sl, r5
 8007af2:	9602      	str	r6, [sp, #8]
 8007af4:	e7df      	b.n	8007ab6 <_scanf_float+0x2de>
 8007af6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007afa:	6923      	ldr	r3, [r4, #16]
 8007afc:	2965      	cmp	r1, #101	; 0x65
 8007afe:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b02:	f106 35ff 	add.w	r5, r6, #4294967295
 8007b06:	6123      	str	r3, [r4, #16]
 8007b08:	d00c      	beq.n	8007b24 <_scanf_float+0x34c>
 8007b0a:	2945      	cmp	r1, #69	; 0x45
 8007b0c:	d00a      	beq.n	8007b24 <_scanf_float+0x34c>
 8007b0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b12:	463a      	mov	r2, r7
 8007b14:	4640      	mov	r0, r8
 8007b16:	4798      	blx	r3
 8007b18:	6923      	ldr	r3, [r4, #16]
 8007b1a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	1eb5      	subs	r5, r6, #2
 8007b22:	6123      	str	r3, [r4, #16]
 8007b24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b28:	463a      	mov	r2, r7
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	4798      	blx	r3
 8007b2e:	462e      	mov	r6, r5
 8007b30:	6825      	ldr	r5, [r4, #0]
 8007b32:	f015 0510 	ands.w	r5, r5, #16
 8007b36:	d159      	bne.n	8007bec <_scanf_float+0x414>
 8007b38:	7035      	strb	r5, [r6, #0]
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b44:	d11b      	bne.n	8007b7e <_scanf_float+0x3a6>
 8007b46:	9b01      	ldr	r3, [sp, #4]
 8007b48:	454b      	cmp	r3, r9
 8007b4a:	eba3 0209 	sub.w	r2, r3, r9
 8007b4e:	d123      	bne.n	8007b98 <_scanf_float+0x3c0>
 8007b50:	2200      	movs	r2, #0
 8007b52:	4659      	mov	r1, fp
 8007b54:	4640      	mov	r0, r8
 8007b56:	f000 fef1 	bl	800893c <_strtod_r>
 8007b5a:	6822      	ldr	r2, [r4, #0]
 8007b5c:	9b03      	ldr	r3, [sp, #12]
 8007b5e:	f012 0f02 	tst.w	r2, #2
 8007b62:	ec57 6b10 	vmov	r6, r7, d0
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	d021      	beq.n	8007bae <_scanf_float+0x3d6>
 8007b6a:	9903      	ldr	r1, [sp, #12]
 8007b6c:	1d1a      	adds	r2, r3, #4
 8007b6e:	600a      	str	r2, [r1, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	e9c3 6700 	strd	r6, r7, [r3]
 8007b76:	68e3      	ldr	r3, [r4, #12]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	60e3      	str	r3, [r4, #12]
 8007b7c:	e66d      	b.n	800785a <_scanf_float+0x82>
 8007b7e:	9b04      	ldr	r3, [sp, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0e5      	beq.n	8007b50 <_scanf_float+0x378>
 8007b84:	9905      	ldr	r1, [sp, #20]
 8007b86:	230a      	movs	r3, #10
 8007b88:	462a      	mov	r2, r5
 8007b8a:	3101      	adds	r1, #1
 8007b8c:	4640      	mov	r0, r8
 8007b8e:	f000 ff5d 	bl	8008a4c <_strtol_r>
 8007b92:	9b04      	ldr	r3, [sp, #16]
 8007b94:	9e05      	ldr	r6, [sp, #20]
 8007b96:	1ac2      	subs	r2, r0, r3
 8007b98:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007b9c:	429e      	cmp	r6, r3
 8007b9e:	bf28      	it	cs
 8007ba0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007ba4:	4912      	ldr	r1, [pc, #72]	; (8007bf0 <_scanf_float+0x418>)
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f000 f82c 	bl	8007c04 <siprintf>
 8007bac:	e7d0      	b.n	8007b50 <_scanf_float+0x378>
 8007bae:	9903      	ldr	r1, [sp, #12]
 8007bb0:	f012 0f04 	tst.w	r2, #4
 8007bb4:	f103 0204 	add.w	r2, r3, #4
 8007bb8:	600a      	str	r2, [r1, #0]
 8007bba:	d1d9      	bne.n	8007b70 <_scanf_float+0x398>
 8007bbc:	f8d3 8000 	ldr.w	r8, [r3]
 8007bc0:	ee10 2a10 	vmov	r2, s0
 8007bc4:	ee10 0a10 	vmov	r0, s0
 8007bc8:	463b      	mov	r3, r7
 8007bca:	4639      	mov	r1, r7
 8007bcc:	f7f8 ffae 	bl	8000b2c <__aeabi_dcmpun>
 8007bd0:	b128      	cbz	r0, 8007bde <_scanf_float+0x406>
 8007bd2:	4808      	ldr	r0, [pc, #32]	; (8007bf4 <_scanf_float+0x41c>)
 8007bd4:	f000 f810 	bl	8007bf8 <nanf>
 8007bd8:	ed88 0a00 	vstr	s0, [r8]
 8007bdc:	e7cb      	b.n	8007b76 <_scanf_float+0x39e>
 8007bde:	4630      	mov	r0, r6
 8007be0:	4639      	mov	r1, r7
 8007be2:	f7f9 f801 	bl	8000be8 <__aeabi_d2f>
 8007be6:	f8c8 0000 	str.w	r0, [r8]
 8007bea:	e7c4      	b.n	8007b76 <_scanf_float+0x39e>
 8007bec:	2500      	movs	r5, #0
 8007bee:	e634      	b.n	800785a <_scanf_float+0x82>
 8007bf0:	0800d178 	.word	0x0800d178
 8007bf4:	0800d20b 	.word	0x0800d20b

08007bf8 <nanf>:
 8007bf8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007c00 <nanf+0x8>
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	7fc00000 	.word	0x7fc00000

08007c04 <siprintf>:
 8007c04:	b40e      	push	{r1, r2, r3}
 8007c06:	b500      	push	{lr}
 8007c08:	b09c      	sub	sp, #112	; 0x70
 8007c0a:	ab1d      	add	r3, sp, #116	; 0x74
 8007c0c:	9002      	str	r0, [sp, #8]
 8007c0e:	9006      	str	r0, [sp, #24]
 8007c10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c14:	4809      	ldr	r0, [pc, #36]	; (8007c3c <siprintf+0x38>)
 8007c16:	9107      	str	r1, [sp, #28]
 8007c18:	9104      	str	r1, [sp, #16]
 8007c1a:	4909      	ldr	r1, [pc, #36]	; (8007c40 <siprintf+0x3c>)
 8007c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c20:	9105      	str	r1, [sp, #20]
 8007c22:	6800      	ldr	r0, [r0, #0]
 8007c24:	9301      	str	r3, [sp, #4]
 8007c26:	a902      	add	r1, sp, #8
 8007c28:	f002 ff92 	bl	800ab50 <_svfiprintf_r>
 8007c2c:	9b02      	ldr	r3, [sp, #8]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	701a      	strb	r2, [r3, #0]
 8007c32:	b01c      	add	sp, #112	; 0x70
 8007c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c38:	b003      	add	sp, #12
 8007c3a:	4770      	bx	lr
 8007c3c:	2000009c 	.word	0x2000009c
 8007c40:	ffff0208 	.word	0xffff0208

08007c44 <__sread>:
 8007c44:	b510      	push	{r4, lr}
 8007c46:	460c      	mov	r4, r1
 8007c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c4c:	f003 f9da 	bl	800b004 <_read_r>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	bfab      	itete	ge
 8007c54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c56:	89a3      	ldrhlt	r3, [r4, #12]
 8007c58:	181b      	addge	r3, r3, r0
 8007c5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c5e:	bfac      	ite	ge
 8007c60:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c62:	81a3      	strhlt	r3, [r4, #12]
 8007c64:	bd10      	pop	{r4, pc}

08007c66 <__swrite>:
 8007c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c6a:	461f      	mov	r7, r3
 8007c6c:	898b      	ldrh	r3, [r1, #12]
 8007c6e:	05db      	lsls	r3, r3, #23
 8007c70:	4605      	mov	r5, r0
 8007c72:	460c      	mov	r4, r1
 8007c74:	4616      	mov	r6, r2
 8007c76:	d505      	bpl.n	8007c84 <__swrite+0x1e>
 8007c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f002 f926 	bl	8009ed0 <_lseek_r>
 8007c84:	89a3      	ldrh	r3, [r4, #12]
 8007c86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c8e:	81a3      	strh	r3, [r4, #12]
 8007c90:	4632      	mov	r2, r6
 8007c92:	463b      	mov	r3, r7
 8007c94:	4628      	mov	r0, r5
 8007c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9a:	f000 bed9 	b.w	8008a50 <_write_r>

08007c9e <__sseek>:
 8007c9e:	b510      	push	{r4, lr}
 8007ca0:	460c      	mov	r4, r1
 8007ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca6:	f002 f913 	bl	8009ed0 <_lseek_r>
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	bf15      	itete	ne
 8007cb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cba:	81a3      	strheq	r3, [r4, #12]
 8007cbc:	bf18      	it	ne
 8007cbe:	81a3      	strhne	r3, [r4, #12]
 8007cc0:	bd10      	pop	{r4, pc}

08007cc2 <__sclose>:
 8007cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc6:	f000 bef3 	b.w	8008ab0 <_close_r>

08007cca <strstr>:
 8007cca:	780a      	ldrb	r2, [r1, #0]
 8007ccc:	b570      	push	{r4, r5, r6, lr}
 8007cce:	b96a      	cbnz	r2, 8007cec <strstr+0x22>
 8007cd0:	bd70      	pop	{r4, r5, r6, pc}
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d109      	bne.n	8007cea <strstr+0x20>
 8007cd6:	460c      	mov	r4, r1
 8007cd8:	4605      	mov	r5, r0
 8007cda:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0f6      	beq.n	8007cd0 <strstr+0x6>
 8007ce2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007ce6:	429e      	cmp	r6, r3
 8007ce8:	d0f7      	beq.n	8007cda <strstr+0x10>
 8007cea:	3001      	adds	r0, #1
 8007cec:	7803      	ldrb	r3, [r0, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1ef      	bne.n	8007cd2 <strstr+0x8>
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	e7ec      	b.n	8007cd0 <strstr+0x6>

08007cf6 <sulp>:
 8007cf6:	b570      	push	{r4, r5, r6, lr}
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	460d      	mov	r5, r1
 8007cfc:	ec45 4b10 	vmov	d0, r4, r5
 8007d00:	4616      	mov	r6, r2
 8007d02:	f002 fc83 	bl	800a60c <__ulp>
 8007d06:	ec51 0b10 	vmov	r0, r1, d0
 8007d0a:	b17e      	cbz	r6, 8007d2c <sulp+0x36>
 8007d0c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007d10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	dd09      	ble.n	8007d2c <sulp+0x36>
 8007d18:	051b      	lsls	r3, r3, #20
 8007d1a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007d1e:	2400      	movs	r4, #0
 8007d20:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007d24:	4622      	mov	r2, r4
 8007d26:	462b      	mov	r3, r5
 8007d28:	f7f8 fc66 	bl	80005f8 <__aeabi_dmul>
 8007d2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d30 <_strtod_l>:
 8007d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d34:	ed2d 8b02 	vpush	{d8}
 8007d38:	b09d      	sub	sp, #116	; 0x74
 8007d3a:	461f      	mov	r7, r3
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	9318      	str	r3, [sp, #96]	; 0x60
 8007d40:	4ba2      	ldr	r3, [pc, #648]	; (8007fcc <_strtod_l+0x29c>)
 8007d42:	9213      	str	r2, [sp, #76]	; 0x4c
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	9305      	str	r3, [sp, #20]
 8007d48:	4604      	mov	r4, r0
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	4688      	mov	r8, r1
 8007d4e:	f7f8 fa3f 	bl	80001d0 <strlen>
 8007d52:	f04f 0a00 	mov.w	sl, #0
 8007d56:	4605      	mov	r5, r0
 8007d58:	f04f 0b00 	mov.w	fp, #0
 8007d5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007d60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d62:	781a      	ldrb	r2, [r3, #0]
 8007d64:	2a2b      	cmp	r2, #43	; 0x2b
 8007d66:	d04e      	beq.n	8007e06 <_strtod_l+0xd6>
 8007d68:	d83b      	bhi.n	8007de2 <_strtod_l+0xb2>
 8007d6a:	2a0d      	cmp	r2, #13
 8007d6c:	d834      	bhi.n	8007dd8 <_strtod_l+0xa8>
 8007d6e:	2a08      	cmp	r2, #8
 8007d70:	d834      	bhi.n	8007ddc <_strtod_l+0xac>
 8007d72:	2a00      	cmp	r2, #0
 8007d74:	d03e      	beq.n	8007df4 <_strtod_l+0xc4>
 8007d76:	2300      	movs	r3, #0
 8007d78:	930a      	str	r3, [sp, #40]	; 0x28
 8007d7a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007d7c:	7833      	ldrb	r3, [r6, #0]
 8007d7e:	2b30      	cmp	r3, #48	; 0x30
 8007d80:	f040 80b0 	bne.w	8007ee4 <_strtod_l+0x1b4>
 8007d84:	7873      	ldrb	r3, [r6, #1]
 8007d86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d8a:	2b58      	cmp	r3, #88	; 0x58
 8007d8c:	d168      	bne.n	8007e60 <_strtod_l+0x130>
 8007d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d90:	9301      	str	r3, [sp, #4]
 8007d92:	ab18      	add	r3, sp, #96	; 0x60
 8007d94:	9702      	str	r7, [sp, #8]
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	4a8d      	ldr	r2, [pc, #564]	; (8007fd0 <_strtod_l+0x2a0>)
 8007d9a:	ab19      	add	r3, sp, #100	; 0x64
 8007d9c:	a917      	add	r1, sp, #92	; 0x5c
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f001 fd8a 	bl	80098b8 <__gethex>
 8007da4:	f010 0707 	ands.w	r7, r0, #7
 8007da8:	4605      	mov	r5, r0
 8007daa:	d005      	beq.n	8007db8 <_strtod_l+0x88>
 8007dac:	2f06      	cmp	r7, #6
 8007dae:	d12c      	bne.n	8007e0a <_strtod_l+0xda>
 8007db0:	3601      	adds	r6, #1
 8007db2:	2300      	movs	r3, #0
 8007db4:	9617      	str	r6, [sp, #92]	; 0x5c
 8007db6:	930a      	str	r3, [sp, #40]	; 0x28
 8007db8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f040 8590 	bne.w	80088e0 <_strtod_l+0xbb0>
 8007dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dc2:	b1eb      	cbz	r3, 8007e00 <_strtod_l+0xd0>
 8007dc4:	4652      	mov	r2, sl
 8007dc6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007dca:	ec43 2b10 	vmov	d0, r2, r3
 8007dce:	b01d      	add	sp, #116	; 0x74
 8007dd0:	ecbd 8b02 	vpop	{d8}
 8007dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd8:	2a20      	cmp	r2, #32
 8007dda:	d1cc      	bne.n	8007d76 <_strtod_l+0x46>
 8007ddc:	3301      	adds	r3, #1
 8007dde:	9317      	str	r3, [sp, #92]	; 0x5c
 8007de0:	e7be      	b.n	8007d60 <_strtod_l+0x30>
 8007de2:	2a2d      	cmp	r2, #45	; 0x2d
 8007de4:	d1c7      	bne.n	8007d76 <_strtod_l+0x46>
 8007de6:	2201      	movs	r2, #1
 8007de8:	920a      	str	r2, [sp, #40]	; 0x28
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	9217      	str	r2, [sp, #92]	; 0x5c
 8007dee:	785b      	ldrb	r3, [r3, #1]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1c2      	bne.n	8007d7a <_strtod_l+0x4a>
 8007df4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007df6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f040 856e 	bne.w	80088dc <_strtod_l+0xbac>
 8007e00:	4652      	mov	r2, sl
 8007e02:	465b      	mov	r3, fp
 8007e04:	e7e1      	b.n	8007dca <_strtod_l+0x9a>
 8007e06:	2200      	movs	r2, #0
 8007e08:	e7ee      	b.n	8007de8 <_strtod_l+0xb8>
 8007e0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007e0c:	b13a      	cbz	r2, 8007e1e <_strtod_l+0xee>
 8007e0e:	2135      	movs	r1, #53	; 0x35
 8007e10:	a81a      	add	r0, sp, #104	; 0x68
 8007e12:	f002 fd06 	bl	800a822 <__copybits>
 8007e16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f002 f8c5 	bl	8009fa8 <_Bfree>
 8007e1e:	3f01      	subs	r7, #1
 8007e20:	2f04      	cmp	r7, #4
 8007e22:	d806      	bhi.n	8007e32 <_strtod_l+0x102>
 8007e24:	e8df f007 	tbb	[pc, r7]
 8007e28:	1714030a 	.word	0x1714030a
 8007e2c:	0a          	.byte	0x0a
 8007e2d:	00          	.byte	0x00
 8007e2e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007e32:	0728      	lsls	r0, r5, #28
 8007e34:	d5c0      	bpl.n	8007db8 <_strtod_l+0x88>
 8007e36:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007e3a:	e7bd      	b.n	8007db8 <_strtod_l+0x88>
 8007e3c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007e40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007e42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007e46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007e4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007e4e:	e7f0      	b.n	8007e32 <_strtod_l+0x102>
 8007e50:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007fd4 <_strtod_l+0x2a4>
 8007e54:	e7ed      	b.n	8007e32 <_strtod_l+0x102>
 8007e56:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007e5a:	f04f 3aff 	mov.w	sl, #4294967295
 8007e5e:	e7e8      	b.n	8007e32 <_strtod_l+0x102>
 8007e60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e66:	785b      	ldrb	r3, [r3, #1]
 8007e68:	2b30      	cmp	r3, #48	; 0x30
 8007e6a:	d0f9      	beq.n	8007e60 <_strtod_l+0x130>
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d0a3      	beq.n	8007db8 <_strtod_l+0x88>
 8007e70:	2301      	movs	r3, #1
 8007e72:	f04f 0900 	mov.w	r9, #0
 8007e76:	9304      	str	r3, [sp, #16]
 8007e78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e7a:	9308      	str	r3, [sp, #32]
 8007e7c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007e80:	464f      	mov	r7, r9
 8007e82:	220a      	movs	r2, #10
 8007e84:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007e86:	7806      	ldrb	r6, [r0, #0]
 8007e88:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007e8c:	b2d9      	uxtb	r1, r3
 8007e8e:	2909      	cmp	r1, #9
 8007e90:	d92a      	bls.n	8007ee8 <_strtod_l+0x1b8>
 8007e92:	9905      	ldr	r1, [sp, #20]
 8007e94:	462a      	mov	r2, r5
 8007e96:	f003 f8df 	bl	800b058 <strncmp>
 8007e9a:	b398      	cbz	r0, 8007f04 <_strtod_l+0x1d4>
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	4632      	mov	r2, r6
 8007ea0:	463d      	mov	r5, r7
 8007ea2:	9005      	str	r0, [sp, #20]
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2a65      	cmp	r2, #101	; 0x65
 8007ea8:	d001      	beq.n	8007eae <_strtod_l+0x17e>
 8007eaa:	2a45      	cmp	r2, #69	; 0x45
 8007eac:	d118      	bne.n	8007ee0 <_strtod_l+0x1b0>
 8007eae:	b91d      	cbnz	r5, 8007eb8 <_strtod_l+0x188>
 8007eb0:	9a04      	ldr	r2, [sp, #16]
 8007eb2:	4302      	orrs	r2, r0
 8007eb4:	d09e      	beq.n	8007df4 <_strtod_l+0xc4>
 8007eb6:	2500      	movs	r5, #0
 8007eb8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007ebc:	f108 0201 	add.w	r2, r8, #1
 8007ec0:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ec2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007ec6:	2a2b      	cmp	r2, #43	; 0x2b
 8007ec8:	d075      	beq.n	8007fb6 <_strtod_l+0x286>
 8007eca:	2a2d      	cmp	r2, #45	; 0x2d
 8007ecc:	d07b      	beq.n	8007fc6 <_strtod_l+0x296>
 8007ece:	f04f 0c00 	mov.w	ip, #0
 8007ed2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007ed6:	2909      	cmp	r1, #9
 8007ed8:	f240 8082 	bls.w	8007fe0 <_strtod_l+0x2b0>
 8007edc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007ee0:	2600      	movs	r6, #0
 8007ee2:	e09d      	b.n	8008020 <_strtod_l+0x2f0>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	e7c4      	b.n	8007e72 <_strtod_l+0x142>
 8007ee8:	2f08      	cmp	r7, #8
 8007eea:	bfd8      	it	le
 8007eec:	9907      	ldrle	r1, [sp, #28]
 8007eee:	f100 0001 	add.w	r0, r0, #1
 8007ef2:	bfda      	itte	le
 8007ef4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ef8:	9307      	strle	r3, [sp, #28]
 8007efa:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007efe:	3701      	adds	r7, #1
 8007f00:	9017      	str	r0, [sp, #92]	; 0x5c
 8007f02:	e7bf      	b.n	8007e84 <_strtod_l+0x154>
 8007f04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f06:	195a      	adds	r2, r3, r5
 8007f08:	9217      	str	r2, [sp, #92]	; 0x5c
 8007f0a:	5d5a      	ldrb	r2, [r3, r5]
 8007f0c:	2f00      	cmp	r7, #0
 8007f0e:	d037      	beq.n	8007f80 <_strtod_l+0x250>
 8007f10:	9005      	str	r0, [sp, #20]
 8007f12:	463d      	mov	r5, r7
 8007f14:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007f18:	2b09      	cmp	r3, #9
 8007f1a:	d912      	bls.n	8007f42 <_strtod_l+0x212>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e7c2      	b.n	8007ea6 <_strtod_l+0x176>
 8007f20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f22:	1c5a      	adds	r2, r3, #1
 8007f24:	9217      	str	r2, [sp, #92]	; 0x5c
 8007f26:	785a      	ldrb	r2, [r3, #1]
 8007f28:	3001      	adds	r0, #1
 8007f2a:	2a30      	cmp	r2, #48	; 0x30
 8007f2c:	d0f8      	beq.n	8007f20 <_strtod_l+0x1f0>
 8007f2e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007f32:	2b08      	cmp	r3, #8
 8007f34:	f200 84d9 	bhi.w	80088ea <_strtod_l+0xbba>
 8007f38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f3a:	9005      	str	r0, [sp, #20]
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	9308      	str	r3, [sp, #32]
 8007f40:	4605      	mov	r5, r0
 8007f42:	3a30      	subs	r2, #48	; 0x30
 8007f44:	f100 0301 	add.w	r3, r0, #1
 8007f48:	d014      	beq.n	8007f74 <_strtod_l+0x244>
 8007f4a:	9905      	ldr	r1, [sp, #20]
 8007f4c:	4419      	add	r1, r3
 8007f4e:	9105      	str	r1, [sp, #20]
 8007f50:	462b      	mov	r3, r5
 8007f52:	eb00 0e05 	add.w	lr, r0, r5
 8007f56:	210a      	movs	r1, #10
 8007f58:	4573      	cmp	r3, lr
 8007f5a:	d113      	bne.n	8007f84 <_strtod_l+0x254>
 8007f5c:	182b      	adds	r3, r5, r0
 8007f5e:	2b08      	cmp	r3, #8
 8007f60:	f105 0501 	add.w	r5, r5, #1
 8007f64:	4405      	add	r5, r0
 8007f66:	dc1c      	bgt.n	8007fa2 <_strtod_l+0x272>
 8007f68:	9907      	ldr	r1, [sp, #28]
 8007f6a:	230a      	movs	r3, #10
 8007f6c:	fb03 2301 	mla	r3, r3, r1, r2
 8007f70:	9307      	str	r3, [sp, #28]
 8007f72:	2300      	movs	r3, #0
 8007f74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f76:	1c51      	adds	r1, r2, #1
 8007f78:	9117      	str	r1, [sp, #92]	; 0x5c
 8007f7a:	7852      	ldrb	r2, [r2, #1]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	e7c9      	b.n	8007f14 <_strtod_l+0x1e4>
 8007f80:	4638      	mov	r0, r7
 8007f82:	e7d2      	b.n	8007f2a <_strtod_l+0x1fa>
 8007f84:	2b08      	cmp	r3, #8
 8007f86:	dc04      	bgt.n	8007f92 <_strtod_l+0x262>
 8007f88:	9e07      	ldr	r6, [sp, #28]
 8007f8a:	434e      	muls	r6, r1
 8007f8c:	9607      	str	r6, [sp, #28]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	e7e2      	b.n	8007f58 <_strtod_l+0x228>
 8007f92:	f103 0c01 	add.w	ip, r3, #1
 8007f96:	f1bc 0f10 	cmp.w	ip, #16
 8007f9a:	bfd8      	it	le
 8007f9c:	fb01 f909 	mulle.w	r9, r1, r9
 8007fa0:	e7f5      	b.n	8007f8e <_strtod_l+0x25e>
 8007fa2:	2d10      	cmp	r5, #16
 8007fa4:	bfdc      	itt	le
 8007fa6:	230a      	movle	r3, #10
 8007fa8:	fb03 2909 	mlale	r9, r3, r9, r2
 8007fac:	e7e1      	b.n	8007f72 <_strtod_l+0x242>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	9305      	str	r3, [sp, #20]
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e77c      	b.n	8007eb0 <_strtod_l+0x180>
 8007fb6:	f04f 0c00 	mov.w	ip, #0
 8007fba:	f108 0202 	add.w	r2, r8, #2
 8007fbe:	9217      	str	r2, [sp, #92]	; 0x5c
 8007fc0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007fc4:	e785      	b.n	8007ed2 <_strtod_l+0x1a2>
 8007fc6:	f04f 0c01 	mov.w	ip, #1
 8007fca:	e7f6      	b.n	8007fba <_strtod_l+0x28a>
 8007fcc:	0800d404 	.word	0x0800d404
 8007fd0:	0800d180 	.word	0x0800d180
 8007fd4:	7ff00000 	.word	0x7ff00000
 8007fd8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007fda:	1c51      	adds	r1, r2, #1
 8007fdc:	9117      	str	r1, [sp, #92]	; 0x5c
 8007fde:	7852      	ldrb	r2, [r2, #1]
 8007fe0:	2a30      	cmp	r2, #48	; 0x30
 8007fe2:	d0f9      	beq.n	8007fd8 <_strtod_l+0x2a8>
 8007fe4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007fe8:	2908      	cmp	r1, #8
 8007fea:	f63f af79 	bhi.w	8007ee0 <_strtod_l+0x1b0>
 8007fee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007ff2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ff4:	9206      	str	r2, [sp, #24]
 8007ff6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ff8:	1c51      	adds	r1, r2, #1
 8007ffa:	9117      	str	r1, [sp, #92]	; 0x5c
 8007ffc:	7852      	ldrb	r2, [r2, #1]
 8007ffe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008002:	2e09      	cmp	r6, #9
 8008004:	d937      	bls.n	8008076 <_strtod_l+0x346>
 8008006:	9e06      	ldr	r6, [sp, #24]
 8008008:	1b89      	subs	r1, r1, r6
 800800a:	2908      	cmp	r1, #8
 800800c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008010:	dc02      	bgt.n	8008018 <_strtod_l+0x2e8>
 8008012:	4576      	cmp	r6, lr
 8008014:	bfa8      	it	ge
 8008016:	4676      	movge	r6, lr
 8008018:	f1bc 0f00 	cmp.w	ip, #0
 800801c:	d000      	beq.n	8008020 <_strtod_l+0x2f0>
 800801e:	4276      	negs	r6, r6
 8008020:	2d00      	cmp	r5, #0
 8008022:	d14d      	bne.n	80080c0 <_strtod_l+0x390>
 8008024:	9904      	ldr	r1, [sp, #16]
 8008026:	4301      	orrs	r1, r0
 8008028:	f47f aec6 	bne.w	8007db8 <_strtod_l+0x88>
 800802c:	2b00      	cmp	r3, #0
 800802e:	f47f aee1 	bne.w	8007df4 <_strtod_l+0xc4>
 8008032:	2a69      	cmp	r2, #105	; 0x69
 8008034:	d027      	beq.n	8008086 <_strtod_l+0x356>
 8008036:	dc24      	bgt.n	8008082 <_strtod_l+0x352>
 8008038:	2a49      	cmp	r2, #73	; 0x49
 800803a:	d024      	beq.n	8008086 <_strtod_l+0x356>
 800803c:	2a4e      	cmp	r2, #78	; 0x4e
 800803e:	f47f aed9 	bne.w	8007df4 <_strtod_l+0xc4>
 8008042:	499f      	ldr	r1, [pc, #636]	; (80082c0 <_strtod_l+0x590>)
 8008044:	a817      	add	r0, sp, #92	; 0x5c
 8008046:	f001 fe8f 	bl	8009d68 <__match>
 800804a:	2800      	cmp	r0, #0
 800804c:	f43f aed2 	beq.w	8007df4 <_strtod_l+0xc4>
 8008050:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	2b28      	cmp	r3, #40	; 0x28
 8008056:	d12d      	bne.n	80080b4 <_strtod_l+0x384>
 8008058:	499a      	ldr	r1, [pc, #616]	; (80082c4 <_strtod_l+0x594>)
 800805a:	aa1a      	add	r2, sp, #104	; 0x68
 800805c:	a817      	add	r0, sp, #92	; 0x5c
 800805e:	f001 fe97 	bl	8009d90 <__hexnan>
 8008062:	2805      	cmp	r0, #5
 8008064:	d126      	bne.n	80080b4 <_strtod_l+0x384>
 8008066:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008068:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800806c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008070:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008074:	e6a0      	b.n	8007db8 <_strtod_l+0x88>
 8008076:	210a      	movs	r1, #10
 8008078:	fb01 2e0e 	mla	lr, r1, lr, r2
 800807c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008080:	e7b9      	b.n	8007ff6 <_strtod_l+0x2c6>
 8008082:	2a6e      	cmp	r2, #110	; 0x6e
 8008084:	e7db      	b.n	800803e <_strtod_l+0x30e>
 8008086:	4990      	ldr	r1, [pc, #576]	; (80082c8 <_strtod_l+0x598>)
 8008088:	a817      	add	r0, sp, #92	; 0x5c
 800808a:	f001 fe6d 	bl	8009d68 <__match>
 800808e:	2800      	cmp	r0, #0
 8008090:	f43f aeb0 	beq.w	8007df4 <_strtod_l+0xc4>
 8008094:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008096:	498d      	ldr	r1, [pc, #564]	; (80082cc <_strtod_l+0x59c>)
 8008098:	3b01      	subs	r3, #1
 800809a:	a817      	add	r0, sp, #92	; 0x5c
 800809c:	9317      	str	r3, [sp, #92]	; 0x5c
 800809e:	f001 fe63 	bl	8009d68 <__match>
 80080a2:	b910      	cbnz	r0, 80080aa <_strtod_l+0x37a>
 80080a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080a6:	3301      	adds	r3, #1
 80080a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80080aa:	f8df b230 	ldr.w	fp, [pc, #560]	; 80082dc <_strtod_l+0x5ac>
 80080ae:	f04f 0a00 	mov.w	sl, #0
 80080b2:	e681      	b.n	8007db8 <_strtod_l+0x88>
 80080b4:	4886      	ldr	r0, [pc, #536]	; (80082d0 <_strtod_l+0x5a0>)
 80080b6:	f002 ffb7 	bl	800b028 <nan>
 80080ba:	ec5b ab10 	vmov	sl, fp, d0
 80080be:	e67b      	b.n	8007db8 <_strtod_l+0x88>
 80080c0:	9b05      	ldr	r3, [sp, #20]
 80080c2:	9807      	ldr	r0, [sp, #28]
 80080c4:	1af3      	subs	r3, r6, r3
 80080c6:	2f00      	cmp	r7, #0
 80080c8:	bf08      	it	eq
 80080ca:	462f      	moveq	r7, r5
 80080cc:	2d10      	cmp	r5, #16
 80080ce:	9306      	str	r3, [sp, #24]
 80080d0:	46a8      	mov	r8, r5
 80080d2:	bfa8      	it	ge
 80080d4:	f04f 0810 	movge.w	r8, #16
 80080d8:	f7f8 fa14 	bl	8000504 <__aeabi_ui2d>
 80080dc:	2d09      	cmp	r5, #9
 80080de:	4682      	mov	sl, r0
 80080e0:	468b      	mov	fp, r1
 80080e2:	dd13      	ble.n	800810c <_strtod_l+0x3dc>
 80080e4:	4b7b      	ldr	r3, [pc, #492]	; (80082d4 <_strtod_l+0x5a4>)
 80080e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80080ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80080ee:	f7f8 fa83 	bl	80005f8 <__aeabi_dmul>
 80080f2:	4682      	mov	sl, r0
 80080f4:	4648      	mov	r0, r9
 80080f6:	468b      	mov	fp, r1
 80080f8:	f7f8 fa04 	bl	8000504 <__aeabi_ui2d>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	4650      	mov	r0, sl
 8008102:	4659      	mov	r1, fp
 8008104:	f7f8 f8c2 	bl	800028c <__adddf3>
 8008108:	4682      	mov	sl, r0
 800810a:	468b      	mov	fp, r1
 800810c:	2d0f      	cmp	r5, #15
 800810e:	dc38      	bgt.n	8008182 <_strtod_l+0x452>
 8008110:	9b06      	ldr	r3, [sp, #24]
 8008112:	2b00      	cmp	r3, #0
 8008114:	f43f ae50 	beq.w	8007db8 <_strtod_l+0x88>
 8008118:	dd24      	ble.n	8008164 <_strtod_l+0x434>
 800811a:	2b16      	cmp	r3, #22
 800811c:	dc0b      	bgt.n	8008136 <_strtod_l+0x406>
 800811e:	496d      	ldr	r1, [pc, #436]	; (80082d4 <_strtod_l+0x5a4>)
 8008120:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008128:	4652      	mov	r2, sl
 800812a:	465b      	mov	r3, fp
 800812c:	f7f8 fa64 	bl	80005f8 <__aeabi_dmul>
 8008130:	4682      	mov	sl, r0
 8008132:	468b      	mov	fp, r1
 8008134:	e640      	b.n	8007db8 <_strtod_l+0x88>
 8008136:	9a06      	ldr	r2, [sp, #24]
 8008138:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800813c:	4293      	cmp	r3, r2
 800813e:	db20      	blt.n	8008182 <_strtod_l+0x452>
 8008140:	4c64      	ldr	r4, [pc, #400]	; (80082d4 <_strtod_l+0x5a4>)
 8008142:	f1c5 050f 	rsb	r5, r5, #15
 8008146:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800814a:	4652      	mov	r2, sl
 800814c:	465b      	mov	r3, fp
 800814e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008152:	f7f8 fa51 	bl	80005f8 <__aeabi_dmul>
 8008156:	9b06      	ldr	r3, [sp, #24]
 8008158:	1b5d      	subs	r5, r3, r5
 800815a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800815e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008162:	e7e3      	b.n	800812c <_strtod_l+0x3fc>
 8008164:	9b06      	ldr	r3, [sp, #24]
 8008166:	3316      	adds	r3, #22
 8008168:	db0b      	blt.n	8008182 <_strtod_l+0x452>
 800816a:	9b05      	ldr	r3, [sp, #20]
 800816c:	1b9e      	subs	r6, r3, r6
 800816e:	4b59      	ldr	r3, [pc, #356]	; (80082d4 <_strtod_l+0x5a4>)
 8008170:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008174:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008178:	4650      	mov	r0, sl
 800817a:	4659      	mov	r1, fp
 800817c:	f7f8 fb66 	bl	800084c <__aeabi_ddiv>
 8008180:	e7d6      	b.n	8008130 <_strtod_l+0x400>
 8008182:	9b06      	ldr	r3, [sp, #24]
 8008184:	eba5 0808 	sub.w	r8, r5, r8
 8008188:	4498      	add	r8, r3
 800818a:	f1b8 0f00 	cmp.w	r8, #0
 800818e:	dd74      	ble.n	800827a <_strtod_l+0x54a>
 8008190:	f018 030f 	ands.w	r3, r8, #15
 8008194:	d00a      	beq.n	80081ac <_strtod_l+0x47c>
 8008196:	494f      	ldr	r1, [pc, #316]	; (80082d4 <_strtod_l+0x5a4>)
 8008198:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800819c:	4652      	mov	r2, sl
 800819e:	465b      	mov	r3, fp
 80081a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081a4:	f7f8 fa28 	bl	80005f8 <__aeabi_dmul>
 80081a8:	4682      	mov	sl, r0
 80081aa:	468b      	mov	fp, r1
 80081ac:	f038 080f 	bics.w	r8, r8, #15
 80081b0:	d04f      	beq.n	8008252 <_strtod_l+0x522>
 80081b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80081b6:	dd22      	ble.n	80081fe <_strtod_l+0x4ce>
 80081b8:	2500      	movs	r5, #0
 80081ba:	462e      	mov	r6, r5
 80081bc:	9507      	str	r5, [sp, #28]
 80081be:	9505      	str	r5, [sp, #20]
 80081c0:	2322      	movs	r3, #34	; 0x22
 80081c2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80082dc <_strtod_l+0x5ac>
 80081c6:	6023      	str	r3, [r4, #0]
 80081c8:	f04f 0a00 	mov.w	sl, #0
 80081cc:	9b07      	ldr	r3, [sp, #28]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f43f adf2 	beq.w	8007db8 <_strtod_l+0x88>
 80081d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80081d6:	4620      	mov	r0, r4
 80081d8:	f001 fee6 	bl	8009fa8 <_Bfree>
 80081dc:	9905      	ldr	r1, [sp, #20]
 80081de:	4620      	mov	r0, r4
 80081e0:	f001 fee2 	bl	8009fa8 <_Bfree>
 80081e4:	4631      	mov	r1, r6
 80081e6:	4620      	mov	r0, r4
 80081e8:	f001 fede 	bl	8009fa8 <_Bfree>
 80081ec:	9907      	ldr	r1, [sp, #28]
 80081ee:	4620      	mov	r0, r4
 80081f0:	f001 feda 	bl	8009fa8 <_Bfree>
 80081f4:	4629      	mov	r1, r5
 80081f6:	4620      	mov	r0, r4
 80081f8:	f001 fed6 	bl	8009fa8 <_Bfree>
 80081fc:	e5dc      	b.n	8007db8 <_strtod_l+0x88>
 80081fe:	4b36      	ldr	r3, [pc, #216]	; (80082d8 <_strtod_l+0x5a8>)
 8008200:	9304      	str	r3, [sp, #16]
 8008202:	2300      	movs	r3, #0
 8008204:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008208:	4650      	mov	r0, sl
 800820a:	4659      	mov	r1, fp
 800820c:	4699      	mov	r9, r3
 800820e:	f1b8 0f01 	cmp.w	r8, #1
 8008212:	dc21      	bgt.n	8008258 <_strtod_l+0x528>
 8008214:	b10b      	cbz	r3, 800821a <_strtod_l+0x4ea>
 8008216:	4682      	mov	sl, r0
 8008218:	468b      	mov	fp, r1
 800821a:	4b2f      	ldr	r3, [pc, #188]	; (80082d8 <_strtod_l+0x5a8>)
 800821c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008220:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008224:	4652      	mov	r2, sl
 8008226:	465b      	mov	r3, fp
 8008228:	e9d9 0100 	ldrd	r0, r1, [r9]
 800822c:	f7f8 f9e4 	bl	80005f8 <__aeabi_dmul>
 8008230:	4b2a      	ldr	r3, [pc, #168]	; (80082dc <_strtod_l+0x5ac>)
 8008232:	460a      	mov	r2, r1
 8008234:	400b      	ands	r3, r1
 8008236:	492a      	ldr	r1, [pc, #168]	; (80082e0 <_strtod_l+0x5b0>)
 8008238:	428b      	cmp	r3, r1
 800823a:	4682      	mov	sl, r0
 800823c:	d8bc      	bhi.n	80081b8 <_strtod_l+0x488>
 800823e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008242:	428b      	cmp	r3, r1
 8008244:	bf86      	itte	hi
 8008246:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80082e4 <_strtod_l+0x5b4>
 800824a:	f04f 3aff 	movhi.w	sl, #4294967295
 800824e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008252:	2300      	movs	r3, #0
 8008254:	9304      	str	r3, [sp, #16]
 8008256:	e084      	b.n	8008362 <_strtod_l+0x632>
 8008258:	f018 0f01 	tst.w	r8, #1
 800825c:	d005      	beq.n	800826a <_strtod_l+0x53a>
 800825e:	9b04      	ldr	r3, [sp, #16]
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	f7f8 f9c8 	bl	80005f8 <__aeabi_dmul>
 8008268:	2301      	movs	r3, #1
 800826a:	9a04      	ldr	r2, [sp, #16]
 800826c:	3208      	adds	r2, #8
 800826e:	f109 0901 	add.w	r9, r9, #1
 8008272:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008276:	9204      	str	r2, [sp, #16]
 8008278:	e7c9      	b.n	800820e <_strtod_l+0x4de>
 800827a:	d0ea      	beq.n	8008252 <_strtod_l+0x522>
 800827c:	f1c8 0800 	rsb	r8, r8, #0
 8008280:	f018 020f 	ands.w	r2, r8, #15
 8008284:	d00a      	beq.n	800829c <_strtod_l+0x56c>
 8008286:	4b13      	ldr	r3, [pc, #76]	; (80082d4 <_strtod_l+0x5a4>)
 8008288:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800828c:	4650      	mov	r0, sl
 800828e:	4659      	mov	r1, fp
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	f7f8 fada 	bl	800084c <__aeabi_ddiv>
 8008298:	4682      	mov	sl, r0
 800829a:	468b      	mov	fp, r1
 800829c:	ea5f 1828 	movs.w	r8, r8, asr #4
 80082a0:	d0d7      	beq.n	8008252 <_strtod_l+0x522>
 80082a2:	f1b8 0f1f 	cmp.w	r8, #31
 80082a6:	dd1f      	ble.n	80082e8 <_strtod_l+0x5b8>
 80082a8:	2500      	movs	r5, #0
 80082aa:	462e      	mov	r6, r5
 80082ac:	9507      	str	r5, [sp, #28]
 80082ae:	9505      	str	r5, [sp, #20]
 80082b0:	2322      	movs	r3, #34	; 0x22
 80082b2:	f04f 0a00 	mov.w	sl, #0
 80082b6:	f04f 0b00 	mov.w	fp, #0
 80082ba:	6023      	str	r3, [r4, #0]
 80082bc:	e786      	b.n	80081cc <_strtod_l+0x49c>
 80082be:	bf00      	nop
 80082c0:	0800d151 	.word	0x0800d151
 80082c4:	0800d194 	.word	0x0800d194
 80082c8:	0800d149 	.word	0x0800d149
 80082cc:	0800d310 	.word	0x0800d310
 80082d0:	0800d20b 	.word	0x0800d20b
 80082d4:	0800d4a0 	.word	0x0800d4a0
 80082d8:	0800d478 	.word	0x0800d478
 80082dc:	7ff00000 	.word	0x7ff00000
 80082e0:	7ca00000 	.word	0x7ca00000
 80082e4:	7fefffff 	.word	0x7fefffff
 80082e8:	f018 0310 	ands.w	r3, r8, #16
 80082ec:	bf18      	it	ne
 80082ee:	236a      	movne	r3, #106	; 0x6a
 80082f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80086a0 <_strtod_l+0x970>
 80082f4:	9304      	str	r3, [sp, #16]
 80082f6:	4650      	mov	r0, sl
 80082f8:	4659      	mov	r1, fp
 80082fa:	2300      	movs	r3, #0
 80082fc:	f018 0f01 	tst.w	r8, #1
 8008300:	d004      	beq.n	800830c <_strtod_l+0x5dc>
 8008302:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008306:	f7f8 f977 	bl	80005f8 <__aeabi_dmul>
 800830a:	2301      	movs	r3, #1
 800830c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008310:	f109 0908 	add.w	r9, r9, #8
 8008314:	d1f2      	bne.n	80082fc <_strtod_l+0x5cc>
 8008316:	b10b      	cbz	r3, 800831c <_strtod_l+0x5ec>
 8008318:	4682      	mov	sl, r0
 800831a:	468b      	mov	fp, r1
 800831c:	9b04      	ldr	r3, [sp, #16]
 800831e:	b1c3      	cbz	r3, 8008352 <_strtod_l+0x622>
 8008320:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008324:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008328:	2b00      	cmp	r3, #0
 800832a:	4659      	mov	r1, fp
 800832c:	dd11      	ble.n	8008352 <_strtod_l+0x622>
 800832e:	2b1f      	cmp	r3, #31
 8008330:	f340 8124 	ble.w	800857c <_strtod_l+0x84c>
 8008334:	2b34      	cmp	r3, #52	; 0x34
 8008336:	bfde      	ittt	le
 8008338:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800833c:	f04f 33ff 	movle.w	r3, #4294967295
 8008340:	fa03 f202 	lslle.w	r2, r3, r2
 8008344:	f04f 0a00 	mov.w	sl, #0
 8008348:	bfcc      	ite	gt
 800834a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800834e:	ea02 0b01 	andle.w	fp, r2, r1
 8008352:	2200      	movs	r2, #0
 8008354:	2300      	movs	r3, #0
 8008356:	4650      	mov	r0, sl
 8008358:	4659      	mov	r1, fp
 800835a:	f7f8 fbb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800835e:	2800      	cmp	r0, #0
 8008360:	d1a2      	bne.n	80082a8 <_strtod_l+0x578>
 8008362:	9b07      	ldr	r3, [sp, #28]
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	9908      	ldr	r1, [sp, #32]
 8008368:	462b      	mov	r3, r5
 800836a:	463a      	mov	r2, r7
 800836c:	4620      	mov	r0, r4
 800836e:	f001 fe83 	bl	800a078 <__s2b>
 8008372:	9007      	str	r0, [sp, #28]
 8008374:	2800      	cmp	r0, #0
 8008376:	f43f af1f 	beq.w	80081b8 <_strtod_l+0x488>
 800837a:	9b05      	ldr	r3, [sp, #20]
 800837c:	1b9e      	subs	r6, r3, r6
 800837e:	9b06      	ldr	r3, [sp, #24]
 8008380:	2b00      	cmp	r3, #0
 8008382:	bfb4      	ite	lt
 8008384:	4633      	movlt	r3, r6
 8008386:	2300      	movge	r3, #0
 8008388:	930c      	str	r3, [sp, #48]	; 0x30
 800838a:	9b06      	ldr	r3, [sp, #24]
 800838c:	2500      	movs	r5, #0
 800838e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008392:	9312      	str	r3, [sp, #72]	; 0x48
 8008394:	462e      	mov	r6, r5
 8008396:	9b07      	ldr	r3, [sp, #28]
 8008398:	4620      	mov	r0, r4
 800839a:	6859      	ldr	r1, [r3, #4]
 800839c:	f001 fdc4 	bl	8009f28 <_Balloc>
 80083a0:	9005      	str	r0, [sp, #20]
 80083a2:	2800      	cmp	r0, #0
 80083a4:	f43f af0c 	beq.w	80081c0 <_strtod_l+0x490>
 80083a8:	9b07      	ldr	r3, [sp, #28]
 80083aa:	691a      	ldr	r2, [r3, #16]
 80083ac:	3202      	adds	r2, #2
 80083ae:	f103 010c 	add.w	r1, r3, #12
 80083b2:	0092      	lsls	r2, r2, #2
 80083b4:	300c      	adds	r0, #12
 80083b6:	f7fe fd8f 	bl	8006ed8 <memcpy>
 80083ba:	ec4b ab10 	vmov	d0, sl, fp
 80083be:	aa1a      	add	r2, sp, #104	; 0x68
 80083c0:	a919      	add	r1, sp, #100	; 0x64
 80083c2:	4620      	mov	r0, r4
 80083c4:	f002 f99e 	bl	800a704 <__d2b>
 80083c8:	ec4b ab18 	vmov	d8, sl, fp
 80083cc:	9018      	str	r0, [sp, #96]	; 0x60
 80083ce:	2800      	cmp	r0, #0
 80083d0:	f43f aef6 	beq.w	80081c0 <_strtod_l+0x490>
 80083d4:	2101      	movs	r1, #1
 80083d6:	4620      	mov	r0, r4
 80083d8:	f001 fee8 	bl	800a1ac <__i2b>
 80083dc:	4606      	mov	r6, r0
 80083de:	2800      	cmp	r0, #0
 80083e0:	f43f aeee 	beq.w	80081c0 <_strtod_l+0x490>
 80083e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083e6:	9904      	ldr	r1, [sp, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	bfab      	itete	ge
 80083ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80083ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80083f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80083f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80083f6:	bfac      	ite	ge
 80083f8:	eb03 0902 	addge.w	r9, r3, r2
 80083fc:	1ad7      	sublt	r7, r2, r3
 80083fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008400:	eba3 0801 	sub.w	r8, r3, r1
 8008404:	4490      	add	r8, r2
 8008406:	4ba1      	ldr	r3, [pc, #644]	; (800868c <_strtod_l+0x95c>)
 8008408:	f108 38ff 	add.w	r8, r8, #4294967295
 800840c:	4598      	cmp	r8, r3
 800840e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008412:	f280 80c7 	bge.w	80085a4 <_strtod_l+0x874>
 8008416:	eba3 0308 	sub.w	r3, r3, r8
 800841a:	2b1f      	cmp	r3, #31
 800841c:	eba2 0203 	sub.w	r2, r2, r3
 8008420:	f04f 0101 	mov.w	r1, #1
 8008424:	f300 80b1 	bgt.w	800858a <_strtod_l+0x85a>
 8008428:	fa01 f303 	lsl.w	r3, r1, r3
 800842c:	930d      	str	r3, [sp, #52]	; 0x34
 800842e:	2300      	movs	r3, #0
 8008430:	9308      	str	r3, [sp, #32]
 8008432:	eb09 0802 	add.w	r8, r9, r2
 8008436:	9b04      	ldr	r3, [sp, #16]
 8008438:	45c1      	cmp	r9, r8
 800843a:	4417      	add	r7, r2
 800843c:	441f      	add	r7, r3
 800843e:	464b      	mov	r3, r9
 8008440:	bfa8      	it	ge
 8008442:	4643      	movge	r3, r8
 8008444:	42bb      	cmp	r3, r7
 8008446:	bfa8      	it	ge
 8008448:	463b      	movge	r3, r7
 800844a:	2b00      	cmp	r3, #0
 800844c:	bfc2      	ittt	gt
 800844e:	eba8 0803 	subgt.w	r8, r8, r3
 8008452:	1aff      	subgt	r7, r7, r3
 8008454:	eba9 0903 	subgt.w	r9, r9, r3
 8008458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800845a:	2b00      	cmp	r3, #0
 800845c:	dd17      	ble.n	800848e <_strtod_l+0x75e>
 800845e:	4631      	mov	r1, r6
 8008460:	461a      	mov	r2, r3
 8008462:	4620      	mov	r0, r4
 8008464:	f001 ff62 	bl	800a32c <__pow5mult>
 8008468:	4606      	mov	r6, r0
 800846a:	2800      	cmp	r0, #0
 800846c:	f43f aea8 	beq.w	80081c0 <_strtod_l+0x490>
 8008470:	4601      	mov	r1, r0
 8008472:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008474:	4620      	mov	r0, r4
 8008476:	f001 feaf 	bl	800a1d8 <__multiply>
 800847a:	900b      	str	r0, [sp, #44]	; 0x2c
 800847c:	2800      	cmp	r0, #0
 800847e:	f43f ae9f 	beq.w	80081c0 <_strtod_l+0x490>
 8008482:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008484:	4620      	mov	r0, r4
 8008486:	f001 fd8f 	bl	8009fa8 <_Bfree>
 800848a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800848c:	9318      	str	r3, [sp, #96]	; 0x60
 800848e:	f1b8 0f00 	cmp.w	r8, #0
 8008492:	f300 808c 	bgt.w	80085ae <_strtod_l+0x87e>
 8008496:	9b06      	ldr	r3, [sp, #24]
 8008498:	2b00      	cmp	r3, #0
 800849a:	dd08      	ble.n	80084ae <_strtod_l+0x77e>
 800849c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800849e:	9905      	ldr	r1, [sp, #20]
 80084a0:	4620      	mov	r0, r4
 80084a2:	f001 ff43 	bl	800a32c <__pow5mult>
 80084a6:	9005      	str	r0, [sp, #20]
 80084a8:	2800      	cmp	r0, #0
 80084aa:	f43f ae89 	beq.w	80081c0 <_strtod_l+0x490>
 80084ae:	2f00      	cmp	r7, #0
 80084b0:	dd08      	ble.n	80084c4 <_strtod_l+0x794>
 80084b2:	9905      	ldr	r1, [sp, #20]
 80084b4:	463a      	mov	r2, r7
 80084b6:	4620      	mov	r0, r4
 80084b8:	f001 ff92 	bl	800a3e0 <__lshift>
 80084bc:	9005      	str	r0, [sp, #20]
 80084be:	2800      	cmp	r0, #0
 80084c0:	f43f ae7e 	beq.w	80081c0 <_strtod_l+0x490>
 80084c4:	f1b9 0f00 	cmp.w	r9, #0
 80084c8:	dd08      	ble.n	80084dc <_strtod_l+0x7ac>
 80084ca:	4631      	mov	r1, r6
 80084cc:	464a      	mov	r2, r9
 80084ce:	4620      	mov	r0, r4
 80084d0:	f001 ff86 	bl	800a3e0 <__lshift>
 80084d4:	4606      	mov	r6, r0
 80084d6:	2800      	cmp	r0, #0
 80084d8:	f43f ae72 	beq.w	80081c0 <_strtod_l+0x490>
 80084dc:	9a05      	ldr	r2, [sp, #20]
 80084de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80084e0:	4620      	mov	r0, r4
 80084e2:	f002 f809 	bl	800a4f8 <__mdiff>
 80084e6:	4605      	mov	r5, r0
 80084e8:	2800      	cmp	r0, #0
 80084ea:	f43f ae69 	beq.w	80081c0 <_strtod_l+0x490>
 80084ee:	68c3      	ldr	r3, [r0, #12]
 80084f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80084f2:	2300      	movs	r3, #0
 80084f4:	60c3      	str	r3, [r0, #12]
 80084f6:	4631      	mov	r1, r6
 80084f8:	f001 ffe2 	bl	800a4c0 <__mcmp>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	da60      	bge.n	80085c2 <_strtod_l+0x892>
 8008500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008502:	ea53 030a 	orrs.w	r3, r3, sl
 8008506:	f040 8082 	bne.w	800860e <_strtod_l+0x8de>
 800850a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800850e:	2b00      	cmp	r3, #0
 8008510:	d17d      	bne.n	800860e <_strtod_l+0x8de>
 8008512:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008516:	0d1b      	lsrs	r3, r3, #20
 8008518:	051b      	lsls	r3, r3, #20
 800851a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800851e:	d976      	bls.n	800860e <_strtod_l+0x8de>
 8008520:	696b      	ldr	r3, [r5, #20]
 8008522:	b913      	cbnz	r3, 800852a <_strtod_l+0x7fa>
 8008524:	692b      	ldr	r3, [r5, #16]
 8008526:	2b01      	cmp	r3, #1
 8008528:	dd71      	ble.n	800860e <_strtod_l+0x8de>
 800852a:	4629      	mov	r1, r5
 800852c:	2201      	movs	r2, #1
 800852e:	4620      	mov	r0, r4
 8008530:	f001 ff56 	bl	800a3e0 <__lshift>
 8008534:	4631      	mov	r1, r6
 8008536:	4605      	mov	r5, r0
 8008538:	f001 ffc2 	bl	800a4c0 <__mcmp>
 800853c:	2800      	cmp	r0, #0
 800853e:	dd66      	ble.n	800860e <_strtod_l+0x8de>
 8008540:	9904      	ldr	r1, [sp, #16]
 8008542:	4a53      	ldr	r2, [pc, #332]	; (8008690 <_strtod_l+0x960>)
 8008544:	465b      	mov	r3, fp
 8008546:	2900      	cmp	r1, #0
 8008548:	f000 8081 	beq.w	800864e <_strtod_l+0x91e>
 800854c:	ea02 010b 	and.w	r1, r2, fp
 8008550:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008554:	dc7b      	bgt.n	800864e <_strtod_l+0x91e>
 8008556:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800855a:	f77f aea9 	ble.w	80082b0 <_strtod_l+0x580>
 800855e:	4b4d      	ldr	r3, [pc, #308]	; (8008694 <_strtod_l+0x964>)
 8008560:	4650      	mov	r0, sl
 8008562:	4659      	mov	r1, fp
 8008564:	2200      	movs	r2, #0
 8008566:	f7f8 f847 	bl	80005f8 <__aeabi_dmul>
 800856a:	460b      	mov	r3, r1
 800856c:	4303      	orrs	r3, r0
 800856e:	bf08      	it	eq
 8008570:	2322      	moveq	r3, #34	; 0x22
 8008572:	4682      	mov	sl, r0
 8008574:	468b      	mov	fp, r1
 8008576:	bf08      	it	eq
 8008578:	6023      	streq	r3, [r4, #0]
 800857a:	e62b      	b.n	80081d4 <_strtod_l+0x4a4>
 800857c:	f04f 32ff 	mov.w	r2, #4294967295
 8008580:	fa02 f303 	lsl.w	r3, r2, r3
 8008584:	ea03 0a0a 	and.w	sl, r3, sl
 8008588:	e6e3      	b.n	8008352 <_strtod_l+0x622>
 800858a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800858e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008592:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008596:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800859a:	fa01 f308 	lsl.w	r3, r1, r8
 800859e:	9308      	str	r3, [sp, #32]
 80085a0:	910d      	str	r1, [sp, #52]	; 0x34
 80085a2:	e746      	b.n	8008432 <_strtod_l+0x702>
 80085a4:	2300      	movs	r3, #0
 80085a6:	9308      	str	r3, [sp, #32]
 80085a8:	2301      	movs	r3, #1
 80085aa:	930d      	str	r3, [sp, #52]	; 0x34
 80085ac:	e741      	b.n	8008432 <_strtod_l+0x702>
 80085ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80085b0:	4642      	mov	r2, r8
 80085b2:	4620      	mov	r0, r4
 80085b4:	f001 ff14 	bl	800a3e0 <__lshift>
 80085b8:	9018      	str	r0, [sp, #96]	; 0x60
 80085ba:	2800      	cmp	r0, #0
 80085bc:	f47f af6b 	bne.w	8008496 <_strtod_l+0x766>
 80085c0:	e5fe      	b.n	80081c0 <_strtod_l+0x490>
 80085c2:	465f      	mov	r7, fp
 80085c4:	d16e      	bne.n	80086a4 <_strtod_l+0x974>
 80085c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085cc:	b342      	cbz	r2, 8008620 <_strtod_l+0x8f0>
 80085ce:	4a32      	ldr	r2, [pc, #200]	; (8008698 <_strtod_l+0x968>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d128      	bne.n	8008626 <_strtod_l+0x8f6>
 80085d4:	9b04      	ldr	r3, [sp, #16]
 80085d6:	4651      	mov	r1, sl
 80085d8:	b1eb      	cbz	r3, 8008616 <_strtod_l+0x8e6>
 80085da:	4b2d      	ldr	r3, [pc, #180]	; (8008690 <_strtod_l+0x960>)
 80085dc:	403b      	ands	r3, r7
 80085de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80085e2:	f04f 32ff 	mov.w	r2, #4294967295
 80085e6:	d819      	bhi.n	800861c <_strtod_l+0x8ec>
 80085e8:	0d1b      	lsrs	r3, r3, #20
 80085ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085ee:	fa02 f303 	lsl.w	r3, r2, r3
 80085f2:	4299      	cmp	r1, r3
 80085f4:	d117      	bne.n	8008626 <_strtod_l+0x8f6>
 80085f6:	4b29      	ldr	r3, [pc, #164]	; (800869c <_strtod_l+0x96c>)
 80085f8:	429f      	cmp	r7, r3
 80085fa:	d102      	bne.n	8008602 <_strtod_l+0x8d2>
 80085fc:	3101      	adds	r1, #1
 80085fe:	f43f addf 	beq.w	80081c0 <_strtod_l+0x490>
 8008602:	4b23      	ldr	r3, [pc, #140]	; (8008690 <_strtod_l+0x960>)
 8008604:	403b      	ands	r3, r7
 8008606:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800860a:	f04f 0a00 	mov.w	sl, #0
 800860e:	9b04      	ldr	r3, [sp, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1a4      	bne.n	800855e <_strtod_l+0x82e>
 8008614:	e5de      	b.n	80081d4 <_strtod_l+0x4a4>
 8008616:	f04f 33ff 	mov.w	r3, #4294967295
 800861a:	e7ea      	b.n	80085f2 <_strtod_l+0x8c2>
 800861c:	4613      	mov	r3, r2
 800861e:	e7e8      	b.n	80085f2 <_strtod_l+0x8c2>
 8008620:	ea53 030a 	orrs.w	r3, r3, sl
 8008624:	d08c      	beq.n	8008540 <_strtod_l+0x810>
 8008626:	9b08      	ldr	r3, [sp, #32]
 8008628:	b1db      	cbz	r3, 8008662 <_strtod_l+0x932>
 800862a:	423b      	tst	r3, r7
 800862c:	d0ef      	beq.n	800860e <_strtod_l+0x8de>
 800862e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008630:	9a04      	ldr	r2, [sp, #16]
 8008632:	4650      	mov	r0, sl
 8008634:	4659      	mov	r1, fp
 8008636:	b1c3      	cbz	r3, 800866a <_strtod_l+0x93a>
 8008638:	f7ff fb5d 	bl	8007cf6 <sulp>
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	ec51 0b18 	vmov	r0, r1, d8
 8008644:	f7f7 fe22 	bl	800028c <__adddf3>
 8008648:	4682      	mov	sl, r0
 800864a:	468b      	mov	fp, r1
 800864c:	e7df      	b.n	800860e <_strtod_l+0x8de>
 800864e:	4013      	ands	r3, r2
 8008650:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008654:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008658:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800865c:	f04f 3aff 	mov.w	sl, #4294967295
 8008660:	e7d5      	b.n	800860e <_strtod_l+0x8de>
 8008662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008664:	ea13 0f0a 	tst.w	r3, sl
 8008668:	e7e0      	b.n	800862c <_strtod_l+0x8fc>
 800866a:	f7ff fb44 	bl	8007cf6 <sulp>
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	ec51 0b18 	vmov	r0, r1, d8
 8008676:	f7f7 fe07 	bl	8000288 <__aeabi_dsub>
 800867a:	2200      	movs	r2, #0
 800867c:	2300      	movs	r3, #0
 800867e:	4682      	mov	sl, r0
 8008680:	468b      	mov	fp, r1
 8008682:	f7f8 fa21 	bl	8000ac8 <__aeabi_dcmpeq>
 8008686:	2800      	cmp	r0, #0
 8008688:	d0c1      	beq.n	800860e <_strtod_l+0x8de>
 800868a:	e611      	b.n	80082b0 <_strtod_l+0x580>
 800868c:	fffffc02 	.word	0xfffffc02
 8008690:	7ff00000 	.word	0x7ff00000
 8008694:	39500000 	.word	0x39500000
 8008698:	000fffff 	.word	0x000fffff
 800869c:	7fefffff 	.word	0x7fefffff
 80086a0:	0800d1a8 	.word	0x0800d1a8
 80086a4:	4631      	mov	r1, r6
 80086a6:	4628      	mov	r0, r5
 80086a8:	f002 f888 	bl	800a7bc <__ratio>
 80086ac:	ec59 8b10 	vmov	r8, r9, d0
 80086b0:	ee10 0a10 	vmov	r0, s0
 80086b4:	2200      	movs	r2, #0
 80086b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80086ba:	4649      	mov	r1, r9
 80086bc:	f7f8 fa18 	bl	8000af0 <__aeabi_dcmple>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d07a      	beq.n	80087ba <_strtod_l+0xa8a>
 80086c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d04a      	beq.n	8008760 <_strtod_l+0xa30>
 80086ca:	4b95      	ldr	r3, [pc, #596]	; (8008920 <_strtod_l+0xbf0>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80086d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008920 <_strtod_l+0xbf0>
 80086d6:	f04f 0800 	mov.w	r8, #0
 80086da:	4b92      	ldr	r3, [pc, #584]	; (8008924 <_strtod_l+0xbf4>)
 80086dc:	403b      	ands	r3, r7
 80086de:	930d      	str	r3, [sp, #52]	; 0x34
 80086e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086e2:	4b91      	ldr	r3, [pc, #580]	; (8008928 <_strtod_l+0xbf8>)
 80086e4:	429a      	cmp	r2, r3
 80086e6:	f040 80b0 	bne.w	800884a <_strtod_l+0xb1a>
 80086ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80086f2:	ec4b ab10 	vmov	d0, sl, fp
 80086f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80086fa:	f001 ff87 	bl	800a60c <__ulp>
 80086fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008702:	ec53 2b10 	vmov	r2, r3, d0
 8008706:	f7f7 ff77 	bl	80005f8 <__aeabi_dmul>
 800870a:	4652      	mov	r2, sl
 800870c:	465b      	mov	r3, fp
 800870e:	f7f7 fdbd 	bl	800028c <__adddf3>
 8008712:	460b      	mov	r3, r1
 8008714:	4983      	ldr	r1, [pc, #524]	; (8008924 <_strtod_l+0xbf4>)
 8008716:	4a85      	ldr	r2, [pc, #532]	; (800892c <_strtod_l+0xbfc>)
 8008718:	4019      	ands	r1, r3
 800871a:	4291      	cmp	r1, r2
 800871c:	4682      	mov	sl, r0
 800871e:	d960      	bls.n	80087e2 <_strtod_l+0xab2>
 8008720:	ee18 3a90 	vmov	r3, s17
 8008724:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008728:	4293      	cmp	r3, r2
 800872a:	d104      	bne.n	8008736 <_strtod_l+0xa06>
 800872c:	ee18 3a10 	vmov	r3, s16
 8008730:	3301      	adds	r3, #1
 8008732:	f43f ad45 	beq.w	80081c0 <_strtod_l+0x490>
 8008736:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008938 <_strtod_l+0xc08>
 800873a:	f04f 3aff 	mov.w	sl, #4294967295
 800873e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008740:	4620      	mov	r0, r4
 8008742:	f001 fc31 	bl	8009fa8 <_Bfree>
 8008746:	9905      	ldr	r1, [sp, #20]
 8008748:	4620      	mov	r0, r4
 800874a:	f001 fc2d 	bl	8009fa8 <_Bfree>
 800874e:	4631      	mov	r1, r6
 8008750:	4620      	mov	r0, r4
 8008752:	f001 fc29 	bl	8009fa8 <_Bfree>
 8008756:	4629      	mov	r1, r5
 8008758:	4620      	mov	r0, r4
 800875a:	f001 fc25 	bl	8009fa8 <_Bfree>
 800875e:	e61a      	b.n	8008396 <_strtod_l+0x666>
 8008760:	f1ba 0f00 	cmp.w	sl, #0
 8008764:	d11b      	bne.n	800879e <_strtod_l+0xa6e>
 8008766:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800876a:	b9f3      	cbnz	r3, 80087aa <_strtod_l+0xa7a>
 800876c:	4b6c      	ldr	r3, [pc, #432]	; (8008920 <_strtod_l+0xbf0>)
 800876e:	2200      	movs	r2, #0
 8008770:	4640      	mov	r0, r8
 8008772:	4649      	mov	r1, r9
 8008774:	f7f8 f9b2 	bl	8000adc <__aeabi_dcmplt>
 8008778:	b9d0      	cbnz	r0, 80087b0 <_strtod_l+0xa80>
 800877a:	4640      	mov	r0, r8
 800877c:	4649      	mov	r1, r9
 800877e:	4b6c      	ldr	r3, [pc, #432]	; (8008930 <_strtod_l+0xc00>)
 8008780:	2200      	movs	r2, #0
 8008782:	f7f7 ff39 	bl	80005f8 <__aeabi_dmul>
 8008786:	4680      	mov	r8, r0
 8008788:	4689      	mov	r9, r1
 800878a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800878e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008792:	9315      	str	r3, [sp, #84]	; 0x54
 8008794:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008798:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800879c:	e79d      	b.n	80086da <_strtod_l+0x9aa>
 800879e:	f1ba 0f01 	cmp.w	sl, #1
 80087a2:	d102      	bne.n	80087aa <_strtod_l+0xa7a>
 80087a4:	2f00      	cmp	r7, #0
 80087a6:	f43f ad83 	beq.w	80082b0 <_strtod_l+0x580>
 80087aa:	4b62      	ldr	r3, [pc, #392]	; (8008934 <_strtod_l+0xc04>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	e78e      	b.n	80086ce <_strtod_l+0x99e>
 80087b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008930 <_strtod_l+0xc00>
 80087b4:	f04f 0800 	mov.w	r8, #0
 80087b8:	e7e7      	b.n	800878a <_strtod_l+0xa5a>
 80087ba:	4b5d      	ldr	r3, [pc, #372]	; (8008930 <_strtod_l+0xc00>)
 80087bc:	4640      	mov	r0, r8
 80087be:	4649      	mov	r1, r9
 80087c0:	2200      	movs	r2, #0
 80087c2:	f7f7 ff19 	bl	80005f8 <__aeabi_dmul>
 80087c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087c8:	4680      	mov	r8, r0
 80087ca:	4689      	mov	r9, r1
 80087cc:	b933      	cbnz	r3, 80087dc <_strtod_l+0xaac>
 80087ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087d2:	900e      	str	r0, [sp, #56]	; 0x38
 80087d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80087d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80087da:	e7dd      	b.n	8008798 <_strtod_l+0xa68>
 80087dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80087e0:	e7f9      	b.n	80087d6 <_strtod_l+0xaa6>
 80087e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80087e6:	9b04      	ldr	r3, [sp, #16]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1a8      	bne.n	800873e <_strtod_l+0xa0e>
 80087ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80087f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087f2:	0d1b      	lsrs	r3, r3, #20
 80087f4:	051b      	lsls	r3, r3, #20
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d1a1      	bne.n	800873e <_strtod_l+0xa0e>
 80087fa:	4640      	mov	r0, r8
 80087fc:	4649      	mov	r1, r9
 80087fe:	f7f8 fa5b 	bl	8000cb8 <__aeabi_d2lz>
 8008802:	f7f7 fecb 	bl	800059c <__aeabi_l2d>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4640      	mov	r0, r8
 800880c:	4649      	mov	r1, r9
 800880e:	f7f7 fd3b 	bl	8000288 <__aeabi_dsub>
 8008812:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008814:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008818:	ea43 030a 	orr.w	r3, r3, sl
 800881c:	4313      	orrs	r3, r2
 800881e:	4680      	mov	r8, r0
 8008820:	4689      	mov	r9, r1
 8008822:	d055      	beq.n	80088d0 <_strtod_l+0xba0>
 8008824:	a336      	add	r3, pc, #216	; (adr r3, 8008900 <_strtod_l+0xbd0>)
 8008826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882a:	f7f8 f957 	bl	8000adc <__aeabi_dcmplt>
 800882e:	2800      	cmp	r0, #0
 8008830:	f47f acd0 	bne.w	80081d4 <_strtod_l+0x4a4>
 8008834:	a334      	add	r3, pc, #208	; (adr r3, 8008908 <_strtod_l+0xbd8>)
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	4640      	mov	r0, r8
 800883c:	4649      	mov	r1, r9
 800883e:	f7f8 f96b 	bl	8000b18 <__aeabi_dcmpgt>
 8008842:	2800      	cmp	r0, #0
 8008844:	f43f af7b 	beq.w	800873e <_strtod_l+0xa0e>
 8008848:	e4c4      	b.n	80081d4 <_strtod_l+0x4a4>
 800884a:	9b04      	ldr	r3, [sp, #16]
 800884c:	b333      	cbz	r3, 800889c <_strtod_l+0xb6c>
 800884e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008850:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008854:	d822      	bhi.n	800889c <_strtod_l+0xb6c>
 8008856:	a32e      	add	r3, pc, #184	; (adr r3, 8008910 <_strtod_l+0xbe0>)
 8008858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885c:	4640      	mov	r0, r8
 800885e:	4649      	mov	r1, r9
 8008860:	f7f8 f946 	bl	8000af0 <__aeabi_dcmple>
 8008864:	b1a0      	cbz	r0, 8008890 <_strtod_l+0xb60>
 8008866:	4649      	mov	r1, r9
 8008868:	4640      	mov	r0, r8
 800886a:	f7f8 f99d 	bl	8000ba8 <__aeabi_d2uiz>
 800886e:	2801      	cmp	r0, #1
 8008870:	bf38      	it	cc
 8008872:	2001      	movcc	r0, #1
 8008874:	f7f7 fe46 	bl	8000504 <__aeabi_ui2d>
 8008878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800887a:	4680      	mov	r8, r0
 800887c:	4689      	mov	r9, r1
 800887e:	bb23      	cbnz	r3, 80088ca <_strtod_l+0xb9a>
 8008880:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008884:	9010      	str	r0, [sp, #64]	; 0x40
 8008886:	9311      	str	r3, [sp, #68]	; 0x44
 8008888:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800888c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008892:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008894:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008898:	1a9b      	subs	r3, r3, r2
 800889a:	9309      	str	r3, [sp, #36]	; 0x24
 800889c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80088a0:	eeb0 0a48 	vmov.f32	s0, s16
 80088a4:	eef0 0a68 	vmov.f32	s1, s17
 80088a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80088ac:	f001 feae 	bl	800a60c <__ulp>
 80088b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80088b4:	ec53 2b10 	vmov	r2, r3, d0
 80088b8:	f7f7 fe9e 	bl	80005f8 <__aeabi_dmul>
 80088bc:	ec53 2b18 	vmov	r2, r3, d8
 80088c0:	f7f7 fce4 	bl	800028c <__adddf3>
 80088c4:	4682      	mov	sl, r0
 80088c6:	468b      	mov	fp, r1
 80088c8:	e78d      	b.n	80087e6 <_strtod_l+0xab6>
 80088ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80088ce:	e7db      	b.n	8008888 <_strtod_l+0xb58>
 80088d0:	a311      	add	r3, pc, #68	; (adr r3, 8008918 <_strtod_l+0xbe8>)
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	f7f8 f901 	bl	8000adc <__aeabi_dcmplt>
 80088da:	e7b2      	b.n	8008842 <_strtod_l+0xb12>
 80088dc:	2300      	movs	r3, #0
 80088de:	930a      	str	r3, [sp, #40]	; 0x28
 80088e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80088e4:	6013      	str	r3, [r2, #0]
 80088e6:	f7ff ba6b 	b.w	8007dc0 <_strtod_l+0x90>
 80088ea:	2a65      	cmp	r2, #101	; 0x65
 80088ec:	f43f ab5f 	beq.w	8007fae <_strtod_l+0x27e>
 80088f0:	2a45      	cmp	r2, #69	; 0x45
 80088f2:	f43f ab5c 	beq.w	8007fae <_strtod_l+0x27e>
 80088f6:	2301      	movs	r3, #1
 80088f8:	f7ff bb94 	b.w	8008024 <_strtod_l+0x2f4>
 80088fc:	f3af 8000 	nop.w
 8008900:	94a03595 	.word	0x94a03595
 8008904:	3fdfffff 	.word	0x3fdfffff
 8008908:	35afe535 	.word	0x35afe535
 800890c:	3fe00000 	.word	0x3fe00000
 8008910:	ffc00000 	.word	0xffc00000
 8008914:	41dfffff 	.word	0x41dfffff
 8008918:	94a03595 	.word	0x94a03595
 800891c:	3fcfffff 	.word	0x3fcfffff
 8008920:	3ff00000 	.word	0x3ff00000
 8008924:	7ff00000 	.word	0x7ff00000
 8008928:	7fe00000 	.word	0x7fe00000
 800892c:	7c9fffff 	.word	0x7c9fffff
 8008930:	3fe00000 	.word	0x3fe00000
 8008934:	bff00000 	.word	0xbff00000
 8008938:	7fefffff 	.word	0x7fefffff

0800893c <_strtod_r>:
 800893c:	4b01      	ldr	r3, [pc, #4]	; (8008944 <_strtod_r+0x8>)
 800893e:	f7ff b9f7 	b.w	8007d30 <_strtod_l>
 8008942:	bf00      	nop
 8008944:	20000104 	.word	0x20000104

08008948 <_strtol_l.constprop.0>:
 8008948:	2b01      	cmp	r3, #1
 800894a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800894e:	d001      	beq.n	8008954 <_strtol_l.constprop.0+0xc>
 8008950:	2b24      	cmp	r3, #36	; 0x24
 8008952:	d906      	bls.n	8008962 <_strtol_l.constprop.0+0x1a>
 8008954:	f7fe fa96 	bl	8006e84 <__errno>
 8008958:	2316      	movs	r3, #22
 800895a:	6003      	str	r3, [r0, #0]
 800895c:	2000      	movs	r0, #0
 800895e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008962:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008a48 <_strtol_l.constprop.0+0x100>
 8008966:	460d      	mov	r5, r1
 8008968:	462e      	mov	r6, r5
 800896a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800896e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008972:	f017 0708 	ands.w	r7, r7, #8
 8008976:	d1f7      	bne.n	8008968 <_strtol_l.constprop.0+0x20>
 8008978:	2c2d      	cmp	r4, #45	; 0x2d
 800897a:	d132      	bne.n	80089e2 <_strtol_l.constprop.0+0x9a>
 800897c:	782c      	ldrb	r4, [r5, #0]
 800897e:	2701      	movs	r7, #1
 8008980:	1cb5      	adds	r5, r6, #2
 8008982:	2b00      	cmp	r3, #0
 8008984:	d05b      	beq.n	8008a3e <_strtol_l.constprop.0+0xf6>
 8008986:	2b10      	cmp	r3, #16
 8008988:	d109      	bne.n	800899e <_strtol_l.constprop.0+0x56>
 800898a:	2c30      	cmp	r4, #48	; 0x30
 800898c:	d107      	bne.n	800899e <_strtol_l.constprop.0+0x56>
 800898e:	782c      	ldrb	r4, [r5, #0]
 8008990:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008994:	2c58      	cmp	r4, #88	; 0x58
 8008996:	d14d      	bne.n	8008a34 <_strtol_l.constprop.0+0xec>
 8008998:	786c      	ldrb	r4, [r5, #1]
 800899a:	2310      	movs	r3, #16
 800899c:	3502      	adds	r5, #2
 800899e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80089a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80089a6:	f04f 0c00 	mov.w	ip, #0
 80089aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80089ae:	4666      	mov	r6, ip
 80089b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80089b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80089b8:	f1be 0f09 	cmp.w	lr, #9
 80089bc:	d816      	bhi.n	80089ec <_strtol_l.constprop.0+0xa4>
 80089be:	4674      	mov	r4, lr
 80089c0:	42a3      	cmp	r3, r4
 80089c2:	dd24      	ble.n	8008a0e <_strtol_l.constprop.0+0xc6>
 80089c4:	f1bc 0f00 	cmp.w	ip, #0
 80089c8:	db1e      	blt.n	8008a08 <_strtol_l.constprop.0+0xc0>
 80089ca:	45b1      	cmp	r9, r6
 80089cc:	d31c      	bcc.n	8008a08 <_strtol_l.constprop.0+0xc0>
 80089ce:	d101      	bne.n	80089d4 <_strtol_l.constprop.0+0x8c>
 80089d0:	45a2      	cmp	sl, r4
 80089d2:	db19      	blt.n	8008a08 <_strtol_l.constprop.0+0xc0>
 80089d4:	fb06 4603 	mla	r6, r6, r3, r4
 80089d8:	f04f 0c01 	mov.w	ip, #1
 80089dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089e0:	e7e8      	b.n	80089b4 <_strtol_l.constprop.0+0x6c>
 80089e2:	2c2b      	cmp	r4, #43	; 0x2b
 80089e4:	bf04      	itt	eq
 80089e6:	782c      	ldrbeq	r4, [r5, #0]
 80089e8:	1cb5      	addeq	r5, r6, #2
 80089ea:	e7ca      	b.n	8008982 <_strtol_l.constprop.0+0x3a>
 80089ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80089f0:	f1be 0f19 	cmp.w	lr, #25
 80089f4:	d801      	bhi.n	80089fa <_strtol_l.constprop.0+0xb2>
 80089f6:	3c37      	subs	r4, #55	; 0x37
 80089f8:	e7e2      	b.n	80089c0 <_strtol_l.constprop.0+0x78>
 80089fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80089fe:	f1be 0f19 	cmp.w	lr, #25
 8008a02:	d804      	bhi.n	8008a0e <_strtol_l.constprop.0+0xc6>
 8008a04:	3c57      	subs	r4, #87	; 0x57
 8008a06:	e7db      	b.n	80089c0 <_strtol_l.constprop.0+0x78>
 8008a08:	f04f 3cff 	mov.w	ip, #4294967295
 8008a0c:	e7e6      	b.n	80089dc <_strtol_l.constprop.0+0x94>
 8008a0e:	f1bc 0f00 	cmp.w	ip, #0
 8008a12:	da05      	bge.n	8008a20 <_strtol_l.constprop.0+0xd8>
 8008a14:	2322      	movs	r3, #34	; 0x22
 8008a16:	6003      	str	r3, [r0, #0]
 8008a18:	4646      	mov	r6, r8
 8008a1a:	b942      	cbnz	r2, 8008a2e <_strtol_l.constprop.0+0xe6>
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	e79e      	b.n	800895e <_strtol_l.constprop.0+0x16>
 8008a20:	b107      	cbz	r7, 8008a24 <_strtol_l.constprop.0+0xdc>
 8008a22:	4276      	negs	r6, r6
 8008a24:	2a00      	cmp	r2, #0
 8008a26:	d0f9      	beq.n	8008a1c <_strtol_l.constprop.0+0xd4>
 8008a28:	f1bc 0f00 	cmp.w	ip, #0
 8008a2c:	d000      	beq.n	8008a30 <_strtol_l.constprop.0+0xe8>
 8008a2e:	1e69      	subs	r1, r5, #1
 8008a30:	6011      	str	r1, [r2, #0]
 8008a32:	e7f3      	b.n	8008a1c <_strtol_l.constprop.0+0xd4>
 8008a34:	2430      	movs	r4, #48	; 0x30
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1b1      	bne.n	800899e <_strtol_l.constprop.0+0x56>
 8008a3a:	2308      	movs	r3, #8
 8008a3c:	e7af      	b.n	800899e <_strtol_l.constprop.0+0x56>
 8008a3e:	2c30      	cmp	r4, #48	; 0x30
 8008a40:	d0a5      	beq.n	800898e <_strtol_l.constprop.0+0x46>
 8008a42:	230a      	movs	r3, #10
 8008a44:	e7ab      	b.n	800899e <_strtol_l.constprop.0+0x56>
 8008a46:	bf00      	nop
 8008a48:	0800d20d 	.word	0x0800d20d

08008a4c <_strtol_r>:
 8008a4c:	f7ff bf7c 	b.w	8008948 <_strtol_l.constprop.0>

08008a50 <_write_r>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	4d07      	ldr	r5, [pc, #28]	; (8008a70 <_write_r+0x20>)
 8008a54:	4604      	mov	r4, r0
 8008a56:	4608      	mov	r0, r1
 8008a58:	4611      	mov	r1, r2
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	602a      	str	r2, [r5, #0]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f7f9 fed7 	bl	8002812 <_write>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d102      	bne.n	8008a6e <_write_r+0x1e>
 8008a68:	682b      	ldr	r3, [r5, #0]
 8008a6a:	b103      	cbz	r3, 8008a6e <_write_r+0x1e>
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
 8008a70:	20000a58 	.word	0x20000a58

08008a74 <__assert_func>:
 8008a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a76:	4614      	mov	r4, r2
 8008a78:	461a      	mov	r2, r3
 8008a7a:	4b09      	ldr	r3, [pc, #36]	; (8008aa0 <__assert_func+0x2c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4605      	mov	r5, r0
 8008a80:	68d8      	ldr	r0, [r3, #12]
 8008a82:	b14c      	cbz	r4, 8008a98 <__assert_func+0x24>
 8008a84:	4b07      	ldr	r3, [pc, #28]	; (8008aa4 <__assert_func+0x30>)
 8008a86:	9100      	str	r1, [sp, #0]
 8008a88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a8c:	4906      	ldr	r1, [pc, #24]	; (8008aa8 <__assert_func+0x34>)
 8008a8e:	462b      	mov	r3, r5
 8008a90:	f000 fe98 	bl	80097c4 <fiprintf>
 8008a94:	f002 fbc2 	bl	800b21c <abort>
 8008a98:	4b04      	ldr	r3, [pc, #16]	; (8008aac <__assert_func+0x38>)
 8008a9a:	461c      	mov	r4, r3
 8008a9c:	e7f3      	b.n	8008a86 <__assert_func+0x12>
 8008a9e:	bf00      	nop
 8008aa0:	2000009c 	.word	0x2000009c
 8008aa4:	0800d1d0 	.word	0x0800d1d0
 8008aa8:	0800d1dd 	.word	0x0800d1dd
 8008aac:	0800d20b 	.word	0x0800d20b

08008ab0 <_close_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4d06      	ldr	r5, [pc, #24]	; (8008acc <_close_r+0x1c>)
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	4608      	mov	r0, r1
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	f7f9 fec5 	bl	800284a <_close>
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	d102      	bne.n	8008aca <_close_r+0x1a>
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	b103      	cbz	r3, 8008aca <_close_r+0x1a>
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	20000a58 	.word	0x20000a58

08008ad0 <quorem>:
 8008ad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad4:	6903      	ldr	r3, [r0, #16]
 8008ad6:	690c      	ldr	r4, [r1, #16]
 8008ad8:	42a3      	cmp	r3, r4
 8008ada:	4607      	mov	r7, r0
 8008adc:	f2c0 8081 	blt.w	8008be2 <quorem+0x112>
 8008ae0:	3c01      	subs	r4, #1
 8008ae2:	f101 0814 	add.w	r8, r1, #20
 8008ae6:	f100 0514 	add.w	r5, r0, #20
 8008aea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008aee:	9301      	str	r3, [sp, #4]
 8008af0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008af4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008af8:	3301      	adds	r3, #1
 8008afa:	429a      	cmp	r2, r3
 8008afc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b04:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b08:	d331      	bcc.n	8008b6e <quorem+0x9e>
 8008b0a:	f04f 0e00 	mov.w	lr, #0
 8008b0e:	4640      	mov	r0, r8
 8008b10:	46ac      	mov	ip, r5
 8008b12:	46f2      	mov	sl, lr
 8008b14:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b18:	b293      	uxth	r3, r2
 8008b1a:	fb06 e303 	mla	r3, r6, r3, lr
 8008b1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	ebaa 0303 	sub.w	r3, sl, r3
 8008b28:	f8dc a000 	ldr.w	sl, [ip]
 8008b2c:	0c12      	lsrs	r2, r2, #16
 8008b2e:	fa13 f38a 	uxtah	r3, r3, sl
 8008b32:	fb06 e202 	mla	r2, r6, r2, lr
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	9b00      	ldr	r3, [sp, #0]
 8008b3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b3e:	b292      	uxth	r2, r2
 8008b40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b48:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b4c:	4581      	cmp	r9, r0
 8008b4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b52:	f84c 3b04 	str.w	r3, [ip], #4
 8008b56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b5a:	d2db      	bcs.n	8008b14 <quorem+0x44>
 8008b5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b60:	b92b      	cbnz	r3, 8008b6e <quorem+0x9e>
 8008b62:	9b01      	ldr	r3, [sp, #4]
 8008b64:	3b04      	subs	r3, #4
 8008b66:	429d      	cmp	r5, r3
 8008b68:	461a      	mov	r2, r3
 8008b6a:	d32e      	bcc.n	8008bca <quorem+0xfa>
 8008b6c:	613c      	str	r4, [r7, #16]
 8008b6e:	4638      	mov	r0, r7
 8008b70:	f001 fca6 	bl	800a4c0 <__mcmp>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	db24      	blt.n	8008bc2 <quorem+0xf2>
 8008b78:	3601      	adds	r6, #1
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f04f 0c00 	mov.w	ip, #0
 8008b80:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b84:	f8d0 e000 	ldr.w	lr, [r0]
 8008b88:	b293      	uxth	r3, r2
 8008b8a:	ebac 0303 	sub.w	r3, ip, r3
 8008b8e:	0c12      	lsrs	r2, r2, #16
 8008b90:	fa13 f38e 	uxtah	r3, r3, lr
 8008b94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ba2:	45c1      	cmp	r9, r8
 8008ba4:	f840 3b04 	str.w	r3, [r0], #4
 8008ba8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008bac:	d2e8      	bcs.n	8008b80 <quorem+0xb0>
 8008bae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bb6:	b922      	cbnz	r2, 8008bc2 <quorem+0xf2>
 8008bb8:	3b04      	subs	r3, #4
 8008bba:	429d      	cmp	r5, r3
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	d30a      	bcc.n	8008bd6 <quorem+0x106>
 8008bc0:	613c      	str	r4, [r7, #16]
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	b003      	add	sp, #12
 8008bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bca:	6812      	ldr	r2, [r2, #0]
 8008bcc:	3b04      	subs	r3, #4
 8008bce:	2a00      	cmp	r2, #0
 8008bd0:	d1cc      	bne.n	8008b6c <quorem+0x9c>
 8008bd2:	3c01      	subs	r4, #1
 8008bd4:	e7c7      	b.n	8008b66 <quorem+0x96>
 8008bd6:	6812      	ldr	r2, [r2, #0]
 8008bd8:	3b04      	subs	r3, #4
 8008bda:	2a00      	cmp	r2, #0
 8008bdc:	d1f0      	bne.n	8008bc0 <quorem+0xf0>
 8008bde:	3c01      	subs	r4, #1
 8008be0:	e7eb      	b.n	8008bba <quorem+0xea>
 8008be2:	2000      	movs	r0, #0
 8008be4:	e7ee      	b.n	8008bc4 <quorem+0xf4>
	...

08008be8 <_dtoa_r>:
 8008be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	ed2d 8b04 	vpush	{d8-d9}
 8008bf0:	ec57 6b10 	vmov	r6, r7, d0
 8008bf4:	b093      	sub	sp, #76	; 0x4c
 8008bf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008bf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008bfc:	9106      	str	r1, [sp, #24]
 8008bfe:	ee10 aa10 	vmov	sl, s0
 8008c02:	4604      	mov	r4, r0
 8008c04:	9209      	str	r2, [sp, #36]	; 0x24
 8008c06:	930c      	str	r3, [sp, #48]	; 0x30
 8008c08:	46bb      	mov	fp, r7
 8008c0a:	b975      	cbnz	r5, 8008c2a <_dtoa_r+0x42>
 8008c0c:	2010      	movs	r0, #16
 8008c0e:	f001 f971 	bl	8009ef4 <malloc>
 8008c12:	4602      	mov	r2, r0
 8008c14:	6260      	str	r0, [r4, #36]	; 0x24
 8008c16:	b920      	cbnz	r0, 8008c22 <_dtoa_r+0x3a>
 8008c18:	4ba7      	ldr	r3, [pc, #668]	; (8008eb8 <_dtoa_r+0x2d0>)
 8008c1a:	21ea      	movs	r1, #234	; 0xea
 8008c1c:	48a7      	ldr	r0, [pc, #668]	; (8008ebc <_dtoa_r+0x2d4>)
 8008c1e:	f7ff ff29 	bl	8008a74 <__assert_func>
 8008c22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c26:	6005      	str	r5, [r0, #0]
 8008c28:	60c5      	str	r5, [r0, #12]
 8008c2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c2c:	6819      	ldr	r1, [r3, #0]
 8008c2e:	b151      	cbz	r1, 8008c46 <_dtoa_r+0x5e>
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	604a      	str	r2, [r1, #4]
 8008c34:	2301      	movs	r3, #1
 8008c36:	4093      	lsls	r3, r2
 8008c38:	608b      	str	r3, [r1, #8]
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f001 f9b4 	bl	8009fa8 <_Bfree>
 8008c40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c42:	2200      	movs	r2, #0
 8008c44:	601a      	str	r2, [r3, #0]
 8008c46:	1e3b      	subs	r3, r7, #0
 8008c48:	bfaa      	itet	ge
 8008c4a:	2300      	movge	r3, #0
 8008c4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008c50:	f8c8 3000 	strge.w	r3, [r8]
 8008c54:	4b9a      	ldr	r3, [pc, #616]	; (8008ec0 <_dtoa_r+0x2d8>)
 8008c56:	bfbc      	itt	lt
 8008c58:	2201      	movlt	r2, #1
 8008c5a:	f8c8 2000 	strlt.w	r2, [r8]
 8008c5e:	ea33 030b 	bics.w	r3, r3, fp
 8008c62:	d11b      	bne.n	8008c9c <_dtoa_r+0xb4>
 8008c64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c66:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c6a:	6013      	str	r3, [r2, #0]
 8008c6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c70:	4333      	orrs	r3, r6
 8008c72:	f000 8592 	beq.w	800979a <_dtoa_r+0xbb2>
 8008c76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c78:	b963      	cbnz	r3, 8008c94 <_dtoa_r+0xac>
 8008c7a:	4b92      	ldr	r3, [pc, #584]	; (8008ec4 <_dtoa_r+0x2dc>)
 8008c7c:	e022      	b.n	8008cc4 <_dtoa_r+0xdc>
 8008c7e:	4b92      	ldr	r3, [pc, #584]	; (8008ec8 <_dtoa_r+0x2e0>)
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	3308      	adds	r3, #8
 8008c84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	9801      	ldr	r0, [sp, #4]
 8008c8a:	b013      	add	sp, #76	; 0x4c
 8008c8c:	ecbd 8b04 	vpop	{d8-d9}
 8008c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c94:	4b8b      	ldr	r3, [pc, #556]	; (8008ec4 <_dtoa_r+0x2dc>)
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	3303      	adds	r3, #3
 8008c9a:	e7f3      	b.n	8008c84 <_dtoa_r+0x9c>
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	4650      	mov	r0, sl
 8008ca2:	4659      	mov	r1, fp
 8008ca4:	f7f7 ff10 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ca8:	ec4b ab19 	vmov	d9, sl, fp
 8008cac:	4680      	mov	r8, r0
 8008cae:	b158      	cbz	r0, 8008cc8 <_dtoa_r+0xe0>
 8008cb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	6013      	str	r3, [r2, #0]
 8008cb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 856b 	beq.w	8009794 <_dtoa_r+0xbac>
 8008cbe:	4883      	ldr	r0, [pc, #524]	; (8008ecc <_dtoa_r+0x2e4>)
 8008cc0:	6018      	str	r0, [r3, #0]
 8008cc2:	1e43      	subs	r3, r0, #1
 8008cc4:	9301      	str	r3, [sp, #4]
 8008cc6:	e7df      	b.n	8008c88 <_dtoa_r+0xa0>
 8008cc8:	ec4b ab10 	vmov	d0, sl, fp
 8008ccc:	aa10      	add	r2, sp, #64	; 0x40
 8008cce:	a911      	add	r1, sp, #68	; 0x44
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f001 fd17 	bl	800a704 <__d2b>
 8008cd6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008cda:	ee08 0a10 	vmov	s16, r0
 8008cde:	2d00      	cmp	r5, #0
 8008ce0:	f000 8084 	beq.w	8008dec <_dtoa_r+0x204>
 8008ce4:	ee19 3a90 	vmov	r3, s19
 8008ce8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008cf0:	4656      	mov	r6, sl
 8008cf2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008cf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008cfa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008cfe:	4b74      	ldr	r3, [pc, #464]	; (8008ed0 <_dtoa_r+0x2e8>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	4630      	mov	r0, r6
 8008d04:	4639      	mov	r1, r7
 8008d06:	f7f7 fabf 	bl	8000288 <__aeabi_dsub>
 8008d0a:	a365      	add	r3, pc, #404	; (adr r3, 8008ea0 <_dtoa_r+0x2b8>)
 8008d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d10:	f7f7 fc72 	bl	80005f8 <__aeabi_dmul>
 8008d14:	a364      	add	r3, pc, #400	; (adr r3, 8008ea8 <_dtoa_r+0x2c0>)
 8008d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1a:	f7f7 fab7 	bl	800028c <__adddf3>
 8008d1e:	4606      	mov	r6, r0
 8008d20:	4628      	mov	r0, r5
 8008d22:	460f      	mov	r7, r1
 8008d24:	f7f7 fbfe 	bl	8000524 <__aeabi_i2d>
 8008d28:	a361      	add	r3, pc, #388	; (adr r3, 8008eb0 <_dtoa_r+0x2c8>)
 8008d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2e:	f7f7 fc63 	bl	80005f8 <__aeabi_dmul>
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	4630      	mov	r0, r6
 8008d38:	4639      	mov	r1, r7
 8008d3a:	f7f7 faa7 	bl	800028c <__adddf3>
 8008d3e:	4606      	mov	r6, r0
 8008d40:	460f      	mov	r7, r1
 8008d42:	f7f7 ff09 	bl	8000b58 <__aeabi_d2iz>
 8008d46:	2200      	movs	r2, #0
 8008d48:	9000      	str	r0, [sp, #0]
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	4639      	mov	r1, r7
 8008d50:	f7f7 fec4 	bl	8000adc <__aeabi_dcmplt>
 8008d54:	b150      	cbz	r0, 8008d6c <_dtoa_r+0x184>
 8008d56:	9800      	ldr	r0, [sp, #0]
 8008d58:	f7f7 fbe4 	bl	8000524 <__aeabi_i2d>
 8008d5c:	4632      	mov	r2, r6
 8008d5e:	463b      	mov	r3, r7
 8008d60:	f7f7 feb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d64:	b910      	cbnz	r0, 8008d6c <_dtoa_r+0x184>
 8008d66:	9b00      	ldr	r3, [sp, #0]
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	9b00      	ldr	r3, [sp, #0]
 8008d6e:	2b16      	cmp	r3, #22
 8008d70:	d85a      	bhi.n	8008e28 <_dtoa_r+0x240>
 8008d72:	9a00      	ldr	r2, [sp, #0]
 8008d74:	4b57      	ldr	r3, [pc, #348]	; (8008ed4 <_dtoa_r+0x2ec>)
 8008d76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7e:	ec51 0b19 	vmov	r0, r1, d9
 8008d82:	f7f7 feab 	bl	8000adc <__aeabi_dcmplt>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d050      	beq.n	8008e2c <_dtoa_r+0x244>
 8008d8a:	9b00      	ldr	r3, [sp, #0]
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	2300      	movs	r3, #0
 8008d92:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d96:	1b5d      	subs	r5, r3, r5
 8008d98:	1e6b      	subs	r3, r5, #1
 8008d9a:	9305      	str	r3, [sp, #20]
 8008d9c:	bf45      	ittet	mi
 8008d9e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008da2:	9304      	strmi	r3, [sp, #16]
 8008da4:	2300      	movpl	r3, #0
 8008da6:	2300      	movmi	r3, #0
 8008da8:	bf4c      	ite	mi
 8008daa:	9305      	strmi	r3, [sp, #20]
 8008dac:	9304      	strpl	r3, [sp, #16]
 8008dae:	9b00      	ldr	r3, [sp, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	db3d      	blt.n	8008e30 <_dtoa_r+0x248>
 8008db4:	9b05      	ldr	r3, [sp, #20]
 8008db6:	9a00      	ldr	r2, [sp, #0]
 8008db8:	920a      	str	r2, [sp, #40]	; 0x28
 8008dba:	4413      	add	r3, r2
 8008dbc:	9305      	str	r3, [sp, #20]
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	9307      	str	r3, [sp, #28]
 8008dc2:	9b06      	ldr	r3, [sp, #24]
 8008dc4:	2b09      	cmp	r3, #9
 8008dc6:	f200 8089 	bhi.w	8008edc <_dtoa_r+0x2f4>
 8008dca:	2b05      	cmp	r3, #5
 8008dcc:	bfc4      	itt	gt
 8008dce:	3b04      	subgt	r3, #4
 8008dd0:	9306      	strgt	r3, [sp, #24]
 8008dd2:	9b06      	ldr	r3, [sp, #24]
 8008dd4:	f1a3 0302 	sub.w	r3, r3, #2
 8008dd8:	bfcc      	ite	gt
 8008dda:	2500      	movgt	r5, #0
 8008ddc:	2501      	movle	r5, #1
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	f200 8087 	bhi.w	8008ef2 <_dtoa_r+0x30a>
 8008de4:	e8df f003 	tbb	[pc, r3]
 8008de8:	59383a2d 	.word	0x59383a2d
 8008dec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008df0:	441d      	add	r5, r3
 8008df2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008df6:	2b20      	cmp	r3, #32
 8008df8:	bfc1      	itttt	gt
 8008dfa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008dfe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e02:	fa0b f303 	lslgt.w	r3, fp, r3
 8008e06:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e0a:	bfda      	itte	le
 8008e0c:	f1c3 0320 	rsble	r3, r3, #32
 8008e10:	fa06 f003 	lslle.w	r0, r6, r3
 8008e14:	4318      	orrgt	r0, r3
 8008e16:	f7f7 fb75 	bl	8000504 <__aeabi_ui2d>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e22:	3d01      	subs	r5, #1
 8008e24:	930e      	str	r3, [sp, #56]	; 0x38
 8008e26:	e76a      	b.n	8008cfe <_dtoa_r+0x116>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e7b2      	b.n	8008d92 <_dtoa_r+0x1aa>
 8008e2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e2e:	e7b1      	b.n	8008d94 <_dtoa_r+0x1ac>
 8008e30:	9b04      	ldr	r3, [sp, #16]
 8008e32:	9a00      	ldr	r2, [sp, #0]
 8008e34:	1a9b      	subs	r3, r3, r2
 8008e36:	9304      	str	r3, [sp, #16]
 8008e38:	4253      	negs	r3, r2
 8008e3a:	9307      	str	r3, [sp, #28]
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e40:	e7bf      	b.n	8008dc2 <_dtoa_r+0x1da>
 8008e42:	2300      	movs	r3, #0
 8008e44:	9308      	str	r3, [sp, #32]
 8008e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	dc55      	bgt.n	8008ef8 <_dtoa_r+0x310>
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e52:	461a      	mov	r2, r3
 8008e54:	9209      	str	r2, [sp, #36]	; 0x24
 8008e56:	e00c      	b.n	8008e72 <_dtoa_r+0x28a>
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e7f3      	b.n	8008e44 <_dtoa_r+0x25c>
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e60:	9308      	str	r3, [sp, #32]
 8008e62:	9b00      	ldr	r3, [sp, #0]
 8008e64:	4413      	add	r3, r2
 8008e66:	9302      	str	r3, [sp, #8]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	9303      	str	r3, [sp, #12]
 8008e6e:	bfb8      	it	lt
 8008e70:	2301      	movlt	r3, #1
 8008e72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e74:	2200      	movs	r2, #0
 8008e76:	6042      	str	r2, [r0, #4]
 8008e78:	2204      	movs	r2, #4
 8008e7a:	f102 0614 	add.w	r6, r2, #20
 8008e7e:	429e      	cmp	r6, r3
 8008e80:	6841      	ldr	r1, [r0, #4]
 8008e82:	d93d      	bls.n	8008f00 <_dtoa_r+0x318>
 8008e84:	4620      	mov	r0, r4
 8008e86:	f001 f84f 	bl	8009f28 <_Balloc>
 8008e8a:	9001      	str	r0, [sp, #4]
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d13b      	bne.n	8008f08 <_dtoa_r+0x320>
 8008e90:	4b11      	ldr	r3, [pc, #68]	; (8008ed8 <_dtoa_r+0x2f0>)
 8008e92:	4602      	mov	r2, r0
 8008e94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e98:	e6c0      	b.n	8008c1c <_dtoa_r+0x34>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e7df      	b.n	8008e5e <_dtoa_r+0x276>
 8008e9e:	bf00      	nop
 8008ea0:	636f4361 	.word	0x636f4361
 8008ea4:	3fd287a7 	.word	0x3fd287a7
 8008ea8:	8b60c8b3 	.word	0x8b60c8b3
 8008eac:	3fc68a28 	.word	0x3fc68a28
 8008eb0:	509f79fb 	.word	0x509f79fb
 8008eb4:	3fd34413 	.word	0x3fd34413
 8008eb8:	0800d31a 	.word	0x0800d31a
 8008ebc:	0800d331 	.word	0x0800d331
 8008ec0:	7ff00000 	.word	0x7ff00000
 8008ec4:	0800d316 	.word	0x0800d316
 8008ec8:	0800d30d 	.word	0x0800d30d
 8008ecc:	0800d155 	.word	0x0800d155
 8008ed0:	3ff80000 	.word	0x3ff80000
 8008ed4:	0800d4a0 	.word	0x0800d4a0
 8008ed8:	0800d38c 	.word	0x0800d38c
 8008edc:	2501      	movs	r5, #1
 8008ede:	2300      	movs	r3, #0
 8008ee0:	9306      	str	r3, [sp, #24]
 8008ee2:	9508      	str	r5, [sp, #32]
 8008ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008eec:	2200      	movs	r2, #0
 8008eee:	2312      	movs	r3, #18
 8008ef0:	e7b0      	b.n	8008e54 <_dtoa_r+0x26c>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	9308      	str	r3, [sp, #32]
 8008ef6:	e7f5      	b.n	8008ee4 <_dtoa_r+0x2fc>
 8008ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008efa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008efe:	e7b8      	b.n	8008e72 <_dtoa_r+0x28a>
 8008f00:	3101      	adds	r1, #1
 8008f02:	6041      	str	r1, [r0, #4]
 8008f04:	0052      	lsls	r2, r2, #1
 8008f06:	e7b8      	b.n	8008e7a <_dtoa_r+0x292>
 8008f08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f0a:	9a01      	ldr	r2, [sp, #4]
 8008f0c:	601a      	str	r2, [r3, #0]
 8008f0e:	9b03      	ldr	r3, [sp, #12]
 8008f10:	2b0e      	cmp	r3, #14
 8008f12:	f200 809d 	bhi.w	8009050 <_dtoa_r+0x468>
 8008f16:	2d00      	cmp	r5, #0
 8008f18:	f000 809a 	beq.w	8009050 <_dtoa_r+0x468>
 8008f1c:	9b00      	ldr	r3, [sp, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	dd32      	ble.n	8008f88 <_dtoa_r+0x3a0>
 8008f22:	4ab7      	ldr	r2, [pc, #732]	; (8009200 <_dtoa_r+0x618>)
 8008f24:	f003 030f 	and.w	r3, r3, #15
 8008f28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f30:	9b00      	ldr	r3, [sp, #0]
 8008f32:	05d8      	lsls	r0, r3, #23
 8008f34:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008f38:	d516      	bpl.n	8008f68 <_dtoa_r+0x380>
 8008f3a:	4bb2      	ldr	r3, [pc, #712]	; (8009204 <_dtoa_r+0x61c>)
 8008f3c:	ec51 0b19 	vmov	r0, r1, d9
 8008f40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f44:	f7f7 fc82 	bl	800084c <__aeabi_ddiv>
 8008f48:	f007 070f 	and.w	r7, r7, #15
 8008f4c:	4682      	mov	sl, r0
 8008f4e:	468b      	mov	fp, r1
 8008f50:	2503      	movs	r5, #3
 8008f52:	4eac      	ldr	r6, [pc, #688]	; (8009204 <_dtoa_r+0x61c>)
 8008f54:	b957      	cbnz	r7, 8008f6c <_dtoa_r+0x384>
 8008f56:	4642      	mov	r2, r8
 8008f58:	464b      	mov	r3, r9
 8008f5a:	4650      	mov	r0, sl
 8008f5c:	4659      	mov	r1, fp
 8008f5e:	f7f7 fc75 	bl	800084c <__aeabi_ddiv>
 8008f62:	4682      	mov	sl, r0
 8008f64:	468b      	mov	fp, r1
 8008f66:	e028      	b.n	8008fba <_dtoa_r+0x3d2>
 8008f68:	2502      	movs	r5, #2
 8008f6a:	e7f2      	b.n	8008f52 <_dtoa_r+0x36a>
 8008f6c:	07f9      	lsls	r1, r7, #31
 8008f6e:	d508      	bpl.n	8008f82 <_dtoa_r+0x39a>
 8008f70:	4640      	mov	r0, r8
 8008f72:	4649      	mov	r1, r9
 8008f74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f78:	f7f7 fb3e 	bl	80005f8 <__aeabi_dmul>
 8008f7c:	3501      	adds	r5, #1
 8008f7e:	4680      	mov	r8, r0
 8008f80:	4689      	mov	r9, r1
 8008f82:	107f      	asrs	r7, r7, #1
 8008f84:	3608      	adds	r6, #8
 8008f86:	e7e5      	b.n	8008f54 <_dtoa_r+0x36c>
 8008f88:	f000 809b 	beq.w	80090c2 <_dtoa_r+0x4da>
 8008f8c:	9b00      	ldr	r3, [sp, #0]
 8008f8e:	4f9d      	ldr	r7, [pc, #628]	; (8009204 <_dtoa_r+0x61c>)
 8008f90:	425e      	negs	r6, r3
 8008f92:	4b9b      	ldr	r3, [pc, #620]	; (8009200 <_dtoa_r+0x618>)
 8008f94:	f006 020f 	and.w	r2, r6, #15
 8008f98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa0:	ec51 0b19 	vmov	r0, r1, d9
 8008fa4:	f7f7 fb28 	bl	80005f8 <__aeabi_dmul>
 8008fa8:	1136      	asrs	r6, r6, #4
 8008faa:	4682      	mov	sl, r0
 8008fac:	468b      	mov	fp, r1
 8008fae:	2300      	movs	r3, #0
 8008fb0:	2502      	movs	r5, #2
 8008fb2:	2e00      	cmp	r6, #0
 8008fb4:	d17a      	bne.n	80090ac <_dtoa_r+0x4c4>
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1d3      	bne.n	8008f62 <_dtoa_r+0x37a>
 8008fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 8082 	beq.w	80090c6 <_dtoa_r+0x4de>
 8008fc2:	4b91      	ldr	r3, [pc, #580]	; (8009208 <_dtoa_r+0x620>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	4650      	mov	r0, sl
 8008fc8:	4659      	mov	r1, fp
 8008fca:	f7f7 fd87 	bl	8000adc <__aeabi_dcmplt>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	d079      	beq.n	80090c6 <_dtoa_r+0x4de>
 8008fd2:	9b03      	ldr	r3, [sp, #12]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d076      	beq.n	80090c6 <_dtoa_r+0x4de>
 8008fd8:	9b02      	ldr	r3, [sp, #8]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	dd36      	ble.n	800904c <_dtoa_r+0x464>
 8008fde:	9b00      	ldr	r3, [sp, #0]
 8008fe0:	4650      	mov	r0, sl
 8008fe2:	4659      	mov	r1, fp
 8008fe4:	1e5f      	subs	r7, r3, #1
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	4b88      	ldr	r3, [pc, #544]	; (800920c <_dtoa_r+0x624>)
 8008fea:	f7f7 fb05 	bl	80005f8 <__aeabi_dmul>
 8008fee:	9e02      	ldr	r6, [sp, #8]
 8008ff0:	4682      	mov	sl, r0
 8008ff2:	468b      	mov	fp, r1
 8008ff4:	3501      	adds	r5, #1
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f7f7 fa94 	bl	8000524 <__aeabi_i2d>
 8008ffc:	4652      	mov	r2, sl
 8008ffe:	465b      	mov	r3, fp
 8009000:	f7f7 fafa 	bl	80005f8 <__aeabi_dmul>
 8009004:	4b82      	ldr	r3, [pc, #520]	; (8009210 <_dtoa_r+0x628>)
 8009006:	2200      	movs	r2, #0
 8009008:	f7f7 f940 	bl	800028c <__adddf3>
 800900c:	46d0      	mov	r8, sl
 800900e:	46d9      	mov	r9, fp
 8009010:	4682      	mov	sl, r0
 8009012:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009016:	2e00      	cmp	r6, #0
 8009018:	d158      	bne.n	80090cc <_dtoa_r+0x4e4>
 800901a:	4b7e      	ldr	r3, [pc, #504]	; (8009214 <_dtoa_r+0x62c>)
 800901c:	2200      	movs	r2, #0
 800901e:	4640      	mov	r0, r8
 8009020:	4649      	mov	r1, r9
 8009022:	f7f7 f931 	bl	8000288 <__aeabi_dsub>
 8009026:	4652      	mov	r2, sl
 8009028:	465b      	mov	r3, fp
 800902a:	4680      	mov	r8, r0
 800902c:	4689      	mov	r9, r1
 800902e:	f7f7 fd73 	bl	8000b18 <__aeabi_dcmpgt>
 8009032:	2800      	cmp	r0, #0
 8009034:	f040 8295 	bne.w	8009562 <_dtoa_r+0x97a>
 8009038:	4652      	mov	r2, sl
 800903a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800903e:	4640      	mov	r0, r8
 8009040:	4649      	mov	r1, r9
 8009042:	f7f7 fd4b 	bl	8000adc <__aeabi_dcmplt>
 8009046:	2800      	cmp	r0, #0
 8009048:	f040 8289 	bne.w	800955e <_dtoa_r+0x976>
 800904c:	ec5b ab19 	vmov	sl, fp, d9
 8009050:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009052:	2b00      	cmp	r3, #0
 8009054:	f2c0 8148 	blt.w	80092e8 <_dtoa_r+0x700>
 8009058:	9a00      	ldr	r2, [sp, #0]
 800905a:	2a0e      	cmp	r2, #14
 800905c:	f300 8144 	bgt.w	80092e8 <_dtoa_r+0x700>
 8009060:	4b67      	ldr	r3, [pc, #412]	; (8009200 <_dtoa_r+0x618>)
 8009062:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009066:	e9d3 8900 	ldrd	r8, r9, [r3]
 800906a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800906c:	2b00      	cmp	r3, #0
 800906e:	f280 80d5 	bge.w	800921c <_dtoa_r+0x634>
 8009072:	9b03      	ldr	r3, [sp, #12]
 8009074:	2b00      	cmp	r3, #0
 8009076:	f300 80d1 	bgt.w	800921c <_dtoa_r+0x634>
 800907a:	f040 826f 	bne.w	800955c <_dtoa_r+0x974>
 800907e:	4b65      	ldr	r3, [pc, #404]	; (8009214 <_dtoa_r+0x62c>)
 8009080:	2200      	movs	r2, #0
 8009082:	4640      	mov	r0, r8
 8009084:	4649      	mov	r1, r9
 8009086:	f7f7 fab7 	bl	80005f8 <__aeabi_dmul>
 800908a:	4652      	mov	r2, sl
 800908c:	465b      	mov	r3, fp
 800908e:	f7f7 fd39 	bl	8000b04 <__aeabi_dcmpge>
 8009092:	9e03      	ldr	r6, [sp, #12]
 8009094:	4637      	mov	r7, r6
 8009096:	2800      	cmp	r0, #0
 8009098:	f040 8245 	bne.w	8009526 <_dtoa_r+0x93e>
 800909c:	9d01      	ldr	r5, [sp, #4]
 800909e:	2331      	movs	r3, #49	; 0x31
 80090a0:	f805 3b01 	strb.w	r3, [r5], #1
 80090a4:	9b00      	ldr	r3, [sp, #0]
 80090a6:	3301      	adds	r3, #1
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	e240      	b.n	800952e <_dtoa_r+0x946>
 80090ac:	07f2      	lsls	r2, r6, #31
 80090ae:	d505      	bpl.n	80090bc <_dtoa_r+0x4d4>
 80090b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090b4:	f7f7 faa0 	bl	80005f8 <__aeabi_dmul>
 80090b8:	3501      	adds	r5, #1
 80090ba:	2301      	movs	r3, #1
 80090bc:	1076      	asrs	r6, r6, #1
 80090be:	3708      	adds	r7, #8
 80090c0:	e777      	b.n	8008fb2 <_dtoa_r+0x3ca>
 80090c2:	2502      	movs	r5, #2
 80090c4:	e779      	b.n	8008fba <_dtoa_r+0x3d2>
 80090c6:	9f00      	ldr	r7, [sp, #0]
 80090c8:	9e03      	ldr	r6, [sp, #12]
 80090ca:	e794      	b.n	8008ff6 <_dtoa_r+0x40e>
 80090cc:	9901      	ldr	r1, [sp, #4]
 80090ce:	4b4c      	ldr	r3, [pc, #304]	; (8009200 <_dtoa_r+0x618>)
 80090d0:	4431      	add	r1, r6
 80090d2:	910d      	str	r1, [sp, #52]	; 0x34
 80090d4:	9908      	ldr	r1, [sp, #32]
 80090d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090de:	2900      	cmp	r1, #0
 80090e0:	d043      	beq.n	800916a <_dtoa_r+0x582>
 80090e2:	494d      	ldr	r1, [pc, #308]	; (8009218 <_dtoa_r+0x630>)
 80090e4:	2000      	movs	r0, #0
 80090e6:	f7f7 fbb1 	bl	800084c <__aeabi_ddiv>
 80090ea:	4652      	mov	r2, sl
 80090ec:	465b      	mov	r3, fp
 80090ee:	f7f7 f8cb 	bl	8000288 <__aeabi_dsub>
 80090f2:	9d01      	ldr	r5, [sp, #4]
 80090f4:	4682      	mov	sl, r0
 80090f6:	468b      	mov	fp, r1
 80090f8:	4649      	mov	r1, r9
 80090fa:	4640      	mov	r0, r8
 80090fc:	f7f7 fd2c 	bl	8000b58 <__aeabi_d2iz>
 8009100:	4606      	mov	r6, r0
 8009102:	f7f7 fa0f 	bl	8000524 <__aeabi_i2d>
 8009106:	4602      	mov	r2, r0
 8009108:	460b      	mov	r3, r1
 800910a:	4640      	mov	r0, r8
 800910c:	4649      	mov	r1, r9
 800910e:	f7f7 f8bb 	bl	8000288 <__aeabi_dsub>
 8009112:	3630      	adds	r6, #48	; 0x30
 8009114:	f805 6b01 	strb.w	r6, [r5], #1
 8009118:	4652      	mov	r2, sl
 800911a:	465b      	mov	r3, fp
 800911c:	4680      	mov	r8, r0
 800911e:	4689      	mov	r9, r1
 8009120:	f7f7 fcdc 	bl	8000adc <__aeabi_dcmplt>
 8009124:	2800      	cmp	r0, #0
 8009126:	d163      	bne.n	80091f0 <_dtoa_r+0x608>
 8009128:	4642      	mov	r2, r8
 800912a:	464b      	mov	r3, r9
 800912c:	4936      	ldr	r1, [pc, #216]	; (8009208 <_dtoa_r+0x620>)
 800912e:	2000      	movs	r0, #0
 8009130:	f7f7 f8aa 	bl	8000288 <__aeabi_dsub>
 8009134:	4652      	mov	r2, sl
 8009136:	465b      	mov	r3, fp
 8009138:	f7f7 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800913c:	2800      	cmp	r0, #0
 800913e:	f040 80b5 	bne.w	80092ac <_dtoa_r+0x6c4>
 8009142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009144:	429d      	cmp	r5, r3
 8009146:	d081      	beq.n	800904c <_dtoa_r+0x464>
 8009148:	4b30      	ldr	r3, [pc, #192]	; (800920c <_dtoa_r+0x624>)
 800914a:	2200      	movs	r2, #0
 800914c:	4650      	mov	r0, sl
 800914e:	4659      	mov	r1, fp
 8009150:	f7f7 fa52 	bl	80005f8 <__aeabi_dmul>
 8009154:	4b2d      	ldr	r3, [pc, #180]	; (800920c <_dtoa_r+0x624>)
 8009156:	4682      	mov	sl, r0
 8009158:	468b      	mov	fp, r1
 800915a:	4640      	mov	r0, r8
 800915c:	4649      	mov	r1, r9
 800915e:	2200      	movs	r2, #0
 8009160:	f7f7 fa4a 	bl	80005f8 <__aeabi_dmul>
 8009164:	4680      	mov	r8, r0
 8009166:	4689      	mov	r9, r1
 8009168:	e7c6      	b.n	80090f8 <_dtoa_r+0x510>
 800916a:	4650      	mov	r0, sl
 800916c:	4659      	mov	r1, fp
 800916e:	f7f7 fa43 	bl	80005f8 <__aeabi_dmul>
 8009172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009174:	9d01      	ldr	r5, [sp, #4]
 8009176:	930f      	str	r3, [sp, #60]	; 0x3c
 8009178:	4682      	mov	sl, r0
 800917a:	468b      	mov	fp, r1
 800917c:	4649      	mov	r1, r9
 800917e:	4640      	mov	r0, r8
 8009180:	f7f7 fcea 	bl	8000b58 <__aeabi_d2iz>
 8009184:	4606      	mov	r6, r0
 8009186:	f7f7 f9cd 	bl	8000524 <__aeabi_i2d>
 800918a:	3630      	adds	r6, #48	; 0x30
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	4640      	mov	r0, r8
 8009192:	4649      	mov	r1, r9
 8009194:	f7f7 f878 	bl	8000288 <__aeabi_dsub>
 8009198:	f805 6b01 	strb.w	r6, [r5], #1
 800919c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800919e:	429d      	cmp	r5, r3
 80091a0:	4680      	mov	r8, r0
 80091a2:	4689      	mov	r9, r1
 80091a4:	f04f 0200 	mov.w	r2, #0
 80091a8:	d124      	bne.n	80091f4 <_dtoa_r+0x60c>
 80091aa:	4b1b      	ldr	r3, [pc, #108]	; (8009218 <_dtoa_r+0x630>)
 80091ac:	4650      	mov	r0, sl
 80091ae:	4659      	mov	r1, fp
 80091b0:	f7f7 f86c 	bl	800028c <__adddf3>
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	4640      	mov	r0, r8
 80091ba:	4649      	mov	r1, r9
 80091bc:	f7f7 fcac 	bl	8000b18 <__aeabi_dcmpgt>
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d173      	bne.n	80092ac <_dtoa_r+0x6c4>
 80091c4:	4652      	mov	r2, sl
 80091c6:	465b      	mov	r3, fp
 80091c8:	4913      	ldr	r1, [pc, #76]	; (8009218 <_dtoa_r+0x630>)
 80091ca:	2000      	movs	r0, #0
 80091cc:	f7f7 f85c 	bl	8000288 <__aeabi_dsub>
 80091d0:	4602      	mov	r2, r0
 80091d2:	460b      	mov	r3, r1
 80091d4:	4640      	mov	r0, r8
 80091d6:	4649      	mov	r1, r9
 80091d8:	f7f7 fc80 	bl	8000adc <__aeabi_dcmplt>
 80091dc:	2800      	cmp	r0, #0
 80091de:	f43f af35 	beq.w	800904c <_dtoa_r+0x464>
 80091e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80091e4:	1e6b      	subs	r3, r5, #1
 80091e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80091e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091ec:	2b30      	cmp	r3, #48	; 0x30
 80091ee:	d0f8      	beq.n	80091e2 <_dtoa_r+0x5fa>
 80091f0:	9700      	str	r7, [sp, #0]
 80091f2:	e049      	b.n	8009288 <_dtoa_r+0x6a0>
 80091f4:	4b05      	ldr	r3, [pc, #20]	; (800920c <_dtoa_r+0x624>)
 80091f6:	f7f7 f9ff 	bl	80005f8 <__aeabi_dmul>
 80091fa:	4680      	mov	r8, r0
 80091fc:	4689      	mov	r9, r1
 80091fe:	e7bd      	b.n	800917c <_dtoa_r+0x594>
 8009200:	0800d4a0 	.word	0x0800d4a0
 8009204:	0800d478 	.word	0x0800d478
 8009208:	3ff00000 	.word	0x3ff00000
 800920c:	40240000 	.word	0x40240000
 8009210:	401c0000 	.word	0x401c0000
 8009214:	40140000 	.word	0x40140000
 8009218:	3fe00000 	.word	0x3fe00000
 800921c:	9d01      	ldr	r5, [sp, #4]
 800921e:	4656      	mov	r6, sl
 8009220:	465f      	mov	r7, fp
 8009222:	4642      	mov	r2, r8
 8009224:	464b      	mov	r3, r9
 8009226:	4630      	mov	r0, r6
 8009228:	4639      	mov	r1, r7
 800922a:	f7f7 fb0f 	bl	800084c <__aeabi_ddiv>
 800922e:	f7f7 fc93 	bl	8000b58 <__aeabi_d2iz>
 8009232:	4682      	mov	sl, r0
 8009234:	f7f7 f976 	bl	8000524 <__aeabi_i2d>
 8009238:	4642      	mov	r2, r8
 800923a:	464b      	mov	r3, r9
 800923c:	f7f7 f9dc 	bl	80005f8 <__aeabi_dmul>
 8009240:	4602      	mov	r2, r0
 8009242:	460b      	mov	r3, r1
 8009244:	4630      	mov	r0, r6
 8009246:	4639      	mov	r1, r7
 8009248:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800924c:	f7f7 f81c 	bl	8000288 <__aeabi_dsub>
 8009250:	f805 6b01 	strb.w	r6, [r5], #1
 8009254:	9e01      	ldr	r6, [sp, #4]
 8009256:	9f03      	ldr	r7, [sp, #12]
 8009258:	1bae      	subs	r6, r5, r6
 800925a:	42b7      	cmp	r7, r6
 800925c:	4602      	mov	r2, r0
 800925e:	460b      	mov	r3, r1
 8009260:	d135      	bne.n	80092ce <_dtoa_r+0x6e6>
 8009262:	f7f7 f813 	bl	800028c <__adddf3>
 8009266:	4642      	mov	r2, r8
 8009268:	464b      	mov	r3, r9
 800926a:	4606      	mov	r6, r0
 800926c:	460f      	mov	r7, r1
 800926e:	f7f7 fc53 	bl	8000b18 <__aeabi_dcmpgt>
 8009272:	b9d0      	cbnz	r0, 80092aa <_dtoa_r+0x6c2>
 8009274:	4642      	mov	r2, r8
 8009276:	464b      	mov	r3, r9
 8009278:	4630      	mov	r0, r6
 800927a:	4639      	mov	r1, r7
 800927c:	f7f7 fc24 	bl	8000ac8 <__aeabi_dcmpeq>
 8009280:	b110      	cbz	r0, 8009288 <_dtoa_r+0x6a0>
 8009282:	f01a 0f01 	tst.w	sl, #1
 8009286:	d110      	bne.n	80092aa <_dtoa_r+0x6c2>
 8009288:	4620      	mov	r0, r4
 800928a:	ee18 1a10 	vmov	r1, s16
 800928e:	f000 fe8b 	bl	8009fa8 <_Bfree>
 8009292:	2300      	movs	r3, #0
 8009294:	9800      	ldr	r0, [sp, #0]
 8009296:	702b      	strb	r3, [r5, #0]
 8009298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800929a:	3001      	adds	r0, #1
 800929c:	6018      	str	r0, [r3, #0]
 800929e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f43f acf1 	beq.w	8008c88 <_dtoa_r+0xa0>
 80092a6:	601d      	str	r5, [r3, #0]
 80092a8:	e4ee      	b.n	8008c88 <_dtoa_r+0xa0>
 80092aa:	9f00      	ldr	r7, [sp, #0]
 80092ac:	462b      	mov	r3, r5
 80092ae:	461d      	mov	r5, r3
 80092b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092b4:	2a39      	cmp	r2, #57	; 0x39
 80092b6:	d106      	bne.n	80092c6 <_dtoa_r+0x6de>
 80092b8:	9a01      	ldr	r2, [sp, #4]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d1f7      	bne.n	80092ae <_dtoa_r+0x6c6>
 80092be:	9901      	ldr	r1, [sp, #4]
 80092c0:	2230      	movs	r2, #48	; 0x30
 80092c2:	3701      	adds	r7, #1
 80092c4:	700a      	strb	r2, [r1, #0]
 80092c6:	781a      	ldrb	r2, [r3, #0]
 80092c8:	3201      	adds	r2, #1
 80092ca:	701a      	strb	r2, [r3, #0]
 80092cc:	e790      	b.n	80091f0 <_dtoa_r+0x608>
 80092ce:	4ba6      	ldr	r3, [pc, #664]	; (8009568 <_dtoa_r+0x980>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	f7f7 f991 	bl	80005f8 <__aeabi_dmul>
 80092d6:	2200      	movs	r2, #0
 80092d8:	2300      	movs	r3, #0
 80092da:	4606      	mov	r6, r0
 80092dc:	460f      	mov	r7, r1
 80092de:	f7f7 fbf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80092e2:	2800      	cmp	r0, #0
 80092e4:	d09d      	beq.n	8009222 <_dtoa_r+0x63a>
 80092e6:	e7cf      	b.n	8009288 <_dtoa_r+0x6a0>
 80092e8:	9a08      	ldr	r2, [sp, #32]
 80092ea:	2a00      	cmp	r2, #0
 80092ec:	f000 80d7 	beq.w	800949e <_dtoa_r+0x8b6>
 80092f0:	9a06      	ldr	r2, [sp, #24]
 80092f2:	2a01      	cmp	r2, #1
 80092f4:	f300 80ba 	bgt.w	800946c <_dtoa_r+0x884>
 80092f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092fa:	2a00      	cmp	r2, #0
 80092fc:	f000 80b2 	beq.w	8009464 <_dtoa_r+0x87c>
 8009300:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009304:	9e07      	ldr	r6, [sp, #28]
 8009306:	9d04      	ldr	r5, [sp, #16]
 8009308:	9a04      	ldr	r2, [sp, #16]
 800930a:	441a      	add	r2, r3
 800930c:	9204      	str	r2, [sp, #16]
 800930e:	9a05      	ldr	r2, [sp, #20]
 8009310:	2101      	movs	r1, #1
 8009312:	441a      	add	r2, r3
 8009314:	4620      	mov	r0, r4
 8009316:	9205      	str	r2, [sp, #20]
 8009318:	f000 ff48 	bl	800a1ac <__i2b>
 800931c:	4607      	mov	r7, r0
 800931e:	2d00      	cmp	r5, #0
 8009320:	dd0c      	ble.n	800933c <_dtoa_r+0x754>
 8009322:	9b05      	ldr	r3, [sp, #20]
 8009324:	2b00      	cmp	r3, #0
 8009326:	dd09      	ble.n	800933c <_dtoa_r+0x754>
 8009328:	42ab      	cmp	r3, r5
 800932a:	9a04      	ldr	r2, [sp, #16]
 800932c:	bfa8      	it	ge
 800932e:	462b      	movge	r3, r5
 8009330:	1ad2      	subs	r2, r2, r3
 8009332:	9204      	str	r2, [sp, #16]
 8009334:	9a05      	ldr	r2, [sp, #20]
 8009336:	1aed      	subs	r5, r5, r3
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	9305      	str	r3, [sp, #20]
 800933c:	9b07      	ldr	r3, [sp, #28]
 800933e:	b31b      	cbz	r3, 8009388 <_dtoa_r+0x7a0>
 8009340:	9b08      	ldr	r3, [sp, #32]
 8009342:	2b00      	cmp	r3, #0
 8009344:	f000 80af 	beq.w	80094a6 <_dtoa_r+0x8be>
 8009348:	2e00      	cmp	r6, #0
 800934a:	dd13      	ble.n	8009374 <_dtoa_r+0x78c>
 800934c:	4639      	mov	r1, r7
 800934e:	4632      	mov	r2, r6
 8009350:	4620      	mov	r0, r4
 8009352:	f000 ffeb 	bl	800a32c <__pow5mult>
 8009356:	ee18 2a10 	vmov	r2, s16
 800935a:	4601      	mov	r1, r0
 800935c:	4607      	mov	r7, r0
 800935e:	4620      	mov	r0, r4
 8009360:	f000 ff3a 	bl	800a1d8 <__multiply>
 8009364:	ee18 1a10 	vmov	r1, s16
 8009368:	4680      	mov	r8, r0
 800936a:	4620      	mov	r0, r4
 800936c:	f000 fe1c 	bl	8009fa8 <_Bfree>
 8009370:	ee08 8a10 	vmov	s16, r8
 8009374:	9b07      	ldr	r3, [sp, #28]
 8009376:	1b9a      	subs	r2, r3, r6
 8009378:	d006      	beq.n	8009388 <_dtoa_r+0x7a0>
 800937a:	ee18 1a10 	vmov	r1, s16
 800937e:	4620      	mov	r0, r4
 8009380:	f000 ffd4 	bl	800a32c <__pow5mult>
 8009384:	ee08 0a10 	vmov	s16, r0
 8009388:	2101      	movs	r1, #1
 800938a:	4620      	mov	r0, r4
 800938c:	f000 ff0e 	bl	800a1ac <__i2b>
 8009390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009392:	2b00      	cmp	r3, #0
 8009394:	4606      	mov	r6, r0
 8009396:	f340 8088 	ble.w	80094aa <_dtoa_r+0x8c2>
 800939a:	461a      	mov	r2, r3
 800939c:	4601      	mov	r1, r0
 800939e:	4620      	mov	r0, r4
 80093a0:	f000 ffc4 	bl	800a32c <__pow5mult>
 80093a4:	9b06      	ldr	r3, [sp, #24]
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	4606      	mov	r6, r0
 80093aa:	f340 8081 	ble.w	80094b0 <_dtoa_r+0x8c8>
 80093ae:	f04f 0800 	mov.w	r8, #0
 80093b2:	6933      	ldr	r3, [r6, #16]
 80093b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093b8:	6918      	ldr	r0, [r3, #16]
 80093ba:	f000 fea7 	bl	800a10c <__hi0bits>
 80093be:	f1c0 0020 	rsb	r0, r0, #32
 80093c2:	9b05      	ldr	r3, [sp, #20]
 80093c4:	4418      	add	r0, r3
 80093c6:	f010 001f 	ands.w	r0, r0, #31
 80093ca:	f000 8092 	beq.w	80094f2 <_dtoa_r+0x90a>
 80093ce:	f1c0 0320 	rsb	r3, r0, #32
 80093d2:	2b04      	cmp	r3, #4
 80093d4:	f340 808a 	ble.w	80094ec <_dtoa_r+0x904>
 80093d8:	f1c0 001c 	rsb	r0, r0, #28
 80093dc:	9b04      	ldr	r3, [sp, #16]
 80093de:	4403      	add	r3, r0
 80093e0:	9304      	str	r3, [sp, #16]
 80093e2:	9b05      	ldr	r3, [sp, #20]
 80093e4:	4403      	add	r3, r0
 80093e6:	4405      	add	r5, r0
 80093e8:	9305      	str	r3, [sp, #20]
 80093ea:	9b04      	ldr	r3, [sp, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	dd07      	ble.n	8009400 <_dtoa_r+0x818>
 80093f0:	ee18 1a10 	vmov	r1, s16
 80093f4:	461a      	mov	r2, r3
 80093f6:	4620      	mov	r0, r4
 80093f8:	f000 fff2 	bl	800a3e0 <__lshift>
 80093fc:	ee08 0a10 	vmov	s16, r0
 8009400:	9b05      	ldr	r3, [sp, #20]
 8009402:	2b00      	cmp	r3, #0
 8009404:	dd05      	ble.n	8009412 <_dtoa_r+0x82a>
 8009406:	4631      	mov	r1, r6
 8009408:	461a      	mov	r2, r3
 800940a:	4620      	mov	r0, r4
 800940c:	f000 ffe8 	bl	800a3e0 <__lshift>
 8009410:	4606      	mov	r6, r0
 8009412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009414:	2b00      	cmp	r3, #0
 8009416:	d06e      	beq.n	80094f6 <_dtoa_r+0x90e>
 8009418:	ee18 0a10 	vmov	r0, s16
 800941c:	4631      	mov	r1, r6
 800941e:	f001 f84f 	bl	800a4c0 <__mcmp>
 8009422:	2800      	cmp	r0, #0
 8009424:	da67      	bge.n	80094f6 <_dtoa_r+0x90e>
 8009426:	9b00      	ldr	r3, [sp, #0]
 8009428:	3b01      	subs	r3, #1
 800942a:	ee18 1a10 	vmov	r1, s16
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	220a      	movs	r2, #10
 8009432:	2300      	movs	r3, #0
 8009434:	4620      	mov	r0, r4
 8009436:	f000 fdd9 	bl	8009fec <__multadd>
 800943a:	9b08      	ldr	r3, [sp, #32]
 800943c:	ee08 0a10 	vmov	s16, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	f000 81b1 	beq.w	80097a8 <_dtoa_r+0xbc0>
 8009446:	2300      	movs	r3, #0
 8009448:	4639      	mov	r1, r7
 800944a:	220a      	movs	r2, #10
 800944c:	4620      	mov	r0, r4
 800944e:	f000 fdcd 	bl	8009fec <__multadd>
 8009452:	9b02      	ldr	r3, [sp, #8]
 8009454:	2b00      	cmp	r3, #0
 8009456:	4607      	mov	r7, r0
 8009458:	f300 808e 	bgt.w	8009578 <_dtoa_r+0x990>
 800945c:	9b06      	ldr	r3, [sp, #24]
 800945e:	2b02      	cmp	r3, #2
 8009460:	dc51      	bgt.n	8009506 <_dtoa_r+0x91e>
 8009462:	e089      	b.n	8009578 <_dtoa_r+0x990>
 8009464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009466:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800946a:	e74b      	b.n	8009304 <_dtoa_r+0x71c>
 800946c:	9b03      	ldr	r3, [sp, #12]
 800946e:	1e5e      	subs	r6, r3, #1
 8009470:	9b07      	ldr	r3, [sp, #28]
 8009472:	42b3      	cmp	r3, r6
 8009474:	bfbf      	itttt	lt
 8009476:	9b07      	ldrlt	r3, [sp, #28]
 8009478:	9607      	strlt	r6, [sp, #28]
 800947a:	1af2      	sublt	r2, r6, r3
 800947c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800947e:	bfb6      	itet	lt
 8009480:	189b      	addlt	r3, r3, r2
 8009482:	1b9e      	subge	r6, r3, r6
 8009484:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009486:	9b03      	ldr	r3, [sp, #12]
 8009488:	bfb8      	it	lt
 800948a:	2600      	movlt	r6, #0
 800948c:	2b00      	cmp	r3, #0
 800948e:	bfb7      	itett	lt
 8009490:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009494:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009498:	1a9d      	sublt	r5, r3, r2
 800949a:	2300      	movlt	r3, #0
 800949c:	e734      	b.n	8009308 <_dtoa_r+0x720>
 800949e:	9e07      	ldr	r6, [sp, #28]
 80094a0:	9d04      	ldr	r5, [sp, #16]
 80094a2:	9f08      	ldr	r7, [sp, #32]
 80094a4:	e73b      	b.n	800931e <_dtoa_r+0x736>
 80094a6:	9a07      	ldr	r2, [sp, #28]
 80094a8:	e767      	b.n	800937a <_dtoa_r+0x792>
 80094aa:	9b06      	ldr	r3, [sp, #24]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	dc18      	bgt.n	80094e2 <_dtoa_r+0x8fa>
 80094b0:	f1ba 0f00 	cmp.w	sl, #0
 80094b4:	d115      	bne.n	80094e2 <_dtoa_r+0x8fa>
 80094b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094ba:	b993      	cbnz	r3, 80094e2 <_dtoa_r+0x8fa>
 80094bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094c0:	0d1b      	lsrs	r3, r3, #20
 80094c2:	051b      	lsls	r3, r3, #20
 80094c4:	b183      	cbz	r3, 80094e8 <_dtoa_r+0x900>
 80094c6:	9b04      	ldr	r3, [sp, #16]
 80094c8:	3301      	adds	r3, #1
 80094ca:	9304      	str	r3, [sp, #16]
 80094cc:	9b05      	ldr	r3, [sp, #20]
 80094ce:	3301      	adds	r3, #1
 80094d0:	9305      	str	r3, [sp, #20]
 80094d2:	f04f 0801 	mov.w	r8, #1
 80094d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f47f af6a 	bne.w	80093b2 <_dtoa_r+0x7ca>
 80094de:	2001      	movs	r0, #1
 80094e0:	e76f      	b.n	80093c2 <_dtoa_r+0x7da>
 80094e2:	f04f 0800 	mov.w	r8, #0
 80094e6:	e7f6      	b.n	80094d6 <_dtoa_r+0x8ee>
 80094e8:	4698      	mov	r8, r3
 80094ea:	e7f4      	b.n	80094d6 <_dtoa_r+0x8ee>
 80094ec:	f43f af7d 	beq.w	80093ea <_dtoa_r+0x802>
 80094f0:	4618      	mov	r0, r3
 80094f2:	301c      	adds	r0, #28
 80094f4:	e772      	b.n	80093dc <_dtoa_r+0x7f4>
 80094f6:	9b03      	ldr	r3, [sp, #12]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	dc37      	bgt.n	800956c <_dtoa_r+0x984>
 80094fc:	9b06      	ldr	r3, [sp, #24]
 80094fe:	2b02      	cmp	r3, #2
 8009500:	dd34      	ble.n	800956c <_dtoa_r+0x984>
 8009502:	9b03      	ldr	r3, [sp, #12]
 8009504:	9302      	str	r3, [sp, #8]
 8009506:	9b02      	ldr	r3, [sp, #8]
 8009508:	b96b      	cbnz	r3, 8009526 <_dtoa_r+0x93e>
 800950a:	4631      	mov	r1, r6
 800950c:	2205      	movs	r2, #5
 800950e:	4620      	mov	r0, r4
 8009510:	f000 fd6c 	bl	8009fec <__multadd>
 8009514:	4601      	mov	r1, r0
 8009516:	4606      	mov	r6, r0
 8009518:	ee18 0a10 	vmov	r0, s16
 800951c:	f000 ffd0 	bl	800a4c0 <__mcmp>
 8009520:	2800      	cmp	r0, #0
 8009522:	f73f adbb 	bgt.w	800909c <_dtoa_r+0x4b4>
 8009526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009528:	9d01      	ldr	r5, [sp, #4]
 800952a:	43db      	mvns	r3, r3
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	f04f 0800 	mov.w	r8, #0
 8009532:	4631      	mov	r1, r6
 8009534:	4620      	mov	r0, r4
 8009536:	f000 fd37 	bl	8009fa8 <_Bfree>
 800953a:	2f00      	cmp	r7, #0
 800953c:	f43f aea4 	beq.w	8009288 <_dtoa_r+0x6a0>
 8009540:	f1b8 0f00 	cmp.w	r8, #0
 8009544:	d005      	beq.n	8009552 <_dtoa_r+0x96a>
 8009546:	45b8      	cmp	r8, r7
 8009548:	d003      	beq.n	8009552 <_dtoa_r+0x96a>
 800954a:	4641      	mov	r1, r8
 800954c:	4620      	mov	r0, r4
 800954e:	f000 fd2b 	bl	8009fa8 <_Bfree>
 8009552:	4639      	mov	r1, r7
 8009554:	4620      	mov	r0, r4
 8009556:	f000 fd27 	bl	8009fa8 <_Bfree>
 800955a:	e695      	b.n	8009288 <_dtoa_r+0x6a0>
 800955c:	2600      	movs	r6, #0
 800955e:	4637      	mov	r7, r6
 8009560:	e7e1      	b.n	8009526 <_dtoa_r+0x93e>
 8009562:	9700      	str	r7, [sp, #0]
 8009564:	4637      	mov	r7, r6
 8009566:	e599      	b.n	800909c <_dtoa_r+0x4b4>
 8009568:	40240000 	.word	0x40240000
 800956c:	9b08      	ldr	r3, [sp, #32]
 800956e:	2b00      	cmp	r3, #0
 8009570:	f000 80ca 	beq.w	8009708 <_dtoa_r+0xb20>
 8009574:	9b03      	ldr	r3, [sp, #12]
 8009576:	9302      	str	r3, [sp, #8]
 8009578:	2d00      	cmp	r5, #0
 800957a:	dd05      	ble.n	8009588 <_dtoa_r+0x9a0>
 800957c:	4639      	mov	r1, r7
 800957e:	462a      	mov	r2, r5
 8009580:	4620      	mov	r0, r4
 8009582:	f000 ff2d 	bl	800a3e0 <__lshift>
 8009586:	4607      	mov	r7, r0
 8009588:	f1b8 0f00 	cmp.w	r8, #0
 800958c:	d05b      	beq.n	8009646 <_dtoa_r+0xa5e>
 800958e:	6879      	ldr	r1, [r7, #4]
 8009590:	4620      	mov	r0, r4
 8009592:	f000 fcc9 	bl	8009f28 <_Balloc>
 8009596:	4605      	mov	r5, r0
 8009598:	b928      	cbnz	r0, 80095a6 <_dtoa_r+0x9be>
 800959a:	4b87      	ldr	r3, [pc, #540]	; (80097b8 <_dtoa_r+0xbd0>)
 800959c:	4602      	mov	r2, r0
 800959e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80095a2:	f7ff bb3b 	b.w	8008c1c <_dtoa_r+0x34>
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	3202      	adds	r2, #2
 80095aa:	0092      	lsls	r2, r2, #2
 80095ac:	f107 010c 	add.w	r1, r7, #12
 80095b0:	300c      	adds	r0, #12
 80095b2:	f7fd fc91 	bl	8006ed8 <memcpy>
 80095b6:	2201      	movs	r2, #1
 80095b8:	4629      	mov	r1, r5
 80095ba:	4620      	mov	r0, r4
 80095bc:	f000 ff10 	bl	800a3e0 <__lshift>
 80095c0:	9b01      	ldr	r3, [sp, #4]
 80095c2:	f103 0901 	add.w	r9, r3, #1
 80095c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80095ca:	4413      	add	r3, r2
 80095cc:	9305      	str	r3, [sp, #20]
 80095ce:	f00a 0301 	and.w	r3, sl, #1
 80095d2:	46b8      	mov	r8, r7
 80095d4:	9304      	str	r3, [sp, #16]
 80095d6:	4607      	mov	r7, r0
 80095d8:	4631      	mov	r1, r6
 80095da:	ee18 0a10 	vmov	r0, s16
 80095de:	f7ff fa77 	bl	8008ad0 <quorem>
 80095e2:	4641      	mov	r1, r8
 80095e4:	9002      	str	r0, [sp, #8]
 80095e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80095ea:	ee18 0a10 	vmov	r0, s16
 80095ee:	f000 ff67 	bl	800a4c0 <__mcmp>
 80095f2:	463a      	mov	r2, r7
 80095f4:	9003      	str	r0, [sp, #12]
 80095f6:	4631      	mov	r1, r6
 80095f8:	4620      	mov	r0, r4
 80095fa:	f000 ff7d 	bl	800a4f8 <__mdiff>
 80095fe:	68c2      	ldr	r2, [r0, #12]
 8009600:	f109 3bff 	add.w	fp, r9, #4294967295
 8009604:	4605      	mov	r5, r0
 8009606:	bb02      	cbnz	r2, 800964a <_dtoa_r+0xa62>
 8009608:	4601      	mov	r1, r0
 800960a:	ee18 0a10 	vmov	r0, s16
 800960e:	f000 ff57 	bl	800a4c0 <__mcmp>
 8009612:	4602      	mov	r2, r0
 8009614:	4629      	mov	r1, r5
 8009616:	4620      	mov	r0, r4
 8009618:	9207      	str	r2, [sp, #28]
 800961a:	f000 fcc5 	bl	8009fa8 <_Bfree>
 800961e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009622:	ea43 0102 	orr.w	r1, r3, r2
 8009626:	9b04      	ldr	r3, [sp, #16]
 8009628:	430b      	orrs	r3, r1
 800962a:	464d      	mov	r5, r9
 800962c:	d10f      	bne.n	800964e <_dtoa_r+0xa66>
 800962e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009632:	d02a      	beq.n	800968a <_dtoa_r+0xaa2>
 8009634:	9b03      	ldr	r3, [sp, #12]
 8009636:	2b00      	cmp	r3, #0
 8009638:	dd02      	ble.n	8009640 <_dtoa_r+0xa58>
 800963a:	9b02      	ldr	r3, [sp, #8]
 800963c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009640:	f88b a000 	strb.w	sl, [fp]
 8009644:	e775      	b.n	8009532 <_dtoa_r+0x94a>
 8009646:	4638      	mov	r0, r7
 8009648:	e7ba      	b.n	80095c0 <_dtoa_r+0x9d8>
 800964a:	2201      	movs	r2, #1
 800964c:	e7e2      	b.n	8009614 <_dtoa_r+0xa2c>
 800964e:	9b03      	ldr	r3, [sp, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	db04      	blt.n	800965e <_dtoa_r+0xa76>
 8009654:	9906      	ldr	r1, [sp, #24]
 8009656:	430b      	orrs	r3, r1
 8009658:	9904      	ldr	r1, [sp, #16]
 800965a:	430b      	orrs	r3, r1
 800965c:	d122      	bne.n	80096a4 <_dtoa_r+0xabc>
 800965e:	2a00      	cmp	r2, #0
 8009660:	ddee      	ble.n	8009640 <_dtoa_r+0xa58>
 8009662:	ee18 1a10 	vmov	r1, s16
 8009666:	2201      	movs	r2, #1
 8009668:	4620      	mov	r0, r4
 800966a:	f000 feb9 	bl	800a3e0 <__lshift>
 800966e:	4631      	mov	r1, r6
 8009670:	ee08 0a10 	vmov	s16, r0
 8009674:	f000 ff24 	bl	800a4c0 <__mcmp>
 8009678:	2800      	cmp	r0, #0
 800967a:	dc03      	bgt.n	8009684 <_dtoa_r+0xa9c>
 800967c:	d1e0      	bne.n	8009640 <_dtoa_r+0xa58>
 800967e:	f01a 0f01 	tst.w	sl, #1
 8009682:	d0dd      	beq.n	8009640 <_dtoa_r+0xa58>
 8009684:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009688:	d1d7      	bne.n	800963a <_dtoa_r+0xa52>
 800968a:	2339      	movs	r3, #57	; 0x39
 800968c:	f88b 3000 	strb.w	r3, [fp]
 8009690:	462b      	mov	r3, r5
 8009692:	461d      	mov	r5, r3
 8009694:	3b01      	subs	r3, #1
 8009696:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800969a:	2a39      	cmp	r2, #57	; 0x39
 800969c:	d071      	beq.n	8009782 <_dtoa_r+0xb9a>
 800969e:	3201      	adds	r2, #1
 80096a0:	701a      	strb	r2, [r3, #0]
 80096a2:	e746      	b.n	8009532 <_dtoa_r+0x94a>
 80096a4:	2a00      	cmp	r2, #0
 80096a6:	dd07      	ble.n	80096b8 <_dtoa_r+0xad0>
 80096a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096ac:	d0ed      	beq.n	800968a <_dtoa_r+0xaa2>
 80096ae:	f10a 0301 	add.w	r3, sl, #1
 80096b2:	f88b 3000 	strb.w	r3, [fp]
 80096b6:	e73c      	b.n	8009532 <_dtoa_r+0x94a>
 80096b8:	9b05      	ldr	r3, [sp, #20]
 80096ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80096be:	4599      	cmp	r9, r3
 80096c0:	d047      	beq.n	8009752 <_dtoa_r+0xb6a>
 80096c2:	ee18 1a10 	vmov	r1, s16
 80096c6:	2300      	movs	r3, #0
 80096c8:	220a      	movs	r2, #10
 80096ca:	4620      	mov	r0, r4
 80096cc:	f000 fc8e 	bl	8009fec <__multadd>
 80096d0:	45b8      	cmp	r8, r7
 80096d2:	ee08 0a10 	vmov	s16, r0
 80096d6:	f04f 0300 	mov.w	r3, #0
 80096da:	f04f 020a 	mov.w	r2, #10
 80096de:	4641      	mov	r1, r8
 80096e0:	4620      	mov	r0, r4
 80096e2:	d106      	bne.n	80096f2 <_dtoa_r+0xb0a>
 80096e4:	f000 fc82 	bl	8009fec <__multadd>
 80096e8:	4680      	mov	r8, r0
 80096ea:	4607      	mov	r7, r0
 80096ec:	f109 0901 	add.w	r9, r9, #1
 80096f0:	e772      	b.n	80095d8 <_dtoa_r+0x9f0>
 80096f2:	f000 fc7b 	bl	8009fec <__multadd>
 80096f6:	4639      	mov	r1, r7
 80096f8:	4680      	mov	r8, r0
 80096fa:	2300      	movs	r3, #0
 80096fc:	220a      	movs	r2, #10
 80096fe:	4620      	mov	r0, r4
 8009700:	f000 fc74 	bl	8009fec <__multadd>
 8009704:	4607      	mov	r7, r0
 8009706:	e7f1      	b.n	80096ec <_dtoa_r+0xb04>
 8009708:	9b03      	ldr	r3, [sp, #12]
 800970a:	9302      	str	r3, [sp, #8]
 800970c:	9d01      	ldr	r5, [sp, #4]
 800970e:	ee18 0a10 	vmov	r0, s16
 8009712:	4631      	mov	r1, r6
 8009714:	f7ff f9dc 	bl	8008ad0 <quorem>
 8009718:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800971c:	9b01      	ldr	r3, [sp, #4]
 800971e:	f805 ab01 	strb.w	sl, [r5], #1
 8009722:	1aea      	subs	r2, r5, r3
 8009724:	9b02      	ldr	r3, [sp, #8]
 8009726:	4293      	cmp	r3, r2
 8009728:	dd09      	ble.n	800973e <_dtoa_r+0xb56>
 800972a:	ee18 1a10 	vmov	r1, s16
 800972e:	2300      	movs	r3, #0
 8009730:	220a      	movs	r2, #10
 8009732:	4620      	mov	r0, r4
 8009734:	f000 fc5a 	bl	8009fec <__multadd>
 8009738:	ee08 0a10 	vmov	s16, r0
 800973c:	e7e7      	b.n	800970e <_dtoa_r+0xb26>
 800973e:	9b02      	ldr	r3, [sp, #8]
 8009740:	2b00      	cmp	r3, #0
 8009742:	bfc8      	it	gt
 8009744:	461d      	movgt	r5, r3
 8009746:	9b01      	ldr	r3, [sp, #4]
 8009748:	bfd8      	it	le
 800974a:	2501      	movle	r5, #1
 800974c:	441d      	add	r5, r3
 800974e:	f04f 0800 	mov.w	r8, #0
 8009752:	ee18 1a10 	vmov	r1, s16
 8009756:	2201      	movs	r2, #1
 8009758:	4620      	mov	r0, r4
 800975a:	f000 fe41 	bl	800a3e0 <__lshift>
 800975e:	4631      	mov	r1, r6
 8009760:	ee08 0a10 	vmov	s16, r0
 8009764:	f000 feac 	bl	800a4c0 <__mcmp>
 8009768:	2800      	cmp	r0, #0
 800976a:	dc91      	bgt.n	8009690 <_dtoa_r+0xaa8>
 800976c:	d102      	bne.n	8009774 <_dtoa_r+0xb8c>
 800976e:	f01a 0f01 	tst.w	sl, #1
 8009772:	d18d      	bne.n	8009690 <_dtoa_r+0xaa8>
 8009774:	462b      	mov	r3, r5
 8009776:	461d      	mov	r5, r3
 8009778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800977c:	2a30      	cmp	r2, #48	; 0x30
 800977e:	d0fa      	beq.n	8009776 <_dtoa_r+0xb8e>
 8009780:	e6d7      	b.n	8009532 <_dtoa_r+0x94a>
 8009782:	9a01      	ldr	r2, [sp, #4]
 8009784:	429a      	cmp	r2, r3
 8009786:	d184      	bne.n	8009692 <_dtoa_r+0xaaa>
 8009788:	9b00      	ldr	r3, [sp, #0]
 800978a:	3301      	adds	r3, #1
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	2331      	movs	r3, #49	; 0x31
 8009790:	7013      	strb	r3, [r2, #0]
 8009792:	e6ce      	b.n	8009532 <_dtoa_r+0x94a>
 8009794:	4b09      	ldr	r3, [pc, #36]	; (80097bc <_dtoa_r+0xbd4>)
 8009796:	f7ff ba95 	b.w	8008cc4 <_dtoa_r+0xdc>
 800979a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800979c:	2b00      	cmp	r3, #0
 800979e:	f47f aa6e 	bne.w	8008c7e <_dtoa_r+0x96>
 80097a2:	4b07      	ldr	r3, [pc, #28]	; (80097c0 <_dtoa_r+0xbd8>)
 80097a4:	f7ff ba8e 	b.w	8008cc4 <_dtoa_r+0xdc>
 80097a8:	9b02      	ldr	r3, [sp, #8]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	dcae      	bgt.n	800970c <_dtoa_r+0xb24>
 80097ae:	9b06      	ldr	r3, [sp, #24]
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	f73f aea8 	bgt.w	8009506 <_dtoa_r+0x91e>
 80097b6:	e7a9      	b.n	800970c <_dtoa_r+0xb24>
 80097b8:	0800d38c 	.word	0x0800d38c
 80097bc:	0800d154 	.word	0x0800d154
 80097c0:	0800d30d 	.word	0x0800d30d

080097c4 <fiprintf>:
 80097c4:	b40e      	push	{r1, r2, r3}
 80097c6:	b503      	push	{r0, r1, lr}
 80097c8:	4601      	mov	r1, r0
 80097ca:	ab03      	add	r3, sp, #12
 80097cc:	4805      	ldr	r0, [pc, #20]	; (80097e4 <fiprintf+0x20>)
 80097ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80097d2:	6800      	ldr	r0, [r0, #0]
 80097d4:	9301      	str	r3, [sp, #4]
 80097d6:	f001 fae5 	bl	800ada4 <_vfiprintf_r>
 80097da:	b002      	add	sp, #8
 80097dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80097e0:	b003      	add	sp, #12
 80097e2:	4770      	bx	lr
 80097e4:	2000009c 	.word	0x2000009c

080097e8 <rshift>:
 80097e8:	6903      	ldr	r3, [r0, #16]
 80097ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80097ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80097f6:	f100 0414 	add.w	r4, r0, #20
 80097fa:	dd45      	ble.n	8009888 <rshift+0xa0>
 80097fc:	f011 011f 	ands.w	r1, r1, #31
 8009800:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009804:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009808:	d10c      	bne.n	8009824 <rshift+0x3c>
 800980a:	f100 0710 	add.w	r7, r0, #16
 800980e:	4629      	mov	r1, r5
 8009810:	42b1      	cmp	r1, r6
 8009812:	d334      	bcc.n	800987e <rshift+0x96>
 8009814:	1a9b      	subs	r3, r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	1eea      	subs	r2, r5, #3
 800981a:	4296      	cmp	r6, r2
 800981c:	bf38      	it	cc
 800981e:	2300      	movcc	r3, #0
 8009820:	4423      	add	r3, r4
 8009822:	e015      	b.n	8009850 <rshift+0x68>
 8009824:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009828:	f1c1 0820 	rsb	r8, r1, #32
 800982c:	40cf      	lsrs	r7, r1
 800982e:	f105 0e04 	add.w	lr, r5, #4
 8009832:	46a1      	mov	r9, r4
 8009834:	4576      	cmp	r6, lr
 8009836:	46f4      	mov	ip, lr
 8009838:	d815      	bhi.n	8009866 <rshift+0x7e>
 800983a:	1a9a      	subs	r2, r3, r2
 800983c:	0092      	lsls	r2, r2, #2
 800983e:	3a04      	subs	r2, #4
 8009840:	3501      	adds	r5, #1
 8009842:	42ae      	cmp	r6, r5
 8009844:	bf38      	it	cc
 8009846:	2200      	movcc	r2, #0
 8009848:	18a3      	adds	r3, r4, r2
 800984a:	50a7      	str	r7, [r4, r2]
 800984c:	b107      	cbz	r7, 8009850 <rshift+0x68>
 800984e:	3304      	adds	r3, #4
 8009850:	1b1a      	subs	r2, r3, r4
 8009852:	42a3      	cmp	r3, r4
 8009854:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009858:	bf08      	it	eq
 800985a:	2300      	moveq	r3, #0
 800985c:	6102      	str	r2, [r0, #16]
 800985e:	bf08      	it	eq
 8009860:	6143      	streq	r3, [r0, #20]
 8009862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009866:	f8dc c000 	ldr.w	ip, [ip]
 800986a:	fa0c fc08 	lsl.w	ip, ip, r8
 800986e:	ea4c 0707 	orr.w	r7, ip, r7
 8009872:	f849 7b04 	str.w	r7, [r9], #4
 8009876:	f85e 7b04 	ldr.w	r7, [lr], #4
 800987a:	40cf      	lsrs	r7, r1
 800987c:	e7da      	b.n	8009834 <rshift+0x4c>
 800987e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009882:	f847 cf04 	str.w	ip, [r7, #4]!
 8009886:	e7c3      	b.n	8009810 <rshift+0x28>
 8009888:	4623      	mov	r3, r4
 800988a:	e7e1      	b.n	8009850 <rshift+0x68>

0800988c <__hexdig_fun>:
 800988c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009890:	2b09      	cmp	r3, #9
 8009892:	d802      	bhi.n	800989a <__hexdig_fun+0xe>
 8009894:	3820      	subs	r0, #32
 8009896:	b2c0      	uxtb	r0, r0
 8009898:	4770      	bx	lr
 800989a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800989e:	2b05      	cmp	r3, #5
 80098a0:	d801      	bhi.n	80098a6 <__hexdig_fun+0x1a>
 80098a2:	3847      	subs	r0, #71	; 0x47
 80098a4:	e7f7      	b.n	8009896 <__hexdig_fun+0xa>
 80098a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80098aa:	2b05      	cmp	r3, #5
 80098ac:	d801      	bhi.n	80098b2 <__hexdig_fun+0x26>
 80098ae:	3827      	subs	r0, #39	; 0x27
 80098b0:	e7f1      	b.n	8009896 <__hexdig_fun+0xa>
 80098b2:	2000      	movs	r0, #0
 80098b4:	4770      	bx	lr
	...

080098b8 <__gethex>:
 80098b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098bc:	ed2d 8b02 	vpush	{d8}
 80098c0:	b089      	sub	sp, #36	; 0x24
 80098c2:	ee08 0a10 	vmov	s16, r0
 80098c6:	9304      	str	r3, [sp, #16]
 80098c8:	4bb4      	ldr	r3, [pc, #720]	; (8009b9c <__gethex+0x2e4>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	9301      	str	r3, [sp, #4]
 80098ce:	4618      	mov	r0, r3
 80098d0:	468b      	mov	fp, r1
 80098d2:	4690      	mov	r8, r2
 80098d4:	f7f6 fc7c 	bl	80001d0 <strlen>
 80098d8:	9b01      	ldr	r3, [sp, #4]
 80098da:	f8db 2000 	ldr.w	r2, [fp]
 80098de:	4403      	add	r3, r0
 80098e0:	4682      	mov	sl, r0
 80098e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80098e6:	9305      	str	r3, [sp, #20]
 80098e8:	1c93      	adds	r3, r2, #2
 80098ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80098ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80098f2:	32fe      	adds	r2, #254	; 0xfe
 80098f4:	18d1      	adds	r1, r2, r3
 80098f6:	461f      	mov	r7, r3
 80098f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80098fc:	9100      	str	r1, [sp, #0]
 80098fe:	2830      	cmp	r0, #48	; 0x30
 8009900:	d0f8      	beq.n	80098f4 <__gethex+0x3c>
 8009902:	f7ff ffc3 	bl	800988c <__hexdig_fun>
 8009906:	4604      	mov	r4, r0
 8009908:	2800      	cmp	r0, #0
 800990a:	d13a      	bne.n	8009982 <__gethex+0xca>
 800990c:	9901      	ldr	r1, [sp, #4]
 800990e:	4652      	mov	r2, sl
 8009910:	4638      	mov	r0, r7
 8009912:	f001 fba1 	bl	800b058 <strncmp>
 8009916:	4605      	mov	r5, r0
 8009918:	2800      	cmp	r0, #0
 800991a:	d168      	bne.n	80099ee <__gethex+0x136>
 800991c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009920:	eb07 060a 	add.w	r6, r7, sl
 8009924:	f7ff ffb2 	bl	800988c <__hexdig_fun>
 8009928:	2800      	cmp	r0, #0
 800992a:	d062      	beq.n	80099f2 <__gethex+0x13a>
 800992c:	4633      	mov	r3, r6
 800992e:	7818      	ldrb	r0, [r3, #0]
 8009930:	2830      	cmp	r0, #48	; 0x30
 8009932:	461f      	mov	r7, r3
 8009934:	f103 0301 	add.w	r3, r3, #1
 8009938:	d0f9      	beq.n	800992e <__gethex+0x76>
 800993a:	f7ff ffa7 	bl	800988c <__hexdig_fun>
 800993e:	2301      	movs	r3, #1
 8009940:	fab0 f480 	clz	r4, r0
 8009944:	0964      	lsrs	r4, r4, #5
 8009946:	4635      	mov	r5, r6
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	463a      	mov	r2, r7
 800994c:	4616      	mov	r6, r2
 800994e:	3201      	adds	r2, #1
 8009950:	7830      	ldrb	r0, [r6, #0]
 8009952:	f7ff ff9b 	bl	800988c <__hexdig_fun>
 8009956:	2800      	cmp	r0, #0
 8009958:	d1f8      	bne.n	800994c <__gethex+0x94>
 800995a:	9901      	ldr	r1, [sp, #4]
 800995c:	4652      	mov	r2, sl
 800995e:	4630      	mov	r0, r6
 8009960:	f001 fb7a 	bl	800b058 <strncmp>
 8009964:	b980      	cbnz	r0, 8009988 <__gethex+0xd0>
 8009966:	b94d      	cbnz	r5, 800997c <__gethex+0xc4>
 8009968:	eb06 050a 	add.w	r5, r6, sl
 800996c:	462a      	mov	r2, r5
 800996e:	4616      	mov	r6, r2
 8009970:	3201      	adds	r2, #1
 8009972:	7830      	ldrb	r0, [r6, #0]
 8009974:	f7ff ff8a 	bl	800988c <__hexdig_fun>
 8009978:	2800      	cmp	r0, #0
 800997a:	d1f8      	bne.n	800996e <__gethex+0xb6>
 800997c:	1bad      	subs	r5, r5, r6
 800997e:	00ad      	lsls	r5, r5, #2
 8009980:	e004      	b.n	800998c <__gethex+0xd4>
 8009982:	2400      	movs	r4, #0
 8009984:	4625      	mov	r5, r4
 8009986:	e7e0      	b.n	800994a <__gethex+0x92>
 8009988:	2d00      	cmp	r5, #0
 800998a:	d1f7      	bne.n	800997c <__gethex+0xc4>
 800998c:	7833      	ldrb	r3, [r6, #0]
 800998e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009992:	2b50      	cmp	r3, #80	; 0x50
 8009994:	d13b      	bne.n	8009a0e <__gethex+0x156>
 8009996:	7873      	ldrb	r3, [r6, #1]
 8009998:	2b2b      	cmp	r3, #43	; 0x2b
 800999a:	d02c      	beq.n	80099f6 <__gethex+0x13e>
 800999c:	2b2d      	cmp	r3, #45	; 0x2d
 800999e:	d02e      	beq.n	80099fe <__gethex+0x146>
 80099a0:	1c71      	adds	r1, r6, #1
 80099a2:	f04f 0900 	mov.w	r9, #0
 80099a6:	7808      	ldrb	r0, [r1, #0]
 80099a8:	f7ff ff70 	bl	800988c <__hexdig_fun>
 80099ac:	1e43      	subs	r3, r0, #1
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	2b18      	cmp	r3, #24
 80099b2:	d82c      	bhi.n	8009a0e <__gethex+0x156>
 80099b4:	f1a0 0210 	sub.w	r2, r0, #16
 80099b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80099bc:	f7ff ff66 	bl	800988c <__hexdig_fun>
 80099c0:	1e43      	subs	r3, r0, #1
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b18      	cmp	r3, #24
 80099c6:	d91d      	bls.n	8009a04 <__gethex+0x14c>
 80099c8:	f1b9 0f00 	cmp.w	r9, #0
 80099cc:	d000      	beq.n	80099d0 <__gethex+0x118>
 80099ce:	4252      	negs	r2, r2
 80099d0:	4415      	add	r5, r2
 80099d2:	f8cb 1000 	str.w	r1, [fp]
 80099d6:	b1e4      	cbz	r4, 8009a12 <__gethex+0x15a>
 80099d8:	9b00      	ldr	r3, [sp, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	bf14      	ite	ne
 80099de:	2700      	movne	r7, #0
 80099e0:	2706      	moveq	r7, #6
 80099e2:	4638      	mov	r0, r7
 80099e4:	b009      	add	sp, #36	; 0x24
 80099e6:	ecbd 8b02 	vpop	{d8}
 80099ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ee:	463e      	mov	r6, r7
 80099f0:	4625      	mov	r5, r4
 80099f2:	2401      	movs	r4, #1
 80099f4:	e7ca      	b.n	800998c <__gethex+0xd4>
 80099f6:	f04f 0900 	mov.w	r9, #0
 80099fa:	1cb1      	adds	r1, r6, #2
 80099fc:	e7d3      	b.n	80099a6 <__gethex+0xee>
 80099fe:	f04f 0901 	mov.w	r9, #1
 8009a02:	e7fa      	b.n	80099fa <__gethex+0x142>
 8009a04:	230a      	movs	r3, #10
 8009a06:	fb03 0202 	mla	r2, r3, r2, r0
 8009a0a:	3a10      	subs	r2, #16
 8009a0c:	e7d4      	b.n	80099b8 <__gethex+0x100>
 8009a0e:	4631      	mov	r1, r6
 8009a10:	e7df      	b.n	80099d2 <__gethex+0x11a>
 8009a12:	1bf3      	subs	r3, r6, r7
 8009a14:	3b01      	subs	r3, #1
 8009a16:	4621      	mov	r1, r4
 8009a18:	2b07      	cmp	r3, #7
 8009a1a:	dc0b      	bgt.n	8009a34 <__gethex+0x17c>
 8009a1c:	ee18 0a10 	vmov	r0, s16
 8009a20:	f000 fa82 	bl	8009f28 <_Balloc>
 8009a24:	4604      	mov	r4, r0
 8009a26:	b940      	cbnz	r0, 8009a3a <__gethex+0x182>
 8009a28:	4b5d      	ldr	r3, [pc, #372]	; (8009ba0 <__gethex+0x2e8>)
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	21de      	movs	r1, #222	; 0xde
 8009a2e:	485d      	ldr	r0, [pc, #372]	; (8009ba4 <__gethex+0x2ec>)
 8009a30:	f7ff f820 	bl	8008a74 <__assert_func>
 8009a34:	3101      	adds	r1, #1
 8009a36:	105b      	asrs	r3, r3, #1
 8009a38:	e7ee      	b.n	8009a18 <__gethex+0x160>
 8009a3a:	f100 0914 	add.w	r9, r0, #20
 8009a3e:	f04f 0b00 	mov.w	fp, #0
 8009a42:	f1ca 0301 	rsb	r3, sl, #1
 8009a46:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a4a:	f8cd b000 	str.w	fp, [sp]
 8009a4e:	9306      	str	r3, [sp, #24]
 8009a50:	42b7      	cmp	r7, r6
 8009a52:	d340      	bcc.n	8009ad6 <__gethex+0x21e>
 8009a54:	9802      	ldr	r0, [sp, #8]
 8009a56:	9b00      	ldr	r3, [sp, #0]
 8009a58:	f840 3b04 	str.w	r3, [r0], #4
 8009a5c:	eba0 0009 	sub.w	r0, r0, r9
 8009a60:	1080      	asrs	r0, r0, #2
 8009a62:	0146      	lsls	r6, r0, #5
 8009a64:	6120      	str	r0, [r4, #16]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f000 fb50 	bl	800a10c <__hi0bits>
 8009a6c:	1a30      	subs	r0, r6, r0
 8009a6e:	f8d8 6000 	ldr.w	r6, [r8]
 8009a72:	42b0      	cmp	r0, r6
 8009a74:	dd63      	ble.n	8009b3e <__gethex+0x286>
 8009a76:	1b87      	subs	r7, r0, r6
 8009a78:	4639      	mov	r1, r7
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f000 fef4 	bl	800a868 <__any_on>
 8009a80:	4682      	mov	sl, r0
 8009a82:	b1a8      	cbz	r0, 8009ab0 <__gethex+0x1f8>
 8009a84:	1e7b      	subs	r3, r7, #1
 8009a86:	1159      	asrs	r1, r3, #5
 8009a88:	f003 021f 	and.w	r2, r3, #31
 8009a8c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009a90:	f04f 0a01 	mov.w	sl, #1
 8009a94:	fa0a f202 	lsl.w	r2, sl, r2
 8009a98:	420a      	tst	r2, r1
 8009a9a:	d009      	beq.n	8009ab0 <__gethex+0x1f8>
 8009a9c:	4553      	cmp	r3, sl
 8009a9e:	dd05      	ble.n	8009aac <__gethex+0x1f4>
 8009aa0:	1eb9      	subs	r1, r7, #2
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f000 fee0 	bl	800a868 <__any_on>
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	d145      	bne.n	8009b38 <__gethex+0x280>
 8009aac:	f04f 0a02 	mov.w	sl, #2
 8009ab0:	4639      	mov	r1, r7
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f7ff fe98 	bl	80097e8 <rshift>
 8009ab8:	443d      	add	r5, r7
 8009aba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009abe:	42ab      	cmp	r3, r5
 8009ac0:	da4c      	bge.n	8009b5c <__gethex+0x2a4>
 8009ac2:	ee18 0a10 	vmov	r0, s16
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	f000 fa6e 	bl	8009fa8 <_Bfree>
 8009acc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ace:	2300      	movs	r3, #0
 8009ad0:	6013      	str	r3, [r2, #0]
 8009ad2:	27a3      	movs	r7, #163	; 0xa3
 8009ad4:	e785      	b.n	80099e2 <__gethex+0x12a>
 8009ad6:	1e73      	subs	r3, r6, #1
 8009ad8:	9a05      	ldr	r2, [sp, #20]
 8009ada:	9303      	str	r3, [sp, #12]
 8009adc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d019      	beq.n	8009b18 <__gethex+0x260>
 8009ae4:	f1bb 0f20 	cmp.w	fp, #32
 8009ae8:	d107      	bne.n	8009afa <__gethex+0x242>
 8009aea:	9b02      	ldr	r3, [sp, #8]
 8009aec:	9a00      	ldr	r2, [sp, #0]
 8009aee:	f843 2b04 	str.w	r2, [r3], #4
 8009af2:	9302      	str	r3, [sp, #8]
 8009af4:	2300      	movs	r3, #0
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	469b      	mov	fp, r3
 8009afa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009afe:	f7ff fec5 	bl	800988c <__hexdig_fun>
 8009b02:	9b00      	ldr	r3, [sp, #0]
 8009b04:	f000 000f 	and.w	r0, r0, #15
 8009b08:	fa00 f00b 	lsl.w	r0, r0, fp
 8009b0c:	4303      	orrs	r3, r0
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	f10b 0b04 	add.w	fp, fp, #4
 8009b14:	9b03      	ldr	r3, [sp, #12]
 8009b16:	e00d      	b.n	8009b34 <__gethex+0x27c>
 8009b18:	9b03      	ldr	r3, [sp, #12]
 8009b1a:	9a06      	ldr	r2, [sp, #24]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	42bb      	cmp	r3, r7
 8009b20:	d3e0      	bcc.n	8009ae4 <__gethex+0x22c>
 8009b22:	4618      	mov	r0, r3
 8009b24:	9901      	ldr	r1, [sp, #4]
 8009b26:	9307      	str	r3, [sp, #28]
 8009b28:	4652      	mov	r2, sl
 8009b2a:	f001 fa95 	bl	800b058 <strncmp>
 8009b2e:	9b07      	ldr	r3, [sp, #28]
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d1d7      	bne.n	8009ae4 <__gethex+0x22c>
 8009b34:	461e      	mov	r6, r3
 8009b36:	e78b      	b.n	8009a50 <__gethex+0x198>
 8009b38:	f04f 0a03 	mov.w	sl, #3
 8009b3c:	e7b8      	b.n	8009ab0 <__gethex+0x1f8>
 8009b3e:	da0a      	bge.n	8009b56 <__gethex+0x29e>
 8009b40:	1a37      	subs	r7, r6, r0
 8009b42:	4621      	mov	r1, r4
 8009b44:	ee18 0a10 	vmov	r0, s16
 8009b48:	463a      	mov	r2, r7
 8009b4a:	f000 fc49 	bl	800a3e0 <__lshift>
 8009b4e:	1bed      	subs	r5, r5, r7
 8009b50:	4604      	mov	r4, r0
 8009b52:	f100 0914 	add.w	r9, r0, #20
 8009b56:	f04f 0a00 	mov.w	sl, #0
 8009b5a:	e7ae      	b.n	8009aba <__gethex+0x202>
 8009b5c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009b60:	42a8      	cmp	r0, r5
 8009b62:	dd72      	ble.n	8009c4a <__gethex+0x392>
 8009b64:	1b45      	subs	r5, r0, r5
 8009b66:	42ae      	cmp	r6, r5
 8009b68:	dc36      	bgt.n	8009bd8 <__gethex+0x320>
 8009b6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d02a      	beq.n	8009bc8 <__gethex+0x310>
 8009b72:	2b03      	cmp	r3, #3
 8009b74:	d02c      	beq.n	8009bd0 <__gethex+0x318>
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d11c      	bne.n	8009bb4 <__gethex+0x2fc>
 8009b7a:	42ae      	cmp	r6, r5
 8009b7c:	d11a      	bne.n	8009bb4 <__gethex+0x2fc>
 8009b7e:	2e01      	cmp	r6, #1
 8009b80:	d112      	bne.n	8009ba8 <__gethex+0x2f0>
 8009b82:	9a04      	ldr	r2, [sp, #16]
 8009b84:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009b88:	6013      	str	r3, [r2, #0]
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	6123      	str	r3, [r4, #16]
 8009b8e:	f8c9 3000 	str.w	r3, [r9]
 8009b92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b94:	2762      	movs	r7, #98	; 0x62
 8009b96:	601c      	str	r4, [r3, #0]
 8009b98:	e723      	b.n	80099e2 <__gethex+0x12a>
 8009b9a:	bf00      	nop
 8009b9c:	0800d404 	.word	0x0800d404
 8009ba0:	0800d38c 	.word	0x0800d38c
 8009ba4:	0800d39d 	.word	0x0800d39d
 8009ba8:	1e71      	subs	r1, r6, #1
 8009baa:	4620      	mov	r0, r4
 8009bac:	f000 fe5c 	bl	800a868 <__any_on>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d1e6      	bne.n	8009b82 <__gethex+0x2ca>
 8009bb4:	ee18 0a10 	vmov	r0, s16
 8009bb8:	4621      	mov	r1, r4
 8009bba:	f000 f9f5 	bl	8009fa8 <_Bfree>
 8009bbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	6013      	str	r3, [r2, #0]
 8009bc4:	2750      	movs	r7, #80	; 0x50
 8009bc6:	e70c      	b.n	80099e2 <__gethex+0x12a>
 8009bc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1f2      	bne.n	8009bb4 <__gethex+0x2fc>
 8009bce:	e7d8      	b.n	8009b82 <__gethex+0x2ca>
 8009bd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1d5      	bne.n	8009b82 <__gethex+0x2ca>
 8009bd6:	e7ed      	b.n	8009bb4 <__gethex+0x2fc>
 8009bd8:	1e6f      	subs	r7, r5, #1
 8009bda:	f1ba 0f00 	cmp.w	sl, #0
 8009bde:	d131      	bne.n	8009c44 <__gethex+0x38c>
 8009be0:	b127      	cbz	r7, 8009bec <__gethex+0x334>
 8009be2:	4639      	mov	r1, r7
 8009be4:	4620      	mov	r0, r4
 8009be6:	f000 fe3f 	bl	800a868 <__any_on>
 8009bea:	4682      	mov	sl, r0
 8009bec:	117b      	asrs	r3, r7, #5
 8009bee:	2101      	movs	r1, #1
 8009bf0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009bf4:	f007 071f 	and.w	r7, r7, #31
 8009bf8:	fa01 f707 	lsl.w	r7, r1, r7
 8009bfc:	421f      	tst	r7, r3
 8009bfe:	4629      	mov	r1, r5
 8009c00:	4620      	mov	r0, r4
 8009c02:	bf18      	it	ne
 8009c04:	f04a 0a02 	orrne.w	sl, sl, #2
 8009c08:	1b76      	subs	r6, r6, r5
 8009c0a:	f7ff fded 	bl	80097e8 <rshift>
 8009c0e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009c12:	2702      	movs	r7, #2
 8009c14:	f1ba 0f00 	cmp.w	sl, #0
 8009c18:	d048      	beq.n	8009cac <__gethex+0x3f4>
 8009c1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d015      	beq.n	8009c4e <__gethex+0x396>
 8009c22:	2b03      	cmp	r3, #3
 8009c24:	d017      	beq.n	8009c56 <__gethex+0x39e>
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d109      	bne.n	8009c3e <__gethex+0x386>
 8009c2a:	f01a 0f02 	tst.w	sl, #2
 8009c2e:	d006      	beq.n	8009c3e <__gethex+0x386>
 8009c30:	f8d9 0000 	ldr.w	r0, [r9]
 8009c34:	ea4a 0a00 	orr.w	sl, sl, r0
 8009c38:	f01a 0f01 	tst.w	sl, #1
 8009c3c:	d10e      	bne.n	8009c5c <__gethex+0x3a4>
 8009c3e:	f047 0710 	orr.w	r7, r7, #16
 8009c42:	e033      	b.n	8009cac <__gethex+0x3f4>
 8009c44:	f04f 0a01 	mov.w	sl, #1
 8009c48:	e7d0      	b.n	8009bec <__gethex+0x334>
 8009c4a:	2701      	movs	r7, #1
 8009c4c:	e7e2      	b.n	8009c14 <__gethex+0x35c>
 8009c4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c50:	f1c3 0301 	rsb	r3, r3, #1
 8009c54:	9315      	str	r3, [sp, #84]	; 0x54
 8009c56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d0f0      	beq.n	8009c3e <__gethex+0x386>
 8009c5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c60:	f104 0314 	add.w	r3, r4, #20
 8009c64:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009c68:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009c6c:	f04f 0c00 	mov.w	ip, #0
 8009c70:	4618      	mov	r0, r3
 8009c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c76:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009c7a:	d01c      	beq.n	8009cb6 <__gethex+0x3fe>
 8009c7c:	3201      	adds	r2, #1
 8009c7e:	6002      	str	r2, [r0, #0]
 8009c80:	2f02      	cmp	r7, #2
 8009c82:	f104 0314 	add.w	r3, r4, #20
 8009c86:	d13f      	bne.n	8009d08 <__gethex+0x450>
 8009c88:	f8d8 2000 	ldr.w	r2, [r8]
 8009c8c:	3a01      	subs	r2, #1
 8009c8e:	42b2      	cmp	r2, r6
 8009c90:	d10a      	bne.n	8009ca8 <__gethex+0x3f0>
 8009c92:	1171      	asrs	r1, r6, #5
 8009c94:	2201      	movs	r2, #1
 8009c96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c9a:	f006 061f 	and.w	r6, r6, #31
 8009c9e:	fa02 f606 	lsl.w	r6, r2, r6
 8009ca2:	421e      	tst	r6, r3
 8009ca4:	bf18      	it	ne
 8009ca6:	4617      	movne	r7, r2
 8009ca8:	f047 0720 	orr.w	r7, r7, #32
 8009cac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cae:	601c      	str	r4, [r3, #0]
 8009cb0:	9b04      	ldr	r3, [sp, #16]
 8009cb2:	601d      	str	r5, [r3, #0]
 8009cb4:	e695      	b.n	80099e2 <__gethex+0x12a>
 8009cb6:	4299      	cmp	r1, r3
 8009cb8:	f843 cc04 	str.w	ip, [r3, #-4]
 8009cbc:	d8d8      	bhi.n	8009c70 <__gethex+0x3b8>
 8009cbe:	68a3      	ldr	r3, [r4, #8]
 8009cc0:	459b      	cmp	fp, r3
 8009cc2:	db19      	blt.n	8009cf8 <__gethex+0x440>
 8009cc4:	6861      	ldr	r1, [r4, #4]
 8009cc6:	ee18 0a10 	vmov	r0, s16
 8009cca:	3101      	adds	r1, #1
 8009ccc:	f000 f92c 	bl	8009f28 <_Balloc>
 8009cd0:	4681      	mov	r9, r0
 8009cd2:	b918      	cbnz	r0, 8009cdc <__gethex+0x424>
 8009cd4:	4b1a      	ldr	r3, [pc, #104]	; (8009d40 <__gethex+0x488>)
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	2184      	movs	r1, #132	; 0x84
 8009cda:	e6a8      	b.n	8009a2e <__gethex+0x176>
 8009cdc:	6922      	ldr	r2, [r4, #16]
 8009cde:	3202      	adds	r2, #2
 8009ce0:	f104 010c 	add.w	r1, r4, #12
 8009ce4:	0092      	lsls	r2, r2, #2
 8009ce6:	300c      	adds	r0, #12
 8009ce8:	f7fd f8f6 	bl	8006ed8 <memcpy>
 8009cec:	4621      	mov	r1, r4
 8009cee:	ee18 0a10 	vmov	r0, s16
 8009cf2:	f000 f959 	bl	8009fa8 <_Bfree>
 8009cf6:	464c      	mov	r4, r9
 8009cf8:	6923      	ldr	r3, [r4, #16]
 8009cfa:	1c5a      	adds	r2, r3, #1
 8009cfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d00:	6122      	str	r2, [r4, #16]
 8009d02:	2201      	movs	r2, #1
 8009d04:	615a      	str	r2, [r3, #20]
 8009d06:	e7bb      	b.n	8009c80 <__gethex+0x3c8>
 8009d08:	6922      	ldr	r2, [r4, #16]
 8009d0a:	455a      	cmp	r2, fp
 8009d0c:	dd0b      	ble.n	8009d26 <__gethex+0x46e>
 8009d0e:	2101      	movs	r1, #1
 8009d10:	4620      	mov	r0, r4
 8009d12:	f7ff fd69 	bl	80097e8 <rshift>
 8009d16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d1a:	3501      	adds	r5, #1
 8009d1c:	42ab      	cmp	r3, r5
 8009d1e:	f6ff aed0 	blt.w	8009ac2 <__gethex+0x20a>
 8009d22:	2701      	movs	r7, #1
 8009d24:	e7c0      	b.n	8009ca8 <__gethex+0x3f0>
 8009d26:	f016 061f 	ands.w	r6, r6, #31
 8009d2a:	d0fa      	beq.n	8009d22 <__gethex+0x46a>
 8009d2c:	4453      	add	r3, sl
 8009d2e:	f1c6 0620 	rsb	r6, r6, #32
 8009d32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009d36:	f000 f9e9 	bl	800a10c <__hi0bits>
 8009d3a:	42b0      	cmp	r0, r6
 8009d3c:	dbe7      	blt.n	8009d0e <__gethex+0x456>
 8009d3e:	e7f0      	b.n	8009d22 <__gethex+0x46a>
 8009d40:	0800d38c 	.word	0x0800d38c

08009d44 <L_shift>:
 8009d44:	f1c2 0208 	rsb	r2, r2, #8
 8009d48:	0092      	lsls	r2, r2, #2
 8009d4a:	b570      	push	{r4, r5, r6, lr}
 8009d4c:	f1c2 0620 	rsb	r6, r2, #32
 8009d50:	6843      	ldr	r3, [r0, #4]
 8009d52:	6804      	ldr	r4, [r0, #0]
 8009d54:	fa03 f506 	lsl.w	r5, r3, r6
 8009d58:	432c      	orrs	r4, r5
 8009d5a:	40d3      	lsrs	r3, r2
 8009d5c:	6004      	str	r4, [r0, #0]
 8009d5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d62:	4288      	cmp	r0, r1
 8009d64:	d3f4      	bcc.n	8009d50 <L_shift+0xc>
 8009d66:	bd70      	pop	{r4, r5, r6, pc}

08009d68 <__match>:
 8009d68:	b530      	push	{r4, r5, lr}
 8009d6a:	6803      	ldr	r3, [r0, #0]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d72:	b914      	cbnz	r4, 8009d7a <__match+0x12>
 8009d74:	6003      	str	r3, [r0, #0]
 8009d76:	2001      	movs	r0, #1
 8009d78:	bd30      	pop	{r4, r5, pc}
 8009d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009d82:	2d19      	cmp	r5, #25
 8009d84:	bf98      	it	ls
 8009d86:	3220      	addls	r2, #32
 8009d88:	42a2      	cmp	r2, r4
 8009d8a:	d0f0      	beq.n	8009d6e <__match+0x6>
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	e7f3      	b.n	8009d78 <__match+0x10>

08009d90 <__hexnan>:
 8009d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d94:	680b      	ldr	r3, [r1, #0]
 8009d96:	115e      	asrs	r6, r3, #5
 8009d98:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009d9c:	f013 031f 	ands.w	r3, r3, #31
 8009da0:	b087      	sub	sp, #28
 8009da2:	bf18      	it	ne
 8009da4:	3604      	addne	r6, #4
 8009da6:	2500      	movs	r5, #0
 8009da8:	1f37      	subs	r7, r6, #4
 8009daa:	4690      	mov	r8, r2
 8009dac:	6802      	ldr	r2, [r0, #0]
 8009dae:	9301      	str	r3, [sp, #4]
 8009db0:	4682      	mov	sl, r0
 8009db2:	f846 5c04 	str.w	r5, [r6, #-4]
 8009db6:	46b9      	mov	r9, r7
 8009db8:	463c      	mov	r4, r7
 8009dba:	9502      	str	r5, [sp, #8]
 8009dbc:	46ab      	mov	fp, r5
 8009dbe:	7851      	ldrb	r1, [r2, #1]
 8009dc0:	1c53      	adds	r3, r2, #1
 8009dc2:	9303      	str	r3, [sp, #12]
 8009dc4:	b341      	cbz	r1, 8009e18 <__hexnan+0x88>
 8009dc6:	4608      	mov	r0, r1
 8009dc8:	9205      	str	r2, [sp, #20]
 8009dca:	9104      	str	r1, [sp, #16]
 8009dcc:	f7ff fd5e 	bl	800988c <__hexdig_fun>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d14f      	bne.n	8009e74 <__hexnan+0xe4>
 8009dd4:	9904      	ldr	r1, [sp, #16]
 8009dd6:	9a05      	ldr	r2, [sp, #20]
 8009dd8:	2920      	cmp	r1, #32
 8009dda:	d818      	bhi.n	8009e0e <__hexnan+0x7e>
 8009ddc:	9b02      	ldr	r3, [sp, #8]
 8009dde:	459b      	cmp	fp, r3
 8009de0:	dd13      	ble.n	8009e0a <__hexnan+0x7a>
 8009de2:	454c      	cmp	r4, r9
 8009de4:	d206      	bcs.n	8009df4 <__hexnan+0x64>
 8009de6:	2d07      	cmp	r5, #7
 8009de8:	dc04      	bgt.n	8009df4 <__hexnan+0x64>
 8009dea:	462a      	mov	r2, r5
 8009dec:	4649      	mov	r1, r9
 8009dee:	4620      	mov	r0, r4
 8009df0:	f7ff ffa8 	bl	8009d44 <L_shift>
 8009df4:	4544      	cmp	r4, r8
 8009df6:	d950      	bls.n	8009e9a <__hexnan+0x10a>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	f1a4 0904 	sub.w	r9, r4, #4
 8009dfe:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e02:	f8cd b008 	str.w	fp, [sp, #8]
 8009e06:	464c      	mov	r4, r9
 8009e08:	461d      	mov	r5, r3
 8009e0a:	9a03      	ldr	r2, [sp, #12]
 8009e0c:	e7d7      	b.n	8009dbe <__hexnan+0x2e>
 8009e0e:	2929      	cmp	r1, #41	; 0x29
 8009e10:	d156      	bne.n	8009ec0 <__hexnan+0x130>
 8009e12:	3202      	adds	r2, #2
 8009e14:	f8ca 2000 	str.w	r2, [sl]
 8009e18:	f1bb 0f00 	cmp.w	fp, #0
 8009e1c:	d050      	beq.n	8009ec0 <__hexnan+0x130>
 8009e1e:	454c      	cmp	r4, r9
 8009e20:	d206      	bcs.n	8009e30 <__hexnan+0xa0>
 8009e22:	2d07      	cmp	r5, #7
 8009e24:	dc04      	bgt.n	8009e30 <__hexnan+0xa0>
 8009e26:	462a      	mov	r2, r5
 8009e28:	4649      	mov	r1, r9
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f7ff ff8a 	bl	8009d44 <L_shift>
 8009e30:	4544      	cmp	r4, r8
 8009e32:	d934      	bls.n	8009e9e <__hexnan+0x10e>
 8009e34:	f1a8 0204 	sub.w	r2, r8, #4
 8009e38:	4623      	mov	r3, r4
 8009e3a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009e3e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009e42:	429f      	cmp	r7, r3
 8009e44:	d2f9      	bcs.n	8009e3a <__hexnan+0xaa>
 8009e46:	1b3b      	subs	r3, r7, r4
 8009e48:	f023 0303 	bic.w	r3, r3, #3
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	3401      	adds	r4, #1
 8009e50:	3e03      	subs	r6, #3
 8009e52:	42b4      	cmp	r4, r6
 8009e54:	bf88      	it	hi
 8009e56:	2304      	movhi	r3, #4
 8009e58:	4443      	add	r3, r8
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f843 2b04 	str.w	r2, [r3], #4
 8009e60:	429f      	cmp	r7, r3
 8009e62:	d2fb      	bcs.n	8009e5c <__hexnan+0xcc>
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	b91b      	cbnz	r3, 8009e70 <__hexnan+0xe0>
 8009e68:	4547      	cmp	r7, r8
 8009e6a:	d127      	bne.n	8009ebc <__hexnan+0x12c>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	603b      	str	r3, [r7, #0]
 8009e70:	2005      	movs	r0, #5
 8009e72:	e026      	b.n	8009ec2 <__hexnan+0x132>
 8009e74:	3501      	adds	r5, #1
 8009e76:	2d08      	cmp	r5, #8
 8009e78:	f10b 0b01 	add.w	fp, fp, #1
 8009e7c:	dd06      	ble.n	8009e8c <__hexnan+0xfc>
 8009e7e:	4544      	cmp	r4, r8
 8009e80:	d9c3      	bls.n	8009e0a <__hexnan+0x7a>
 8009e82:	2300      	movs	r3, #0
 8009e84:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e88:	2501      	movs	r5, #1
 8009e8a:	3c04      	subs	r4, #4
 8009e8c:	6822      	ldr	r2, [r4, #0]
 8009e8e:	f000 000f 	and.w	r0, r0, #15
 8009e92:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009e96:	6022      	str	r2, [r4, #0]
 8009e98:	e7b7      	b.n	8009e0a <__hexnan+0x7a>
 8009e9a:	2508      	movs	r5, #8
 8009e9c:	e7b5      	b.n	8009e0a <__hexnan+0x7a>
 8009e9e:	9b01      	ldr	r3, [sp, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d0df      	beq.n	8009e64 <__hexnan+0xd4>
 8009ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea8:	f1c3 0320 	rsb	r3, r3, #32
 8009eac:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009eb4:	401a      	ands	r2, r3
 8009eb6:	f846 2c04 	str.w	r2, [r6, #-4]
 8009eba:	e7d3      	b.n	8009e64 <__hexnan+0xd4>
 8009ebc:	3f04      	subs	r7, #4
 8009ebe:	e7d1      	b.n	8009e64 <__hexnan+0xd4>
 8009ec0:	2004      	movs	r0, #4
 8009ec2:	b007      	add	sp, #28
 8009ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ec8 <_localeconv_r>:
 8009ec8:	4800      	ldr	r0, [pc, #0]	; (8009ecc <_localeconv_r+0x4>)
 8009eca:	4770      	bx	lr
 8009ecc:	200001f4 	.word	0x200001f4

08009ed0 <_lseek_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	4d07      	ldr	r5, [pc, #28]	; (8009ef0 <_lseek_r+0x20>)
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	4608      	mov	r0, r1
 8009ed8:	4611      	mov	r1, r2
 8009eda:	2200      	movs	r2, #0
 8009edc:	602a      	str	r2, [r5, #0]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	f7f8 fcda 	bl	8002898 <_lseek>
 8009ee4:	1c43      	adds	r3, r0, #1
 8009ee6:	d102      	bne.n	8009eee <_lseek_r+0x1e>
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	b103      	cbz	r3, 8009eee <_lseek_r+0x1e>
 8009eec:	6023      	str	r3, [r4, #0]
 8009eee:	bd38      	pop	{r3, r4, r5, pc}
 8009ef0:	20000a58 	.word	0x20000a58

08009ef4 <malloc>:
 8009ef4:	4b02      	ldr	r3, [pc, #8]	; (8009f00 <malloc+0xc>)
 8009ef6:	4601      	mov	r1, r0
 8009ef8:	6818      	ldr	r0, [r3, #0]
 8009efa:	f000 bd59 	b.w	800a9b0 <_malloc_r>
 8009efe:	bf00      	nop
 8009f00:	2000009c 	.word	0x2000009c

08009f04 <__ascii_mbtowc>:
 8009f04:	b082      	sub	sp, #8
 8009f06:	b901      	cbnz	r1, 8009f0a <__ascii_mbtowc+0x6>
 8009f08:	a901      	add	r1, sp, #4
 8009f0a:	b142      	cbz	r2, 8009f1e <__ascii_mbtowc+0x1a>
 8009f0c:	b14b      	cbz	r3, 8009f22 <__ascii_mbtowc+0x1e>
 8009f0e:	7813      	ldrb	r3, [r2, #0]
 8009f10:	600b      	str	r3, [r1, #0]
 8009f12:	7812      	ldrb	r2, [r2, #0]
 8009f14:	1e10      	subs	r0, r2, #0
 8009f16:	bf18      	it	ne
 8009f18:	2001      	movne	r0, #1
 8009f1a:	b002      	add	sp, #8
 8009f1c:	4770      	bx	lr
 8009f1e:	4610      	mov	r0, r2
 8009f20:	e7fb      	b.n	8009f1a <__ascii_mbtowc+0x16>
 8009f22:	f06f 0001 	mvn.w	r0, #1
 8009f26:	e7f8      	b.n	8009f1a <__ascii_mbtowc+0x16>

08009f28 <_Balloc>:
 8009f28:	b570      	push	{r4, r5, r6, lr}
 8009f2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	460d      	mov	r5, r1
 8009f30:	b976      	cbnz	r6, 8009f50 <_Balloc+0x28>
 8009f32:	2010      	movs	r0, #16
 8009f34:	f7ff ffde 	bl	8009ef4 <malloc>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	6260      	str	r0, [r4, #36]	; 0x24
 8009f3c:	b920      	cbnz	r0, 8009f48 <_Balloc+0x20>
 8009f3e:	4b18      	ldr	r3, [pc, #96]	; (8009fa0 <_Balloc+0x78>)
 8009f40:	4818      	ldr	r0, [pc, #96]	; (8009fa4 <_Balloc+0x7c>)
 8009f42:	2166      	movs	r1, #102	; 0x66
 8009f44:	f7fe fd96 	bl	8008a74 <__assert_func>
 8009f48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f4c:	6006      	str	r6, [r0, #0]
 8009f4e:	60c6      	str	r6, [r0, #12]
 8009f50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009f52:	68f3      	ldr	r3, [r6, #12]
 8009f54:	b183      	cbz	r3, 8009f78 <_Balloc+0x50>
 8009f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f5e:	b9b8      	cbnz	r0, 8009f90 <_Balloc+0x68>
 8009f60:	2101      	movs	r1, #1
 8009f62:	fa01 f605 	lsl.w	r6, r1, r5
 8009f66:	1d72      	adds	r2, r6, #5
 8009f68:	0092      	lsls	r2, r2, #2
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f000 fc9d 	bl	800a8aa <_calloc_r>
 8009f70:	b160      	cbz	r0, 8009f8c <_Balloc+0x64>
 8009f72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f76:	e00e      	b.n	8009f96 <_Balloc+0x6e>
 8009f78:	2221      	movs	r2, #33	; 0x21
 8009f7a:	2104      	movs	r1, #4
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f000 fc94 	bl	800a8aa <_calloc_r>
 8009f82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f84:	60f0      	str	r0, [r6, #12]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1e4      	bne.n	8009f56 <_Balloc+0x2e>
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	bd70      	pop	{r4, r5, r6, pc}
 8009f90:	6802      	ldr	r2, [r0, #0]
 8009f92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f96:	2300      	movs	r3, #0
 8009f98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f9c:	e7f7      	b.n	8009f8e <_Balloc+0x66>
 8009f9e:	bf00      	nop
 8009fa0:	0800d31a 	.word	0x0800d31a
 8009fa4:	0800d418 	.word	0x0800d418

08009fa8 <_Bfree>:
 8009fa8:	b570      	push	{r4, r5, r6, lr}
 8009faa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009fac:	4605      	mov	r5, r0
 8009fae:	460c      	mov	r4, r1
 8009fb0:	b976      	cbnz	r6, 8009fd0 <_Bfree+0x28>
 8009fb2:	2010      	movs	r0, #16
 8009fb4:	f7ff ff9e 	bl	8009ef4 <malloc>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	6268      	str	r0, [r5, #36]	; 0x24
 8009fbc:	b920      	cbnz	r0, 8009fc8 <_Bfree+0x20>
 8009fbe:	4b09      	ldr	r3, [pc, #36]	; (8009fe4 <_Bfree+0x3c>)
 8009fc0:	4809      	ldr	r0, [pc, #36]	; (8009fe8 <_Bfree+0x40>)
 8009fc2:	218a      	movs	r1, #138	; 0x8a
 8009fc4:	f7fe fd56 	bl	8008a74 <__assert_func>
 8009fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fcc:	6006      	str	r6, [r0, #0]
 8009fce:	60c6      	str	r6, [r0, #12]
 8009fd0:	b13c      	cbz	r4, 8009fe2 <_Bfree+0x3a>
 8009fd2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fd4:	6862      	ldr	r2, [r4, #4]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009fdc:	6021      	str	r1, [r4, #0]
 8009fde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009fe2:	bd70      	pop	{r4, r5, r6, pc}
 8009fe4:	0800d31a 	.word	0x0800d31a
 8009fe8:	0800d418 	.word	0x0800d418

08009fec <__multadd>:
 8009fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ff0:	690d      	ldr	r5, [r1, #16]
 8009ff2:	4607      	mov	r7, r0
 8009ff4:	460c      	mov	r4, r1
 8009ff6:	461e      	mov	r6, r3
 8009ff8:	f101 0c14 	add.w	ip, r1, #20
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	f8dc 3000 	ldr.w	r3, [ip]
 800a002:	b299      	uxth	r1, r3
 800a004:	fb02 6101 	mla	r1, r2, r1, r6
 800a008:	0c1e      	lsrs	r6, r3, #16
 800a00a:	0c0b      	lsrs	r3, r1, #16
 800a00c:	fb02 3306 	mla	r3, r2, r6, r3
 800a010:	b289      	uxth	r1, r1
 800a012:	3001      	adds	r0, #1
 800a014:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a018:	4285      	cmp	r5, r0
 800a01a:	f84c 1b04 	str.w	r1, [ip], #4
 800a01e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a022:	dcec      	bgt.n	8009ffe <__multadd+0x12>
 800a024:	b30e      	cbz	r6, 800a06a <__multadd+0x7e>
 800a026:	68a3      	ldr	r3, [r4, #8]
 800a028:	42ab      	cmp	r3, r5
 800a02a:	dc19      	bgt.n	800a060 <__multadd+0x74>
 800a02c:	6861      	ldr	r1, [r4, #4]
 800a02e:	4638      	mov	r0, r7
 800a030:	3101      	adds	r1, #1
 800a032:	f7ff ff79 	bl	8009f28 <_Balloc>
 800a036:	4680      	mov	r8, r0
 800a038:	b928      	cbnz	r0, 800a046 <__multadd+0x5a>
 800a03a:	4602      	mov	r2, r0
 800a03c:	4b0c      	ldr	r3, [pc, #48]	; (800a070 <__multadd+0x84>)
 800a03e:	480d      	ldr	r0, [pc, #52]	; (800a074 <__multadd+0x88>)
 800a040:	21b5      	movs	r1, #181	; 0xb5
 800a042:	f7fe fd17 	bl	8008a74 <__assert_func>
 800a046:	6922      	ldr	r2, [r4, #16]
 800a048:	3202      	adds	r2, #2
 800a04a:	f104 010c 	add.w	r1, r4, #12
 800a04e:	0092      	lsls	r2, r2, #2
 800a050:	300c      	adds	r0, #12
 800a052:	f7fc ff41 	bl	8006ed8 <memcpy>
 800a056:	4621      	mov	r1, r4
 800a058:	4638      	mov	r0, r7
 800a05a:	f7ff ffa5 	bl	8009fa8 <_Bfree>
 800a05e:	4644      	mov	r4, r8
 800a060:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a064:	3501      	adds	r5, #1
 800a066:	615e      	str	r6, [r3, #20]
 800a068:	6125      	str	r5, [r4, #16]
 800a06a:	4620      	mov	r0, r4
 800a06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a070:	0800d38c 	.word	0x0800d38c
 800a074:	0800d418 	.word	0x0800d418

0800a078 <__s2b>:
 800a078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a07c:	460c      	mov	r4, r1
 800a07e:	4615      	mov	r5, r2
 800a080:	461f      	mov	r7, r3
 800a082:	2209      	movs	r2, #9
 800a084:	3308      	adds	r3, #8
 800a086:	4606      	mov	r6, r0
 800a088:	fb93 f3f2 	sdiv	r3, r3, r2
 800a08c:	2100      	movs	r1, #0
 800a08e:	2201      	movs	r2, #1
 800a090:	429a      	cmp	r2, r3
 800a092:	db09      	blt.n	800a0a8 <__s2b+0x30>
 800a094:	4630      	mov	r0, r6
 800a096:	f7ff ff47 	bl	8009f28 <_Balloc>
 800a09a:	b940      	cbnz	r0, 800a0ae <__s2b+0x36>
 800a09c:	4602      	mov	r2, r0
 800a09e:	4b19      	ldr	r3, [pc, #100]	; (800a104 <__s2b+0x8c>)
 800a0a0:	4819      	ldr	r0, [pc, #100]	; (800a108 <__s2b+0x90>)
 800a0a2:	21ce      	movs	r1, #206	; 0xce
 800a0a4:	f7fe fce6 	bl	8008a74 <__assert_func>
 800a0a8:	0052      	lsls	r2, r2, #1
 800a0aa:	3101      	adds	r1, #1
 800a0ac:	e7f0      	b.n	800a090 <__s2b+0x18>
 800a0ae:	9b08      	ldr	r3, [sp, #32]
 800a0b0:	6143      	str	r3, [r0, #20]
 800a0b2:	2d09      	cmp	r5, #9
 800a0b4:	f04f 0301 	mov.w	r3, #1
 800a0b8:	6103      	str	r3, [r0, #16]
 800a0ba:	dd16      	ble.n	800a0ea <__s2b+0x72>
 800a0bc:	f104 0909 	add.w	r9, r4, #9
 800a0c0:	46c8      	mov	r8, r9
 800a0c2:	442c      	add	r4, r5
 800a0c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a0c8:	4601      	mov	r1, r0
 800a0ca:	3b30      	subs	r3, #48	; 0x30
 800a0cc:	220a      	movs	r2, #10
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	f7ff ff8c 	bl	8009fec <__multadd>
 800a0d4:	45a0      	cmp	r8, r4
 800a0d6:	d1f5      	bne.n	800a0c4 <__s2b+0x4c>
 800a0d8:	f1a5 0408 	sub.w	r4, r5, #8
 800a0dc:	444c      	add	r4, r9
 800a0de:	1b2d      	subs	r5, r5, r4
 800a0e0:	1963      	adds	r3, r4, r5
 800a0e2:	42bb      	cmp	r3, r7
 800a0e4:	db04      	blt.n	800a0f0 <__s2b+0x78>
 800a0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ea:	340a      	adds	r4, #10
 800a0ec:	2509      	movs	r5, #9
 800a0ee:	e7f6      	b.n	800a0de <__s2b+0x66>
 800a0f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a0f4:	4601      	mov	r1, r0
 800a0f6:	3b30      	subs	r3, #48	; 0x30
 800a0f8:	220a      	movs	r2, #10
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f7ff ff76 	bl	8009fec <__multadd>
 800a100:	e7ee      	b.n	800a0e0 <__s2b+0x68>
 800a102:	bf00      	nop
 800a104:	0800d38c 	.word	0x0800d38c
 800a108:	0800d418 	.word	0x0800d418

0800a10c <__hi0bits>:
 800a10c:	0c03      	lsrs	r3, r0, #16
 800a10e:	041b      	lsls	r3, r3, #16
 800a110:	b9d3      	cbnz	r3, 800a148 <__hi0bits+0x3c>
 800a112:	0400      	lsls	r0, r0, #16
 800a114:	2310      	movs	r3, #16
 800a116:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a11a:	bf04      	itt	eq
 800a11c:	0200      	lsleq	r0, r0, #8
 800a11e:	3308      	addeq	r3, #8
 800a120:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a124:	bf04      	itt	eq
 800a126:	0100      	lsleq	r0, r0, #4
 800a128:	3304      	addeq	r3, #4
 800a12a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a12e:	bf04      	itt	eq
 800a130:	0080      	lsleq	r0, r0, #2
 800a132:	3302      	addeq	r3, #2
 800a134:	2800      	cmp	r0, #0
 800a136:	db05      	blt.n	800a144 <__hi0bits+0x38>
 800a138:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a13c:	f103 0301 	add.w	r3, r3, #1
 800a140:	bf08      	it	eq
 800a142:	2320      	moveq	r3, #32
 800a144:	4618      	mov	r0, r3
 800a146:	4770      	bx	lr
 800a148:	2300      	movs	r3, #0
 800a14a:	e7e4      	b.n	800a116 <__hi0bits+0xa>

0800a14c <__lo0bits>:
 800a14c:	6803      	ldr	r3, [r0, #0]
 800a14e:	f013 0207 	ands.w	r2, r3, #7
 800a152:	4601      	mov	r1, r0
 800a154:	d00b      	beq.n	800a16e <__lo0bits+0x22>
 800a156:	07da      	lsls	r2, r3, #31
 800a158:	d423      	bmi.n	800a1a2 <__lo0bits+0x56>
 800a15a:	0798      	lsls	r0, r3, #30
 800a15c:	bf49      	itett	mi
 800a15e:	085b      	lsrmi	r3, r3, #1
 800a160:	089b      	lsrpl	r3, r3, #2
 800a162:	2001      	movmi	r0, #1
 800a164:	600b      	strmi	r3, [r1, #0]
 800a166:	bf5c      	itt	pl
 800a168:	600b      	strpl	r3, [r1, #0]
 800a16a:	2002      	movpl	r0, #2
 800a16c:	4770      	bx	lr
 800a16e:	b298      	uxth	r0, r3
 800a170:	b9a8      	cbnz	r0, 800a19e <__lo0bits+0x52>
 800a172:	0c1b      	lsrs	r3, r3, #16
 800a174:	2010      	movs	r0, #16
 800a176:	b2da      	uxtb	r2, r3
 800a178:	b90a      	cbnz	r2, 800a17e <__lo0bits+0x32>
 800a17a:	3008      	adds	r0, #8
 800a17c:	0a1b      	lsrs	r3, r3, #8
 800a17e:	071a      	lsls	r2, r3, #28
 800a180:	bf04      	itt	eq
 800a182:	091b      	lsreq	r3, r3, #4
 800a184:	3004      	addeq	r0, #4
 800a186:	079a      	lsls	r2, r3, #30
 800a188:	bf04      	itt	eq
 800a18a:	089b      	lsreq	r3, r3, #2
 800a18c:	3002      	addeq	r0, #2
 800a18e:	07da      	lsls	r2, r3, #31
 800a190:	d403      	bmi.n	800a19a <__lo0bits+0x4e>
 800a192:	085b      	lsrs	r3, r3, #1
 800a194:	f100 0001 	add.w	r0, r0, #1
 800a198:	d005      	beq.n	800a1a6 <__lo0bits+0x5a>
 800a19a:	600b      	str	r3, [r1, #0]
 800a19c:	4770      	bx	lr
 800a19e:	4610      	mov	r0, r2
 800a1a0:	e7e9      	b.n	800a176 <__lo0bits+0x2a>
 800a1a2:	2000      	movs	r0, #0
 800a1a4:	4770      	bx	lr
 800a1a6:	2020      	movs	r0, #32
 800a1a8:	4770      	bx	lr
	...

0800a1ac <__i2b>:
 800a1ac:	b510      	push	{r4, lr}
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	2101      	movs	r1, #1
 800a1b2:	f7ff feb9 	bl	8009f28 <_Balloc>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	b928      	cbnz	r0, 800a1c6 <__i2b+0x1a>
 800a1ba:	4b05      	ldr	r3, [pc, #20]	; (800a1d0 <__i2b+0x24>)
 800a1bc:	4805      	ldr	r0, [pc, #20]	; (800a1d4 <__i2b+0x28>)
 800a1be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a1c2:	f7fe fc57 	bl	8008a74 <__assert_func>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	6144      	str	r4, [r0, #20]
 800a1ca:	6103      	str	r3, [r0, #16]
 800a1cc:	bd10      	pop	{r4, pc}
 800a1ce:	bf00      	nop
 800a1d0:	0800d38c 	.word	0x0800d38c
 800a1d4:	0800d418 	.word	0x0800d418

0800a1d8 <__multiply>:
 800a1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1dc:	4691      	mov	r9, r2
 800a1de:	690a      	ldr	r2, [r1, #16]
 800a1e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	bfb8      	it	lt
 800a1e8:	460b      	movlt	r3, r1
 800a1ea:	460c      	mov	r4, r1
 800a1ec:	bfbc      	itt	lt
 800a1ee:	464c      	movlt	r4, r9
 800a1f0:	4699      	movlt	r9, r3
 800a1f2:	6927      	ldr	r7, [r4, #16]
 800a1f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a1f8:	68a3      	ldr	r3, [r4, #8]
 800a1fa:	6861      	ldr	r1, [r4, #4]
 800a1fc:	eb07 060a 	add.w	r6, r7, sl
 800a200:	42b3      	cmp	r3, r6
 800a202:	b085      	sub	sp, #20
 800a204:	bfb8      	it	lt
 800a206:	3101      	addlt	r1, #1
 800a208:	f7ff fe8e 	bl	8009f28 <_Balloc>
 800a20c:	b930      	cbnz	r0, 800a21c <__multiply+0x44>
 800a20e:	4602      	mov	r2, r0
 800a210:	4b44      	ldr	r3, [pc, #272]	; (800a324 <__multiply+0x14c>)
 800a212:	4845      	ldr	r0, [pc, #276]	; (800a328 <__multiply+0x150>)
 800a214:	f240 115d 	movw	r1, #349	; 0x15d
 800a218:	f7fe fc2c 	bl	8008a74 <__assert_func>
 800a21c:	f100 0514 	add.w	r5, r0, #20
 800a220:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a224:	462b      	mov	r3, r5
 800a226:	2200      	movs	r2, #0
 800a228:	4543      	cmp	r3, r8
 800a22a:	d321      	bcc.n	800a270 <__multiply+0x98>
 800a22c:	f104 0314 	add.w	r3, r4, #20
 800a230:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a234:	f109 0314 	add.w	r3, r9, #20
 800a238:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a23c:	9202      	str	r2, [sp, #8]
 800a23e:	1b3a      	subs	r2, r7, r4
 800a240:	3a15      	subs	r2, #21
 800a242:	f022 0203 	bic.w	r2, r2, #3
 800a246:	3204      	adds	r2, #4
 800a248:	f104 0115 	add.w	r1, r4, #21
 800a24c:	428f      	cmp	r7, r1
 800a24e:	bf38      	it	cc
 800a250:	2204      	movcc	r2, #4
 800a252:	9201      	str	r2, [sp, #4]
 800a254:	9a02      	ldr	r2, [sp, #8]
 800a256:	9303      	str	r3, [sp, #12]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d80c      	bhi.n	800a276 <__multiply+0x9e>
 800a25c:	2e00      	cmp	r6, #0
 800a25e:	dd03      	ble.n	800a268 <__multiply+0x90>
 800a260:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a264:	2b00      	cmp	r3, #0
 800a266:	d05a      	beq.n	800a31e <__multiply+0x146>
 800a268:	6106      	str	r6, [r0, #16]
 800a26a:	b005      	add	sp, #20
 800a26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a270:	f843 2b04 	str.w	r2, [r3], #4
 800a274:	e7d8      	b.n	800a228 <__multiply+0x50>
 800a276:	f8b3 a000 	ldrh.w	sl, [r3]
 800a27a:	f1ba 0f00 	cmp.w	sl, #0
 800a27e:	d024      	beq.n	800a2ca <__multiply+0xf2>
 800a280:	f104 0e14 	add.w	lr, r4, #20
 800a284:	46a9      	mov	r9, r5
 800a286:	f04f 0c00 	mov.w	ip, #0
 800a28a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a28e:	f8d9 1000 	ldr.w	r1, [r9]
 800a292:	fa1f fb82 	uxth.w	fp, r2
 800a296:	b289      	uxth	r1, r1
 800a298:	fb0a 110b 	mla	r1, sl, fp, r1
 800a29c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a2a0:	f8d9 2000 	ldr.w	r2, [r9]
 800a2a4:	4461      	add	r1, ip
 800a2a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a2aa:	fb0a c20b 	mla	r2, sl, fp, ip
 800a2ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a2b2:	b289      	uxth	r1, r1
 800a2b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a2b8:	4577      	cmp	r7, lr
 800a2ba:	f849 1b04 	str.w	r1, [r9], #4
 800a2be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a2c2:	d8e2      	bhi.n	800a28a <__multiply+0xb2>
 800a2c4:	9a01      	ldr	r2, [sp, #4]
 800a2c6:	f845 c002 	str.w	ip, [r5, r2]
 800a2ca:	9a03      	ldr	r2, [sp, #12]
 800a2cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a2d0:	3304      	adds	r3, #4
 800a2d2:	f1b9 0f00 	cmp.w	r9, #0
 800a2d6:	d020      	beq.n	800a31a <__multiply+0x142>
 800a2d8:	6829      	ldr	r1, [r5, #0]
 800a2da:	f104 0c14 	add.w	ip, r4, #20
 800a2de:	46ae      	mov	lr, r5
 800a2e0:	f04f 0a00 	mov.w	sl, #0
 800a2e4:	f8bc b000 	ldrh.w	fp, [ip]
 800a2e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a2ec:	fb09 220b 	mla	r2, r9, fp, r2
 800a2f0:	4492      	add	sl, r2
 800a2f2:	b289      	uxth	r1, r1
 800a2f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a2f8:	f84e 1b04 	str.w	r1, [lr], #4
 800a2fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a300:	f8be 1000 	ldrh.w	r1, [lr]
 800a304:	0c12      	lsrs	r2, r2, #16
 800a306:	fb09 1102 	mla	r1, r9, r2, r1
 800a30a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a30e:	4567      	cmp	r7, ip
 800a310:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a314:	d8e6      	bhi.n	800a2e4 <__multiply+0x10c>
 800a316:	9a01      	ldr	r2, [sp, #4]
 800a318:	50a9      	str	r1, [r5, r2]
 800a31a:	3504      	adds	r5, #4
 800a31c:	e79a      	b.n	800a254 <__multiply+0x7c>
 800a31e:	3e01      	subs	r6, #1
 800a320:	e79c      	b.n	800a25c <__multiply+0x84>
 800a322:	bf00      	nop
 800a324:	0800d38c 	.word	0x0800d38c
 800a328:	0800d418 	.word	0x0800d418

0800a32c <__pow5mult>:
 800a32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a330:	4615      	mov	r5, r2
 800a332:	f012 0203 	ands.w	r2, r2, #3
 800a336:	4606      	mov	r6, r0
 800a338:	460f      	mov	r7, r1
 800a33a:	d007      	beq.n	800a34c <__pow5mult+0x20>
 800a33c:	4c25      	ldr	r4, [pc, #148]	; (800a3d4 <__pow5mult+0xa8>)
 800a33e:	3a01      	subs	r2, #1
 800a340:	2300      	movs	r3, #0
 800a342:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a346:	f7ff fe51 	bl	8009fec <__multadd>
 800a34a:	4607      	mov	r7, r0
 800a34c:	10ad      	asrs	r5, r5, #2
 800a34e:	d03d      	beq.n	800a3cc <__pow5mult+0xa0>
 800a350:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a352:	b97c      	cbnz	r4, 800a374 <__pow5mult+0x48>
 800a354:	2010      	movs	r0, #16
 800a356:	f7ff fdcd 	bl	8009ef4 <malloc>
 800a35a:	4602      	mov	r2, r0
 800a35c:	6270      	str	r0, [r6, #36]	; 0x24
 800a35e:	b928      	cbnz	r0, 800a36c <__pow5mult+0x40>
 800a360:	4b1d      	ldr	r3, [pc, #116]	; (800a3d8 <__pow5mult+0xac>)
 800a362:	481e      	ldr	r0, [pc, #120]	; (800a3dc <__pow5mult+0xb0>)
 800a364:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a368:	f7fe fb84 	bl	8008a74 <__assert_func>
 800a36c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a370:	6004      	str	r4, [r0, #0]
 800a372:	60c4      	str	r4, [r0, #12]
 800a374:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a378:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a37c:	b94c      	cbnz	r4, 800a392 <__pow5mult+0x66>
 800a37e:	f240 2171 	movw	r1, #625	; 0x271
 800a382:	4630      	mov	r0, r6
 800a384:	f7ff ff12 	bl	800a1ac <__i2b>
 800a388:	2300      	movs	r3, #0
 800a38a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a38e:	4604      	mov	r4, r0
 800a390:	6003      	str	r3, [r0, #0]
 800a392:	f04f 0900 	mov.w	r9, #0
 800a396:	07eb      	lsls	r3, r5, #31
 800a398:	d50a      	bpl.n	800a3b0 <__pow5mult+0x84>
 800a39a:	4639      	mov	r1, r7
 800a39c:	4622      	mov	r2, r4
 800a39e:	4630      	mov	r0, r6
 800a3a0:	f7ff ff1a 	bl	800a1d8 <__multiply>
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	4680      	mov	r8, r0
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	f7ff fdfd 	bl	8009fa8 <_Bfree>
 800a3ae:	4647      	mov	r7, r8
 800a3b0:	106d      	asrs	r5, r5, #1
 800a3b2:	d00b      	beq.n	800a3cc <__pow5mult+0xa0>
 800a3b4:	6820      	ldr	r0, [r4, #0]
 800a3b6:	b938      	cbnz	r0, 800a3c8 <__pow5mult+0x9c>
 800a3b8:	4622      	mov	r2, r4
 800a3ba:	4621      	mov	r1, r4
 800a3bc:	4630      	mov	r0, r6
 800a3be:	f7ff ff0b 	bl	800a1d8 <__multiply>
 800a3c2:	6020      	str	r0, [r4, #0]
 800a3c4:	f8c0 9000 	str.w	r9, [r0]
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	e7e4      	b.n	800a396 <__pow5mult+0x6a>
 800a3cc:	4638      	mov	r0, r7
 800a3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3d2:	bf00      	nop
 800a3d4:	0800d568 	.word	0x0800d568
 800a3d8:	0800d31a 	.word	0x0800d31a
 800a3dc:	0800d418 	.word	0x0800d418

0800a3e0 <__lshift>:
 800a3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	6849      	ldr	r1, [r1, #4]
 800a3e8:	6923      	ldr	r3, [r4, #16]
 800a3ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3ee:	68a3      	ldr	r3, [r4, #8]
 800a3f0:	4607      	mov	r7, r0
 800a3f2:	4691      	mov	r9, r2
 800a3f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3f8:	f108 0601 	add.w	r6, r8, #1
 800a3fc:	42b3      	cmp	r3, r6
 800a3fe:	db0b      	blt.n	800a418 <__lshift+0x38>
 800a400:	4638      	mov	r0, r7
 800a402:	f7ff fd91 	bl	8009f28 <_Balloc>
 800a406:	4605      	mov	r5, r0
 800a408:	b948      	cbnz	r0, 800a41e <__lshift+0x3e>
 800a40a:	4602      	mov	r2, r0
 800a40c:	4b2a      	ldr	r3, [pc, #168]	; (800a4b8 <__lshift+0xd8>)
 800a40e:	482b      	ldr	r0, [pc, #172]	; (800a4bc <__lshift+0xdc>)
 800a410:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a414:	f7fe fb2e 	bl	8008a74 <__assert_func>
 800a418:	3101      	adds	r1, #1
 800a41a:	005b      	lsls	r3, r3, #1
 800a41c:	e7ee      	b.n	800a3fc <__lshift+0x1c>
 800a41e:	2300      	movs	r3, #0
 800a420:	f100 0114 	add.w	r1, r0, #20
 800a424:	f100 0210 	add.w	r2, r0, #16
 800a428:	4618      	mov	r0, r3
 800a42a:	4553      	cmp	r3, sl
 800a42c:	db37      	blt.n	800a49e <__lshift+0xbe>
 800a42e:	6920      	ldr	r0, [r4, #16]
 800a430:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a434:	f104 0314 	add.w	r3, r4, #20
 800a438:	f019 091f 	ands.w	r9, r9, #31
 800a43c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a440:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a444:	d02f      	beq.n	800a4a6 <__lshift+0xc6>
 800a446:	f1c9 0e20 	rsb	lr, r9, #32
 800a44a:	468a      	mov	sl, r1
 800a44c:	f04f 0c00 	mov.w	ip, #0
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	fa02 f209 	lsl.w	r2, r2, r9
 800a456:	ea42 020c 	orr.w	r2, r2, ip
 800a45a:	f84a 2b04 	str.w	r2, [sl], #4
 800a45e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a462:	4298      	cmp	r0, r3
 800a464:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a468:	d8f2      	bhi.n	800a450 <__lshift+0x70>
 800a46a:	1b03      	subs	r3, r0, r4
 800a46c:	3b15      	subs	r3, #21
 800a46e:	f023 0303 	bic.w	r3, r3, #3
 800a472:	3304      	adds	r3, #4
 800a474:	f104 0215 	add.w	r2, r4, #21
 800a478:	4290      	cmp	r0, r2
 800a47a:	bf38      	it	cc
 800a47c:	2304      	movcc	r3, #4
 800a47e:	f841 c003 	str.w	ip, [r1, r3]
 800a482:	f1bc 0f00 	cmp.w	ip, #0
 800a486:	d001      	beq.n	800a48c <__lshift+0xac>
 800a488:	f108 0602 	add.w	r6, r8, #2
 800a48c:	3e01      	subs	r6, #1
 800a48e:	4638      	mov	r0, r7
 800a490:	612e      	str	r6, [r5, #16]
 800a492:	4621      	mov	r1, r4
 800a494:	f7ff fd88 	bl	8009fa8 <_Bfree>
 800a498:	4628      	mov	r0, r5
 800a49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a49e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	e7c1      	b.n	800a42a <__lshift+0x4a>
 800a4a6:	3904      	subs	r1, #4
 800a4a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4b0:	4298      	cmp	r0, r3
 800a4b2:	d8f9      	bhi.n	800a4a8 <__lshift+0xc8>
 800a4b4:	e7ea      	b.n	800a48c <__lshift+0xac>
 800a4b6:	bf00      	nop
 800a4b8:	0800d38c 	.word	0x0800d38c
 800a4bc:	0800d418 	.word	0x0800d418

0800a4c0 <__mcmp>:
 800a4c0:	b530      	push	{r4, r5, lr}
 800a4c2:	6902      	ldr	r2, [r0, #16]
 800a4c4:	690c      	ldr	r4, [r1, #16]
 800a4c6:	1b12      	subs	r2, r2, r4
 800a4c8:	d10e      	bne.n	800a4e8 <__mcmp+0x28>
 800a4ca:	f100 0314 	add.w	r3, r0, #20
 800a4ce:	3114      	adds	r1, #20
 800a4d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a4d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a4d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a4dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a4e0:	42a5      	cmp	r5, r4
 800a4e2:	d003      	beq.n	800a4ec <__mcmp+0x2c>
 800a4e4:	d305      	bcc.n	800a4f2 <__mcmp+0x32>
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	bd30      	pop	{r4, r5, pc}
 800a4ec:	4283      	cmp	r3, r0
 800a4ee:	d3f3      	bcc.n	800a4d8 <__mcmp+0x18>
 800a4f0:	e7fa      	b.n	800a4e8 <__mcmp+0x28>
 800a4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f6:	e7f7      	b.n	800a4e8 <__mcmp+0x28>

0800a4f8 <__mdiff>:
 800a4f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fc:	460c      	mov	r4, r1
 800a4fe:	4606      	mov	r6, r0
 800a500:	4611      	mov	r1, r2
 800a502:	4620      	mov	r0, r4
 800a504:	4690      	mov	r8, r2
 800a506:	f7ff ffdb 	bl	800a4c0 <__mcmp>
 800a50a:	1e05      	subs	r5, r0, #0
 800a50c:	d110      	bne.n	800a530 <__mdiff+0x38>
 800a50e:	4629      	mov	r1, r5
 800a510:	4630      	mov	r0, r6
 800a512:	f7ff fd09 	bl	8009f28 <_Balloc>
 800a516:	b930      	cbnz	r0, 800a526 <__mdiff+0x2e>
 800a518:	4b3a      	ldr	r3, [pc, #232]	; (800a604 <__mdiff+0x10c>)
 800a51a:	4602      	mov	r2, r0
 800a51c:	f240 2132 	movw	r1, #562	; 0x232
 800a520:	4839      	ldr	r0, [pc, #228]	; (800a608 <__mdiff+0x110>)
 800a522:	f7fe faa7 	bl	8008a74 <__assert_func>
 800a526:	2301      	movs	r3, #1
 800a528:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a52c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a530:	bfa4      	itt	ge
 800a532:	4643      	movge	r3, r8
 800a534:	46a0      	movge	r8, r4
 800a536:	4630      	mov	r0, r6
 800a538:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a53c:	bfa6      	itte	ge
 800a53e:	461c      	movge	r4, r3
 800a540:	2500      	movge	r5, #0
 800a542:	2501      	movlt	r5, #1
 800a544:	f7ff fcf0 	bl	8009f28 <_Balloc>
 800a548:	b920      	cbnz	r0, 800a554 <__mdiff+0x5c>
 800a54a:	4b2e      	ldr	r3, [pc, #184]	; (800a604 <__mdiff+0x10c>)
 800a54c:	4602      	mov	r2, r0
 800a54e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a552:	e7e5      	b.n	800a520 <__mdiff+0x28>
 800a554:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a558:	6926      	ldr	r6, [r4, #16]
 800a55a:	60c5      	str	r5, [r0, #12]
 800a55c:	f104 0914 	add.w	r9, r4, #20
 800a560:	f108 0514 	add.w	r5, r8, #20
 800a564:	f100 0e14 	add.w	lr, r0, #20
 800a568:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a56c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a570:	f108 0210 	add.w	r2, r8, #16
 800a574:	46f2      	mov	sl, lr
 800a576:	2100      	movs	r1, #0
 800a578:	f859 3b04 	ldr.w	r3, [r9], #4
 800a57c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a580:	fa1f f883 	uxth.w	r8, r3
 800a584:	fa11 f18b 	uxtah	r1, r1, fp
 800a588:	0c1b      	lsrs	r3, r3, #16
 800a58a:	eba1 0808 	sub.w	r8, r1, r8
 800a58e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a592:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a596:	fa1f f888 	uxth.w	r8, r8
 800a59a:	1419      	asrs	r1, r3, #16
 800a59c:	454e      	cmp	r6, r9
 800a59e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a5a2:	f84a 3b04 	str.w	r3, [sl], #4
 800a5a6:	d8e7      	bhi.n	800a578 <__mdiff+0x80>
 800a5a8:	1b33      	subs	r3, r6, r4
 800a5aa:	3b15      	subs	r3, #21
 800a5ac:	f023 0303 	bic.w	r3, r3, #3
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	3415      	adds	r4, #21
 800a5b4:	42a6      	cmp	r6, r4
 800a5b6:	bf38      	it	cc
 800a5b8:	2304      	movcc	r3, #4
 800a5ba:	441d      	add	r5, r3
 800a5bc:	4473      	add	r3, lr
 800a5be:	469e      	mov	lr, r3
 800a5c0:	462e      	mov	r6, r5
 800a5c2:	4566      	cmp	r6, ip
 800a5c4:	d30e      	bcc.n	800a5e4 <__mdiff+0xec>
 800a5c6:	f10c 0203 	add.w	r2, ip, #3
 800a5ca:	1b52      	subs	r2, r2, r5
 800a5cc:	f022 0203 	bic.w	r2, r2, #3
 800a5d0:	3d03      	subs	r5, #3
 800a5d2:	45ac      	cmp	ip, r5
 800a5d4:	bf38      	it	cc
 800a5d6:	2200      	movcc	r2, #0
 800a5d8:	441a      	add	r2, r3
 800a5da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a5de:	b17b      	cbz	r3, 800a600 <__mdiff+0x108>
 800a5e0:	6107      	str	r7, [r0, #16]
 800a5e2:	e7a3      	b.n	800a52c <__mdiff+0x34>
 800a5e4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a5e8:	fa11 f288 	uxtah	r2, r1, r8
 800a5ec:	1414      	asrs	r4, r2, #16
 800a5ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a5f2:	b292      	uxth	r2, r2
 800a5f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a5f8:	f84e 2b04 	str.w	r2, [lr], #4
 800a5fc:	1421      	asrs	r1, r4, #16
 800a5fe:	e7e0      	b.n	800a5c2 <__mdiff+0xca>
 800a600:	3f01      	subs	r7, #1
 800a602:	e7ea      	b.n	800a5da <__mdiff+0xe2>
 800a604:	0800d38c 	.word	0x0800d38c
 800a608:	0800d418 	.word	0x0800d418

0800a60c <__ulp>:
 800a60c:	b082      	sub	sp, #8
 800a60e:	ed8d 0b00 	vstr	d0, [sp]
 800a612:	9b01      	ldr	r3, [sp, #4]
 800a614:	4912      	ldr	r1, [pc, #72]	; (800a660 <__ulp+0x54>)
 800a616:	4019      	ands	r1, r3
 800a618:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a61c:	2900      	cmp	r1, #0
 800a61e:	dd05      	ble.n	800a62c <__ulp+0x20>
 800a620:	2200      	movs	r2, #0
 800a622:	460b      	mov	r3, r1
 800a624:	ec43 2b10 	vmov	d0, r2, r3
 800a628:	b002      	add	sp, #8
 800a62a:	4770      	bx	lr
 800a62c:	4249      	negs	r1, r1
 800a62e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a632:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a636:	f04f 0200 	mov.w	r2, #0
 800a63a:	f04f 0300 	mov.w	r3, #0
 800a63e:	da04      	bge.n	800a64a <__ulp+0x3e>
 800a640:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a644:	fa41 f300 	asr.w	r3, r1, r0
 800a648:	e7ec      	b.n	800a624 <__ulp+0x18>
 800a64a:	f1a0 0114 	sub.w	r1, r0, #20
 800a64e:	291e      	cmp	r1, #30
 800a650:	bfda      	itte	le
 800a652:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a656:	fa20 f101 	lsrle.w	r1, r0, r1
 800a65a:	2101      	movgt	r1, #1
 800a65c:	460a      	mov	r2, r1
 800a65e:	e7e1      	b.n	800a624 <__ulp+0x18>
 800a660:	7ff00000 	.word	0x7ff00000

0800a664 <__b2d>:
 800a664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a666:	6905      	ldr	r5, [r0, #16]
 800a668:	f100 0714 	add.w	r7, r0, #20
 800a66c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a670:	1f2e      	subs	r6, r5, #4
 800a672:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a676:	4620      	mov	r0, r4
 800a678:	f7ff fd48 	bl	800a10c <__hi0bits>
 800a67c:	f1c0 0320 	rsb	r3, r0, #32
 800a680:	280a      	cmp	r0, #10
 800a682:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a700 <__b2d+0x9c>
 800a686:	600b      	str	r3, [r1, #0]
 800a688:	dc14      	bgt.n	800a6b4 <__b2d+0x50>
 800a68a:	f1c0 0e0b 	rsb	lr, r0, #11
 800a68e:	fa24 f10e 	lsr.w	r1, r4, lr
 800a692:	42b7      	cmp	r7, r6
 800a694:	ea41 030c 	orr.w	r3, r1, ip
 800a698:	bf34      	ite	cc
 800a69a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a69e:	2100      	movcs	r1, #0
 800a6a0:	3015      	adds	r0, #21
 800a6a2:	fa04 f000 	lsl.w	r0, r4, r0
 800a6a6:	fa21 f10e 	lsr.w	r1, r1, lr
 800a6aa:	ea40 0201 	orr.w	r2, r0, r1
 800a6ae:	ec43 2b10 	vmov	d0, r2, r3
 800a6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6b4:	42b7      	cmp	r7, r6
 800a6b6:	bf3a      	itte	cc
 800a6b8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a6bc:	f1a5 0608 	subcc.w	r6, r5, #8
 800a6c0:	2100      	movcs	r1, #0
 800a6c2:	380b      	subs	r0, #11
 800a6c4:	d017      	beq.n	800a6f6 <__b2d+0x92>
 800a6c6:	f1c0 0c20 	rsb	ip, r0, #32
 800a6ca:	fa04 f500 	lsl.w	r5, r4, r0
 800a6ce:	42be      	cmp	r6, r7
 800a6d0:	fa21 f40c 	lsr.w	r4, r1, ip
 800a6d4:	ea45 0504 	orr.w	r5, r5, r4
 800a6d8:	bf8c      	ite	hi
 800a6da:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a6de:	2400      	movls	r4, #0
 800a6e0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a6e4:	fa01 f000 	lsl.w	r0, r1, r0
 800a6e8:	fa24 f40c 	lsr.w	r4, r4, ip
 800a6ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a6f0:	ea40 0204 	orr.w	r2, r0, r4
 800a6f4:	e7db      	b.n	800a6ae <__b2d+0x4a>
 800a6f6:	ea44 030c 	orr.w	r3, r4, ip
 800a6fa:	460a      	mov	r2, r1
 800a6fc:	e7d7      	b.n	800a6ae <__b2d+0x4a>
 800a6fe:	bf00      	nop
 800a700:	3ff00000 	.word	0x3ff00000

0800a704 <__d2b>:
 800a704:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a708:	4689      	mov	r9, r1
 800a70a:	2101      	movs	r1, #1
 800a70c:	ec57 6b10 	vmov	r6, r7, d0
 800a710:	4690      	mov	r8, r2
 800a712:	f7ff fc09 	bl	8009f28 <_Balloc>
 800a716:	4604      	mov	r4, r0
 800a718:	b930      	cbnz	r0, 800a728 <__d2b+0x24>
 800a71a:	4602      	mov	r2, r0
 800a71c:	4b25      	ldr	r3, [pc, #148]	; (800a7b4 <__d2b+0xb0>)
 800a71e:	4826      	ldr	r0, [pc, #152]	; (800a7b8 <__d2b+0xb4>)
 800a720:	f240 310a 	movw	r1, #778	; 0x30a
 800a724:	f7fe f9a6 	bl	8008a74 <__assert_func>
 800a728:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a72c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a730:	bb35      	cbnz	r5, 800a780 <__d2b+0x7c>
 800a732:	2e00      	cmp	r6, #0
 800a734:	9301      	str	r3, [sp, #4]
 800a736:	d028      	beq.n	800a78a <__d2b+0x86>
 800a738:	4668      	mov	r0, sp
 800a73a:	9600      	str	r6, [sp, #0]
 800a73c:	f7ff fd06 	bl	800a14c <__lo0bits>
 800a740:	9900      	ldr	r1, [sp, #0]
 800a742:	b300      	cbz	r0, 800a786 <__d2b+0x82>
 800a744:	9a01      	ldr	r2, [sp, #4]
 800a746:	f1c0 0320 	rsb	r3, r0, #32
 800a74a:	fa02 f303 	lsl.w	r3, r2, r3
 800a74e:	430b      	orrs	r3, r1
 800a750:	40c2      	lsrs	r2, r0
 800a752:	6163      	str	r3, [r4, #20]
 800a754:	9201      	str	r2, [sp, #4]
 800a756:	9b01      	ldr	r3, [sp, #4]
 800a758:	61a3      	str	r3, [r4, #24]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	bf14      	ite	ne
 800a75e:	2202      	movne	r2, #2
 800a760:	2201      	moveq	r2, #1
 800a762:	6122      	str	r2, [r4, #16]
 800a764:	b1d5      	cbz	r5, 800a79c <__d2b+0x98>
 800a766:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a76a:	4405      	add	r5, r0
 800a76c:	f8c9 5000 	str.w	r5, [r9]
 800a770:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a774:	f8c8 0000 	str.w	r0, [r8]
 800a778:	4620      	mov	r0, r4
 800a77a:	b003      	add	sp, #12
 800a77c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a780:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a784:	e7d5      	b.n	800a732 <__d2b+0x2e>
 800a786:	6161      	str	r1, [r4, #20]
 800a788:	e7e5      	b.n	800a756 <__d2b+0x52>
 800a78a:	a801      	add	r0, sp, #4
 800a78c:	f7ff fcde 	bl	800a14c <__lo0bits>
 800a790:	9b01      	ldr	r3, [sp, #4]
 800a792:	6163      	str	r3, [r4, #20]
 800a794:	2201      	movs	r2, #1
 800a796:	6122      	str	r2, [r4, #16]
 800a798:	3020      	adds	r0, #32
 800a79a:	e7e3      	b.n	800a764 <__d2b+0x60>
 800a79c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7a4:	f8c9 0000 	str.w	r0, [r9]
 800a7a8:	6918      	ldr	r0, [r3, #16]
 800a7aa:	f7ff fcaf 	bl	800a10c <__hi0bits>
 800a7ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7b2:	e7df      	b.n	800a774 <__d2b+0x70>
 800a7b4:	0800d38c 	.word	0x0800d38c
 800a7b8:	0800d418 	.word	0x0800d418

0800a7bc <__ratio>:
 800a7bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c0:	4688      	mov	r8, r1
 800a7c2:	4669      	mov	r1, sp
 800a7c4:	4681      	mov	r9, r0
 800a7c6:	f7ff ff4d 	bl	800a664 <__b2d>
 800a7ca:	a901      	add	r1, sp, #4
 800a7cc:	4640      	mov	r0, r8
 800a7ce:	ec55 4b10 	vmov	r4, r5, d0
 800a7d2:	f7ff ff47 	bl	800a664 <__b2d>
 800a7d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7da:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a7de:	eba3 0c02 	sub.w	ip, r3, r2
 800a7e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a7e6:	1a9b      	subs	r3, r3, r2
 800a7e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a7ec:	ec51 0b10 	vmov	r0, r1, d0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	bfd6      	itet	le
 800a7f4:	460a      	movle	r2, r1
 800a7f6:	462a      	movgt	r2, r5
 800a7f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a7fc:	468b      	mov	fp, r1
 800a7fe:	462f      	mov	r7, r5
 800a800:	bfd4      	ite	le
 800a802:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a806:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a80a:	4620      	mov	r0, r4
 800a80c:	ee10 2a10 	vmov	r2, s0
 800a810:	465b      	mov	r3, fp
 800a812:	4639      	mov	r1, r7
 800a814:	f7f6 f81a 	bl	800084c <__aeabi_ddiv>
 800a818:	ec41 0b10 	vmov	d0, r0, r1
 800a81c:	b003      	add	sp, #12
 800a81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a822 <__copybits>:
 800a822:	3901      	subs	r1, #1
 800a824:	b570      	push	{r4, r5, r6, lr}
 800a826:	1149      	asrs	r1, r1, #5
 800a828:	6914      	ldr	r4, [r2, #16]
 800a82a:	3101      	adds	r1, #1
 800a82c:	f102 0314 	add.w	r3, r2, #20
 800a830:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a834:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a838:	1f05      	subs	r5, r0, #4
 800a83a:	42a3      	cmp	r3, r4
 800a83c:	d30c      	bcc.n	800a858 <__copybits+0x36>
 800a83e:	1aa3      	subs	r3, r4, r2
 800a840:	3b11      	subs	r3, #17
 800a842:	f023 0303 	bic.w	r3, r3, #3
 800a846:	3211      	adds	r2, #17
 800a848:	42a2      	cmp	r2, r4
 800a84a:	bf88      	it	hi
 800a84c:	2300      	movhi	r3, #0
 800a84e:	4418      	add	r0, r3
 800a850:	2300      	movs	r3, #0
 800a852:	4288      	cmp	r0, r1
 800a854:	d305      	bcc.n	800a862 <__copybits+0x40>
 800a856:	bd70      	pop	{r4, r5, r6, pc}
 800a858:	f853 6b04 	ldr.w	r6, [r3], #4
 800a85c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a860:	e7eb      	b.n	800a83a <__copybits+0x18>
 800a862:	f840 3b04 	str.w	r3, [r0], #4
 800a866:	e7f4      	b.n	800a852 <__copybits+0x30>

0800a868 <__any_on>:
 800a868:	f100 0214 	add.w	r2, r0, #20
 800a86c:	6900      	ldr	r0, [r0, #16]
 800a86e:	114b      	asrs	r3, r1, #5
 800a870:	4298      	cmp	r0, r3
 800a872:	b510      	push	{r4, lr}
 800a874:	db11      	blt.n	800a89a <__any_on+0x32>
 800a876:	dd0a      	ble.n	800a88e <__any_on+0x26>
 800a878:	f011 011f 	ands.w	r1, r1, #31
 800a87c:	d007      	beq.n	800a88e <__any_on+0x26>
 800a87e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a882:	fa24 f001 	lsr.w	r0, r4, r1
 800a886:	fa00 f101 	lsl.w	r1, r0, r1
 800a88a:	428c      	cmp	r4, r1
 800a88c:	d10b      	bne.n	800a8a6 <__any_on+0x3e>
 800a88e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a892:	4293      	cmp	r3, r2
 800a894:	d803      	bhi.n	800a89e <__any_on+0x36>
 800a896:	2000      	movs	r0, #0
 800a898:	bd10      	pop	{r4, pc}
 800a89a:	4603      	mov	r3, r0
 800a89c:	e7f7      	b.n	800a88e <__any_on+0x26>
 800a89e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8a2:	2900      	cmp	r1, #0
 800a8a4:	d0f5      	beq.n	800a892 <__any_on+0x2a>
 800a8a6:	2001      	movs	r0, #1
 800a8a8:	e7f6      	b.n	800a898 <__any_on+0x30>

0800a8aa <_calloc_r>:
 800a8aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8ac:	fba1 2402 	umull	r2, r4, r1, r2
 800a8b0:	b94c      	cbnz	r4, 800a8c6 <_calloc_r+0x1c>
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	9201      	str	r2, [sp, #4]
 800a8b6:	f000 f87b 	bl	800a9b0 <_malloc_r>
 800a8ba:	9a01      	ldr	r2, [sp, #4]
 800a8bc:	4605      	mov	r5, r0
 800a8be:	b930      	cbnz	r0, 800a8ce <_calloc_r+0x24>
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	b003      	add	sp, #12
 800a8c4:	bd30      	pop	{r4, r5, pc}
 800a8c6:	220c      	movs	r2, #12
 800a8c8:	6002      	str	r2, [r0, #0]
 800a8ca:	2500      	movs	r5, #0
 800a8cc:	e7f8      	b.n	800a8c0 <_calloc_r+0x16>
 800a8ce:	4621      	mov	r1, r4
 800a8d0:	f7fc fb10 	bl	8006ef4 <memset>
 800a8d4:	e7f4      	b.n	800a8c0 <_calloc_r+0x16>
	...

0800a8d8 <_free_r>:
 800a8d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8da:	2900      	cmp	r1, #0
 800a8dc:	d044      	beq.n	800a968 <_free_r+0x90>
 800a8de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e2:	9001      	str	r0, [sp, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f1a1 0404 	sub.w	r4, r1, #4
 800a8ea:	bfb8      	it	lt
 800a8ec:	18e4      	addlt	r4, r4, r3
 800a8ee:	f000 fed7 	bl	800b6a0 <__malloc_lock>
 800a8f2:	4a1e      	ldr	r2, [pc, #120]	; (800a96c <_free_r+0x94>)
 800a8f4:	9801      	ldr	r0, [sp, #4]
 800a8f6:	6813      	ldr	r3, [r2, #0]
 800a8f8:	b933      	cbnz	r3, 800a908 <_free_r+0x30>
 800a8fa:	6063      	str	r3, [r4, #4]
 800a8fc:	6014      	str	r4, [r2, #0]
 800a8fe:	b003      	add	sp, #12
 800a900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a904:	f000 bed2 	b.w	800b6ac <__malloc_unlock>
 800a908:	42a3      	cmp	r3, r4
 800a90a:	d908      	bls.n	800a91e <_free_r+0x46>
 800a90c:	6825      	ldr	r5, [r4, #0]
 800a90e:	1961      	adds	r1, r4, r5
 800a910:	428b      	cmp	r3, r1
 800a912:	bf01      	itttt	eq
 800a914:	6819      	ldreq	r1, [r3, #0]
 800a916:	685b      	ldreq	r3, [r3, #4]
 800a918:	1949      	addeq	r1, r1, r5
 800a91a:	6021      	streq	r1, [r4, #0]
 800a91c:	e7ed      	b.n	800a8fa <_free_r+0x22>
 800a91e:	461a      	mov	r2, r3
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	b10b      	cbz	r3, 800a928 <_free_r+0x50>
 800a924:	42a3      	cmp	r3, r4
 800a926:	d9fa      	bls.n	800a91e <_free_r+0x46>
 800a928:	6811      	ldr	r1, [r2, #0]
 800a92a:	1855      	adds	r5, r2, r1
 800a92c:	42a5      	cmp	r5, r4
 800a92e:	d10b      	bne.n	800a948 <_free_r+0x70>
 800a930:	6824      	ldr	r4, [r4, #0]
 800a932:	4421      	add	r1, r4
 800a934:	1854      	adds	r4, r2, r1
 800a936:	42a3      	cmp	r3, r4
 800a938:	6011      	str	r1, [r2, #0]
 800a93a:	d1e0      	bne.n	800a8fe <_free_r+0x26>
 800a93c:	681c      	ldr	r4, [r3, #0]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	6053      	str	r3, [r2, #4]
 800a942:	4421      	add	r1, r4
 800a944:	6011      	str	r1, [r2, #0]
 800a946:	e7da      	b.n	800a8fe <_free_r+0x26>
 800a948:	d902      	bls.n	800a950 <_free_r+0x78>
 800a94a:	230c      	movs	r3, #12
 800a94c:	6003      	str	r3, [r0, #0]
 800a94e:	e7d6      	b.n	800a8fe <_free_r+0x26>
 800a950:	6825      	ldr	r5, [r4, #0]
 800a952:	1961      	adds	r1, r4, r5
 800a954:	428b      	cmp	r3, r1
 800a956:	bf04      	itt	eq
 800a958:	6819      	ldreq	r1, [r3, #0]
 800a95a:	685b      	ldreq	r3, [r3, #4]
 800a95c:	6063      	str	r3, [r4, #4]
 800a95e:	bf04      	itt	eq
 800a960:	1949      	addeq	r1, r1, r5
 800a962:	6021      	streq	r1, [r4, #0]
 800a964:	6054      	str	r4, [r2, #4]
 800a966:	e7ca      	b.n	800a8fe <_free_r+0x26>
 800a968:	b003      	add	sp, #12
 800a96a:	bd30      	pop	{r4, r5, pc}
 800a96c:	20000a50 	.word	0x20000a50

0800a970 <sbrk_aligned>:
 800a970:	b570      	push	{r4, r5, r6, lr}
 800a972:	4e0e      	ldr	r6, [pc, #56]	; (800a9ac <sbrk_aligned+0x3c>)
 800a974:	460c      	mov	r4, r1
 800a976:	6831      	ldr	r1, [r6, #0]
 800a978:	4605      	mov	r5, r0
 800a97a:	b911      	cbnz	r1, 800a982 <sbrk_aligned+0x12>
 800a97c:	f000 fb5c 	bl	800b038 <_sbrk_r>
 800a980:	6030      	str	r0, [r6, #0]
 800a982:	4621      	mov	r1, r4
 800a984:	4628      	mov	r0, r5
 800a986:	f000 fb57 	bl	800b038 <_sbrk_r>
 800a98a:	1c43      	adds	r3, r0, #1
 800a98c:	d00a      	beq.n	800a9a4 <sbrk_aligned+0x34>
 800a98e:	1cc4      	adds	r4, r0, #3
 800a990:	f024 0403 	bic.w	r4, r4, #3
 800a994:	42a0      	cmp	r0, r4
 800a996:	d007      	beq.n	800a9a8 <sbrk_aligned+0x38>
 800a998:	1a21      	subs	r1, r4, r0
 800a99a:	4628      	mov	r0, r5
 800a99c:	f000 fb4c 	bl	800b038 <_sbrk_r>
 800a9a0:	3001      	adds	r0, #1
 800a9a2:	d101      	bne.n	800a9a8 <sbrk_aligned+0x38>
 800a9a4:	f04f 34ff 	mov.w	r4, #4294967295
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	bd70      	pop	{r4, r5, r6, pc}
 800a9ac:	20000a54 	.word	0x20000a54

0800a9b0 <_malloc_r>:
 800a9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b4:	1ccd      	adds	r5, r1, #3
 800a9b6:	f025 0503 	bic.w	r5, r5, #3
 800a9ba:	3508      	adds	r5, #8
 800a9bc:	2d0c      	cmp	r5, #12
 800a9be:	bf38      	it	cc
 800a9c0:	250c      	movcc	r5, #12
 800a9c2:	2d00      	cmp	r5, #0
 800a9c4:	4607      	mov	r7, r0
 800a9c6:	db01      	blt.n	800a9cc <_malloc_r+0x1c>
 800a9c8:	42a9      	cmp	r1, r5
 800a9ca:	d905      	bls.n	800a9d8 <_malloc_r+0x28>
 800a9cc:	230c      	movs	r3, #12
 800a9ce:	603b      	str	r3, [r7, #0]
 800a9d0:	2600      	movs	r6, #0
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d8:	4e2e      	ldr	r6, [pc, #184]	; (800aa94 <_malloc_r+0xe4>)
 800a9da:	f000 fe61 	bl	800b6a0 <__malloc_lock>
 800a9de:	6833      	ldr	r3, [r6, #0]
 800a9e0:	461c      	mov	r4, r3
 800a9e2:	bb34      	cbnz	r4, 800aa32 <_malloc_r+0x82>
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	f7ff ffc2 	bl	800a970 <sbrk_aligned>
 800a9ec:	1c43      	adds	r3, r0, #1
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	d14d      	bne.n	800aa8e <_malloc_r+0xde>
 800a9f2:	6834      	ldr	r4, [r6, #0]
 800a9f4:	4626      	mov	r6, r4
 800a9f6:	2e00      	cmp	r6, #0
 800a9f8:	d140      	bne.n	800aa7c <_malloc_r+0xcc>
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	4631      	mov	r1, r6
 800a9fe:	4638      	mov	r0, r7
 800aa00:	eb04 0803 	add.w	r8, r4, r3
 800aa04:	f000 fb18 	bl	800b038 <_sbrk_r>
 800aa08:	4580      	cmp	r8, r0
 800aa0a:	d13a      	bne.n	800aa82 <_malloc_r+0xd2>
 800aa0c:	6821      	ldr	r1, [r4, #0]
 800aa0e:	3503      	adds	r5, #3
 800aa10:	1a6d      	subs	r5, r5, r1
 800aa12:	f025 0503 	bic.w	r5, r5, #3
 800aa16:	3508      	adds	r5, #8
 800aa18:	2d0c      	cmp	r5, #12
 800aa1a:	bf38      	it	cc
 800aa1c:	250c      	movcc	r5, #12
 800aa1e:	4629      	mov	r1, r5
 800aa20:	4638      	mov	r0, r7
 800aa22:	f7ff ffa5 	bl	800a970 <sbrk_aligned>
 800aa26:	3001      	adds	r0, #1
 800aa28:	d02b      	beq.n	800aa82 <_malloc_r+0xd2>
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	442b      	add	r3, r5
 800aa2e:	6023      	str	r3, [r4, #0]
 800aa30:	e00e      	b.n	800aa50 <_malloc_r+0xa0>
 800aa32:	6822      	ldr	r2, [r4, #0]
 800aa34:	1b52      	subs	r2, r2, r5
 800aa36:	d41e      	bmi.n	800aa76 <_malloc_r+0xc6>
 800aa38:	2a0b      	cmp	r2, #11
 800aa3a:	d916      	bls.n	800aa6a <_malloc_r+0xba>
 800aa3c:	1961      	adds	r1, r4, r5
 800aa3e:	42a3      	cmp	r3, r4
 800aa40:	6025      	str	r5, [r4, #0]
 800aa42:	bf18      	it	ne
 800aa44:	6059      	strne	r1, [r3, #4]
 800aa46:	6863      	ldr	r3, [r4, #4]
 800aa48:	bf08      	it	eq
 800aa4a:	6031      	streq	r1, [r6, #0]
 800aa4c:	5162      	str	r2, [r4, r5]
 800aa4e:	604b      	str	r3, [r1, #4]
 800aa50:	4638      	mov	r0, r7
 800aa52:	f104 060b 	add.w	r6, r4, #11
 800aa56:	f000 fe29 	bl	800b6ac <__malloc_unlock>
 800aa5a:	f026 0607 	bic.w	r6, r6, #7
 800aa5e:	1d23      	adds	r3, r4, #4
 800aa60:	1af2      	subs	r2, r6, r3
 800aa62:	d0b6      	beq.n	800a9d2 <_malloc_r+0x22>
 800aa64:	1b9b      	subs	r3, r3, r6
 800aa66:	50a3      	str	r3, [r4, r2]
 800aa68:	e7b3      	b.n	800a9d2 <_malloc_r+0x22>
 800aa6a:	6862      	ldr	r2, [r4, #4]
 800aa6c:	42a3      	cmp	r3, r4
 800aa6e:	bf0c      	ite	eq
 800aa70:	6032      	streq	r2, [r6, #0]
 800aa72:	605a      	strne	r2, [r3, #4]
 800aa74:	e7ec      	b.n	800aa50 <_malloc_r+0xa0>
 800aa76:	4623      	mov	r3, r4
 800aa78:	6864      	ldr	r4, [r4, #4]
 800aa7a:	e7b2      	b.n	800a9e2 <_malloc_r+0x32>
 800aa7c:	4634      	mov	r4, r6
 800aa7e:	6876      	ldr	r6, [r6, #4]
 800aa80:	e7b9      	b.n	800a9f6 <_malloc_r+0x46>
 800aa82:	230c      	movs	r3, #12
 800aa84:	603b      	str	r3, [r7, #0]
 800aa86:	4638      	mov	r0, r7
 800aa88:	f000 fe10 	bl	800b6ac <__malloc_unlock>
 800aa8c:	e7a1      	b.n	800a9d2 <_malloc_r+0x22>
 800aa8e:	6025      	str	r5, [r4, #0]
 800aa90:	e7de      	b.n	800aa50 <_malloc_r+0xa0>
 800aa92:	bf00      	nop
 800aa94:	20000a50 	.word	0x20000a50

0800aa98 <__ssputs_r>:
 800aa98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa9c:	688e      	ldr	r6, [r1, #8]
 800aa9e:	429e      	cmp	r6, r3
 800aaa0:	4682      	mov	sl, r0
 800aaa2:	460c      	mov	r4, r1
 800aaa4:	4690      	mov	r8, r2
 800aaa6:	461f      	mov	r7, r3
 800aaa8:	d838      	bhi.n	800ab1c <__ssputs_r+0x84>
 800aaaa:	898a      	ldrh	r2, [r1, #12]
 800aaac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aab0:	d032      	beq.n	800ab18 <__ssputs_r+0x80>
 800aab2:	6825      	ldr	r5, [r4, #0]
 800aab4:	6909      	ldr	r1, [r1, #16]
 800aab6:	eba5 0901 	sub.w	r9, r5, r1
 800aaba:	6965      	ldr	r5, [r4, #20]
 800aabc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aac0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aac4:	3301      	adds	r3, #1
 800aac6:	444b      	add	r3, r9
 800aac8:	106d      	asrs	r5, r5, #1
 800aaca:	429d      	cmp	r5, r3
 800aacc:	bf38      	it	cc
 800aace:	461d      	movcc	r5, r3
 800aad0:	0553      	lsls	r3, r2, #21
 800aad2:	d531      	bpl.n	800ab38 <__ssputs_r+0xa0>
 800aad4:	4629      	mov	r1, r5
 800aad6:	f7ff ff6b 	bl	800a9b0 <_malloc_r>
 800aada:	4606      	mov	r6, r0
 800aadc:	b950      	cbnz	r0, 800aaf4 <__ssputs_r+0x5c>
 800aade:	230c      	movs	r3, #12
 800aae0:	f8ca 3000 	str.w	r3, [sl]
 800aae4:	89a3      	ldrh	r3, [r4, #12]
 800aae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaea:	81a3      	strh	r3, [r4, #12]
 800aaec:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaf4:	6921      	ldr	r1, [r4, #16]
 800aaf6:	464a      	mov	r2, r9
 800aaf8:	f7fc f9ee 	bl	8006ed8 <memcpy>
 800aafc:	89a3      	ldrh	r3, [r4, #12]
 800aafe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab06:	81a3      	strh	r3, [r4, #12]
 800ab08:	6126      	str	r6, [r4, #16]
 800ab0a:	6165      	str	r5, [r4, #20]
 800ab0c:	444e      	add	r6, r9
 800ab0e:	eba5 0509 	sub.w	r5, r5, r9
 800ab12:	6026      	str	r6, [r4, #0]
 800ab14:	60a5      	str	r5, [r4, #8]
 800ab16:	463e      	mov	r6, r7
 800ab18:	42be      	cmp	r6, r7
 800ab1a:	d900      	bls.n	800ab1e <__ssputs_r+0x86>
 800ab1c:	463e      	mov	r6, r7
 800ab1e:	6820      	ldr	r0, [r4, #0]
 800ab20:	4632      	mov	r2, r6
 800ab22:	4641      	mov	r1, r8
 800ab24:	f000 fda2 	bl	800b66c <memmove>
 800ab28:	68a3      	ldr	r3, [r4, #8]
 800ab2a:	1b9b      	subs	r3, r3, r6
 800ab2c:	60a3      	str	r3, [r4, #8]
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	4433      	add	r3, r6
 800ab32:	6023      	str	r3, [r4, #0]
 800ab34:	2000      	movs	r0, #0
 800ab36:	e7db      	b.n	800aaf0 <__ssputs_r+0x58>
 800ab38:	462a      	mov	r2, r5
 800ab3a:	f000 fdbd 	bl	800b6b8 <_realloc_r>
 800ab3e:	4606      	mov	r6, r0
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d1e1      	bne.n	800ab08 <__ssputs_r+0x70>
 800ab44:	6921      	ldr	r1, [r4, #16]
 800ab46:	4650      	mov	r0, sl
 800ab48:	f7ff fec6 	bl	800a8d8 <_free_r>
 800ab4c:	e7c7      	b.n	800aade <__ssputs_r+0x46>
	...

0800ab50 <_svfiprintf_r>:
 800ab50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab54:	4698      	mov	r8, r3
 800ab56:	898b      	ldrh	r3, [r1, #12]
 800ab58:	061b      	lsls	r3, r3, #24
 800ab5a:	b09d      	sub	sp, #116	; 0x74
 800ab5c:	4607      	mov	r7, r0
 800ab5e:	460d      	mov	r5, r1
 800ab60:	4614      	mov	r4, r2
 800ab62:	d50e      	bpl.n	800ab82 <_svfiprintf_r+0x32>
 800ab64:	690b      	ldr	r3, [r1, #16]
 800ab66:	b963      	cbnz	r3, 800ab82 <_svfiprintf_r+0x32>
 800ab68:	2140      	movs	r1, #64	; 0x40
 800ab6a:	f7ff ff21 	bl	800a9b0 <_malloc_r>
 800ab6e:	6028      	str	r0, [r5, #0]
 800ab70:	6128      	str	r0, [r5, #16]
 800ab72:	b920      	cbnz	r0, 800ab7e <_svfiprintf_r+0x2e>
 800ab74:	230c      	movs	r3, #12
 800ab76:	603b      	str	r3, [r7, #0]
 800ab78:	f04f 30ff 	mov.w	r0, #4294967295
 800ab7c:	e0d1      	b.n	800ad22 <_svfiprintf_r+0x1d2>
 800ab7e:	2340      	movs	r3, #64	; 0x40
 800ab80:	616b      	str	r3, [r5, #20]
 800ab82:	2300      	movs	r3, #0
 800ab84:	9309      	str	r3, [sp, #36]	; 0x24
 800ab86:	2320      	movs	r3, #32
 800ab88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab90:	2330      	movs	r3, #48	; 0x30
 800ab92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ad3c <_svfiprintf_r+0x1ec>
 800ab96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab9a:	f04f 0901 	mov.w	r9, #1
 800ab9e:	4623      	mov	r3, r4
 800aba0:	469a      	mov	sl, r3
 800aba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aba6:	b10a      	cbz	r2, 800abac <_svfiprintf_r+0x5c>
 800aba8:	2a25      	cmp	r2, #37	; 0x25
 800abaa:	d1f9      	bne.n	800aba0 <_svfiprintf_r+0x50>
 800abac:	ebba 0b04 	subs.w	fp, sl, r4
 800abb0:	d00b      	beq.n	800abca <_svfiprintf_r+0x7a>
 800abb2:	465b      	mov	r3, fp
 800abb4:	4622      	mov	r2, r4
 800abb6:	4629      	mov	r1, r5
 800abb8:	4638      	mov	r0, r7
 800abba:	f7ff ff6d 	bl	800aa98 <__ssputs_r>
 800abbe:	3001      	adds	r0, #1
 800abc0:	f000 80aa 	beq.w	800ad18 <_svfiprintf_r+0x1c8>
 800abc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abc6:	445a      	add	r2, fp
 800abc8:	9209      	str	r2, [sp, #36]	; 0x24
 800abca:	f89a 3000 	ldrb.w	r3, [sl]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	f000 80a2 	beq.w	800ad18 <_svfiprintf_r+0x1c8>
 800abd4:	2300      	movs	r3, #0
 800abd6:	f04f 32ff 	mov.w	r2, #4294967295
 800abda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abde:	f10a 0a01 	add.w	sl, sl, #1
 800abe2:	9304      	str	r3, [sp, #16]
 800abe4:	9307      	str	r3, [sp, #28]
 800abe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abea:	931a      	str	r3, [sp, #104]	; 0x68
 800abec:	4654      	mov	r4, sl
 800abee:	2205      	movs	r2, #5
 800abf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abf4:	4851      	ldr	r0, [pc, #324]	; (800ad3c <_svfiprintf_r+0x1ec>)
 800abf6:	f7f5 faf3 	bl	80001e0 <memchr>
 800abfa:	9a04      	ldr	r2, [sp, #16]
 800abfc:	b9d8      	cbnz	r0, 800ac36 <_svfiprintf_r+0xe6>
 800abfe:	06d0      	lsls	r0, r2, #27
 800ac00:	bf44      	itt	mi
 800ac02:	2320      	movmi	r3, #32
 800ac04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac08:	0711      	lsls	r1, r2, #28
 800ac0a:	bf44      	itt	mi
 800ac0c:	232b      	movmi	r3, #43	; 0x2b
 800ac0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac12:	f89a 3000 	ldrb.w	r3, [sl]
 800ac16:	2b2a      	cmp	r3, #42	; 0x2a
 800ac18:	d015      	beq.n	800ac46 <_svfiprintf_r+0xf6>
 800ac1a:	9a07      	ldr	r2, [sp, #28]
 800ac1c:	4654      	mov	r4, sl
 800ac1e:	2000      	movs	r0, #0
 800ac20:	f04f 0c0a 	mov.w	ip, #10
 800ac24:	4621      	mov	r1, r4
 800ac26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac2a:	3b30      	subs	r3, #48	; 0x30
 800ac2c:	2b09      	cmp	r3, #9
 800ac2e:	d94e      	bls.n	800acce <_svfiprintf_r+0x17e>
 800ac30:	b1b0      	cbz	r0, 800ac60 <_svfiprintf_r+0x110>
 800ac32:	9207      	str	r2, [sp, #28]
 800ac34:	e014      	b.n	800ac60 <_svfiprintf_r+0x110>
 800ac36:	eba0 0308 	sub.w	r3, r0, r8
 800ac3a:	fa09 f303 	lsl.w	r3, r9, r3
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	9304      	str	r3, [sp, #16]
 800ac42:	46a2      	mov	sl, r4
 800ac44:	e7d2      	b.n	800abec <_svfiprintf_r+0x9c>
 800ac46:	9b03      	ldr	r3, [sp, #12]
 800ac48:	1d19      	adds	r1, r3, #4
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	9103      	str	r1, [sp, #12]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	bfbb      	ittet	lt
 800ac52:	425b      	neglt	r3, r3
 800ac54:	f042 0202 	orrlt.w	r2, r2, #2
 800ac58:	9307      	strge	r3, [sp, #28]
 800ac5a:	9307      	strlt	r3, [sp, #28]
 800ac5c:	bfb8      	it	lt
 800ac5e:	9204      	strlt	r2, [sp, #16]
 800ac60:	7823      	ldrb	r3, [r4, #0]
 800ac62:	2b2e      	cmp	r3, #46	; 0x2e
 800ac64:	d10c      	bne.n	800ac80 <_svfiprintf_r+0x130>
 800ac66:	7863      	ldrb	r3, [r4, #1]
 800ac68:	2b2a      	cmp	r3, #42	; 0x2a
 800ac6a:	d135      	bne.n	800acd8 <_svfiprintf_r+0x188>
 800ac6c:	9b03      	ldr	r3, [sp, #12]
 800ac6e:	1d1a      	adds	r2, r3, #4
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	9203      	str	r2, [sp, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	bfb8      	it	lt
 800ac78:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac7c:	3402      	adds	r4, #2
 800ac7e:	9305      	str	r3, [sp, #20]
 800ac80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad4c <_svfiprintf_r+0x1fc>
 800ac84:	7821      	ldrb	r1, [r4, #0]
 800ac86:	2203      	movs	r2, #3
 800ac88:	4650      	mov	r0, sl
 800ac8a:	f7f5 faa9 	bl	80001e0 <memchr>
 800ac8e:	b140      	cbz	r0, 800aca2 <_svfiprintf_r+0x152>
 800ac90:	2340      	movs	r3, #64	; 0x40
 800ac92:	eba0 000a 	sub.w	r0, r0, sl
 800ac96:	fa03 f000 	lsl.w	r0, r3, r0
 800ac9a:	9b04      	ldr	r3, [sp, #16]
 800ac9c:	4303      	orrs	r3, r0
 800ac9e:	3401      	adds	r4, #1
 800aca0:	9304      	str	r3, [sp, #16]
 800aca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca6:	4826      	ldr	r0, [pc, #152]	; (800ad40 <_svfiprintf_r+0x1f0>)
 800aca8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acac:	2206      	movs	r2, #6
 800acae:	f7f5 fa97 	bl	80001e0 <memchr>
 800acb2:	2800      	cmp	r0, #0
 800acb4:	d038      	beq.n	800ad28 <_svfiprintf_r+0x1d8>
 800acb6:	4b23      	ldr	r3, [pc, #140]	; (800ad44 <_svfiprintf_r+0x1f4>)
 800acb8:	bb1b      	cbnz	r3, 800ad02 <_svfiprintf_r+0x1b2>
 800acba:	9b03      	ldr	r3, [sp, #12]
 800acbc:	3307      	adds	r3, #7
 800acbe:	f023 0307 	bic.w	r3, r3, #7
 800acc2:	3308      	adds	r3, #8
 800acc4:	9303      	str	r3, [sp, #12]
 800acc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc8:	4433      	add	r3, r6
 800acca:	9309      	str	r3, [sp, #36]	; 0x24
 800accc:	e767      	b.n	800ab9e <_svfiprintf_r+0x4e>
 800acce:	fb0c 3202 	mla	r2, ip, r2, r3
 800acd2:	460c      	mov	r4, r1
 800acd4:	2001      	movs	r0, #1
 800acd6:	e7a5      	b.n	800ac24 <_svfiprintf_r+0xd4>
 800acd8:	2300      	movs	r3, #0
 800acda:	3401      	adds	r4, #1
 800acdc:	9305      	str	r3, [sp, #20]
 800acde:	4619      	mov	r1, r3
 800ace0:	f04f 0c0a 	mov.w	ip, #10
 800ace4:	4620      	mov	r0, r4
 800ace6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acea:	3a30      	subs	r2, #48	; 0x30
 800acec:	2a09      	cmp	r2, #9
 800acee:	d903      	bls.n	800acf8 <_svfiprintf_r+0x1a8>
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d0c5      	beq.n	800ac80 <_svfiprintf_r+0x130>
 800acf4:	9105      	str	r1, [sp, #20]
 800acf6:	e7c3      	b.n	800ac80 <_svfiprintf_r+0x130>
 800acf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800acfc:	4604      	mov	r4, r0
 800acfe:	2301      	movs	r3, #1
 800ad00:	e7f0      	b.n	800ace4 <_svfiprintf_r+0x194>
 800ad02:	ab03      	add	r3, sp, #12
 800ad04:	9300      	str	r3, [sp, #0]
 800ad06:	462a      	mov	r2, r5
 800ad08:	4b0f      	ldr	r3, [pc, #60]	; (800ad48 <_svfiprintf_r+0x1f8>)
 800ad0a:	a904      	add	r1, sp, #16
 800ad0c:	4638      	mov	r0, r7
 800ad0e:	f7fc f999 	bl	8007044 <_printf_float>
 800ad12:	1c42      	adds	r2, r0, #1
 800ad14:	4606      	mov	r6, r0
 800ad16:	d1d6      	bne.n	800acc6 <_svfiprintf_r+0x176>
 800ad18:	89ab      	ldrh	r3, [r5, #12]
 800ad1a:	065b      	lsls	r3, r3, #25
 800ad1c:	f53f af2c 	bmi.w	800ab78 <_svfiprintf_r+0x28>
 800ad20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad22:	b01d      	add	sp, #116	; 0x74
 800ad24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad28:	ab03      	add	r3, sp, #12
 800ad2a:	9300      	str	r3, [sp, #0]
 800ad2c:	462a      	mov	r2, r5
 800ad2e:	4b06      	ldr	r3, [pc, #24]	; (800ad48 <_svfiprintf_r+0x1f8>)
 800ad30:	a904      	add	r1, sp, #16
 800ad32:	4638      	mov	r0, r7
 800ad34:	f7fc fc2a 	bl	800758c <_printf_i>
 800ad38:	e7eb      	b.n	800ad12 <_svfiprintf_r+0x1c2>
 800ad3a:	bf00      	nop
 800ad3c:	0800d574 	.word	0x0800d574
 800ad40:	0800d57e 	.word	0x0800d57e
 800ad44:	08007045 	.word	0x08007045
 800ad48:	0800aa99 	.word	0x0800aa99
 800ad4c:	0800d57a 	.word	0x0800d57a

0800ad50 <__sfputc_r>:
 800ad50:	6893      	ldr	r3, [r2, #8]
 800ad52:	3b01      	subs	r3, #1
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	b410      	push	{r4}
 800ad58:	6093      	str	r3, [r2, #8]
 800ad5a:	da08      	bge.n	800ad6e <__sfputc_r+0x1e>
 800ad5c:	6994      	ldr	r4, [r2, #24]
 800ad5e:	42a3      	cmp	r3, r4
 800ad60:	db01      	blt.n	800ad66 <__sfputc_r+0x16>
 800ad62:	290a      	cmp	r1, #10
 800ad64:	d103      	bne.n	800ad6e <__sfputc_r+0x1e>
 800ad66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad6a:	f000 b989 	b.w	800b080 <__swbuf_r>
 800ad6e:	6813      	ldr	r3, [r2, #0]
 800ad70:	1c58      	adds	r0, r3, #1
 800ad72:	6010      	str	r0, [r2, #0]
 800ad74:	7019      	strb	r1, [r3, #0]
 800ad76:	4608      	mov	r0, r1
 800ad78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <__sfputs_r>:
 800ad7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad80:	4606      	mov	r6, r0
 800ad82:	460f      	mov	r7, r1
 800ad84:	4614      	mov	r4, r2
 800ad86:	18d5      	adds	r5, r2, r3
 800ad88:	42ac      	cmp	r4, r5
 800ad8a:	d101      	bne.n	800ad90 <__sfputs_r+0x12>
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	e007      	b.n	800ada0 <__sfputs_r+0x22>
 800ad90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad94:	463a      	mov	r2, r7
 800ad96:	4630      	mov	r0, r6
 800ad98:	f7ff ffda 	bl	800ad50 <__sfputc_r>
 800ad9c:	1c43      	adds	r3, r0, #1
 800ad9e:	d1f3      	bne.n	800ad88 <__sfputs_r+0xa>
 800ada0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ada4 <_vfiprintf_r>:
 800ada4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada8:	460d      	mov	r5, r1
 800adaa:	b09d      	sub	sp, #116	; 0x74
 800adac:	4614      	mov	r4, r2
 800adae:	4698      	mov	r8, r3
 800adb0:	4606      	mov	r6, r0
 800adb2:	b118      	cbz	r0, 800adbc <_vfiprintf_r+0x18>
 800adb4:	6983      	ldr	r3, [r0, #24]
 800adb6:	b90b      	cbnz	r3, 800adbc <_vfiprintf_r+0x18>
 800adb8:	f000 fb52 	bl	800b460 <__sinit>
 800adbc:	4b89      	ldr	r3, [pc, #548]	; (800afe4 <_vfiprintf_r+0x240>)
 800adbe:	429d      	cmp	r5, r3
 800adc0:	d11b      	bne.n	800adfa <_vfiprintf_r+0x56>
 800adc2:	6875      	ldr	r5, [r6, #4]
 800adc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adc6:	07d9      	lsls	r1, r3, #31
 800adc8:	d405      	bmi.n	800add6 <_vfiprintf_r+0x32>
 800adca:	89ab      	ldrh	r3, [r5, #12]
 800adcc:	059a      	lsls	r2, r3, #22
 800adce:	d402      	bmi.n	800add6 <_vfiprintf_r+0x32>
 800add0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800add2:	f000 fbe3 	bl	800b59c <__retarget_lock_acquire_recursive>
 800add6:	89ab      	ldrh	r3, [r5, #12]
 800add8:	071b      	lsls	r3, r3, #28
 800adda:	d501      	bpl.n	800ade0 <_vfiprintf_r+0x3c>
 800addc:	692b      	ldr	r3, [r5, #16]
 800adde:	b9eb      	cbnz	r3, 800ae1c <_vfiprintf_r+0x78>
 800ade0:	4629      	mov	r1, r5
 800ade2:	4630      	mov	r0, r6
 800ade4:	f000 f9ac 	bl	800b140 <__swsetup_r>
 800ade8:	b1c0      	cbz	r0, 800ae1c <_vfiprintf_r+0x78>
 800adea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adec:	07dc      	lsls	r4, r3, #31
 800adee:	d50e      	bpl.n	800ae0e <_vfiprintf_r+0x6a>
 800adf0:	f04f 30ff 	mov.w	r0, #4294967295
 800adf4:	b01d      	add	sp, #116	; 0x74
 800adf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adfa:	4b7b      	ldr	r3, [pc, #492]	; (800afe8 <_vfiprintf_r+0x244>)
 800adfc:	429d      	cmp	r5, r3
 800adfe:	d101      	bne.n	800ae04 <_vfiprintf_r+0x60>
 800ae00:	68b5      	ldr	r5, [r6, #8]
 800ae02:	e7df      	b.n	800adc4 <_vfiprintf_r+0x20>
 800ae04:	4b79      	ldr	r3, [pc, #484]	; (800afec <_vfiprintf_r+0x248>)
 800ae06:	429d      	cmp	r5, r3
 800ae08:	bf08      	it	eq
 800ae0a:	68f5      	ldreq	r5, [r6, #12]
 800ae0c:	e7da      	b.n	800adc4 <_vfiprintf_r+0x20>
 800ae0e:	89ab      	ldrh	r3, [r5, #12]
 800ae10:	0598      	lsls	r0, r3, #22
 800ae12:	d4ed      	bmi.n	800adf0 <_vfiprintf_r+0x4c>
 800ae14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae16:	f000 fbc2 	bl	800b59e <__retarget_lock_release_recursive>
 800ae1a:	e7e9      	b.n	800adf0 <_vfiprintf_r+0x4c>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae20:	2320      	movs	r3, #32
 800ae22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae26:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae2a:	2330      	movs	r3, #48	; 0x30
 800ae2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aff0 <_vfiprintf_r+0x24c>
 800ae30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae34:	f04f 0901 	mov.w	r9, #1
 800ae38:	4623      	mov	r3, r4
 800ae3a:	469a      	mov	sl, r3
 800ae3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae40:	b10a      	cbz	r2, 800ae46 <_vfiprintf_r+0xa2>
 800ae42:	2a25      	cmp	r2, #37	; 0x25
 800ae44:	d1f9      	bne.n	800ae3a <_vfiprintf_r+0x96>
 800ae46:	ebba 0b04 	subs.w	fp, sl, r4
 800ae4a:	d00b      	beq.n	800ae64 <_vfiprintf_r+0xc0>
 800ae4c:	465b      	mov	r3, fp
 800ae4e:	4622      	mov	r2, r4
 800ae50:	4629      	mov	r1, r5
 800ae52:	4630      	mov	r0, r6
 800ae54:	f7ff ff93 	bl	800ad7e <__sfputs_r>
 800ae58:	3001      	adds	r0, #1
 800ae5a:	f000 80aa 	beq.w	800afb2 <_vfiprintf_r+0x20e>
 800ae5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae60:	445a      	add	r2, fp
 800ae62:	9209      	str	r2, [sp, #36]	; 0x24
 800ae64:	f89a 3000 	ldrb.w	r3, [sl]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f000 80a2 	beq.w	800afb2 <_vfiprintf_r+0x20e>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	f04f 32ff 	mov.w	r2, #4294967295
 800ae74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae78:	f10a 0a01 	add.w	sl, sl, #1
 800ae7c:	9304      	str	r3, [sp, #16]
 800ae7e:	9307      	str	r3, [sp, #28]
 800ae80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae84:	931a      	str	r3, [sp, #104]	; 0x68
 800ae86:	4654      	mov	r4, sl
 800ae88:	2205      	movs	r2, #5
 800ae8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae8e:	4858      	ldr	r0, [pc, #352]	; (800aff0 <_vfiprintf_r+0x24c>)
 800ae90:	f7f5 f9a6 	bl	80001e0 <memchr>
 800ae94:	9a04      	ldr	r2, [sp, #16]
 800ae96:	b9d8      	cbnz	r0, 800aed0 <_vfiprintf_r+0x12c>
 800ae98:	06d1      	lsls	r1, r2, #27
 800ae9a:	bf44      	itt	mi
 800ae9c:	2320      	movmi	r3, #32
 800ae9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aea2:	0713      	lsls	r3, r2, #28
 800aea4:	bf44      	itt	mi
 800aea6:	232b      	movmi	r3, #43	; 0x2b
 800aea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeac:	f89a 3000 	ldrb.w	r3, [sl]
 800aeb0:	2b2a      	cmp	r3, #42	; 0x2a
 800aeb2:	d015      	beq.n	800aee0 <_vfiprintf_r+0x13c>
 800aeb4:	9a07      	ldr	r2, [sp, #28]
 800aeb6:	4654      	mov	r4, sl
 800aeb8:	2000      	movs	r0, #0
 800aeba:	f04f 0c0a 	mov.w	ip, #10
 800aebe:	4621      	mov	r1, r4
 800aec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aec4:	3b30      	subs	r3, #48	; 0x30
 800aec6:	2b09      	cmp	r3, #9
 800aec8:	d94e      	bls.n	800af68 <_vfiprintf_r+0x1c4>
 800aeca:	b1b0      	cbz	r0, 800aefa <_vfiprintf_r+0x156>
 800aecc:	9207      	str	r2, [sp, #28]
 800aece:	e014      	b.n	800aefa <_vfiprintf_r+0x156>
 800aed0:	eba0 0308 	sub.w	r3, r0, r8
 800aed4:	fa09 f303 	lsl.w	r3, r9, r3
 800aed8:	4313      	orrs	r3, r2
 800aeda:	9304      	str	r3, [sp, #16]
 800aedc:	46a2      	mov	sl, r4
 800aede:	e7d2      	b.n	800ae86 <_vfiprintf_r+0xe2>
 800aee0:	9b03      	ldr	r3, [sp, #12]
 800aee2:	1d19      	adds	r1, r3, #4
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	9103      	str	r1, [sp, #12]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	bfbb      	ittet	lt
 800aeec:	425b      	neglt	r3, r3
 800aeee:	f042 0202 	orrlt.w	r2, r2, #2
 800aef2:	9307      	strge	r3, [sp, #28]
 800aef4:	9307      	strlt	r3, [sp, #28]
 800aef6:	bfb8      	it	lt
 800aef8:	9204      	strlt	r2, [sp, #16]
 800aefa:	7823      	ldrb	r3, [r4, #0]
 800aefc:	2b2e      	cmp	r3, #46	; 0x2e
 800aefe:	d10c      	bne.n	800af1a <_vfiprintf_r+0x176>
 800af00:	7863      	ldrb	r3, [r4, #1]
 800af02:	2b2a      	cmp	r3, #42	; 0x2a
 800af04:	d135      	bne.n	800af72 <_vfiprintf_r+0x1ce>
 800af06:	9b03      	ldr	r3, [sp, #12]
 800af08:	1d1a      	adds	r2, r3, #4
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	9203      	str	r2, [sp, #12]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	bfb8      	it	lt
 800af12:	f04f 33ff 	movlt.w	r3, #4294967295
 800af16:	3402      	adds	r4, #2
 800af18:	9305      	str	r3, [sp, #20]
 800af1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b000 <_vfiprintf_r+0x25c>
 800af1e:	7821      	ldrb	r1, [r4, #0]
 800af20:	2203      	movs	r2, #3
 800af22:	4650      	mov	r0, sl
 800af24:	f7f5 f95c 	bl	80001e0 <memchr>
 800af28:	b140      	cbz	r0, 800af3c <_vfiprintf_r+0x198>
 800af2a:	2340      	movs	r3, #64	; 0x40
 800af2c:	eba0 000a 	sub.w	r0, r0, sl
 800af30:	fa03 f000 	lsl.w	r0, r3, r0
 800af34:	9b04      	ldr	r3, [sp, #16]
 800af36:	4303      	orrs	r3, r0
 800af38:	3401      	adds	r4, #1
 800af3a:	9304      	str	r3, [sp, #16]
 800af3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af40:	482c      	ldr	r0, [pc, #176]	; (800aff4 <_vfiprintf_r+0x250>)
 800af42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af46:	2206      	movs	r2, #6
 800af48:	f7f5 f94a 	bl	80001e0 <memchr>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d03f      	beq.n	800afd0 <_vfiprintf_r+0x22c>
 800af50:	4b29      	ldr	r3, [pc, #164]	; (800aff8 <_vfiprintf_r+0x254>)
 800af52:	bb1b      	cbnz	r3, 800af9c <_vfiprintf_r+0x1f8>
 800af54:	9b03      	ldr	r3, [sp, #12]
 800af56:	3307      	adds	r3, #7
 800af58:	f023 0307 	bic.w	r3, r3, #7
 800af5c:	3308      	adds	r3, #8
 800af5e:	9303      	str	r3, [sp, #12]
 800af60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af62:	443b      	add	r3, r7
 800af64:	9309      	str	r3, [sp, #36]	; 0x24
 800af66:	e767      	b.n	800ae38 <_vfiprintf_r+0x94>
 800af68:	fb0c 3202 	mla	r2, ip, r2, r3
 800af6c:	460c      	mov	r4, r1
 800af6e:	2001      	movs	r0, #1
 800af70:	e7a5      	b.n	800aebe <_vfiprintf_r+0x11a>
 800af72:	2300      	movs	r3, #0
 800af74:	3401      	adds	r4, #1
 800af76:	9305      	str	r3, [sp, #20]
 800af78:	4619      	mov	r1, r3
 800af7a:	f04f 0c0a 	mov.w	ip, #10
 800af7e:	4620      	mov	r0, r4
 800af80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af84:	3a30      	subs	r2, #48	; 0x30
 800af86:	2a09      	cmp	r2, #9
 800af88:	d903      	bls.n	800af92 <_vfiprintf_r+0x1ee>
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d0c5      	beq.n	800af1a <_vfiprintf_r+0x176>
 800af8e:	9105      	str	r1, [sp, #20]
 800af90:	e7c3      	b.n	800af1a <_vfiprintf_r+0x176>
 800af92:	fb0c 2101 	mla	r1, ip, r1, r2
 800af96:	4604      	mov	r4, r0
 800af98:	2301      	movs	r3, #1
 800af9a:	e7f0      	b.n	800af7e <_vfiprintf_r+0x1da>
 800af9c:	ab03      	add	r3, sp, #12
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	462a      	mov	r2, r5
 800afa2:	4b16      	ldr	r3, [pc, #88]	; (800affc <_vfiprintf_r+0x258>)
 800afa4:	a904      	add	r1, sp, #16
 800afa6:	4630      	mov	r0, r6
 800afa8:	f7fc f84c 	bl	8007044 <_printf_float>
 800afac:	4607      	mov	r7, r0
 800afae:	1c78      	adds	r0, r7, #1
 800afb0:	d1d6      	bne.n	800af60 <_vfiprintf_r+0x1bc>
 800afb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afb4:	07d9      	lsls	r1, r3, #31
 800afb6:	d405      	bmi.n	800afc4 <_vfiprintf_r+0x220>
 800afb8:	89ab      	ldrh	r3, [r5, #12]
 800afba:	059a      	lsls	r2, r3, #22
 800afbc:	d402      	bmi.n	800afc4 <_vfiprintf_r+0x220>
 800afbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afc0:	f000 faed 	bl	800b59e <__retarget_lock_release_recursive>
 800afc4:	89ab      	ldrh	r3, [r5, #12]
 800afc6:	065b      	lsls	r3, r3, #25
 800afc8:	f53f af12 	bmi.w	800adf0 <_vfiprintf_r+0x4c>
 800afcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afce:	e711      	b.n	800adf4 <_vfiprintf_r+0x50>
 800afd0:	ab03      	add	r3, sp, #12
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	462a      	mov	r2, r5
 800afd6:	4b09      	ldr	r3, [pc, #36]	; (800affc <_vfiprintf_r+0x258>)
 800afd8:	a904      	add	r1, sp, #16
 800afda:	4630      	mov	r0, r6
 800afdc:	f7fc fad6 	bl	800758c <_printf_i>
 800afe0:	e7e4      	b.n	800afac <_vfiprintf_r+0x208>
 800afe2:	bf00      	nop
 800afe4:	0800d5a8 	.word	0x0800d5a8
 800afe8:	0800d5c8 	.word	0x0800d5c8
 800afec:	0800d588 	.word	0x0800d588
 800aff0:	0800d574 	.word	0x0800d574
 800aff4:	0800d57e 	.word	0x0800d57e
 800aff8:	08007045 	.word	0x08007045
 800affc:	0800ad7f 	.word	0x0800ad7f
 800b000:	0800d57a 	.word	0x0800d57a

0800b004 <_read_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	4d07      	ldr	r5, [pc, #28]	; (800b024 <_read_r+0x20>)
 800b008:	4604      	mov	r4, r0
 800b00a:	4608      	mov	r0, r1
 800b00c:	4611      	mov	r1, r2
 800b00e:	2200      	movs	r2, #0
 800b010:	602a      	str	r2, [r5, #0]
 800b012:	461a      	mov	r2, r3
 800b014:	f7f7 fbe0 	bl	80027d8 <_read>
 800b018:	1c43      	adds	r3, r0, #1
 800b01a:	d102      	bne.n	800b022 <_read_r+0x1e>
 800b01c:	682b      	ldr	r3, [r5, #0]
 800b01e:	b103      	cbz	r3, 800b022 <_read_r+0x1e>
 800b020:	6023      	str	r3, [r4, #0]
 800b022:	bd38      	pop	{r3, r4, r5, pc}
 800b024:	20000a58 	.word	0x20000a58

0800b028 <nan>:
 800b028:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b030 <nan+0x8>
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	00000000 	.word	0x00000000
 800b034:	7ff80000 	.word	0x7ff80000

0800b038 <_sbrk_r>:
 800b038:	b538      	push	{r3, r4, r5, lr}
 800b03a:	4d06      	ldr	r5, [pc, #24]	; (800b054 <_sbrk_r+0x1c>)
 800b03c:	2300      	movs	r3, #0
 800b03e:	4604      	mov	r4, r0
 800b040:	4608      	mov	r0, r1
 800b042:	602b      	str	r3, [r5, #0]
 800b044:	f7f7 fc36 	bl	80028b4 <_sbrk>
 800b048:	1c43      	adds	r3, r0, #1
 800b04a:	d102      	bne.n	800b052 <_sbrk_r+0x1a>
 800b04c:	682b      	ldr	r3, [r5, #0]
 800b04e:	b103      	cbz	r3, 800b052 <_sbrk_r+0x1a>
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	bd38      	pop	{r3, r4, r5, pc}
 800b054:	20000a58 	.word	0x20000a58

0800b058 <strncmp>:
 800b058:	b510      	push	{r4, lr}
 800b05a:	b17a      	cbz	r2, 800b07c <strncmp+0x24>
 800b05c:	4603      	mov	r3, r0
 800b05e:	3901      	subs	r1, #1
 800b060:	1884      	adds	r4, r0, r2
 800b062:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b066:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b06a:	4290      	cmp	r0, r2
 800b06c:	d101      	bne.n	800b072 <strncmp+0x1a>
 800b06e:	42a3      	cmp	r3, r4
 800b070:	d101      	bne.n	800b076 <strncmp+0x1e>
 800b072:	1a80      	subs	r0, r0, r2
 800b074:	bd10      	pop	{r4, pc}
 800b076:	2800      	cmp	r0, #0
 800b078:	d1f3      	bne.n	800b062 <strncmp+0xa>
 800b07a:	e7fa      	b.n	800b072 <strncmp+0x1a>
 800b07c:	4610      	mov	r0, r2
 800b07e:	e7f9      	b.n	800b074 <strncmp+0x1c>

0800b080 <__swbuf_r>:
 800b080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b082:	460e      	mov	r6, r1
 800b084:	4614      	mov	r4, r2
 800b086:	4605      	mov	r5, r0
 800b088:	b118      	cbz	r0, 800b092 <__swbuf_r+0x12>
 800b08a:	6983      	ldr	r3, [r0, #24]
 800b08c:	b90b      	cbnz	r3, 800b092 <__swbuf_r+0x12>
 800b08e:	f000 f9e7 	bl	800b460 <__sinit>
 800b092:	4b21      	ldr	r3, [pc, #132]	; (800b118 <__swbuf_r+0x98>)
 800b094:	429c      	cmp	r4, r3
 800b096:	d12b      	bne.n	800b0f0 <__swbuf_r+0x70>
 800b098:	686c      	ldr	r4, [r5, #4]
 800b09a:	69a3      	ldr	r3, [r4, #24]
 800b09c:	60a3      	str	r3, [r4, #8]
 800b09e:	89a3      	ldrh	r3, [r4, #12]
 800b0a0:	071a      	lsls	r2, r3, #28
 800b0a2:	d52f      	bpl.n	800b104 <__swbuf_r+0x84>
 800b0a4:	6923      	ldr	r3, [r4, #16]
 800b0a6:	b36b      	cbz	r3, 800b104 <__swbuf_r+0x84>
 800b0a8:	6923      	ldr	r3, [r4, #16]
 800b0aa:	6820      	ldr	r0, [r4, #0]
 800b0ac:	1ac0      	subs	r0, r0, r3
 800b0ae:	6963      	ldr	r3, [r4, #20]
 800b0b0:	b2f6      	uxtb	r6, r6
 800b0b2:	4283      	cmp	r3, r0
 800b0b4:	4637      	mov	r7, r6
 800b0b6:	dc04      	bgt.n	800b0c2 <__swbuf_r+0x42>
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	f000 f93c 	bl	800b338 <_fflush_r>
 800b0c0:	bb30      	cbnz	r0, 800b110 <__swbuf_r+0x90>
 800b0c2:	68a3      	ldr	r3, [r4, #8]
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	60a3      	str	r3, [r4, #8]
 800b0c8:	6823      	ldr	r3, [r4, #0]
 800b0ca:	1c5a      	adds	r2, r3, #1
 800b0cc:	6022      	str	r2, [r4, #0]
 800b0ce:	701e      	strb	r6, [r3, #0]
 800b0d0:	6963      	ldr	r3, [r4, #20]
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	4283      	cmp	r3, r0
 800b0d6:	d004      	beq.n	800b0e2 <__swbuf_r+0x62>
 800b0d8:	89a3      	ldrh	r3, [r4, #12]
 800b0da:	07db      	lsls	r3, r3, #31
 800b0dc:	d506      	bpl.n	800b0ec <__swbuf_r+0x6c>
 800b0de:	2e0a      	cmp	r6, #10
 800b0e0:	d104      	bne.n	800b0ec <__swbuf_r+0x6c>
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	f000 f927 	bl	800b338 <_fflush_r>
 800b0ea:	b988      	cbnz	r0, 800b110 <__swbuf_r+0x90>
 800b0ec:	4638      	mov	r0, r7
 800b0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0f0:	4b0a      	ldr	r3, [pc, #40]	; (800b11c <__swbuf_r+0x9c>)
 800b0f2:	429c      	cmp	r4, r3
 800b0f4:	d101      	bne.n	800b0fa <__swbuf_r+0x7a>
 800b0f6:	68ac      	ldr	r4, [r5, #8]
 800b0f8:	e7cf      	b.n	800b09a <__swbuf_r+0x1a>
 800b0fa:	4b09      	ldr	r3, [pc, #36]	; (800b120 <__swbuf_r+0xa0>)
 800b0fc:	429c      	cmp	r4, r3
 800b0fe:	bf08      	it	eq
 800b100:	68ec      	ldreq	r4, [r5, #12]
 800b102:	e7ca      	b.n	800b09a <__swbuf_r+0x1a>
 800b104:	4621      	mov	r1, r4
 800b106:	4628      	mov	r0, r5
 800b108:	f000 f81a 	bl	800b140 <__swsetup_r>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	d0cb      	beq.n	800b0a8 <__swbuf_r+0x28>
 800b110:	f04f 37ff 	mov.w	r7, #4294967295
 800b114:	e7ea      	b.n	800b0ec <__swbuf_r+0x6c>
 800b116:	bf00      	nop
 800b118:	0800d5a8 	.word	0x0800d5a8
 800b11c:	0800d5c8 	.word	0x0800d5c8
 800b120:	0800d588 	.word	0x0800d588

0800b124 <__ascii_wctomb>:
 800b124:	b149      	cbz	r1, 800b13a <__ascii_wctomb+0x16>
 800b126:	2aff      	cmp	r2, #255	; 0xff
 800b128:	bf85      	ittet	hi
 800b12a:	238a      	movhi	r3, #138	; 0x8a
 800b12c:	6003      	strhi	r3, [r0, #0]
 800b12e:	700a      	strbls	r2, [r1, #0]
 800b130:	f04f 30ff 	movhi.w	r0, #4294967295
 800b134:	bf98      	it	ls
 800b136:	2001      	movls	r0, #1
 800b138:	4770      	bx	lr
 800b13a:	4608      	mov	r0, r1
 800b13c:	4770      	bx	lr
	...

0800b140 <__swsetup_r>:
 800b140:	4b32      	ldr	r3, [pc, #200]	; (800b20c <__swsetup_r+0xcc>)
 800b142:	b570      	push	{r4, r5, r6, lr}
 800b144:	681d      	ldr	r5, [r3, #0]
 800b146:	4606      	mov	r6, r0
 800b148:	460c      	mov	r4, r1
 800b14a:	b125      	cbz	r5, 800b156 <__swsetup_r+0x16>
 800b14c:	69ab      	ldr	r3, [r5, #24]
 800b14e:	b913      	cbnz	r3, 800b156 <__swsetup_r+0x16>
 800b150:	4628      	mov	r0, r5
 800b152:	f000 f985 	bl	800b460 <__sinit>
 800b156:	4b2e      	ldr	r3, [pc, #184]	; (800b210 <__swsetup_r+0xd0>)
 800b158:	429c      	cmp	r4, r3
 800b15a:	d10f      	bne.n	800b17c <__swsetup_r+0x3c>
 800b15c:	686c      	ldr	r4, [r5, #4]
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b164:	0719      	lsls	r1, r3, #28
 800b166:	d42c      	bmi.n	800b1c2 <__swsetup_r+0x82>
 800b168:	06dd      	lsls	r5, r3, #27
 800b16a:	d411      	bmi.n	800b190 <__swsetup_r+0x50>
 800b16c:	2309      	movs	r3, #9
 800b16e:	6033      	str	r3, [r6, #0]
 800b170:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b174:	81a3      	strh	r3, [r4, #12]
 800b176:	f04f 30ff 	mov.w	r0, #4294967295
 800b17a:	e03e      	b.n	800b1fa <__swsetup_r+0xba>
 800b17c:	4b25      	ldr	r3, [pc, #148]	; (800b214 <__swsetup_r+0xd4>)
 800b17e:	429c      	cmp	r4, r3
 800b180:	d101      	bne.n	800b186 <__swsetup_r+0x46>
 800b182:	68ac      	ldr	r4, [r5, #8]
 800b184:	e7eb      	b.n	800b15e <__swsetup_r+0x1e>
 800b186:	4b24      	ldr	r3, [pc, #144]	; (800b218 <__swsetup_r+0xd8>)
 800b188:	429c      	cmp	r4, r3
 800b18a:	bf08      	it	eq
 800b18c:	68ec      	ldreq	r4, [r5, #12]
 800b18e:	e7e6      	b.n	800b15e <__swsetup_r+0x1e>
 800b190:	0758      	lsls	r0, r3, #29
 800b192:	d512      	bpl.n	800b1ba <__swsetup_r+0x7a>
 800b194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b196:	b141      	cbz	r1, 800b1aa <__swsetup_r+0x6a>
 800b198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b19c:	4299      	cmp	r1, r3
 800b19e:	d002      	beq.n	800b1a6 <__swsetup_r+0x66>
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	f7ff fb99 	bl	800a8d8 <_free_r>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	6363      	str	r3, [r4, #52]	; 0x34
 800b1aa:	89a3      	ldrh	r3, [r4, #12]
 800b1ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b1b0:	81a3      	strh	r3, [r4, #12]
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	6063      	str	r3, [r4, #4]
 800b1b6:	6923      	ldr	r3, [r4, #16]
 800b1b8:	6023      	str	r3, [r4, #0]
 800b1ba:	89a3      	ldrh	r3, [r4, #12]
 800b1bc:	f043 0308 	orr.w	r3, r3, #8
 800b1c0:	81a3      	strh	r3, [r4, #12]
 800b1c2:	6923      	ldr	r3, [r4, #16]
 800b1c4:	b94b      	cbnz	r3, 800b1da <__swsetup_r+0x9a>
 800b1c6:	89a3      	ldrh	r3, [r4, #12]
 800b1c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b1cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1d0:	d003      	beq.n	800b1da <__swsetup_r+0x9a>
 800b1d2:	4621      	mov	r1, r4
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	f000 fa09 	bl	800b5ec <__smakebuf_r>
 800b1da:	89a0      	ldrh	r0, [r4, #12]
 800b1dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1e0:	f010 0301 	ands.w	r3, r0, #1
 800b1e4:	d00a      	beq.n	800b1fc <__swsetup_r+0xbc>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	60a3      	str	r3, [r4, #8]
 800b1ea:	6963      	ldr	r3, [r4, #20]
 800b1ec:	425b      	negs	r3, r3
 800b1ee:	61a3      	str	r3, [r4, #24]
 800b1f0:	6923      	ldr	r3, [r4, #16]
 800b1f2:	b943      	cbnz	r3, 800b206 <__swsetup_r+0xc6>
 800b1f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b1f8:	d1ba      	bne.n	800b170 <__swsetup_r+0x30>
 800b1fa:	bd70      	pop	{r4, r5, r6, pc}
 800b1fc:	0781      	lsls	r1, r0, #30
 800b1fe:	bf58      	it	pl
 800b200:	6963      	ldrpl	r3, [r4, #20]
 800b202:	60a3      	str	r3, [r4, #8]
 800b204:	e7f4      	b.n	800b1f0 <__swsetup_r+0xb0>
 800b206:	2000      	movs	r0, #0
 800b208:	e7f7      	b.n	800b1fa <__swsetup_r+0xba>
 800b20a:	bf00      	nop
 800b20c:	2000009c 	.word	0x2000009c
 800b210:	0800d5a8 	.word	0x0800d5a8
 800b214:	0800d5c8 	.word	0x0800d5c8
 800b218:	0800d588 	.word	0x0800d588

0800b21c <abort>:
 800b21c:	b508      	push	{r3, lr}
 800b21e:	2006      	movs	r0, #6
 800b220:	f000 faa2 	bl	800b768 <raise>
 800b224:	2001      	movs	r0, #1
 800b226:	f7f7 facd 	bl	80027c4 <_exit>
	...

0800b22c <__sflush_r>:
 800b22c:	898a      	ldrh	r2, [r1, #12]
 800b22e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b232:	4605      	mov	r5, r0
 800b234:	0710      	lsls	r0, r2, #28
 800b236:	460c      	mov	r4, r1
 800b238:	d458      	bmi.n	800b2ec <__sflush_r+0xc0>
 800b23a:	684b      	ldr	r3, [r1, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	dc05      	bgt.n	800b24c <__sflush_r+0x20>
 800b240:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b242:	2b00      	cmp	r3, #0
 800b244:	dc02      	bgt.n	800b24c <__sflush_r+0x20>
 800b246:	2000      	movs	r0, #0
 800b248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b24c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b24e:	2e00      	cmp	r6, #0
 800b250:	d0f9      	beq.n	800b246 <__sflush_r+0x1a>
 800b252:	2300      	movs	r3, #0
 800b254:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b258:	682f      	ldr	r7, [r5, #0]
 800b25a:	602b      	str	r3, [r5, #0]
 800b25c:	d032      	beq.n	800b2c4 <__sflush_r+0x98>
 800b25e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b260:	89a3      	ldrh	r3, [r4, #12]
 800b262:	075a      	lsls	r2, r3, #29
 800b264:	d505      	bpl.n	800b272 <__sflush_r+0x46>
 800b266:	6863      	ldr	r3, [r4, #4]
 800b268:	1ac0      	subs	r0, r0, r3
 800b26a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b26c:	b10b      	cbz	r3, 800b272 <__sflush_r+0x46>
 800b26e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b270:	1ac0      	subs	r0, r0, r3
 800b272:	2300      	movs	r3, #0
 800b274:	4602      	mov	r2, r0
 800b276:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b278:	6a21      	ldr	r1, [r4, #32]
 800b27a:	4628      	mov	r0, r5
 800b27c:	47b0      	blx	r6
 800b27e:	1c43      	adds	r3, r0, #1
 800b280:	89a3      	ldrh	r3, [r4, #12]
 800b282:	d106      	bne.n	800b292 <__sflush_r+0x66>
 800b284:	6829      	ldr	r1, [r5, #0]
 800b286:	291d      	cmp	r1, #29
 800b288:	d82c      	bhi.n	800b2e4 <__sflush_r+0xb8>
 800b28a:	4a2a      	ldr	r2, [pc, #168]	; (800b334 <__sflush_r+0x108>)
 800b28c:	40ca      	lsrs	r2, r1
 800b28e:	07d6      	lsls	r6, r2, #31
 800b290:	d528      	bpl.n	800b2e4 <__sflush_r+0xb8>
 800b292:	2200      	movs	r2, #0
 800b294:	6062      	str	r2, [r4, #4]
 800b296:	04d9      	lsls	r1, r3, #19
 800b298:	6922      	ldr	r2, [r4, #16]
 800b29a:	6022      	str	r2, [r4, #0]
 800b29c:	d504      	bpl.n	800b2a8 <__sflush_r+0x7c>
 800b29e:	1c42      	adds	r2, r0, #1
 800b2a0:	d101      	bne.n	800b2a6 <__sflush_r+0x7a>
 800b2a2:	682b      	ldr	r3, [r5, #0]
 800b2a4:	b903      	cbnz	r3, 800b2a8 <__sflush_r+0x7c>
 800b2a6:	6560      	str	r0, [r4, #84]	; 0x54
 800b2a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2aa:	602f      	str	r7, [r5, #0]
 800b2ac:	2900      	cmp	r1, #0
 800b2ae:	d0ca      	beq.n	800b246 <__sflush_r+0x1a>
 800b2b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2b4:	4299      	cmp	r1, r3
 800b2b6:	d002      	beq.n	800b2be <__sflush_r+0x92>
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	f7ff fb0d 	bl	800a8d8 <_free_r>
 800b2be:	2000      	movs	r0, #0
 800b2c0:	6360      	str	r0, [r4, #52]	; 0x34
 800b2c2:	e7c1      	b.n	800b248 <__sflush_r+0x1c>
 800b2c4:	6a21      	ldr	r1, [r4, #32]
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	47b0      	blx	r6
 800b2cc:	1c41      	adds	r1, r0, #1
 800b2ce:	d1c7      	bne.n	800b260 <__sflush_r+0x34>
 800b2d0:	682b      	ldr	r3, [r5, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d0c4      	beq.n	800b260 <__sflush_r+0x34>
 800b2d6:	2b1d      	cmp	r3, #29
 800b2d8:	d001      	beq.n	800b2de <__sflush_r+0xb2>
 800b2da:	2b16      	cmp	r3, #22
 800b2dc:	d101      	bne.n	800b2e2 <__sflush_r+0xb6>
 800b2de:	602f      	str	r7, [r5, #0]
 800b2e0:	e7b1      	b.n	800b246 <__sflush_r+0x1a>
 800b2e2:	89a3      	ldrh	r3, [r4, #12]
 800b2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2e8:	81a3      	strh	r3, [r4, #12]
 800b2ea:	e7ad      	b.n	800b248 <__sflush_r+0x1c>
 800b2ec:	690f      	ldr	r7, [r1, #16]
 800b2ee:	2f00      	cmp	r7, #0
 800b2f0:	d0a9      	beq.n	800b246 <__sflush_r+0x1a>
 800b2f2:	0793      	lsls	r3, r2, #30
 800b2f4:	680e      	ldr	r6, [r1, #0]
 800b2f6:	bf08      	it	eq
 800b2f8:	694b      	ldreq	r3, [r1, #20]
 800b2fa:	600f      	str	r7, [r1, #0]
 800b2fc:	bf18      	it	ne
 800b2fe:	2300      	movne	r3, #0
 800b300:	eba6 0807 	sub.w	r8, r6, r7
 800b304:	608b      	str	r3, [r1, #8]
 800b306:	f1b8 0f00 	cmp.w	r8, #0
 800b30a:	dd9c      	ble.n	800b246 <__sflush_r+0x1a>
 800b30c:	6a21      	ldr	r1, [r4, #32]
 800b30e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b310:	4643      	mov	r3, r8
 800b312:	463a      	mov	r2, r7
 800b314:	4628      	mov	r0, r5
 800b316:	47b0      	blx	r6
 800b318:	2800      	cmp	r0, #0
 800b31a:	dc06      	bgt.n	800b32a <__sflush_r+0xfe>
 800b31c:	89a3      	ldrh	r3, [r4, #12]
 800b31e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b322:	81a3      	strh	r3, [r4, #12]
 800b324:	f04f 30ff 	mov.w	r0, #4294967295
 800b328:	e78e      	b.n	800b248 <__sflush_r+0x1c>
 800b32a:	4407      	add	r7, r0
 800b32c:	eba8 0800 	sub.w	r8, r8, r0
 800b330:	e7e9      	b.n	800b306 <__sflush_r+0xda>
 800b332:	bf00      	nop
 800b334:	20400001 	.word	0x20400001

0800b338 <_fflush_r>:
 800b338:	b538      	push	{r3, r4, r5, lr}
 800b33a:	690b      	ldr	r3, [r1, #16]
 800b33c:	4605      	mov	r5, r0
 800b33e:	460c      	mov	r4, r1
 800b340:	b913      	cbnz	r3, 800b348 <_fflush_r+0x10>
 800b342:	2500      	movs	r5, #0
 800b344:	4628      	mov	r0, r5
 800b346:	bd38      	pop	{r3, r4, r5, pc}
 800b348:	b118      	cbz	r0, 800b352 <_fflush_r+0x1a>
 800b34a:	6983      	ldr	r3, [r0, #24]
 800b34c:	b90b      	cbnz	r3, 800b352 <_fflush_r+0x1a>
 800b34e:	f000 f887 	bl	800b460 <__sinit>
 800b352:	4b14      	ldr	r3, [pc, #80]	; (800b3a4 <_fflush_r+0x6c>)
 800b354:	429c      	cmp	r4, r3
 800b356:	d11b      	bne.n	800b390 <_fflush_r+0x58>
 800b358:	686c      	ldr	r4, [r5, #4]
 800b35a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d0ef      	beq.n	800b342 <_fflush_r+0xa>
 800b362:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b364:	07d0      	lsls	r0, r2, #31
 800b366:	d404      	bmi.n	800b372 <_fflush_r+0x3a>
 800b368:	0599      	lsls	r1, r3, #22
 800b36a:	d402      	bmi.n	800b372 <_fflush_r+0x3a>
 800b36c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b36e:	f000 f915 	bl	800b59c <__retarget_lock_acquire_recursive>
 800b372:	4628      	mov	r0, r5
 800b374:	4621      	mov	r1, r4
 800b376:	f7ff ff59 	bl	800b22c <__sflush_r>
 800b37a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b37c:	07da      	lsls	r2, r3, #31
 800b37e:	4605      	mov	r5, r0
 800b380:	d4e0      	bmi.n	800b344 <_fflush_r+0xc>
 800b382:	89a3      	ldrh	r3, [r4, #12]
 800b384:	059b      	lsls	r3, r3, #22
 800b386:	d4dd      	bmi.n	800b344 <_fflush_r+0xc>
 800b388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b38a:	f000 f908 	bl	800b59e <__retarget_lock_release_recursive>
 800b38e:	e7d9      	b.n	800b344 <_fflush_r+0xc>
 800b390:	4b05      	ldr	r3, [pc, #20]	; (800b3a8 <_fflush_r+0x70>)
 800b392:	429c      	cmp	r4, r3
 800b394:	d101      	bne.n	800b39a <_fflush_r+0x62>
 800b396:	68ac      	ldr	r4, [r5, #8]
 800b398:	e7df      	b.n	800b35a <_fflush_r+0x22>
 800b39a:	4b04      	ldr	r3, [pc, #16]	; (800b3ac <_fflush_r+0x74>)
 800b39c:	429c      	cmp	r4, r3
 800b39e:	bf08      	it	eq
 800b3a0:	68ec      	ldreq	r4, [r5, #12]
 800b3a2:	e7da      	b.n	800b35a <_fflush_r+0x22>
 800b3a4:	0800d5a8 	.word	0x0800d5a8
 800b3a8:	0800d5c8 	.word	0x0800d5c8
 800b3ac:	0800d588 	.word	0x0800d588

0800b3b0 <std>:
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	b510      	push	{r4, lr}
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	e9c0 3300 	strd	r3, r3, [r0]
 800b3ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3be:	6083      	str	r3, [r0, #8]
 800b3c0:	8181      	strh	r1, [r0, #12]
 800b3c2:	6643      	str	r3, [r0, #100]	; 0x64
 800b3c4:	81c2      	strh	r2, [r0, #14]
 800b3c6:	6183      	str	r3, [r0, #24]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	2208      	movs	r2, #8
 800b3cc:	305c      	adds	r0, #92	; 0x5c
 800b3ce:	f7fb fd91 	bl	8006ef4 <memset>
 800b3d2:	4b05      	ldr	r3, [pc, #20]	; (800b3e8 <std+0x38>)
 800b3d4:	6263      	str	r3, [r4, #36]	; 0x24
 800b3d6:	4b05      	ldr	r3, [pc, #20]	; (800b3ec <std+0x3c>)
 800b3d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3da:	4b05      	ldr	r3, [pc, #20]	; (800b3f0 <std+0x40>)
 800b3dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3de:	4b05      	ldr	r3, [pc, #20]	; (800b3f4 <std+0x44>)
 800b3e0:	6224      	str	r4, [r4, #32]
 800b3e2:	6323      	str	r3, [r4, #48]	; 0x30
 800b3e4:	bd10      	pop	{r4, pc}
 800b3e6:	bf00      	nop
 800b3e8:	08007c45 	.word	0x08007c45
 800b3ec:	08007c67 	.word	0x08007c67
 800b3f0:	08007c9f 	.word	0x08007c9f
 800b3f4:	08007cc3 	.word	0x08007cc3

0800b3f8 <_cleanup_r>:
 800b3f8:	4901      	ldr	r1, [pc, #4]	; (800b400 <_cleanup_r+0x8>)
 800b3fa:	f000 b8af 	b.w	800b55c <_fwalk_reent>
 800b3fe:	bf00      	nop
 800b400:	0800b339 	.word	0x0800b339

0800b404 <__sfmoreglue>:
 800b404:	b570      	push	{r4, r5, r6, lr}
 800b406:	2268      	movs	r2, #104	; 0x68
 800b408:	1e4d      	subs	r5, r1, #1
 800b40a:	4355      	muls	r5, r2
 800b40c:	460e      	mov	r6, r1
 800b40e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b412:	f7ff facd 	bl	800a9b0 <_malloc_r>
 800b416:	4604      	mov	r4, r0
 800b418:	b140      	cbz	r0, 800b42c <__sfmoreglue+0x28>
 800b41a:	2100      	movs	r1, #0
 800b41c:	e9c0 1600 	strd	r1, r6, [r0]
 800b420:	300c      	adds	r0, #12
 800b422:	60a0      	str	r0, [r4, #8]
 800b424:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b428:	f7fb fd64 	bl	8006ef4 <memset>
 800b42c:	4620      	mov	r0, r4
 800b42e:	bd70      	pop	{r4, r5, r6, pc}

0800b430 <__sfp_lock_acquire>:
 800b430:	4801      	ldr	r0, [pc, #4]	; (800b438 <__sfp_lock_acquire+0x8>)
 800b432:	f000 b8b3 	b.w	800b59c <__retarget_lock_acquire_recursive>
 800b436:	bf00      	nop
 800b438:	20000a5d 	.word	0x20000a5d

0800b43c <__sfp_lock_release>:
 800b43c:	4801      	ldr	r0, [pc, #4]	; (800b444 <__sfp_lock_release+0x8>)
 800b43e:	f000 b8ae 	b.w	800b59e <__retarget_lock_release_recursive>
 800b442:	bf00      	nop
 800b444:	20000a5d 	.word	0x20000a5d

0800b448 <__sinit_lock_acquire>:
 800b448:	4801      	ldr	r0, [pc, #4]	; (800b450 <__sinit_lock_acquire+0x8>)
 800b44a:	f000 b8a7 	b.w	800b59c <__retarget_lock_acquire_recursive>
 800b44e:	bf00      	nop
 800b450:	20000a5e 	.word	0x20000a5e

0800b454 <__sinit_lock_release>:
 800b454:	4801      	ldr	r0, [pc, #4]	; (800b45c <__sinit_lock_release+0x8>)
 800b456:	f000 b8a2 	b.w	800b59e <__retarget_lock_release_recursive>
 800b45a:	bf00      	nop
 800b45c:	20000a5e 	.word	0x20000a5e

0800b460 <__sinit>:
 800b460:	b510      	push	{r4, lr}
 800b462:	4604      	mov	r4, r0
 800b464:	f7ff fff0 	bl	800b448 <__sinit_lock_acquire>
 800b468:	69a3      	ldr	r3, [r4, #24]
 800b46a:	b11b      	cbz	r3, 800b474 <__sinit+0x14>
 800b46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b470:	f7ff bff0 	b.w	800b454 <__sinit_lock_release>
 800b474:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b478:	6523      	str	r3, [r4, #80]	; 0x50
 800b47a:	4b13      	ldr	r3, [pc, #76]	; (800b4c8 <__sinit+0x68>)
 800b47c:	4a13      	ldr	r2, [pc, #76]	; (800b4cc <__sinit+0x6c>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	62a2      	str	r2, [r4, #40]	; 0x28
 800b482:	42a3      	cmp	r3, r4
 800b484:	bf04      	itt	eq
 800b486:	2301      	moveq	r3, #1
 800b488:	61a3      	streq	r3, [r4, #24]
 800b48a:	4620      	mov	r0, r4
 800b48c:	f000 f820 	bl	800b4d0 <__sfp>
 800b490:	6060      	str	r0, [r4, #4]
 800b492:	4620      	mov	r0, r4
 800b494:	f000 f81c 	bl	800b4d0 <__sfp>
 800b498:	60a0      	str	r0, [r4, #8]
 800b49a:	4620      	mov	r0, r4
 800b49c:	f000 f818 	bl	800b4d0 <__sfp>
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	60e0      	str	r0, [r4, #12]
 800b4a4:	2104      	movs	r1, #4
 800b4a6:	6860      	ldr	r0, [r4, #4]
 800b4a8:	f7ff ff82 	bl	800b3b0 <std>
 800b4ac:	68a0      	ldr	r0, [r4, #8]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	2109      	movs	r1, #9
 800b4b2:	f7ff ff7d 	bl	800b3b0 <std>
 800b4b6:	68e0      	ldr	r0, [r4, #12]
 800b4b8:	2202      	movs	r2, #2
 800b4ba:	2112      	movs	r1, #18
 800b4bc:	f7ff ff78 	bl	800b3b0 <std>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	61a3      	str	r3, [r4, #24]
 800b4c4:	e7d2      	b.n	800b46c <__sinit+0xc>
 800b4c6:	bf00      	nop
 800b4c8:	0800d140 	.word	0x0800d140
 800b4cc:	0800b3f9 	.word	0x0800b3f9

0800b4d0 <__sfp>:
 800b4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d2:	4607      	mov	r7, r0
 800b4d4:	f7ff ffac 	bl	800b430 <__sfp_lock_acquire>
 800b4d8:	4b1e      	ldr	r3, [pc, #120]	; (800b554 <__sfp+0x84>)
 800b4da:	681e      	ldr	r6, [r3, #0]
 800b4dc:	69b3      	ldr	r3, [r6, #24]
 800b4de:	b913      	cbnz	r3, 800b4e6 <__sfp+0x16>
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	f7ff ffbd 	bl	800b460 <__sinit>
 800b4e6:	3648      	adds	r6, #72	; 0x48
 800b4e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	d503      	bpl.n	800b4f8 <__sfp+0x28>
 800b4f0:	6833      	ldr	r3, [r6, #0]
 800b4f2:	b30b      	cbz	r3, 800b538 <__sfp+0x68>
 800b4f4:	6836      	ldr	r6, [r6, #0]
 800b4f6:	e7f7      	b.n	800b4e8 <__sfp+0x18>
 800b4f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b4fc:	b9d5      	cbnz	r5, 800b534 <__sfp+0x64>
 800b4fe:	4b16      	ldr	r3, [pc, #88]	; (800b558 <__sfp+0x88>)
 800b500:	60e3      	str	r3, [r4, #12]
 800b502:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b506:	6665      	str	r5, [r4, #100]	; 0x64
 800b508:	f000 f847 	bl	800b59a <__retarget_lock_init_recursive>
 800b50c:	f7ff ff96 	bl	800b43c <__sfp_lock_release>
 800b510:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b514:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b518:	6025      	str	r5, [r4, #0]
 800b51a:	61a5      	str	r5, [r4, #24]
 800b51c:	2208      	movs	r2, #8
 800b51e:	4629      	mov	r1, r5
 800b520:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b524:	f7fb fce6 	bl	8006ef4 <memset>
 800b528:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b52c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b530:	4620      	mov	r0, r4
 800b532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b534:	3468      	adds	r4, #104	; 0x68
 800b536:	e7d9      	b.n	800b4ec <__sfp+0x1c>
 800b538:	2104      	movs	r1, #4
 800b53a:	4638      	mov	r0, r7
 800b53c:	f7ff ff62 	bl	800b404 <__sfmoreglue>
 800b540:	4604      	mov	r4, r0
 800b542:	6030      	str	r0, [r6, #0]
 800b544:	2800      	cmp	r0, #0
 800b546:	d1d5      	bne.n	800b4f4 <__sfp+0x24>
 800b548:	f7ff ff78 	bl	800b43c <__sfp_lock_release>
 800b54c:	230c      	movs	r3, #12
 800b54e:	603b      	str	r3, [r7, #0]
 800b550:	e7ee      	b.n	800b530 <__sfp+0x60>
 800b552:	bf00      	nop
 800b554:	0800d140 	.word	0x0800d140
 800b558:	ffff0001 	.word	0xffff0001

0800b55c <_fwalk_reent>:
 800b55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b560:	4606      	mov	r6, r0
 800b562:	4688      	mov	r8, r1
 800b564:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b568:	2700      	movs	r7, #0
 800b56a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b56e:	f1b9 0901 	subs.w	r9, r9, #1
 800b572:	d505      	bpl.n	800b580 <_fwalk_reent+0x24>
 800b574:	6824      	ldr	r4, [r4, #0]
 800b576:	2c00      	cmp	r4, #0
 800b578:	d1f7      	bne.n	800b56a <_fwalk_reent+0xe>
 800b57a:	4638      	mov	r0, r7
 800b57c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b580:	89ab      	ldrh	r3, [r5, #12]
 800b582:	2b01      	cmp	r3, #1
 800b584:	d907      	bls.n	800b596 <_fwalk_reent+0x3a>
 800b586:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b58a:	3301      	adds	r3, #1
 800b58c:	d003      	beq.n	800b596 <_fwalk_reent+0x3a>
 800b58e:	4629      	mov	r1, r5
 800b590:	4630      	mov	r0, r6
 800b592:	47c0      	blx	r8
 800b594:	4307      	orrs	r7, r0
 800b596:	3568      	adds	r5, #104	; 0x68
 800b598:	e7e9      	b.n	800b56e <_fwalk_reent+0x12>

0800b59a <__retarget_lock_init_recursive>:
 800b59a:	4770      	bx	lr

0800b59c <__retarget_lock_acquire_recursive>:
 800b59c:	4770      	bx	lr

0800b59e <__retarget_lock_release_recursive>:
 800b59e:	4770      	bx	lr

0800b5a0 <__swhatbuf_r>:
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	460e      	mov	r6, r1
 800b5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a8:	2900      	cmp	r1, #0
 800b5aa:	b096      	sub	sp, #88	; 0x58
 800b5ac:	4614      	mov	r4, r2
 800b5ae:	461d      	mov	r5, r3
 800b5b0:	da08      	bge.n	800b5c4 <__swhatbuf_r+0x24>
 800b5b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	602a      	str	r2, [r5, #0]
 800b5ba:	061a      	lsls	r2, r3, #24
 800b5bc:	d410      	bmi.n	800b5e0 <__swhatbuf_r+0x40>
 800b5be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5c2:	e00e      	b.n	800b5e2 <__swhatbuf_r+0x42>
 800b5c4:	466a      	mov	r2, sp
 800b5c6:	f000 f8eb 	bl	800b7a0 <_fstat_r>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	dbf1      	blt.n	800b5b2 <__swhatbuf_r+0x12>
 800b5ce:	9a01      	ldr	r2, [sp, #4]
 800b5d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b5d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b5d8:	425a      	negs	r2, r3
 800b5da:	415a      	adcs	r2, r3
 800b5dc:	602a      	str	r2, [r5, #0]
 800b5de:	e7ee      	b.n	800b5be <__swhatbuf_r+0x1e>
 800b5e0:	2340      	movs	r3, #64	; 0x40
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	b016      	add	sp, #88	; 0x58
 800b5e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b5ec <__smakebuf_r>:
 800b5ec:	898b      	ldrh	r3, [r1, #12]
 800b5ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5f0:	079d      	lsls	r5, r3, #30
 800b5f2:	4606      	mov	r6, r0
 800b5f4:	460c      	mov	r4, r1
 800b5f6:	d507      	bpl.n	800b608 <__smakebuf_r+0x1c>
 800b5f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	6123      	str	r3, [r4, #16]
 800b600:	2301      	movs	r3, #1
 800b602:	6163      	str	r3, [r4, #20]
 800b604:	b002      	add	sp, #8
 800b606:	bd70      	pop	{r4, r5, r6, pc}
 800b608:	ab01      	add	r3, sp, #4
 800b60a:	466a      	mov	r2, sp
 800b60c:	f7ff ffc8 	bl	800b5a0 <__swhatbuf_r>
 800b610:	9900      	ldr	r1, [sp, #0]
 800b612:	4605      	mov	r5, r0
 800b614:	4630      	mov	r0, r6
 800b616:	f7ff f9cb 	bl	800a9b0 <_malloc_r>
 800b61a:	b948      	cbnz	r0, 800b630 <__smakebuf_r+0x44>
 800b61c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b620:	059a      	lsls	r2, r3, #22
 800b622:	d4ef      	bmi.n	800b604 <__smakebuf_r+0x18>
 800b624:	f023 0303 	bic.w	r3, r3, #3
 800b628:	f043 0302 	orr.w	r3, r3, #2
 800b62c:	81a3      	strh	r3, [r4, #12]
 800b62e:	e7e3      	b.n	800b5f8 <__smakebuf_r+0xc>
 800b630:	4b0d      	ldr	r3, [pc, #52]	; (800b668 <__smakebuf_r+0x7c>)
 800b632:	62b3      	str	r3, [r6, #40]	; 0x28
 800b634:	89a3      	ldrh	r3, [r4, #12]
 800b636:	6020      	str	r0, [r4, #0]
 800b638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b63c:	81a3      	strh	r3, [r4, #12]
 800b63e:	9b00      	ldr	r3, [sp, #0]
 800b640:	6163      	str	r3, [r4, #20]
 800b642:	9b01      	ldr	r3, [sp, #4]
 800b644:	6120      	str	r0, [r4, #16]
 800b646:	b15b      	cbz	r3, 800b660 <__smakebuf_r+0x74>
 800b648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b64c:	4630      	mov	r0, r6
 800b64e:	f000 f8b9 	bl	800b7c4 <_isatty_r>
 800b652:	b128      	cbz	r0, 800b660 <__smakebuf_r+0x74>
 800b654:	89a3      	ldrh	r3, [r4, #12]
 800b656:	f023 0303 	bic.w	r3, r3, #3
 800b65a:	f043 0301 	orr.w	r3, r3, #1
 800b65e:	81a3      	strh	r3, [r4, #12]
 800b660:	89a0      	ldrh	r0, [r4, #12]
 800b662:	4305      	orrs	r5, r0
 800b664:	81a5      	strh	r5, [r4, #12]
 800b666:	e7cd      	b.n	800b604 <__smakebuf_r+0x18>
 800b668:	0800b3f9 	.word	0x0800b3f9

0800b66c <memmove>:
 800b66c:	4288      	cmp	r0, r1
 800b66e:	b510      	push	{r4, lr}
 800b670:	eb01 0402 	add.w	r4, r1, r2
 800b674:	d902      	bls.n	800b67c <memmove+0x10>
 800b676:	4284      	cmp	r4, r0
 800b678:	4623      	mov	r3, r4
 800b67a:	d807      	bhi.n	800b68c <memmove+0x20>
 800b67c:	1e43      	subs	r3, r0, #1
 800b67e:	42a1      	cmp	r1, r4
 800b680:	d008      	beq.n	800b694 <memmove+0x28>
 800b682:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b68a:	e7f8      	b.n	800b67e <memmove+0x12>
 800b68c:	4402      	add	r2, r0
 800b68e:	4601      	mov	r1, r0
 800b690:	428a      	cmp	r2, r1
 800b692:	d100      	bne.n	800b696 <memmove+0x2a>
 800b694:	bd10      	pop	{r4, pc}
 800b696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b69a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b69e:	e7f7      	b.n	800b690 <memmove+0x24>

0800b6a0 <__malloc_lock>:
 800b6a0:	4801      	ldr	r0, [pc, #4]	; (800b6a8 <__malloc_lock+0x8>)
 800b6a2:	f7ff bf7b 	b.w	800b59c <__retarget_lock_acquire_recursive>
 800b6a6:	bf00      	nop
 800b6a8:	20000a5c 	.word	0x20000a5c

0800b6ac <__malloc_unlock>:
 800b6ac:	4801      	ldr	r0, [pc, #4]	; (800b6b4 <__malloc_unlock+0x8>)
 800b6ae:	f7ff bf76 	b.w	800b59e <__retarget_lock_release_recursive>
 800b6b2:	bf00      	nop
 800b6b4:	20000a5c 	.word	0x20000a5c

0800b6b8 <_realloc_r>:
 800b6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6bc:	4680      	mov	r8, r0
 800b6be:	4614      	mov	r4, r2
 800b6c0:	460e      	mov	r6, r1
 800b6c2:	b921      	cbnz	r1, 800b6ce <_realloc_r+0x16>
 800b6c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c8:	4611      	mov	r1, r2
 800b6ca:	f7ff b971 	b.w	800a9b0 <_malloc_r>
 800b6ce:	b92a      	cbnz	r2, 800b6dc <_realloc_r+0x24>
 800b6d0:	f7ff f902 	bl	800a8d8 <_free_r>
 800b6d4:	4625      	mov	r5, r4
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6dc:	f000 f882 	bl	800b7e4 <_malloc_usable_size_r>
 800b6e0:	4284      	cmp	r4, r0
 800b6e2:	4607      	mov	r7, r0
 800b6e4:	d802      	bhi.n	800b6ec <_realloc_r+0x34>
 800b6e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b6ea:	d812      	bhi.n	800b712 <_realloc_r+0x5a>
 800b6ec:	4621      	mov	r1, r4
 800b6ee:	4640      	mov	r0, r8
 800b6f0:	f7ff f95e 	bl	800a9b0 <_malloc_r>
 800b6f4:	4605      	mov	r5, r0
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d0ed      	beq.n	800b6d6 <_realloc_r+0x1e>
 800b6fa:	42bc      	cmp	r4, r7
 800b6fc:	4622      	mov	r2, r4
 800b6fe:	4631      	mov	r1, r6
 800b700:	bf28      	it	cs
 800b702:	463a      	movcs	r2, r7
 800b704:	f7fb fbe8 	bl	8006ed8 <memcpy>
 800b708:	4631      	mov	r1, r6
 800b70a:	4640      	mov	r0, r8
 800b70c:	f7ff f8e4 	bl	800a8d8 <_free_r>
 800b710:	e7e1      	b.n	800b6d6 <_realloc_r+0x1e>
 800b712:	4635      	mov	r5, r6
 800b714:	e7df      	b.n	800b6d6 <_realloc_r+0x1e>

0800b716 <_raise_r>:
 800b716:	291f      	cmp	r1, #31
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	4604      	mov	r4, r0
 800b71c:	460d      	mov	r5, r1
 800b71e:	d904      	bls.n	800b72a <_raise_r+0x14>
 800b720:	2316      	movs	r3, #22
 800b722:	6003      	str	r3, [r0, #0]
 800b724:	f04f 30ff 	mov.w	r0, #4294967295
 800b728:	bd38      	pop	{r3, r4, r5, pc}
 800b72a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b72c:	b112      	cbz	r2, 800b734 <_raise_r+0x1e>
 800b72e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b732:	b94b      	cbnz	r3, 800b748 <_raise_r+0x32>
 800b734:	4620      	mov	r0, r4
 800b736:	f000 f831 	bl	800b79c <_getpid_r>
 800b73a:	462a      	mov	r2, r5
 800b73c:	4601      	mov	r1, r0
 800b73e:	4620      	mov	r0, r4
 800b740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b744:	f000 b818 	b.w	800b778 <_kill_r>
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d00a      	beq.n	800b762 <_raise_r+0x4c>
 800b74c:	1c59      	adds	r1, r3, #1
 800b74e:	d103      	bne.n	800b758 <_raise_r+0x42>
 800b750:	2316      	movs	r3, #22
 800b752:	6003      	str	r3, [r0, #0]
 800b754:	2001      	movs	r0, #1
 800b756:	e7e7      	b.n	800b728 <_raise_r+0x12>
 800b758:	2400      	movs	r4, #0
 800b75a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b75e:	4628      	mov	r0, r5
 800b760:	4798      	blx	r3
 800b762:	2000      	movs	r0, #0
 800b764:	e7e0      	b.n	800b728 <_raise_r+0x12>
	...

0800b768 <raise>:
 800b768:	4b02      	ldr	r3, [pc, #8]	; (800b774 <raise+0xc>)
 800b76a:	4601      	mov	r1, r0
 800b76c:	6818      	ldr	r0, [r3, #0]
 800b76e:	f7ff bfd2 	b.w	800b716 <_raise_r>
 800b772:	bf00      	nop
 800b774:	2000009c 	.word	0x2000009c

0800b778 <_kill_r>:
 800b778:	b538      	push	{r3, r4, r5, lr}
 800b77a:	4d07      	ldr	r5, [pc, #28]	; (800b798 <_kill_r+0x20>)
 800b77c:	2300      	movs	r3, #0
 800b77e:	4604      	mov	r4, r0
 800b780:	4608      	mov	r0, r1
 800b782:	4611      	mov	r1, r2
 800b784:	602b      	str	r3, [r5, #0]
 800b786:	f7f7 f80d 	bl	80027a4 <_kill>
 800b78a:	1c43      	adds	r3, r0, #1
 800b78c:	d102      	bne.n	800b794 <_kill_r+0x1c>
 800b78e:	682b      	ldr	r3, [r5, #0]
 800b790:	b103      	cbz	r3, 800b794 <_kill_r+0x1c>
 800b792:	6023      	str	r3, [r4, #0]
 800b794:	bd38      	pop	{r3, r4, r5, pc}
 800b796:	bf00      	nop
 800b798:	20000a58 	.word	0x20000a58

0800b79c <_getpid_r>:
 800b79c:	f7f6 bffa 	b.w	8002794 <_getpid>

0800b7a0 <_fstat_r>:
 800b7a0:	b538      	push	{r3, r4, r5, lr}
 800b7a2:	4d07      	ldr	r5, [pc, #28]	; (800b7c0 <_fstat_r+0x20>)
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	4608      	mov	r0, r1
 800b7aa:	4611      	mov	r1, r2
 800b7ac:	602b      	str	r3, [r5, #0]
 800b7ae:	f7f7 f858 	bl	8002862 <_fstat>
 800b7b2:	1c43      	adds	r3, r0, #1
 800b7b4:	d102      	bne.n	800b7bc <_fstat_r+0x1c>
 800b7b6:	682b      	ldr	r3, [r5, #0]
 800b7b8:	b103      	cbz	r3, 800b7bc <_fstat_r+0x1c>
 800b7ba:	6023      	str	r3, [r4, #0]
 800b7bc:	bd38      	pop	{r3, r4, r5, pc}
 800b7be:	bf00      	nop
 800b7c0:	20000a58 	.word	0x20000a58

0800b7c4 <_isatty_r>:
 800b7c4:	b538      	push	{r3, r4, r5, lr}
 800b7c6:	4d06      	ldr	r5, [pc, #24]	; (800b7e0 <_isatty_r+0x1c>)
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	4608      	mov	r0, r1
 800b7ce:	602b      	str	r3, [r5, #0]
 800b7d0:	f7f7 f857 	bl	8002882 <_isatty>
 800b7d4:	1c43      	adds	r3, r0, #1
 800b7d6:	d102      	bne.n	800b7de <_isatty_r+0x1a>
 800b7d8:	682b      	ldr	r3, [r5, #0]
 800b7da:	b103      	cbz	r3, 800b7de <_isatty_r+0x1a>
 800b7dc:	6023      	str	r3, [r4, #0]
 800b7de:	bd38      	pop	{r3, r4, r5, pc}
 800b7e0:	20000a58 	.word	0x20000a58

0800b7e4 <_malloc_usable_size_r>:
 800b7e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7e8:	1f18      	subs	r0, r3, #4
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	bfbc      	itt	lt
 800b7ee:	580b      	ldrlt	r3, [r1, r0]
 800b7f0:	18c0      	addlt	r0, r0, r3
 800b7f2:	4770      	bx	lr
 800b7f4:	0000      	movs	r0, r0
	...

0800b7f8 <atan>:
 800b7f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7fc:	ec55 4b10 	vmov	r4, r5, d0
 800b800:	4bc3      	ldr	r3, [pc, #780]	; (800bb10 <atan+0x318>)
 800b802:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b806:	429e      	cmp	r6, r3
 800b808:	46ab      	mov	fp, r5
 800b80a:	dd18      	ble.n	800b83e <atan+0x46>
 800b80c:	4bc1      	ldr	r3, [pc, #772]	; (800bb14 <atan+0x31c>)
 800b80e:	429e      	cmp	r6, r3
 800b810:	dc01      	bgt.n	800b816 <atan+0x1e>
 800b812:	d109      	bne.n	800b828 <atan+0x30>
 800b814:	b144      	cbz	r4, 800b828 <atan+0x30>
 800b816:	4622      	mov	r2, r4
 800b818:	462b      	mov	r3, r5
 800b81a:	4620      	mov	r0, r4
 800b81c:	4629      	mov	r1, r5
 800b81e:	f7f4 fd35 	bl	800028c <__adddf3>
 800b822:	4604      	mov	r4, r0
 800b824:	460d      	mov	r5, r1
 800b826:	e006      	b.n	800b836 <atan+0x3e>
 800b828:	f1bb 0f00 	cmp.w	fp, #0
 800b82c:	f300 8131 	bgt.w	800ba92 <atan+0x29a>
 800b830:	a59b      	add	r5, pc, #620	; (adr r5, 800baa0 <atan+0x2a8>)
 800b832:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b836:	ec45 4b10 	vmov	d0, r4, r5
 800b83a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83e:	4bb6      	ldr	r3, [pc, #728]	; (800bb18 <atan+0x320>)
 800b840:	429e      	cmp	r6, r3
 800b842:	dc14      	bgt.n	800b86e <atan+0x76>
 800b844:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b848:	429e      	cmp	r6, r3
 800b84a:	dc0d      	bgt.n	800b868 <atan+0x70>
 800b84c:	a396      	add	r3, pc, #600	; (adr r3, 800baa8 <atan+0x2b0>)
 800b84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b852:	ee10 0a10 	vmov	r0, s0
 800b856:	4629      	mov	r1, r5
 800b858:	f7f4 fd18 	bl	800028c <__adddf3>
 800b85c:	4baf      	ldr	r3, [pc, #700]	; (800bb1c <atan+0x324>)
 800b85e:	2200      	movs	r2, #0
 800b860:	f7f5 f95a 	bl	8000b18 <__aeabi_dcmpgt>
 800b864:	2800      	cmp	r0, #0
 800b866:	d1e6      	bne.n	800b836 <atan+0x3e>
 800b868:	f04f 3aff 	mov.w	sl, #4294967295
 800b86c:	e02b      	b.n	800b8c6 <atan+0xce>
 800b86e:	f000 f963 	bl	800bb38 <fabs>
 800b872:	4bab      	ldr	r3, [pc, #684]	; (800bb20 <atan+0x328>)
 800b874:	429e      	cmp	r6, r3
 800b876:	ec55 4b10 	vmov	r4, r5, d0
 800b87a:	f300 80bf 	bgt.w	800b9fc <atan+0x204>
 800b87e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b882:	429e      	cmp	r6, r3
 800b884:	f300 80a0 	bgt.w	800b9c8 <atan+0x1d0>
 800b888:	ee10 2a10 	vmov	r2, s0
 800b88c:	ee10 0a10 	vmov	r0, s0
 800b890:	462b      	mov	r3, r5
 800b892:	4629      	mov	r1, r5
 800b894:	f7f4 fcfa 	bl	800028c <__adddf3>
 800b898:	4ba0      	ldr	r3, [pc, #640]	; (800bb1c <atan+0x324>)
 800b89a:	2200      	movs	r2, #0
 800b89c:	f7f4 fcf4 	bl	8000288 <__aeabi_dsub>
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	4606      	mov	r6, r0
 800b8a4:	460f      	mov	r7, r1
 800b8a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	4629      	mov	r1, r5
 800b8ae:	f7f4 fced 	bl	800028c <__adddf3>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	4639      	mov	r1, r7
 800b8ba:	f7f4 ffc7 	bl	800084c <__aeabi_ddiv>
 800b8be:	f04f 0a00 	mov.w	sl, #0
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	460d      	mov	r5, r1
 800b8c6:	4622      	mov	r2, r4
 800b8c8:	462b      	mov	r3, r5
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	4629      	mov	r1, r5
 800b8ce:	f7f4 fe93 	bl	80005f8 <__aeabi_dmul>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	4680      	mov	r8, r0
 800b8d8:	4689      	mov	r9, r1
 800b8da:	f7f4 fe8d 	bl	80005f8 <__aeabi_dmul>
 800b8de:	a374      	add	r3, pc, #464	; (adr r3, 800bab0 <atan+0x2b8>)
 800b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e4:	4606      	mov	r6, r0
 800b8e6:	460f      	mov	r7, r1
 800b8e8:	f7f4 fe86 	bl	80005f8 <__aeabi_dmul>
 800b8ec:	a372      	add	r3, pc, #456	; (adr r3, 800bab8 <atan+0x2c0>)
 800b8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f2:	f7f4 fccb 	bl	800028c <__adddf3>
 800b8f6:	4632      	mov	r2, r6
 800b8f8:	463b      	mov	r3, r7
 800b8fa:	f7f4 fe7d 	bl	80005f8 <__aeabi_dmul>
 800b8fe:	a370      	add	r3, pc, #448	; (adr r3, 800bac0 <atan+0x2c8>)
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	f7f4 fcc2 	bl	800028c <__adddf3>
 800b908:	4632      	mov	r2, r6
 800b90a:	463b      	mov	r3, r7
 800b90c:	f7f4 fe74 	bl	80005f8 <__aeabi_dmul>
 800b910:	a36d      	add	r3, pc, #436	; (adr r3, 800bac8 <atan+0x2d0>)
 800b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b916:	f7f4 fcb9 	bl	800028c <__adddf3>
 800b91a:	4632      	mov	r2, r6
 800b91c:	463b      	mov	r3, r7
 800b91e:	f7f4 fe6b 	bl	80005f8 <__aeabi_dmul>
 800b922:	a36b      	add	r3, pc, #428	; (adr r3, 800bad0 <atan+0x2d8>)
 800b924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b928:	f7f4 fcb0 	bl	800028c <__adddf3>
 800b92c:	4632      	mov	r2, r6
 800b92e:	463b      	mov	r3, r7
 800b930:	f7f4 fe62 	bl	80005f8 <__aeabi_dmul>
 800b934:	a368      	add	r3, pc, #416	; (adr r3, 800bad8 <atan+0x2e0>)
 800b936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93a:	f7f4 fca7 	bl	800028c <__adddf3>
 800b93e:	4642      	mov	r2, r8
 800b940:	464b      	mov	r3, r9
 800b942:	f7f4 fe59 	bl	80005f8 <__aeabi_dmul>
 800b946:	a366      	add	r3, pc, #408	; (adr r3, 800bae0 <atan+0x2e8>)
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	4680      	mov	r8, r0
 800b94e:	4689      	mov	r9, r1
 800b950:	4630      	mov	r0, r6
 800b952:	4639      	mov	r1, r7
 800b954:	f7f4 fe50 	bl	80005f8 <__aeabi_dmul>
 800b958:	a363      	add	r3, pc, #396	; (adr r3, 800bae8 <atan+0x2f0>)
 800b95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95e:	f7f4 fc93 	bl	8000288 <__aeabi_dsub>
 800b962:	4632      	mov	r2, r6
 800b964:	463b      	mov	r3, r7
 800b966:	f7f4 fe47 	bl	80005f8 <__aeabi_dmul>
 800b96a:	a361      	add	r3, pc, #388	; (adr r3, 800baf0 <atan+0x2f8>)
 800b96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b970:	f7f4 fc8a 	bl	8000288 <__aeabi_dsub>
 800b974:	4632      	mov	r2, r6
 800b976:	463b      	mov	r3, r7
 800b978:	f7f4 fe3e 	bl	80005f8 <__aeabi_dmul>
 800b97c:	a35e      	add	r3, pc, #376	; (adr r3, 800baf8 <atan+0x300>)
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	f7f4 fc81 	bl	8000288 <__aeabi_dsub>
 800b986:	4632      	mov	r2, r6
 800b988:	463b      	mov	r3, r7
 800b98a:	f7f4 fe35 	bl	80005f8 <__aeabi_dmul>
 800b98e:	a35c      	add	r3, pc, #368	; (adr r3, 800bb00 <atan+0x308>)
 800b990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b994:	f7f4 fc78 	bl	8000288 <__aeabi_dsub>
 800b998:	4632      	mov	r2, r6
 800b99a:	463b      	mov	r3, r7
 800b99c:	f7f4 fe2c 	bl	80005f8 <__aeabi_dmul>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	4640      	mov	r0, r8
 800b9a6:	4649      	mov	r1, r9
 800b9a8:	f7f4 fc70 	bl	800028c <__adddf3>
 800b9ac:	4622      	mov	r2, r4
 800b9ae:	462b      	mov	r3, r5
 800b9b0:	f7f4 fe22 	bl	80005f8 <__aeabi_dmul>
 800b9b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	d14b      	bne.n	800ba56 <atan+0x25e>
 800b9be:	4620      	mov	r0, r4
 800b9c0:	4629      	mov	r1, r5
 800b9c2:	f7f4 fc61 	bl	8000288 <__aeabi_dsub>
 800b9c6:	e72c      	b.n	800b822 <atan+0x2a>
 800b9c8:	ee10 0a10 	vmov	r0, s0
 800b9cc:	4b53      	ldr	r3, [pc, #332]	; (800bb1c <atan+0x324>)
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	4629      	mov	r1, r5
 800b9d2:	f7f4 fc59 	bl	8000288 <__aeabi_dsub>
 800b9d6:	4b51      	ldr	r3, [pc, #324]	; (800bb1c <atan+0x324>)
 800b9d8:	4606      	mov	r6, r0
 800b9da:	460f      	mov	r7, r1
 800b9dc:	2200      	movs	r2, #0
 800b9de:	4620      	mov	r0, r4
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	f7f4 fc53 	bl	800028c <__adddf3>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	4639      	mov	r1, r7
 800b9ee:	f7f4 ff2d 	bl	800084c <__aeabi_ddiv>
 800b9f2:	f04f 0a01 	mov.w	sl, #1
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	460d      	mov	r5, r1
 800b9fa:	e764      	b.n	800b8c6 <atan+0xce>
 800b9fc:	4b49      	ldr	r3, [pc, #292]	; (800bb24 <atan+0x32c>)
 800b9fe:	429e      	cmp	r6, r3
 800ba00:	da1d      	bge.n	800ba3e <atan+0x246>
 800ba02:	ee10 0a10 	vmov	r0, s0
 800ba06:	4b48      	ldr	r3, [pc, #288]	; (800bb28 <atan+0x330>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	f7f4 fc3c 	bl	8000288 <__aeabi_dsub>
 800ba10:	4b45      	ldr	r3, [pc, #276]	; (800bb28 <atan+0x330>)
 800ba12:	4606      	mov	r6, r0
 800ba14:	460f      	mov	r7, r1
 800ba16:	2200      	movs	r2, #0
 800ba18:	4620      	mov	r0, r4
 800ba1a:	4629      	mov	r1, r5
 800ba1c:	f7f4 fdec 	bl	80005f8 <__aeabi_dmul>
 800ba20:	4b3e      	ldr	r3, [pc, #248]	; (800bb1c <atan+0x324>)
 800ba22:	2200      	movs	r2, #0
 800ba24:	f7f4 fc32 	bl	800028c <__adddf3>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	4639      	mov	r1, r7
 800ba30:	f7f4 ff0c 	bl	800084c <__aeabi_ddiv>
 800ba34:	f04f 0a02 	mov.w	sl, #2
 800ba38:	4604      	mov	r4, r0
 800ba3a:	460d      	mov	r5, r1
 800ba3c:	e743      	b.n	800b8c6 <atan+0xce>
 800ba3e:	462b      	mov	r3, r5
 800ba40:	ee10 2a10 	vmov	r2, s0
 800ba44:	4939      	ldr	r1, [pc, #228]	; (800bb2c <atan+0x334>)
 800ba46:	2000      	movs	r0, #0
 800ba48:	f7f4 ff00 	bl	800084c <__aeabi_ddiv>
 800ba4c:	f04f 0a03 	mov.w	sl, #3
 800ba50:	4604      	mov	r4, r0
 800ba52:	460d      	mov	r5, r1
 800ba54:	e737      	b.n	800b8c6 <atan+0xce>
 800ba56:	4b36      	ldr	r3, [pc, #216]	; (800bb30 <atan+0x338>)
 800ba58:	4e36      	ldr	r6, [pc, #216]	; (800bb34 <atan+0x33c>)
 800ba5a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ba5e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ba62:	e9da 2300 	ldrd	r2, r3, [sl]
 800ba66:	f7f4 fc0f 	bl	8000288 <__aeabi_dsub>
 800ba6a:	4622      	mov	r2, r4
 800ba6c:	462b      	mov	r3, r5
 800ba6e:	f7f4 fc0b 	bl	8000288 <__aeabi_dsub>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ba7a:	f7f4 fc05 	bl	8000288 <__aeabi_dsub>
 800ba7e:	f1bb 0f00 	cmp.w	fp, #0
 800ba82:	4604      	mov	r4, r0
 800ba84:	460d      	mov	r5, r1
 800ba86:	f6bf aed6 	bge.w	800b836 <atan+0x3e>
 800ba8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba8e:	461d      	mov	r5, r3
 800ba90:	e6d1      	b.n	800b836 <atan+0x3e>
 800ba92:	a51d      	add	r5, pc, #116	; (adr r5, 800bb08 <atan+0x310>)
 800ba94:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba98:	e6cd      	b.n	800b836 <atan+0x3e>
 800ba9a:	bf00      	nop
 800ba9c:	f3af 8000 	nop.w
 800baa0:	54442d18 	.word	0x54442d18
 800baa4:	bff921fb 	.word	0xbff921fb
 800baa8:	8800759c 	.word	0x8800759c
 800baac:	7e37e43c 	.word	0x7e37e43c
 800bab0:	e322da11 	.word	0xe322da11
 800bab4:	3f90ad3a 	.word	0x3f90ad3a
 800bab8:	24760deb 	.word	0x24760deb
 800babc:	3fa97b4b 	.word	0x3fa97b4b
 800bac0:	a0d03d51 	.word	0xa0d03d51
 800bac4:	3fb10d66 	.word	0x3fb10d66
 800bac8:	c54c206e 	.word	0xc54c206e
 800bacc:	3fb745cd 	.word	0x3fb745cd
 800bad0:	920083ff 	.word	0x920083ff
 800bad4:	3fc24924 	.word	0x3fc24924
 800bad8:	5555550d 	.word	0x5555550d
 800badc:	3fd55555 	.word	0x3fd55555
 800bae0:	2c6a6c2f 	.word	0x2c6a6c2f
 800bae4:	bfa2b444 	.word	0xbfa2b444
 800bae8:	52defd9a 	.word	0x52defd9a
 800baec:	3fadde2d 	.word	0x3fadde2d
 800baf0:	af749a6d 	.word	0xaf749a6d
 800baf4:	3fb3b0f2 	.word	0x3fb3b0f2
 800baf8:	fe231671 	.word	0xfe231671
 800bafc:	3fbc71c6 	.word	0x3fbc71c6
 800bb00:	9998ebc4 	.word	0x9998ebc4
 800bb04:	3fc99999 	.word	0x3fc99999
 800bb08:	54442d18 	.word	0x54442d18
 800bb0c:	3ff921fb 	.word	0x3ff921fb
 800bb10:	440fffff 	.word	0x440fffff
 800bb14:	7ff00000 	.word	0x7ff00000
 800bb18:	3fdbffff 	.word	0x3fdbffff
 800bb1c:	3ff00000 	.word	0x3ff00000
 800bb20:	3ff2ffff 	.word	0x3ff2ffff
 800bb24:	40038000 	.word	0x40038000
 800bb28:	3ff80000 	.word	0x3ff80000
 800bb2c:	bff00000 	.word	0xbff00000
 800bb30:	0800d608 	.word	0x0800d608
 800bb34:	0800d5e8 	.word	0x0800d5e8

0800bb38 <fabs>:
 800bb38:	ec51 0b10 	vmov	r0, r1, d0
 800bb3c:	ee10 2a10 	vmov	r2, s0
 800bb40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb44:	ec43 2b10 	vmov	d0, r2, r3
 800bb48:	4770      	bx	lr

0800bb4a <atan2>:
 800bb4a:	f000 b89d 	b.w	800bc88 <__ieee754_atan2>
	...

0800bb50 <pow>:
 800bb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb52:	ed2d 8b02 	vpush	{d8}
 800bb56:	eeb0 8a40 	vmov.f32	s16, s0
 800bb5a:	eef0 8a60 	vmov.f32	s17, s1
 800bb5e:	ec55 4b11 	vmov	r4, r5, d1
 800bb62:	f000 f95d 	bl	800be20 <__ieee754_pow>
 800bb66:	4622      	mov	r2, r4
 800bb68:	462b      	mov	r3, r5
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	4629      	mov	r1, r5
 800bb6e:	ec57 6b10 	vmov	r6, r7, d0
 800bb72:	f7f4 ffdb 	bl	8000b2c <__aeabi_dcmpun>
 800bb76:	2800      	cmp	r0, #0
 800bb78:	d13b      	bne.n	800bbf2 <pow+0xa2>
 800bb7a:	ec51 0b18 	vmov	r0, r1, d8
 800bb7e:	2200      	movs	r2, #0
 800bb80:	2300      	movs	r3, #0
 800bb82:	f7f4 ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb86:	b1b8      	cbz	r0, 800bbb8 <pow+0x68>
 800bb88:	2200      	movs	r2, #0
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	4629      	mov	r1, r5
 800bb90:	f7f4 ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	d146      	bne.n	800bc26 <pow+0xd6>
 800bb98:	ec45 4b10 	vmov	d0, r4, r5
 800bb9c:	f000 ff50 	bl	800ca40 <finite>
 800bba0:	b338      	cbz	r0, 800bbf2 <pow+0xa2>
 800bba2:	2200      	movs	r2, #0
 800bba4:	2300      	movs	r3, #0
 800bba6:	4620      	mov	r0, r4
 800bba8:	4629      	mov	r1, r5
 800bbaa:	f7f4 ff97 	bl	8000adc <__aeabi_dcmplt>
 800bbae:	b300      	cbz	r0, 800bbf2 <pow+0xa2>
 800bbb0:	f7fb f968 	bl	8006e84 <__errno>
 800bbb4:	2322      	movs	r3, #34	; 0x22
 800bbb6:	e01b      	b.n	800bbf0 <pow+0xa0>
 800bbb8:	ec47 6b10 	vmov	d0, r6, r7
 800bbbc:	f000 ff40 	bl	800ca40 <finite>
 800bbc0:	b9e0      	cbnz	r0, 800bbfc <pow+0xac>
 800bbc2:	eeb0 0a48 	vmov.f32	s0, s16
 800bbc6:	eef0 0a68 	vmov.f32	s1, s17
 800bbca:	f000 ff39 	bl	800ca40 <finite>
 800bbce:	b1a8      	cbz	r0, 800bbfc <pow+0xac>
 800bbd0:	ec45 4b10 	vmov	d0, r4, r5
 800bbd4:	f000 ff34 	bl	800ca40 <finite>
 800bbd8:	b180      	cbz	r0, 800bbfc <pow+0xac>
 800bbda:	4632      	mov	r2, r6
 800bbdc:	463b      	mov	r3, r7
 800bbde:	4630      	mov	r0, r6
 800bbe0:	4639      	mov	r1, r7
 800bbe2:	f7f4 ffa3 	bl	8000b2c <__aeabi_dcmpun>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d0e2      	beq.n	800bbb0 <pow+0x60>
 800bbea:	f7fb f94b 	bl	8006e84 <__errno>
 800bbee:	2321      	movs	r3, #33	; 0x21
 800bbf0:	6003      	str	r3, [r0, #0]
 800bbf2:	ecbd 8b02 	vpop	{d8}
 800bbf6:	ec47 6b10 	vmov	d0, r6, r7
 800bbfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	2300      	movs	r3, #0
 800bc00:	4630      	mov	r0, r6
 800bc02:	4639      	mov	r1, r7
 800bc04:	f7f4 ff60 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	d0f2      	beq.n	800bbf2 <pow+0xa2>
 800bc0c:	eeb0 0a48 	vmov.f32	s0, s16
 800bc10:	eef0 0a68 	vmov.f32	s1, s17
 800bc14:	f000 ff14 	bl	800ca40 <finite>
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d0ea      	beq.n	800bbf2 <pow+0xa2>
 800bc1c:	ec45 4b10 	vmov	d0, r4, r5
 800bc20:	f000 ff0e 	bl	800ca40 <finite>
 800bc24:	e7c3      	b.n	800bbae <pow+0x5e>
 800bc26:	4f01      	ldr	r7, [pc, #4]	; (800bc2c <pow+0xdc>)
 800bc28:	2600      	movs	r6, #0
 800bc2a:	e7e2      	b.n	800bbf2 <pow+0xa2>
 800bc2c:	3ff00000 	.word	0x3ff00000

0800bc30 <sqrt>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	ed2d 8b02 	vpush	{d8}
 800bc36:	ec55 4b10 	vmov	r4, r5, d0
 800bc3a:	f000 fe1f 	bl	800c87c <__ieee754_sqrt>
 800bc3e:	4622      	mov	r2, r4
 800bc40:	462b      	mov	r3, r5
 800bc42:	4620      	mov	r0, r4
 800bc44:	4629      	mov	r1, r5
 800bc46:	eeb0 8a40 	vmov.f32	s16, s0
 800bc4a:	eef0 8a60 	vmov.f32	s17, s1
 800bc4e:	f7f4 ff6d 	bl	8000b2c <__aeabi_dcmpun>
 800bc52:	b990      	cbnz	r0, 800bc7a <sqrt+0x4a>
 800bc54:	2200      	movs	r2, #0
 800bc56:	2300      	movs	r3, #0
 800bc58:	4620      	mov	r0, r4
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	f7f4 ff3e 	bl	8000adc <__aeabi_dcmplt>
 800bc60:	b158      	cbz	r0, 800bc7a <sqrt+0x4a>
 800bc62:	f7fb f90f 	bl	8006e84 <__errno>
 800bc66:	2321      	movs	r3, #33	; 0x21
 800bc68:	6003      	str	r3, [r0, #0]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	4610      	mov	r0, r2
 800bc70:	4619      	mov	r1, r3
 800bc72:	f7f4 fdeb 	bl	800084c <__aeabi_ddiv>
 800bc76:	ec41 0b18 	vmov	d8, r0, r1
 800bc7a:	eeb0 0a48 	vmov.f32	s0, s16
 800bc7e:	eef0 0a68 	vmov.f32	s1, s17
 800bc82:	ecbd 8b02 	vpop	{d8}
 800bc86:	bd38      	pop	{r3, r4, r5, pc}

0800bc88 <__ieee754_atan2>:
 800bc88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc8c:	ec57 6b11 	vmov	r6, r7, d1
 800bc90:	4273      	negs	r3, r6
 800bc92:	f8df e184 	ldr.w	lr, [pc, #388]	; 800be18 <__ieee754_atan2+0x190>
 800bc96:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bc9a:	4333      	orrs	r3, r6
 800bc9c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bca0:	4573      	cmp	r3, lr
 800bca2:	ec51 0b10 	vmov	r0, r1, d0
 800bca6:	ee11 8a10 	vmov	r8, s2
 800bcaa:	d80a      	bhi.n	800bcc2 <__ieee754_atan2+0x3a>
 800bcac:	4244      	negs	r4, r0
 800bcae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bcb2:	4304      	orrs	r4, r0
 800bcb4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bcb8:	4574      	cmp	r4, lr
 800bcba:	ee10 9a10 	vmov	r9, s0
 800bcbe:	468c      	mov	ip, r1
 800bcc0:	d907      	bls.n	800bcd2 <__ieee754_atan2+0x4a>
 800bcc2:	4632      	mov	r2, r6
 800bcc4:	463b      	mov	r3, r7
 800bcc6:	f7f4 fae1 	bl	800028c <__adddf3>
 800bcca:	ec41 0b10 	vmov	d0, r0, r1
 800bcce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcd2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bcd6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bcda:	4334      	orrs	r4, r6
 800bcdc:	d103      	bne.n	800bce6 <__ieee754_atan2+0x5e>
 800bcde:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bce2:	f7ff bd89 	b.w	800b7f8 <atan>
 800bce6:	17bc      	asrs	r4, r7, #30
 800bce8:	f004 0402 	and.w	r4, r4, #2
 800bcec:	ea53 0909 	orrs.w	r9, r3, r9
 800bcf0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bcf4:	d107      	bne.n	800bd06 <__ieee754_atan2+0x7e>
 800bcf6:	2c02      	cmp	r4, #2
 800bcf8:	d060      	beq.n	800bdbc <__ieee754_atan2+0x134>
 800bcfa:	2c03      	cmp	r4, #3
 800bcfc:	d1e5      	bne.n	800bcca <__ieee754_atan2+0x42>
 800bcfe:	a142      	add	r1, pc, #264	; (adr r1, 800be08 <__ieee754_atan2+0x180>)
 800bd00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd04:	e7e1      	b.n	800bcca <__ieee754_atan2+0x42>
 800bd06:	ea52 0808 	orrs.w	r8, r2, r8
 800bd0a:	d106      	bne.n	800bd1a <__ieee754_atan2+0x92>
 800bd0c:	f1bc 0f00 	cmp.w	ip, #0
 800bd10:	da5f      	bge.n	800bdd2 <__ieee754_atan2+0x14a>
 800bd12:	a13f      	add	r1, pc, #252	; (adr r1, 800be10 <__ieee754_atan2+0x188>)
 800bd14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd18:	e7d7      	b.n	800bcca <__ieee754_atan2+0x42>
 800bd1a:	4572      	cmp	r2, lr
 800bd1c:	d10f      	bne.n	800bd3e <__ieee754_atan2+0xb6>
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	f104 34ff 	add.w	r4, r4, #4294967295
 800bd24:	d107      	bne.n	800bd36 <__ieee754_atan2+0xae>
 800bd26:	2c02      	cmp	r4, #2
 800bd28:	d84c      	bhi.n	800bdc4 <__ieee754_atan2+0x13c>
 800bd2a:	4b35      	ldr	r3, [pc, #212]	; (800be00 <__ieee754_atan2+0x178>)
 800bd2c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bd30:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bd34:	e7c9      	b.n	800bcca <__ieee754_atan2+0x42>
 800bd36:	2c02      	cmp	r4, #2
 800bd38:	d848      	bhi.n	800bdcc <__ieee754_atan2+0x144>
 800bd3a:	4b32      	ldr	r3, [pc, #200]	; (800be04 <__ieee754_atan2+0x17c>)
 800bd3c:	e7f6      	b.n	800bd2c <__ieee754_atan2+0xa4>
 800bd3e:	4573      	cmp	r3, lr
 800bd40:	d0e4      	beq.n	800bd0c <__ieee754_atan2+0x84>
 800bd42:	1a9b      	subs	r3, r3, r2
 800bd44:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bd48:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bd4c:	da1e      	bge.n	800bd8c <__ieee754_atan2+0x104>
 800bd4e:	2f00      	cmp	r7, #0
 800bd50:	da01      	bge.n	800bd56 <__ieee754_atan2+0xce>
 800bd52:	323c      	adds	r2, #60	; 0x3c
 800bd54:	db1e      	blt.n	800bd94 <__ieee754_atan2+0x10c>
 800bd56:	4632      	mov	r2, r6
 800bd58:	463b      	mov	r3, r7
 800bd5a:	f7f4 fd77 	bl	800084c <__aeabi_ddiv>
 800bd5e:	ec41 0b10 	vmov	d0, r0, r1
 800bd62:	f7ff fee9 	bl	800bb38 <fabs>
 800bd66:	f7ff fd47 	bl	800b7f8 <atan>
 800bd6a:	ec51 0b10 	vmov	r0, r1, d0
 800bd6e:	2c01      	cmp	r4, #1
 800bd70:	d013      	beq.n	800bd9a <__ieee754_atan2+0x112>
 800bd72:	2c02      	cmp	r4, #2
 800bd74:	d015      	beq.n	800bda2 <__ieee754_atan2+0x11a>
 800bd76:	2c00      	cmp	r4, #0
 800bd78:	d0a7      	beq.n	800bcca <__ieee754_atan2+0x42>
 800bd7a:	a319      	add	r3, pc, #100	; (adr r3, 800bde0 <__ieee754_atan2+0x158>)
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	f7f4 fa82 	bl	8000288 <__aeabi_dsub>
 800bd84:	a318      	add	r3, pc, #96	; (adr r3, 800bde8 <__ieee754_atan2+0x160>)
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	e014      	b.n	800bdb6 <__ieee754_atan2+0x12e>
 800bd8c:	a118      	add	r1, pc, #96	; (adr r1, 800bdf0 <__ieee754_atan2+0x168>)
 800bd8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd92:	e7ec      	b.n	800bd6e <__ieee754_atan2+0xe6>
 800bd94:	2000      	movs	r0, #0
 800bd96:	2100      	movs	r1, #0
 800bd98:	e7e9      	b.n	800bd6e <__ieee754_atan2+0xe6>
 800bd9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd9e:	4619      	mov	r1, r3
 800bda0:	e793      	b.n	800bcca <__ieee754_atan2+0x42>
 800bda2:	a30f      	add	r3, pc, #60	; (adr r3, 800bde0 <__ieee754_atan2+0x158>)
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	f7f4 fa6e 	bl	8000288 <__aeabi_dsub>
 800bdac:	4602      	mov	r2, r0
 800bdae:	460b      	mov	r3, r1
 800bdb0:	a10d      	add	r1, pc, #52	; (adr r1, 800bde8 <__ieee754_atan2+0x160>)
 800bdb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdb6:	f7f4 fa67 	bl	8000288 <__aeabi_dsub>
 800bdba:	e786      	b.n	800bcca <__ieee754_atan2+0x42>
 800bdbc:	a10a      	add	r1, pc, #40	; (adr r1, 800bde8 <__ieee754_atan2+0x160>)
 800bdbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdc2:	e782      	b.n	800bcca <__ieee754_atan2+0x42>
 800bdc4:	a10c      	add	r1, pc, #48	; (adr r1, 800bdf8 <__ieee754_atan2+0x170>)
 800bdc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdca:	e77e      	b.n	800bcca <__ieee754_atan2+0x42>
 800bdcc:	2000      	movs	r0, #0
 800bdce:	2100      	movs	r1, #0
 800bdd0:	e77b      	b.n	800bcca <__ieee754_atan2+0x42>
 800bdd2:	a107      	add	r1, pc, #28	; (adr r1, 800bdf0 <__ieee754_atan2+0x168>)
 800bdd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdd8:	e777      	b.n	800bcca <__ieee754_atan2+0x42>
 800bdda:	bf00      	nop
 800bddc:	f3af 8000 	nop.w
 800bde0:	33145c07 	.word	0x33145c07
 800bde4:	3ca1a626 	.word	0x3ca1a626
 800bde8:	54442d18 	.word	0x54442d18
 800bdec:	400921fb 	.word	0x400921fb
 800bdf0:	54442d18 	.word	0x54442d18
 800bdf4:	3ff921fb 	.word	0x3ff921fb
 800bdf8:	54442d18 	.word	0x54442d18
 800bdfc:	3fe921fb 	.word	0x3fe921fb
 800be00:	0800d628 	.word	0x0800d628
 800be04:	0800d640 	.word	0x0800d640
 800be08:	54442d18 	.word	0x54442d18
 800be0c:	c00921fb 	.word	0xc00921fb
 800be10:	54442d18 	.word	0x54442d18
 800be14:	bff921fb 	.word	0xbff921fb
 800be18:	7ff00000 	.word	0x7ff00000
 800be1c:	00000000 	.word	0x00000000

0800be20 <__ieee754_pow>:
 800be20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be24:	ed2d 8b06 	vpush	{d8-d10}
 800be28:	b089      	sub	sp, #36	; 0x24
 800be2a:	ed8d 1b00 	vstr	d1, [sp]
 800be2e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800be32:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800be36:	ea58 0102 	orrs.w	r1, r8, r2
 800be3a:	ec57 6b10 	vmov	r6, r7, d0
 800be3e:	d115      	bne.n	800be6c <__ieee754_pow+0x4c>
 800be40:	19b3      	adds	r3, r6, r6
 800be42:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800be46:	4152      	adcs	r2, r2
 800be48:	4299      	cmp	r1, r3
 800be4a:	4b89      	ldr	r3, [pc, #548]	; (800c070 <__ieee754_pow+0x250>)
 800be4c:	4193      	sbcs	r3, r2
 800be4e:	f080 84d2 	bcs.w	800c7f6 <__ieee754_pow+0x9d6>
 800be52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be56:	4630      	mov	r0, r6
 800be58:	4639      	mov	r1, r7
 800be5a:	f7f4 fa17 	bl	800028c <__adddf3>
 800be5e:	ec41 0b10 	vmov	d0, r0, r1
 800be62:	b009      	add	sp, #36	; 0x24
 800be64:	ecbd 8b06 	vpop	{d8-d10}
 800be68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6c:	4b81      	ldr	r3, [pc, #516]	; (800c074 <__ieee754_pow+0x254>)
 800be6e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800be72:	429c      	cmp	r4, r3
 800be74:	ee10 aa10 	vmov	sl, s0
 800be78:	463d      	mov	r5, r7
 800be7a:	dc06      	bgt.n	800be8a <__ieee754_pow+0x6a>
 800be7c:	d101      	bne.n	800be82 <__ieee754_pow+0x62>
 800be7e:	2e00      	cmp	r6, #0
 800be80:	d1e7      	bne.n	800be52 <__ieee754_pow+0x32>
 800be82:	4598      	cmp	r8, r3
 800be84:	dc01      	bgt.n	800be8a <__ieee754_pow+0x6a>
 800be86:	d10f      	bne.n	800bea8 <__ieee754_pow+0x88>
 800be88:	b172      	cbz	r2, 800bea8 <__ieee754_pow+0x88>
 800be8a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800be8e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800be92:	ea55 050a 	orrs.w	r5, r5, sl
 800be96:	d1dc      	bne.n	800be52 <__ieee754_pow+0x32>
 800be98:	e9dd 3200 	ldrd	r3, r2, [sp]
 800be9c:	18db      	adds	r3, r3, r3
 800be9e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bea2:	4152      	adcs	r2, r2
 800bea4:	429d      	cmp	r5, r3
 800bea6:	e7d0      	b.n	800be4a <__ieee754_pow+0x2a>
 800bea8:	2d00      	cmp	r5, #0
 800beaa:	da3b      	bge.n	800bf24 <__ieee754_pow+0x104>
 800beac:	4b72      	ldr	r3, [pc, #456]	; (800c078 <__ieee754_pow+0x258>)
 800beae:	4598      	cmp	r8, r3
 800beb0:	dc51      	bgt.n	800bf56 <__ieee754_pow+0x136>
 800beb2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800beb6:	4598      	cmp	r8, r3
 800beb8:	f340 84ac 	ble.w	800c814 <__ieee754_pow+0x9f4>
 800bebc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bec0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bec4:	2b14      	cmp	r3, #20
 800bec6:	dd0f      	ble.n	800bee8 <__ieee754_pow+0xc8>
 800bec8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800becc:	fa22 f103 	lsr.w	r1, r2, r3
 800bed0:	fa01 f303 	lsl.w	r3, r1, r3
 800bed4:	4293      	cmp	r3, r2
 800bed6:	f040 849d 	bne.w	800c814 <__ieee754_pow+0x9f4>
 800beda:	f001 0101 	and.w	r1, r1, #1
 800bede:	f1c1 0302 	rsb	r3, r1, #2
 800bee2:	9304      	str	r3, [sp, #16]
 800bee4:	b182      	cbz	r2, 800bf08 <__ieee754_pow+0xe8>
 800bee6:	e05f      	b.n	800bfa8 <__ieee754_pow+0x188>
 800bee8:	2a00      	cmp	r2, #0
 800beea:	d15b      	bne.n	800bfa4 <__ieee754_pow+0x184>
 800beec:	f1c3 0314 	rsb	r3, r3, #20
 800bef0:	fa48 f103 	asr.w	r1, r8, r3
 800bef4:	fa01 f303 	lsl.w	r3, r1, r3
 800bef8:	4543      	cmp	r3, r8
 800befa:	f040 8488 	bne.w	800c80e <__ieee754_pow+0x9ee>
 800befe:	f001 0101 	and.w	r1, r1, #1
 800bf02:	f1c1 0302 	rsb	r3, r1, #2
 800bf06:	9304      	str	r3, [sp, #16]
 800bf08:	4b5c      	ldr	r3, [pc, #368]	; (800c07c <__ieee754_pow+0x25c>)
 800bf0a:	4598      	cmp	r8, r3
 800bf0c:	d132      	bne.n	800bf74 <__ieee754_pow+0x154>
 800bf0e:	f1b9 0f00 	cmp.w	r9, #0
 800bf12:	f280 8478 	bge.w	800c806 <__ieee754_pow+0x9e6>
 800bf16:	4959      	ldr	r1, [pc, #356]	; (800c07c <__ieee754_pow+0x25c>)
 800bf18:	4632      	mov	r2, r6
 800bf1a:	463b      	mov	r3, r7
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	f7f4 fc95 	bl	800084c <__aeabi_ddiv>
 800bf22:	e79c      	b.n	800be5e <__ieee754_pow+0x3e>
 800bf24:	2300      	movs	r3, #0
 800bf26:	9304      	str	r3, [sp, #16]
 800bf28:	2a00      	cmp	r2, #0
 800bf2a:	d13d      	bne.n	800bfa8 <__ieee754_pow+0x188>
 800bf2c:	4b51      	ldr	r3, [pc, #324]	; (800c074 <__ieee754_pow+0x254>)
 800bf2e:	4598      	cmp	r8, r3
 800bf30:	d1ea      	bne.n	800bf08 <__ieee754_pow+0xe8>
 800bf32:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bf36:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bf3a:	ea53 030a 	orrs.w	r3, r3, sl
 800bf3e:	f000 845a 	beq.w	800c7f6 <__ieee754_pow+0x9d6>
 800bf42:	4b4f      	ldr	r3, [pc, #316]	; (800c080 <__ieee754_pow+0x260>)
 800bf44:	429c      	cmp	r4, r3
 800bf46:	dd08      	ble.n	800bf5a <__ieee754_pow+0x13a>
 800bf48:	f1b9 0f00 	cmp.w	r9, #0
 800bf4c:	f2c0 8457 	blt.w	800c7fe <__ieee754_pow+0x9de>
 800bf50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf54:	e783      	b.n	800be5e <__ieee754_pow+0x3e>
 800bf56:	2302      	movs	r3, #2
 800bf58:	e7e5      	b.n	800bf26 <__ieee754_pow+0x106>
 800bf5a:	f1b9 0f00 	cmp.w	r9, #0
 800bf5e:	f04f 0000 	mov.w	r0, #0
 800bf62:	f04f 0100 	mov.w	r1, #0
 800bf66:	f6bf af7a 	bge.w	800be5e <__ieee754_pow+0x3e>
 800bf6a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bf6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bf72:	e774      	b.n	800be5e <__ieee754_pow+0x3e>
 800bf74:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bf78:	d106      	bne.n	800bf88 <__ieee754_pow+0x168>
 800bf7a:	4632      	mov	r2, r6
 800bf7c:	463b      	mov	r3, r7
 800bf7e:	4630      	mov	r0, r6
 800bf80:	4639      	mov	r1, r7
 800bf82:	f7f4 fb39 	bl	80005f8 <__aeabi_dmul>
 800bf86:	e76a      	b.n	800be5e <__ieee754_pow+0x3e>
 800bf88:	4b3e      	ldr	r3, [pc, #248]	; (800c084 <__ieee754_pow+0x264>)
 800bf8a:	4599      	cmp	r9, r3
 800bf8c:	d10c      	bne.n	800bfa8 <__ieee754_pow+0x188>
 800bf8e:	2d00      	cmp	r5, #0
 800bf90:	db0a      	blt.n	800bfa8 <__ieee754_pow+0x188>
 800bf92:	ec47 6b10 	vmov	d0, r6, r7
 800bf96:	b009      	add	sp, #36	; 0x24
 800bf98:	ecbd 8b06 	vpop	{d8-d10}
 800bf9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa0:	f000 bc6c 	b.w	800c87c <__ieee754_sqrt>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	9304      	str	r3, [sp, #16]
 800bfa8:	ec47 6b10 	vmov	d0, r6, r7
 800bfac:	f7ff fdc4 	bl	800bb38 <fabs>
 800bfb0:	ec51 0b10 	vmov	r0, r1, d0
 800bfb4:	f1ba 0f00 	cmp.w	sl, #0
 800bfb8:	d129      	bne.n	800c00e <__ieee754_pow+0x1ee>
 800bfba:	b124      	cbz	r4, 800bfc6 <__ieee754_pow+0x1a6>
 800bfbc:	4b2f      	ldr	r3, [pc, #188]	; (800c07c <__ieee754_pow+0x25c>)
 800bfbe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d123      	bne.n	800c00e <__ieee754_pow+0x1ee>
 800bfc6:	f1b9 0f00 	cmp.w	r9, #0
 800bfca:	da05      	bge.n	800bfd8 <__ieee754_pow+0x1b8>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	460b      	mov	r3, r1
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	492a      	ldr	r1, [pc, #168]	; (800c07c <__ieee754_pow+0x25c>)
 800bfd4:	f7f4 fc3a 	bl	800084c <__aeabi_ddiv>
 800bfd8:	2d00      	cmp	r5, #0
 800bfda:	f6bf af40 	bge.w	800be5e <__ieee754_pow+0x3e>
 800bfde:	9b04      	ldr	r3, [sp, #16]
 800bfe0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bfe4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bfe8:	4323      	orrs	r3, r4
 800bfea:	d108      	bne.n	800bffe <__ieee754_pow+0x1de>
 800bfec:	4602      	mov	r2, r0
 800bfee:	460b      	mov	r3, r1
 800bff0:	4610      	mov	r0, r2
 800bff2:	4619      	mov	r1, r3
 800bff4:	f7f4 f948 	bl	8000288 <__aeabi_dsub>
 800bff8:	4602      	mov	r2, r0
 800bffa:	460b      	mov	r3, r1
 800bffc:	e78f      	b.n	800bf1e <__ieee754_pow+0xfe>
 800bffe:	9b04      	ldr	r3, [sp, #16]
 800c000:	2b01      	cmp	r3, #1
 800c002:	f47f af2c 	bne.w	800be5e <__ieee754_pow+0x3e>
 800c006:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c00a:	4619      	mov	r1, r3
 800c00c:	e727      	b.n	800be5e <__ieee754_pow+0x3e>
 800c00e:	0feb      	lsrs	r3, r5, #31
 800c010:	3b01      	subs	r3, #1
 800c012:	9306      	str	r3, [sp, #24]
 800c014:	9a06      	ldr	r2, [sp, #24]
 800c016:	9b04      	ldr	r3, [sp, #16]
 800c018:	4313      	orrs	r3, r2
 800c01a:	d102      	bne.n	800c022 <__ieee754_pow+0x202>
 800c01c:	4632      	mov	r2, r6
 800c01e:	463b      	mov	r3, r7
 800c020:	e7e6      	b.n	800bff0 <__ieee754_pow+0x1d0>
 800c022:	4b19      	ldr	r3, [pc, #100]	; (800c088 <__ieee754_pow+0x268>)
 800c024:	4598      	cmp	r8, r3
 800c026:	f340 80fb 	ble.w	800c220 <__ieee754_pow+0x400>
 800c02a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c02e:	4598      	cmp	r8, r3
 800c030:	4b13      	ldr	r3, [pc, #76]	; (800c080 <__ieee754_pow+0x260>)
 800c032:	dd0c      	ble.n	800c04e <__ieee754_pow+0x22e>
 800c034:	429c      	cmp	r4, r3
 800c036:	dc0f      	bgt.n	800c058 <__ieee754_pow+0x238>
 800c038:	f1b9 0f00 	cmp.w	r9, #0
 800c03c:	da0f      	bge.n	800c05e <__ieee754_pow+0x23e>
 800c03e:	2000      	movs	r0, #0
 800c040:	b009      	add	sp, #36	; 0x24
 800c042:	ecbd 8b06 	vpop	{d8-d10}
 800c046:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c04a:	f000 bcf0 	b.w	800ca2e <__math_oflow>
 800c04e:	429c      	cmp	r4, r3
 800c050:	dbf2      	blt.n	800c038 <__ieee754_pow+0x218>
 800c052:	4b0a      	ldr	r3, [pc, #40]	; (800c07c <__ieee754_pow+0x25c>)
 800c054:	429c      	cmp	r4, r3
 800c056:	dd19      	ble.n	800c08c <__ieee754_pow+0x26c>
 800c058:	f1b9 0f00 	cmp.w	r9, #0
 800c05c:	dcef      	bgt.n	800c03e <__ieee754_pow+0x21e>
 800c05e:	2000      	movs	r0, #0
 800c060:	b009      	add	sp, #36	; 0x24
 800c062:	ecbd 8b06 	vpop	{d8-d10}
 800c066:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c06a:	f000 bcd7 	b.w	800ca1c <__math_uflow>
 800c06e:	bf00      	nop
 800c070:	fff00000 	.word	0xfff00000
 800c074:	7ff00000 	.word	0x7ff00000
 800c078:	433fffff 	.word	0x433fffff
 800c07c:	3ff00000 	.word	0x3ff00000
 800c080:	3fefffff 	.word	0x3fefffff
 800c084:	3fe00000 	.word	0x3fe00000
 800c088:	41e00000 	.word	0x41e00000
 800c08c:	4b60      	ldr	r3, [pc, #384]	; (800c210 <__ieee754_pow+0x3f0>)
 800c08e:	2200      	movs	r2, #0
 800c090:	f7f4 f8fa 	bl	8000288 <__aeabi_dsub>
 800c094:	a354      	add	r3, pc, #336	; (adr r3, 800c1e8 <__ieee754_pow+0x3c8>)
 800c096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09a:	4604      	mov	r4, r0
 800c09c:	460d      	mov	r5, r1
 800c09e:	f7f4 faab 	bl	80005f8 <__aeabi_dmul>
 800c0a2:	a353      	add	r3, pc, #332	; (adr r3, 800c1f0 <__ieee754_pow+0x3d0>)
 800c0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a8:	4606      	mov	r6, r0
 800c0aa:	460f      	mov	r7, r1
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	4629      	mov	r1, r5
 800c0b0:	f7f4 faa2 	bl	80005f8 <__aeabi_dmul>
 800c0b4:	4b57      	ldr	r3, [pc, #348]	; (800c214 <__ieee754_pow+0x3f4>)
 800c0b6:	4682      	mov	sl, r0
 800c0b8:	468b      	mov	fp, r1
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	4620      	mov	r0, r4
 800c0be:	4629      	mov	r1, r5
 800c0c0:	f7f4 fa9a 	bl	80005f8 <__aeabi_dmul>
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	a14b      	add	r1, pc, #300	; (adr r1, 800c1f8 <__ieee754_pow+0x3d8>)
 800c0ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0ce:	f7f4 f8db 	bl	8000288 <__aeabi_dsub>
 800c0d2:	4622      	mov	r2, r4
 800c0d4:	462b      	mov	r3, r5
 800c0d6:	f7f4 fa8f 	bl	80005f8 <__aeabi_dmul>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	460b      	mov	r3, r1
 800c0de:	2000      	movs	r0, #0
 800c0e0:	494d      	ldr	r1, [pc, #308]	; (800c218 <__ieee754_pow+0x3f8>)
 800c0e2:	f7f4 f8d1 	bl	8000288 <__aeabi_dsub>
 800c0e6:	4622      	mov	r2, r4
 800c0e8:	4680      	mov	r8, r0
 800c0ea:	4689      	mov	r9, r1
 800c0ec:	462b      	mov	r3, r5
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	4629      	mov	r1, r5
 800c0f2:	f7f4 fa81 	bl	80005f8 <__aeabi_dmul>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	4640      	mov	r0, r8
 800c0fc:	4649      	mov	r1, r9
 800c0fe:	f7f4 fa7b 	bl	80005f8 <__aeabi_dmul>
 800c102:	a33f      	add	r3, pc, #252	; (adr r3, 800c200 <__ieee754_pow+0x3e0>)
 800c104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c108:	f7f4 fa76 	bl	80005f8 <__aeabi_dmul>
 800c10c:	4602      	mov	r2, r0
 800c10e:	460b      	mov	r3, r1
 800c110:	4650      	mov	r0, sl
 800c112:	4659      	mov	r1, fp
 800c114:	f7f4 f8b8 	bl	8000288 <__aeabi_dsub>
 800c118:	4602      	mov	r2, r0
 800c11a:	460b      	mov	r3, r1
 800c11c:	4680      	mov	r8, r0
 800c11e:	4689      	mov	r9, r1
 800c120:	4630      	mov	r0, r6
 800c122:	4639      	mov	r1, r7
 800c124:	f7f4 f8b2 	bl	800028c <__adddf3>
 800c128:	2000      	movs	r0, #0
 800c12a:	4632      	mov	r2, r6
 800c12c:	463b      	mov	r3, r7
 800c12e:	4604      	mov	r4, r0
 800c130:	460d      	mov	r5, r1
 800c132:	f7f4 f8a9 	bl	8000288 <__aeabi_dsub>
 800c136:	4602      	mov	r2, r0
 800c138:	460b      	mov	r3, r1
 800c13a:	4640      	mov	r0, r8
 800c13c:	4649      	mov	r1, r9
 800c13e:	f7f4 f8a3 	bl	8000288 <__aeabi_dsub>
 800c142:	9b04      	ldr	r3, [sp, #16]
 800c144:	9a06      	ldr	r2, [sp, #24]
 800c146:	3b01      	subs	r3, #1
 800c148:	4313      	orrs	r3, r2
 800c14a:	4682      	mov	sl, r0
 800c14c:	468b      	mov	fp, r1
 800c14e:	f040 81e7 	bne.w	800c520 <__ieee754_pow+0x700>
 800c152:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c208 <__ieee754_pow+0x3e8>
 800c156:	eeb0 8a47 	vmov.f32	s16, s14
 800c15a:	eef0 8a67 	vmov.f32	s17, s15
 800c15e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c162:	2600      	movs	r6, #0
 800c164:	4632      	mov	r2, r6
 800c166:	463b      	mov	r3, r7
 800c168:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c16c:	f7f4 f88c 	bl	8000288 <__aeabi_dsub>
 800c170:	4622      	mov	r2, r4
 800c172:	462b      	mov	r3, r5
 800c174:	f7f4 fa40 	bl	80005f8 <__aeabi_dmul>
 800c178:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c17c:	4680      	mov	r8, r0
 800c17e:	4689      	mov	r9, r1
 800c180:	4650      	mov	r0, sl
 800c182:	4659      	mov	r1, fp
 800c184:	f7f4 fa38 	bl	80005f8 <__aeabi_dmul>
 800c188:	4602      	mov	r2, r0
 800c18a:	460b      	mov	r3, r1
 800c18c:	4640      	mov	r0, r8
 800c18e:	4649      	mov	r1, r9
 800c190:	f7f4 f87c 	bl	800028c <__adddf3>
 800c194:	4632      	mov	r2, r6
 800c196:	463b      	mov	r3, r7
 800c198:	4680      	mov	r8, r0
 800c19a:	4689      	mov	r9, r1
 800c19c:	4620      	mov	r0, r4
 800c19e:	4629      	mov	r1, r5
 800c1a0:	f7f4 fa2a 	bl	80005f8 <__aeabi_dmul>
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	460d      	mov	r5, r1
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	4649      	mov	r1, r9
 800c1ae:	4640      	mov	r0, r8
 800c1b0:	f7f4 f86c 	bl	800028c <__adddf3>
 800c1b4:	4b19      	ldr	r3, [pc, #100]	; (800c21c <__ieee754_pow+0x3fc>)
 800c1b6:	4299      	cmp	r1, r3
 800c1b8:	ec45 4b19 	vmov	d9, r4, r5
 800c1bc:	4606      	mov	r6, r0
 800c1be:	460f      	mov	r7, r1
 800c1c0:	468b      	mov	fp, r1
 800c1c2:	f340 82f1 	ble.w	800c7a8 <__ieee754_pow+0x988>
 800c1c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c1ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c1ce:	4303      	orrs	r3, r0
 800c1d0:	f000 81e4 	beq.w	800c59c <__ieee754_pow+0x77c>
 800c1d4:	ec51 0b18 	vmov	r0, r1, d8
 800c1d8:	2200      	movs	r2, #0
 800c1da:	2300      	movs	r3, #0
 800c1dc:	f7f4 fc7e 	bl	8000adc <__aeabi_dcmplt>
 800c1e0:	3800      	subs	r0, #0
 800c1e2:	bf18      	it	ne
 800c1e4:	2001      	movne	r0, #1
 800c1e6:	e72b      	b.n	800c040 <__ieee754_pow+0x220>
 800c1e8:	60000000 	.word	0x60000000
 800c1ec:	3ff71547 	.word	0x3ff71547
 800c1f0:	f85ddf44 	.word	0xf85ddf44
 800c1f4:	3e54ae0b 	.word	0x3e54ae0b
 800c1f8:	55555555 	.word	0x55555555
 800c1fc:	3fd55555 	.word	0x3fd55555
 800c200:	652b82fe 	.word	0x652b82fe
 800c204:	3ff71547 	.word	0x3ff71547
 800c208:	00000000 	.word	0x00000000
 800c20c:	bff00000 	.word	0xbff00000
 800c210:	3ff00000 	.word	0x3ff00000
 800c214:	3fd00000 	.word	0x3fd00000
 800c218:	3fe00000 	.word	0x3fe00000
 800c21c:	408fffff 	.word	0x408fffff
 800c220:	4bd5      	ldr	r3, [pc, #852]	; (800c578 <__ieee754_pow+0x758>)
 800c222:	402b      	ands	r3, r5
 800c224:	2200      	movs	r2, #0
 800c226:	b92b      	cbnz	r3, 800c234 <__ieee754_pow+0x414>
 800c228:	4bd4      	ldr	r3, [pc, #848]	; (800c57c <__ieee754_pow+0x75c>)
 800c22a:	f7f4 f9e5 	bl	80005f8 <__aeabi_dmul>
 800c22e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c232:	460c      	mov	r4, r1
 800c234:	1523      	asrs	r3, r4, #20
 800c236:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c23a:	4413      	add	r3, r2
 800c23c:	9305      	str	r3, [sp, #20]
 800c23e:	4bd0      	ldr	r3, [pc, #832]	; (800c580 <__ieee754_pow+0x760>)
 800c240:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c244:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c248:	429c      	cmp	r4, r3
 800c24a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c24e:	dd08      	ble.n	800c262 <__ieee754_pow+0x442>
 800c250:	4bcc      	ldr	r3, [pc, #816]	; (800c584 <__ieee754_pow+0x764>)
 800c252:	429c      	cmp	r4, r3
 800c254:	f340 8162 	ble.w	800c51c <__ieee754_pow+0x6fc>
 800c258:	9b05      	ldr	r3, [sp, #20]
 800c25a:	3301      	adds	r3, #1
 800c25c:	9305      	str	r3, [sp, #20]
 800c25e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c262:	2400      	movs	r4, #0
 800c264:	00e3      	lsls	r3, r4, #3
 800c266:	9307      	str	r3, [sp, #28]
 800c268:	4bc7      	ldr	r3, [pc, #796]	; (800c588 <__ieee754_pow+0x768>)
 800c26a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c26e:	ed93 7b00 	vldr	d7, [r3]
 800c272:	4629      	mov	r1, r5
 800c274:	ec53 2b17 	vmov	r2, r3, d7
 800c278:	eeb0 9a47 	vmov.f32	s18, s14
 800c27c:	eef0 9a67 	vmov.f32	s19, s15
 800c280:	4682      	mov	sl, r0
 800c282:	f7f4 f801 	bl	8000288 <__aeabi_dsub>
 800c286:	4652      	mov	r2, sl
 800c288:	4606      	mov	r6, r0
 800c28a:	460f      	mov	r7, r1
 800c28c:	462b      	mov	r3, r5
 800c28e:	ec51 0b19 	vmov	r0, r1, d9
 800c292:	f7f3 fffb 	bl	800028c <__adddf3>
 800c296:	4602      	mov	r2, r0
 800c298:	460b      	mov	r3, r1
 800c29a:	2000      	movs	r0, #0
 800c29c:	49bb      	ldr	r1, [pc, #748]	; (800c58c <__ieee754_pow+0x76c>)
 800c29e:	f7f4 fad5 	bl	800084c <__aeabi_ddiv>
 800c2a2:	ec41 0b1a 	vmov	d10, r0, r1
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	4630      	mov	r0, r6
 800c2ac:	4639      	mov	r1, r7
 800c2ae:	f7f4 f9a3 	bl	80005f8 <__aeabi_dmul>
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2b8:	9302      	str	r3, [sp, #8]
 800c2ba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c2be:	46ab      	mov	fp, r5
 800c2c0:	106d      	asrs	r5, r5, #1
 800c2c2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c2c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c2ca:	ec41 0b18 	vmov	d8, r0, r1
 800c2ce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	4640      	mov	r0, r8
 800c2d6:	4649      	mov	r1, r9
 800c2d8:	4614      	mov	r4, r2
 800c2da:	461d      	mov	r5, r3
 800c2dc:	f7f4 f98c 	bl	80005f8 <__aeabi_dmul>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	4639      	mov	r1, r7
 800c2e8:	f7f3 ffce 	bl	8000288 <__aeabi_dsub>
 800c2ec:	ec53 2b19 	vmov	r2, r3, d9
 800c2f0:	4606      	mov	r6, r0
 800c2f2:	460f      	mov	r7, r1
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	4629      	mov	r1, r5
 800c2f8:	f7f3 ffc6 	bl	8000288 <__aeabi_dsub>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	460b      	mov	r3, r1
 800c300:	4650      	mov	r0, sl
 800c302:	4659      	mov	r1, fp
 800c304:	f7f3 ffc0 	bl	8000288 <__aeabi_dsub>
 800c308:	4642      	mov	r2, r8
 800c30a:	464b      	mov	r3, r9
 800c30c:	f7f4 f974 	bl	80005f8 <__aeabi_dmul>
 800c310:	4602      	mov	r2, r0
 800c312:	460b      	mov	r3, r1
 800c314:	4630      	mov	r0, r6
 800c316:	4639      	mov	r1, r7
 800c318:	f7f3 ffb6 	bl	8000288 <__aeabi_dsub>
 800c31c:	ec53 2b1a 	vmov	r2, r3, d10
 800c320:	f7f4 f96a 	bl	80005f8 <__aeabi_dmul>
 800c324:	ec53 2b18 	vmov	r2, r3, d8
 800c328:	ec41 0b19 	vmov	d9, r0, r1
 800c32c:	ec51 0b18 	vmov	r0, r1, d8
 800c330:	f7f4 f962 	bl	80005f8 <__aeabi_dmul>
 800c334:	a37c      	add	r3, pc, #496	; (adr r3, 800c528 <__ieee754_pow+0x708>)
 800c336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33a:	4604      	mov	r4, r0
 800c33c:	460d      	mov	r5, r1
 800c33e:	f7f4 f95b 	bl	80005f8 <__aeabi_dmul>
 800c342:	a37b      	add	r3, pc, #492	; (adr r3, 800c530 <__ieee754_pow+0x710>)
 800c344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c348:	f7f3 ffa0 	bl	800028c <__adddf3>
 800c34c:	4622      	mov	r2, r4
 800c34e:	462b      	mov	r3, r5
 800c350:	f7f4 f952 	bl	80005f8 <__aeabi_dmul>
 800c354:	a378      	add	r3, pc, #480	; (adr r3, 800c538 <__ieee754_pow+0x718>)
 800c356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35a:	f7f3 ff97 	bl	800028c <__adddf3>
 800c35e:	4622      	mov	r2, r4
 800c360:	462b      	mov	r3, r5
 800c362:	f7f4 f949 	bl	80005f8 <__aeabi_dmul>
 800c366:	a376      	add	r3, pc, #472	; (adr r3, 800c540 <__ieee754_pow+0x720>)
 800c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36c:	f7f3 ff8e 	bl	800028c <__adddf3>
 800c370:	4622      	mov	r2, r4
 800c372:	462b      	mov	r3, r5
 800c374:	f7f4 f940 	bl	80005f8 <__aeabi_dmul>
 800c378:	a373      	add	r3, pc, #460	; (adr r3, 800c548 <__ieee754_pow+0x728>)
 800c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37e:	f7f3 ff85 	bl	800028c <__adddf3>
 800c382:	4622      	mov	r2, r4
 800c384:	462b      	mov	r3, r5
 800c386:	f7f4 f937 	bl	80005f8 <__aeabi_dmul>
 800c38a:	a371      	add	r3, pc, #452	; (adr r3, 800c550 <__ieee754_pow+0x730>)
 800c38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c390:	f7f3 ff7c 	bl	800028c <__adddf3>
 800c394:	4622      	mov	r2, r4
 800c396:	4606      	mov	r6, r0
 800c398:	460f      	mov	r7, r1
 800c39a:	462b      	mov	r3, r5
 800c39c:	4620      	mov	r0, r4
 800c39e:	4629      	mov	r1, r5
 800c3a0:	f7f4 f92a 	bl	80005f8 <__aeabi_dmul>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	4630      	mov	r0, r6
 800c3aa:	4639      	mov	r1, r7
 800c3ac:	f7f4 f924 	bl	80005f8 <__aeabi_dmul>
 800c3b0:	4642      	mov	r2, r8
 800c3b2:	4604      	mov	r4, r0
 800c3b4:	460d      	mov	r5, r1
 800c3b6:	464b      	mov	r3, r9
 800c3b8:	ec51 0b18 	vmov	r0, r1, d8
 800c3bc:	f7f3 ff66 	bl	800028c <__adddf3>
 800c3c0:	ec53 2b19 	vmov	r2, r3, d9
 800c3c4:	f7f4 f918 	bl	80005f8 <__aeabi_dmul>
 800c3c8:	4622      	mov	r2, r4
 800c3ca:	462b      	mov	r3, r5
 800c3cc:	f7f3 ff5e 	bl	800028c <__adddf3>
 800c3d0:	4642      	mov	r2, r8
 800c3d2:	4682      	mov	sl, r0
 800c3d4:	468b      	mov	fp, r1
 800c3d6:	464b      	mov	r3, r9
 800c3d8:	4640      	mov	r0, r8
 800c3da:	4649      	mov	r1, r9
 800c3dc:	f7f4 f90c 	bl	80005f8 <__aeabi_dmul>
 800c3e0:	4b6b      	ldr	r3, [pc, #428]	; (800c590 <__ieee754_pow+0x770>)
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	4606      	mov	r6, r0
 800c3e6:	460f      	mov	r7, r1
 800c3e8:	f7f3 ff50 	bl	800028c <__adddf3>
 800c3ec:	4652      	mov	r2, sl
 800c3ee:	465b      	mov	r3, fp
 800c3f0:	f7f3 ff4c 	bl	800028c <__adddf3>
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	460d      	mov	r5, r1
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	4640      	mov	r0, r8
 800c400:	4649      	mov	r1, r9
 800c402:	f7f4 f8f9 	bl	80005f8 <__aeabi_dmul>
 800c406:	4b62      	ldr	r3, [pc, #392]	; (800c590 <__ieee754_pow+0x770>)
 800c408:	4680      	mov	r8, r0
 800c40a:	4689      	mov	r9, r1
 800c40c:	2200      	movs	r2, #0
 800c40e:	4620      	mov	r0, r4
 800c410:	4629      	mov	r1, r5
 800c412:	f7f3 ff39 	bl	8000288 <__aeabi_dsub>
 800c416:	4632      	mov	r2, r6
 800c418:	463b      	mov	r3, r7
 800c41a:	f7f3 ff35 	bl	8000288 <__aeabi_dsub>
 800c41e:	4602      	mov	r2, r0
 800c420:	460b      	mov	r3, r1
 800c422:	4650      	mov	r0, sl
 800c424:	4659      	mov	r1, fp
 800c426:	f7f3 ff2f 	bl	8000288 <__aeabi_dsub>
 800c42a:	ec53 2b18 	vmov	r2, r3, d8
 800c42e:	f7f4 f8e3 	bl	80005f8 <__aeabi_dmul>
 800c432:	4622      	mov	r2, r4
 800c434:	4606      	mov	r6, r0
 800c436:	460f      	mov	r7, r1
 800c438:	462b      	mov	r3, r5
 800c43a:	ec51 0b19 	vmov	r0, r1, d9
 800c43e:	f7f4 f8db 	bl	80005f8 <__aeabi_dmul>
 800c442:	4602      	mov	r2, r0
 800c444:	460b      	mov	r3, r1
 800c446:	4630      	mov	r0, r6
 800c448:	4639      	mov	r1, r7
 800c44a:	f7f3 ff1f 	bl	800028c <__adddf3>
 800c44e:	4606      	mov	r6, r0
 800c450:	460f      	mov	r7, r1
 800c452:	4602      	mov	r2, r0
 800c454:	460b      	mov	r3, r1
 800c456:	4640      	mov	r0, r8
 800c458:	4649      	mov	r1, r9
 800c45a:	f7f3 ff17 	bl	800028c <__adddf3>
 800c45e:	a33e      	add	r3, pc, #248	; (adr r3, 800c558 <__ieee754_pow+0x738>)
 800c460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c464:	2000      	movs	r0, #0
 800c466:	4604      	mov	r4, r0
 800c468:	460d      	mov	r5, r1
 800c46a:	f7f4 f8c5 	bl	80005f8 <__aeabi_dmul>
 800c46e:	4642      	mov	r2, r8
 800c470:	ec41 0b18 	vmov	d8, r0, r1
 800c474:	464b      	mov	r3, r9
 800c476:	4620      	mov	r0, r4
 800c478:	4629      	mov	r1, r5
 800c47a:	f7f3 ff05 	bl	8000288 <__aeabi_dsub>
 800c47e:	4602      	mov	r2, r0
 800c480:	460b      	mov	r3, r1
 800c482:	4630      	mov	r0, r6
 800c484:	4639      	mov	r1, r7
 800c486:	f7f3 feff 	bl	8000288 <__aeabi_dsub>
 800c48a:	a335      	add	r3, pc, #212	; (adr r3, 800c560 <__ieee754_pow+0x740>)
 800c48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c490:	f7f4 f8b2 	bl	80005f8 <__aeabi_dmul>
 800c494:	a334      	add	r3, pc, #208	; (adr r3, 800c568 <__ieee754_pow+0x748>)
 800c496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49a:	4606      	mov	r6, r0
 800c49c:	460f      	mov	r7, r1
 800c49e:	4620      	mov	r0, r4
 800c4a0:	4629      	mov	r1, r5
 800c4a2:	f7f4 f8a9 	bl	80005f8 <__aeabi_dmul>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	4630      	mov	r0, r6
 800c4ac:	4639      	mov	r1, r7
 800c4ae:	f7f3 feed 	bl	800028c <__adddf3>
 800c4b2:	9a07      	ldr	r2, [sp, #28]
 800c4b4:	4b37      	ldr	r3, [pc, #220]	; (800c594 <__ieee754_pow+0x774>)
 800c4b6:	4413      	add	r3, r2
 800c4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4bc:	f7f3 fee6 	bl	800028c <__adddf3>
 800c4c0:	4682      	mov	sl, r0
 800c4c2:	9805      	ldr	r0, [sp, #20]
 800c4c4:	468b      	mov	fp, r1
 800c4c6:	f7f4 f82d 	bl	8000524 <__aeabi_i2d>
 800c4ca:	9a07      	ldr	r2, [sp, #28]
 800c4cc:	4b32      	ldr	r3, [pc, #200]	; (800c598 <__ieee754_pow+0x778>)
 800c4ce:	4413      	add	r3, r2
 800c4d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	460f      	mov	r7, r1
 800c4d8:	4652      	mov	r2, sl
 800c4da:	465b      	mov	r3, fp
 800c4dc:	ec51 0b18 	vmov	r0, r1, d8
 800c4e0:	f7f3 fed4 	bl	800028c <__adddf3>
 800c4e4:	4642      	mov	r2, r8
 800c4e6:	464b      	mov	r3, r9
 800c4e8:	f7f3 fed0 	bl	800028c <__adddf3>
 800c4ec:	4632      	mov	r2, r6
 800c4ee:	463b      	mov	r3, r7
 800c4f0:	f7f3 fecc 	bl	800028c <__adddf3>
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	4632      	mov	r2, r6
 800c4f8:	463b      	mov	r3, r7
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	460d      	mov	r5, r1
 800c4fe:	f7f3 fec3 	bl	8000288 <__aeabi_dsub>
 800c502:	4642      	mov	r2, r8
 800c504:	464b      	mov	r3, r9
 800c506:	f7f3 febf 	bl	8000288 <__aeabi_dsub>
 800c50a:	ec53 2b18 	vmov	r2, r3, d8
 800c50e:	f7f3 febb 	bl	8000288 <__aeabi_dsub>
 800c512:	4602      	mov	r2, r0
 800c514:	460b      	mov	r3, r1
 800c516:	4650      	mov	r0, sl
 800c518:	4659      	mov	r1, fp
 800c51a:	e610      	b.n	800c13e <__ieee754_pow+0x31e>
 800c51c:	2401      	movs	r4, #1
 800c51e:	e6a1      	b.n	800c264 <__ieee754_pow+0x444>
 800c520:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c570 <__ieee754_pow+0x750>
 800c524:	e617      	b.n	800c156 <__ieee754_pow+0x336>
 800c526:	bf00      	nop
 800c528:	4a454eef 	.word	0x4a454eef
 800c52c:	3fca7e28 	.word	0x3fca7e28
 800c530:	93c9db65 	.word	0x93c9db65
 800c534:	3fcd864a 	.word	0x3fcd864a
 800c538:	a91d4101 	.word	0xa91d4101
 800c53c:	3fd17460 	.word	0x3fd17460
 800c540:	518f264d 	.word	0x518f264d
 800c544:	3fd55555 	.word	0x3fd55555
 800c548:	db6fabff 	.word	0xdb6fabff
 800c54c:	3fdb6db6 	.word	0x3fdb6db6
 800c550:	33333303 	.word	0x33333303
 800c554:	3fe33333 	.word	0x3fe33333
 800c558:	e0000000 	.word	0xe0000000
 800c55c:	3feec709 	.word	0x3feec709
 800c560:	dc3a03fd 	.word	0xdc3a03fd
 800c564:	3feec709 	.word	0x3feec709
 800c568:	145b01f5 	.word	0x145b01f5
 800c56c:	be3e2fe0 	.word	0xbe3e2fe0
 800c570:	00000000 	.word	0x00000000
 800c574:	3ff00000 	.word	0x3ff00000
 800c578:	7ff00000 	.word	0x7ff00000
 800c57c:	43400000 	.word	0x43400000
 800c580:	0003988e 	.word	0x0003988e
 800c584:	000bb679 	.word	0x000bb679
 800c588:	0800d658 	.word	0x0800d658
 800c58c:	3ff00000 	.word	0x3ff00000
 800c590:	40080000 	.word	0x40080000
 800c594:	0800d678 	.word	0x0800d678
 800c598:	0800d668 	.word	0x0800d668
 800c59c:	a3b5      	add	r3, pc, #724	; (adr r3, 800c874 <__ieee754_pow+0xa54>)
 800c59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a2:	4640      	mov	r0, r8
 800c5a4:	4649      	mov	r1, r9
 800c5a6:	f7f3 fe71 	bl	800028c <__adddf3>
 800c5aa:	4622      	mov	r2, r4
 800c5ac:	ec41 0b1a 	vmov	d10, r0, r1
 800c5b0:	462b      	mov	r3, r5
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	4639      	mov	r1, r7
 800c5b6:	f7f3 fe67 	bl	8000288 <__aeabi_dsub>
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	460b      	mov	r3, r1
 800c5be:	ec51 0b1a 	vmov	r0, r1, d10
 800c5c2:	f7f4 faa9 	bl	8000b18 <__aeabi_dcmpgt>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	f47f ae04 	bne.w	800c1d4 <__ieee754_pow+0x3b4>
 800c5cc:	4aa4      	ldr	r2, [pc, #656]	; (800c860 <__ieee754_pow+0xa40>)
 800c5ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	f340 8108 	ble.w	800c7e8 <__ieee754_pow+0x9c8>
 800c5d8:	151b      	asrs	r3, r3, #20
 800c5da:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c5de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c5e2:	fa4a f303 	asr.w	r3, sl, r3
 800c5e6:	445b      	add	r3, fp
 800c5e8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c5ec:	4e9d      	ldr	r6, [pc, #628]	; (800c864 <__ieee754_pow+0xa44>)
 800c5ee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c5f2:	4116      	asrs	r6, r2
 800c5f4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c5f8:	2000      	movs	r0, #0
 800c5fa:	ea23 0106 	bic.w	r1, r3, r6
 800c5fe:	f1c2 0214 	rsb	r2, r2, #20
 800c602:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c606:	fa4a fa02 	asr.w	sl, sl, r2
 800c60a:	f1bb 0f00 	cmp.w	fp, #0
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	4620      	mov	r0, r4
 800c614:	4629      	mov	r1, r5
 800c616:	bfb8      	it	lt
 800c618:	f1ca 0a00 	rsblt	sl, sl, #0
 800c61c:	f7f3 fe34 	bl	8000288 <__aeabi_dsub>
 800c620:	ec41 0b19 	vmov	d9, r0, r1
 800c624:	4642      	mov	r2, r8
 800c626:	464b      	mov	r3, r9
 800c628:	ec51 0b19 	vmov	r0, r1, d9
 800c62c:	f7f3 fe2e 	bl	800028c <__adddf3>
 800c630:	a37b      	add	r3, pc, #492	; (adr r3, 800c820 <__ieee754_pow+0xa00>)
 800c632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c636:	2000      	movs	r0, #0
 800c638:	4604      	mov	r4, r0
 800c63a:	460d      	mov	r5, r1
 800c63c:	f7f3 ffdc 	bl	80005f8 <__aeabi_dmul>
 800c640:	ec53 2b19 	vmov	r2, r3, d9
 800c644:	4606      	mov	r6, r0
 800c646:	460f      	mov	r7, r1
 800c648:	4620      	mov	r0, r4
 800c64a:	4629      	mov	r1, r5
 800c64c:	f7f3 fe1c 	bl	8000288 <__aeabi_dsub>
 800c650:	4602      	mov	r2, r0
 800c652:	460b      	mov	r3, r1
 800c654:	4640      	mov	r0, r8
 800c656:	4649      	mov	r1, r9
 800c658:	f7f3 fe16 	bl	8000288 <__aeabi_dsub>
 800c65c:	a372      	add	r3, pc, #456	; (adr r3, 800c828 <__ieee754_pow+0xa08>)
 800c65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c662:	f7f3 ffc9 	bl	80005f8 <__aeabi_dmul>
 800c666:	a372      	add	r3, pc, #456	; (adr r3, 800c830 <__ieee754_pow+0xa10>)
 800c668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66c:	4680      	mov	r8, r0
 800c66e:	4689      	mov	r9, r1
 800c670:	4620      	mov	r0, r4
 800c672:	4629      	mov	r1, r5
 800c674:	f7f3 ffc0 	bl	80005f8 <__aeabi_dmul>
 800c678:	4602      	mov	r2, r0
 800c67a:	460b      	mov	r3, r1
 800c67c:	4640      	mov	r0, r8
 800c67e:	4649      	mov	r1, r9
 800c680:	f7f3 fe04 	bl	800028c <__adddf3>
 800c684:	4604      	mov	r4, r0
 800c686:	460d      	mov	r5, r1
 800c688:	4602      	mov	r2, r0
 800c68a:	460b      	mov	r3, r1
 800c68c:	4630      	mov	r0, r6
 800c68e:	4639      	mov	r1, r7
 800c690:	f7f3 fdfc 	bl	800028c <__adddf3>
 800c694:	4632      	mov	r2, r6
 800c696:	463b      	mov	r3, r7
 800c698:	4680      	mov	r8, r0
 800c69a:	4689      	mov	r9, r1
 800c69c:	f7f3 fdf4 	bl	8000288 <__aeabi_dsub>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	4629      	mov	r1, r5
 800c6a8:	f7f3 fdee 	bl	8000288 <__aeabi_dsub>
 800c6ac:	4642      	mov	r2, r8
 800c6ae:	4606      	mov	r6, r0
 800c6b0:	460f      	mov	r7, r1
 800c6b2:	464b      	mov	r3, r9
 800c6b4:	4640      	mov	r0, r8
 800c6b6:	4649      	mov	r1, r9
 800c6b8:	f7f3 ff9e 	bl	80005f8 <__aeabi_dmul>
 800c6bc:	a35e      	add	r3, pc, #376	; (adr r3, 800c838 <__ieee754_pow+0xa18>)
 800c6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	460d      	mov	r5, r1
 800c6c6:	f7f3 ff97 	bl	80005f8 <__aeabi_dmul>
 800c6ca:	a35d      	add	r3, pc, #372	; (adr r3, 800c840 <__ieee754_pow+0xa20>)
 800c6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d0:	f7f3 fdda 	bl	8000288 <__aeabi_dsub>
 800c6d4:	4622      	mov	r2, r4
 800c6d6:	462b      	mov	r3, r5
 800c6d8:	f7f3 ff8e 	bl	80005f8 <__aeabi_dmul>
 800c6dc:	a35a      	add	r3, pc, #360	; (adr r3, 800c848 <__ieee754_pow+0xa28>)
 800c6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e2:	f7f3 fdd3 	bl	800028c <__adddf3>
 800c6e6:	4622      	mov	r2, r4
 800c6e8:	462b      	mov	r3, r5
 800c6ea:	f7f3 ff85 	bl	80005f8 <__aeabi_dmul>
 800c6ee:	a358      	add	r3, pc, #352	; (adr r3, 800c850 <__ieee754_pow+0xa30>)
 800c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f4:	f7f3 fdc8 	bl	8000288 <__aeabi_dsub>
 800c6f8:	4622      	mov	r2, r4
 800c6fa:	462b      	mov	r3, r5
 800c6fc:	f7f3 ff7c 	bl	80005f8 <__aeabi_dmul>
 800c700:	a355      	add	r3, pc, #340	; (adr r3, 800c858 <__ieee754_pow+0xa38>)
 800c702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c706:	f7f3 fdc1 	bl	800028c <__adddf3>
 800c70a:	4622      	mov	r2, r4
 800c70c:	462b      	mov	r3, r5
 800c70e:	f7f3 ff73 	bl	80005f8 <__aeabi_dmul>
 800c712:	4602      	mov	r2, r0
 800c714:	460b      	mov	r3, r1
 800c716:	4640      	mov	r0, r8
 800c718:	4649      	mov	r1, r9
 800c71a:	f7f3 fdb5 	bl	8000288 <__aeabi_dsub>
 800c71e:	4604      	mov	r4, r0
 800c720:	460d      	mov	r5, r1
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	4640      	mov	r0, r8
 800c728:	4649      	mov	r1, r9
 800c72a:	f7f3 ff65 	bl	80005f8 <__aeabi_dmul>
 800c72e:	2200      	movs	r2, #0
 800c730:	ec41 0b19 	vmov	d9, r0, r1
 800c734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c738:	4620      	mov	r0, r4
 800c73a:	4629      	mov	r1, r5
 800c73c:	f7f3 fda4 	bl	8000288 <__aeabi_dsub>
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	ec51 0b19 	vmov	r0, r1, d9
 800c748:	f7f4 f880 	bl	800084c <__aeabi_ddiv>
 800c74c:	4632      	mov	r2, r6
 800c74e:	4604      	mov	r4, r0
 800c750:	460d      	mov	r5, r1
 800c752:	463b      	mov	r3, r7
 800c754:	4640      	mov	r0, r8
 800c756:	4649      	mov	r1, r9
 800c758:	f7f3 ff4e 	bl	80005f8 <__aeabi_dmul>
 800c75c:	4632      	mov	r2, r6
 800c75e:	463b      	mov	r3, r7
 800c760:	f7f3 fd94 	bl	800028c <__adddf3>
 800c764:	4602      	mov	r2, r0
 800c766:	460b      	mov	r3, r1
 800c768:	4620      	mov	r0, r4
 800c76a:	4629      	mov	r1, r5
 800c76c:	f7f3 fd8c 	bl	8000288 <__aeabi_dsub>
 800c770:	4642      	mov	r2, r8
 800c772:	464b      	mov	r3, r9
 800c774:	f7f3 fd88 	bl	8000288 <__aeabi_dsub>
 800c778:	460b      	mov	r3, r1
 800c77a:	4602      	mov	r2, r0
 800c77c:	493a      	ldr	r1, [pc, #232]	; (800c868 <__ieee754_pow+0xa48>)
 800c77e:	2000      	movs	r0, #0
 800c780:	f7f3 fd82 	bl	8000288 <__aeabi_dsub>
 800c784:	ec41 0b10 	vmov	d0, r0, r1
 800c788:	ee10 3a90 	vmov	r3, s1
 800c78c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c790:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c794:	da2b      	bge.n	800c7ee <__ieee754_pow+0x9ce>
 800c796:	4650      	mov	r0, sl
 800c798:	f000 f95e 	bl	800ca58 <scalbn>
 800c79c:	ec51 0b10 	vmov	r0, r1, d0
 800c7a0:	ec53 2b18 	vmov	r2, r3, d8
 800c7a4:	f7ff bbed 	b.w	800bf82 <__ieee754_pow+0x162>
 800c7a8:	4b30      	ldr	r3, [pc, #192]	; (800c86c <__ieee754_pow+0xa4c>)
 800c7aa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c7ae:	429e      	cmp	r6, r3
 800c7b0:	f77f af0c 	ble.w	800c5cc <__ieee754_pow+0x7ac>
 800c7b4:	4b2e      	ldr	r3, [pc, #184]	; (800c870 <__ieee754_pow+0xa50>)
 800c7b6:	440b      	add	r3, r1
 800c7b8:	4303      	orrs	r3, r0
 800c7ba:	d009      	beq.n	800c7d0 <__ieee754_pow+0x9b0>
 800c7bc:	ec51 0b18 	vmov	r0, r1, d8
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	f7f4 f98a 	bl	8000adc <__aeabi_dcmplt>
 800c7c8:	3800      	subs	r0, #0
 800c7ca:	bf18      	it	ne
 800c7cc:	2001      	movne	r0, #1
 800c7ce:	e447      	b.n	800c060 <__ieee754_pow+0x240>
 800c7d0:	4622      	mov	r2, r4
 800c7d2:	462b      	mov	r3, r5
 800c7d4:	f7f3 fd58 	bl	8000288 <__aeabi_dsub>
 800c7d8:	4642      	mov	r2, r8
 800c7da:	464b      	mov	r3, r9
 800c7dc:	f7f4 f992 	bl	8000b04 <__aeabi_dcmpge>
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	f43f aef3 	beq.w	800c5cc <__ieee754_pow+0x7ac>
 800c7e6:	e7e9      	b.n	800c7bc <__ieee754_pow+0x99c>
 800c7e8:	f04f 0a00 	mov.w	sl, #0
 800c7ec:	e71a      	b.n	800c624 <__ieee754_pow+0x804>
 800c7ee:	ec51 0b10 	vmov	r0, r1, d0
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	e7d4      	b.n	800c7a0 <__ieee754_pow+0x980>
 800c7f6:	491c      	ldr	r1, [pc, #112]	; (800c868 <__ieee754_pow+0xa48>)
 800c7f8:	2000      	movs	r0, #0
 800c7fa:	f7ff bb30 	b.w	800be5e <__ieee754_pow+0x3e>
 800c7fe:	2000      	movs	r0, #0
 800c800:	2100      	movs	r1, #0
 800c802:	f7ff bb2c 	b.w	800be5e <__ieee754_pow+0x3e>
 800c806:	4630      	mov	r0, r6
 800c808:	4639      	mov	r1, r7
 800c80a:	f7ff bb28 	b.w	800be5e <__ieee754_pow+0x3e>
 800c80e:	9204      	str	r2, [sp, #16]
 800c810:	f7ff bb7a 	b.w	800bf08 <__ieee754_pow+0xe8>
 800c814:	2300      	movs	r3, #0
 800c816:	f7ff bb64 	b.w	800bee2 <__ieee754_pow+0xc2>
 800c81a:	bf00      	nop
 800c81c:	f3af 8000 	nop.w
 800c820:	00000000 	.word	0x00000000
 800c824:	3fe62e43 	.word	0x3fe62e43
 800c828:	fefa39ef 	.word	0xfefa39ef
 800c82c:	3fe62e42 	.word	0x3fe62e42
 800c830:	0ca86c39 	.word	0x0ca86c39
 800c834:	be205c61 	.word	0xbe205c61
 800c838:	72bea4d0 	.word	0x72bea4d0
 800c83c:	3e663769 	.word	0x3e663769
 800c840:	c5d26bf1 	.word	0xc5d26bf1
 800c844:	3ebbbd41 	.word	0x3ebbbd41
 800c848:	af25de2c 	.word	0xaf25de2c
 800c84c:	3f11566a 	.word	0x3f11566a
 800c850:	16bebd93 	.word	0x16bebd93
 800c854:	3f66c16c 	.word	0x3f66c16c
 800c858:	5555553e 	.word	0x5555553e
 800c85c:	3fc55555 	.word	0x3fc55555
 800c860:	3fe00000 	.word	0x3fe00000
 800c864:	000fffff 	.word	0x000fffff
 800c868:	3ff00000 	.word	0x3ff00000
 800c86c:	4090cbff 	.word	0x4090cbff
 800c870:	3f6f3400 	.word	0x3f6f3400
 800c874:	652b82fe 	.word	0x652b82fe
 800c878:	3c971547 	.word	0x3c971547

0800c87c <__ieee754_sqrt>:
 800c87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c880:	ec55 4b10 	vmov	r4, r5, d0
 800c884:	4e55      	ldr	r6, [pc, #340]	; (800c9dc <__ieee754_sqrt+0x160>)
 800c886:	43ae      	bics	r6, r5
 800c888:	ee10 0a10 	vmov	r0, s0
 800c88c:	ee10 3a10 	vmov	r3, s0
 800c890:	462a      	mov	r2, r5
 800c892:	4629      	mov	r1, r5
 800c894:	d110      	bne.n	800c8b8 <__ieee754_sqrt+0x3c>
 800c896:	ee10 2a10 	vmov	r2, s0
 800c89a:	462b      	mov	r3, r5
 800c89c:	f7f3 feac 	bl	80005f8 <__aeabi_dmul>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	4629      	mov	r1, r5
 800c8a8:	f7f3 fcf0 	bl	800028c <__adddf3>
 800c8ac:	4604      	mov	r4, r0
 800c8ae:	460d      	mov	r5, r1
 800c8b0:	ec45 4b10 	vmov	d0, r4, r5
 800c8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8b8:	2d00      	cmp	r5, #0
 800c8ba:	dc10      	bgt.n	800c8de <__ieee754_sqrt+0x62>
 800c8bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c8c0:	4330      	orrs	r0, r6
 800c8c2:	d0f5      	beq.n	800c8b0 <__ieee754_sqrt+0x34>
 800c8c4:	b15d      	cbz	r5, 800c8de <__ieee754_sqrt+0x62>
 800c8c6:	ee10 2a10 	vmov	r2, s0
 800c8ca:	462b      	mov	r3, r5
 800c8cc:	ee10 0a10 	vmov	r0, s0
 800c8d0:	f7f3 fcda 	bl	8000288 <__aeabi_dsub>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	f7f3 ffb8 	bl	800084c <__aeabi_ddiv>
 800c8dc:	e7e6      	b.n	800c8ac <__ieee754_sqrt+0x30>
 800c8de:	1512      	asrs	r2, r2, #20
 800c8e0:	d074      	beq.n	800c9cc <__ieee754_sqrt+0x150>
 800c8e2:	07d4      	lsls	r4, r2, #31
 800c8e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c8e8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c8ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c8f0:	bf5e      	ittt	pl
 800c8f2:	0fda      	lsrpl	r2, r3, #31
 800c8f4:	005b      	lslpl	r3, r3, #1
 800c8f6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c8fa:	2400      	movs	r4, #0
 800c8fc:	0fda      	lsrs	r2, r3, #31
 800c8fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c902:	107f      	asrs	r7, r7, #1
 800c904:	005b      	lsls	r3, r3, #1
 800c906:	2516      	movs	r5, #22
 800c908:	4620      	mov	r0, r4
 800c90a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c90e:	1886      	adds	r6, r0, r2
 800c910:	428e      	cmp	r6, r1
 800c912:	bfde      	ittt	le
 800c914:	1b89      	suble	r1, r1, r6
 800c916:	18b0      	addle	r0, r6, r2
 800c918:	18a4      	addle	r4, r4, r2
 800c91a:	0049      	lsls	r1, r1, #1
 800c91c:	3d01      	subs	r5, #1
 800c91e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c922:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c926:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c92a:	d1f0      	bne.n	800c90e <__ieee754_sqrt+0x92>
 800c92c:	462a      	mov	r2, r5
 800c92e:	f04f 0e20 	mov.w	lr, #32
 800c932:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c936:	4281      	cmp	r1, r0
 800c938:	eb06 0c05 	add.w	ip, r6, r5
 800c93c:	dc02      	bgt.n	800c944 <__ieee754_sqrt+0xc8>
 800c93e:	d113      	bne.n	800c968 <__ieee754_sqrt+0xec>
 800c940:	459c      	cmp	ip, r3
 800c942:	d811      	bhi.n	800c968 <__ieee754_sqrt+0xec>
 800c944:	f1bc 0f00 	cmp.w	ip, #0
 800c948:	eb0c 0506 	add.w	r5, ip, r6
 800c94c:	da43      	bge.n	800c9d6 <__ieee754_sqrt+0x15a>
 800c94e:	2d00      	cmp	r5, #0
 800c950:	db41      	blt.n	800c9d6 <__ieee754_sqrt+0x15a>
 800c952:	f100 0801 	add.w	r8, r0, #1
 800c956:	1a09      	subs	r1, r1, r0
 800c958:	459c      	cmp	ip, r3
 800c95a:	bf88      	it	hi
 800c95c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c960:	eba3 030c 	sub.w	r3, r3, ip
 800c964:	4432      	add	r2, r6
 800c966:	4640      	mov	r0, r8
 800c968:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c96c:	f1be 0e01 	subs.w	lr, lr, #1
 800c970:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c974:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c978:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c97c:	d1db      	bne.n	800c936 <__ieee754_sqrt+0xba>
 800c97e:	430b      	orrs	r3, r1
 800c980:	d006      	beq.n	800c990 <__ieee754_sqrt+0x114>
 800c982:	1c50      	adds	r0, r2, #1
 800c984:	bf13      	iteet	ne
 800c986:	3201      	addne	r2, #1
 800c988:	3401      	addeq	r4, #1
 800c98a:	4672      	moveq	r2, lr
 800c98c:	f022 0201 	bicne.w	r2, r2, #1
 800c990:	1063      	asrs	r3, r4, #1
 800c992:	0852      	lsrs	r2, r2, #1
 800c994:	07e1      	lsls	r1, r4, #31
 800c996:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c99a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c99e:	bf48      	it	mi
 800c9a0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c9a4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c9a8:	4614      	mov	r4, r2
 800c9aa:	e781      	b.n	800c8b0 <__ieee754_sqrt+0x34>
 800c9ac:	0ad9      	lsrs	r1, r3, #11
 800c9ae:	3815      	subs	r0, #21
 800c9b0:	055b      	lsls	r3, r3, #21
 800c9b2:	2900      	cmp	r1, #0
 800c9b4:	d0fa      	beq.n	800c9ac <__ieee754_sqrt+0x130>
 800c9b6:	02cd      	lsls	r5, r1, #11
 800c9b8:	d50a      	bpl.n	800c9d0 <__ieee754_sqrt+0x154>
 800c9ba:	f1c2 0420 	rsb	r4, r2, #32
 800c9be:	fa23 f404 	lsr.w	r4, r3, r4
 800c9c2:	1e55      	subs	r5, r2, #1
 800c9c4:	4093      	lsls	r3, r2
 800c9c6:	4321      	orrs	r1, r4
 800c9c8:	1b42      	subs	r2, r0, r5
 800c9ca:	e78a      	b.n	800c8e2 <__ieee754_sqrt+0x66>
 800c9cc:	4610      	mov	r0, r2
 800c9ce:	e7f0      	b.n	800c9b2 <__ieee754_sqrt+0x136>
 800c9d0:	0049      	lsls	r1, r1, #1
 800c9d2:	3201      	adds	r2, #1
 800c9d4:	e7ef      	b.n	800c9b6 <__ieee754_sqrt+0x13a>
 800c9d6:	4680      	mov	r8, r0
 800c9d8:	e7bd      	b.n	800c956 <__ieee754_sqrt+0xda>
 800c9da:	bf00      	nop
 800c9dc:	7ff00000 	.word	0x7ff00000

0800c9e0 <with_errno>:
 800c9e0:	b570      	push	{r4, r5, r6, lr}
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	460d      	mov	r5, r1
 800c9e6:	4616      	mov	r6, r2
 800c9e8:	f7fa fa4c 	bl	8006e84 <__errno>
 800c9ec:	4629      	mov	r1, r5
 800c9ee:	6006      	str	r6, [r0, #0]
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	bd70      	pop	{r4, r5, r6, pc}

0800c9f4 <xflow>:
 800c9f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9f6:	4614      	mov	r4, r2
 800c9f8:	461d      	mov	r5, r3
 800c9fa:	b108      	cbz	r0, 800ca00 <xflow+0xc>
 800c9fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ca00:	e9cd 2300 	strd	r2, r3, [sp]
 800ca04:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca08:	4620      	mov	r0, r4
 800ca0a:	4629      	mov	r1, r5
 800ca0c:	f7f3 fdf4 	bl	80005f8 <__aeabi_dmul>
 800ca10:	2222      	movs	r2, #34	; 0x22
 800ca12:	b003      	add	sp, #12
 800ca14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca18:	f7ff bfe2 	b.w	800c9e0 <with_errno>

0800ca1c <__math_uflow>:
 800ca1c:	b508      	push	{r3, lr}
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ca24:	f7ff ffe6 	bl	800c9f4 <xflow>
 800ca28:	ec41 0b10 	vmov	d0, r0, r1
 800ca2c:	bd08      	pop	{r3, pc}

0800ca2e <__math_oflow>:
 800ca2e:	b508      	push	{r3, lr}
 800ca30:	2200      	movs	r2, #0
 800ca32:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ca36:	f7ff ffdd 	bl	800c9f4 <xflow>
 800ca3a:	ec41 0b10 	vmov	d0, r0, r1
 800ca3e:	bd08      	pop	{r3, pc}

0800ca40 <finite>:
 800ca40:	b082      	sub	sp, #8
 800ca42:	ed8d 0b00 	vstr	d0, [sp]
 800ca46:	9801      	ldr	r0, [sp, #4]
 800ca48:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ca4c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ca50:	0fc0      	lsrs	r0, r0, #31
 800ca52:	b002      	add	sp, #8
 800ca54:	4770      	bx	lr
	...

0800ca58 <scalbn>:
 800ca58:	b570      	push	{r4, r5, r6, lr}
 800ca5a:	ec55 4b10 	vmov	r4, r5, d0
 800ca5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ca62:	4606      	mov	r6, r0
 800ca64:	462b      	mov	r3, r5
 800ca66:	b99a      	cbnz	r2, 800ca90 <scalbn+0x38>
 800ca68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ca6c:	4323      	orrs	r3, r4
 800ca6e:	d036      	beq.n	800cade <scalbn+0x86>
 800ca70:	4b39      	ldr	r3, [pc, #228]	; (800cb58 <scalbn+0x100>)
 800ca72:	4629      	mov	r1, r5
 800ca74:	ee10 0a10 	vmov	r0, s0
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f7f3 fdbd 	bl	80005f8 <__aeabi_dmul>
 800ca7e:	4b37      	ldr	r3, [pc, #220]	; (800cb5c <scalbn+0x104>)
 800ca80:	429e      	cmp	r6, r3
 800ca82:	4604      	mov	r4, r0
 800ca84:	460d      	mov	r5, r1
 800ca86:	da10      	bge.n	800caaa <scalbn+0x52>
 800ca88:	a32b      	add	r3, pc, #172	; (adr r3, 800cb38 <scalbn+0xe0>)
 800ca8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8e:	e03a      	b.n	800cb06 <scalbn+0xae>
 800ca90:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ca94:	428a      	cmp	r2, r1
 800ca96:	d10c      	bne.n	800cab2 <scalbn+0x5a>
 800ca98:	ee10 2a10 	vmov	r2, s0
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	4629      	mov	r1, r5
 800caa0:	f7f3 fbf4 	bl	800028c <__adddf3>
 800caa4:	4604      	mov	r4, r0
 800caa6:	460d      	mov	r5, r1
 800caa8:	e019      	b.n	800cade <scalbn+0x86>
 800caaa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800caae:	460b      	mov	r3, r1
 800cab0:	3a36      	subs	r2, #54	; 0x36
 800cab2:	4432      	add	r2, r6
 800cab4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cab8:	428a      	cmp	r2, r1
 800caba:	dd08      	ble.n	800cace <scalbn+0x76>
 800cabc:	2d00      	cmp	r5, #0
 800cabe:	a120      	add	r1, pc, #128	; (adr r1, 800cb40 <scalbn+0xe8>)
 800cac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cac4:	da1c      	bge.n	800cb00 <scalbn+0xa8>
 800cac6:	a120      	add	r1, pc, #128	; (adr r1, 800cb48 <scalbn+0xf0>)
 800cac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cacc:	e018      	b.n	800cb00 <scalbn+0xa8>
 800cace:	2a00      	cmp	r2, #0
 800cad0:	dd08      	ble.n	800cae4 <scalbn+0x8c>
 800cad2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cad6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cada:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cade:	ec45 4b10 	vmov	d0, r4, r5
 800cae2:	bd70      	pop	{r4, r5, r6, pc}
 800cae4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cae8:	da19      	bge.n	800cb1e <scalbn+0xc6>
 800caea:	f24c 3350 	movw	r3, #50000	; 0xc350
 800caee:	429e      	cmp	r6, r3
 800caf0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800caf4:	dd0a      	ble.n	800cb0c <scalbn+0xb4>
 800caf6:	a112      	add	r1, pc, #72	; (adr r1, 800cb40 <scalbn+0xe8>)
 800caf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d1e2      	bne.n	800cac6 <scalbn+0x6e>
 800cb00:	a30f      	add	r3, pc, #60	; (adr r3, 800cb40 <scalbn+0xe8>)
 800cb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb06:	f7f3 fd77 	bl	80005f8 <__aeabi_dmul>
 800cb0a:	e7cb      	b.n	800caa4 <scalbn+0x4c>
 800cb0c:	a10a      	add	r1, pc, #40	; (adr r1, 800cb38 <scalbn+0xe0>)
 800cb0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d0b8      	beq.n	800ca88 <scalbn+0x30>
 800cb16:	a10e      	add	r1, pc, #56	; (adr r1, 800cb50 <scalbn+0xf8>)
 800cb18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb1c:	e7b4      	b.n	800ca88 <scalbn+0x30>
 800cb1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb22:	3236      	adds	r2, #54	; 0x36
 800cb24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	4b0c      	ldr	r3, [pc, #48]	; (800cb60 <scalbn+0x108>)
 800cb30:	2200      	movs	r2, #0
 800cb32:	e7e8      	b.n	800cb06 <scalbn+0xae>
 800cb34:	f3af 8000 	nop.w
 800cb38:	c2f8f359 	.word	0xc2f8f359
 800cb3c:	01a56e1f 	.word	0x01a56e1f
 800cb40:	8800759c 	.word	0x8800759c
 800cb44:	7e37e43c 	.word	0x7e37e43c
 800cb48:	8800759c 	.word	0x8800759c
 800cb4c:	fe37e43c 	.word	0xfe37e43c
 800cb50:	c2f8f359 	.word	0xc2f8f359
 800cb54:	81a56e1f 	.word	0x81a56e1f
 800cb58:	43500000 	.word	0x43500000
 800cb5c:	ffff3cb0 	.word	0xffff3cb0
 800cb60:	3c900000 	.word	0x3c900000

0800cb64 <_init>:
 800cb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb66:	bf00      	nop
 800cb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb6a:	bc08      	pop	{r3}
 800cb6c:	469e      	mov	lr, r3
 800cb6e:	4770      	bx	lr

0800cb70 <_fini>:
 800cb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb72:	bf00      	nop
 800cb74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb76:	bc08      	pop	{r3}
 800cb78:	469e      	mov	lr, r3
 800cb7a:	4770      	bx	lr
