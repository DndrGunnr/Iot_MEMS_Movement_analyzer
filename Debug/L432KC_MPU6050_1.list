
L432KC_MPU6050_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bce8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b28  0800be78  0800be78  0001be78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9a0  0800c9a0  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9a0  0800c9a0  0001c9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9a8  0800c9a8  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9a8  0800c9a8  0001c9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9ac  0800c9ac  0001c9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0800c9b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c2c  20000270  0800cc20  00020270  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000e9c  0800cc20  00020e9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a73  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003155  00000000  00000000  00038d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  0003be68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  0003d3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000231d9  00000000  00000000  0003e800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001950d  00000000  00000000  000619d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf86d  00000000  00000000  0007aee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014a753  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071d8  00000000  00000000  0014a7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be60 	.word	0x0800be60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	0800be60 	.word	0x0800be60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <Wifi_SendRaw>:
#include "ESP8266.h"
#include "ESP8266Config.h"
//#########################################################################################################
bool Wifi_SendRaw(uint8_t *data,uint16_t len)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
	if(len <= _WIFI_TX_SIZE)
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800100a:	d813      	bhi.n	8001034 <Wifi_SendRaw+0x3c>
	{
		// Send the information in data through the UART of the ESP8266
		memcpy(Wifi.TxBuffer,data,len);
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	461a      	mov	r2, r3
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	480b      	ldr	r0, [pc, #44]	; (8001040 <Wifi_SendRaw+0x48>)
 8001014:	f005 ff40 	bl	8006e98 <memcpy>
		if(HAL_UART_Transmit(&_WIFI_USART,data,len,HAL_MAX_DELAY) == HAL_OK)
 8001018:	887a      	ldrh	r2, [r7, #2]
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4808      	ldr	r0, [pc, #32]	; (8001044 <Wifi_SendRaw+0x4c>)
 8001022:	f004 fc6f 	bl	8005904 <HAL_UART_Transmit>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <Wifi_SendRaw+0x38>
			return true;
 800102c:	2301      	movs	r3, #1
 800102e:	e002      	b.n	8001036 <Wifi_SendRaw+0x3e>
		else
			return false;
 8001030:	2300      	movs	r3, #0
 8001032:	e000      	b.n	8001036 <Wifi_SendRaw+0x3e>
	}
	else
		return false;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000691 	.word	0x20000691
 8001044:	2000032c 	.word	0x2000032c

08001048 <Wifi_SendString>:
//#########################################################################################################
bool Wifi_SendString(char *data)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	return Wifi_SendRaw((uint8_t*)data,strlen(data));
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff f8bd 	bl	80001d0 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	b29b      	uxth	r3, r3
 800105a:	4619      	mov	r1, r3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ffcb 	bl	8000ff8 <Wifi_SendRaw>
 8001062:	4603      	mov	r3, r0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <Wifi_WaitForString>:
	DWT_Delay_us(DelayUs);
	return true;
}
//#########################################################################################################
bool Wifi_WaitForString(uint32_t TimeOut_ms,uint8_t *result,uint8_t CountOfParameter,...)
{
 800106c:	b40c      	push	{r2, r3}
 800106e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	466b      	mov	r3, sp
 800107c:	461e      	mov	r6, r3
	 *
	 * If the ESP8266 return a AT+OK after the last command, the function is going to
	 * return a true value and the result number would be 1.
	 */

	if(result == NULL)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <Wifi_WaitForString+0x1c>
		return false;
 8001084:	2300      	movs	r3, #0
 8001086:	e075      	b.n	8001174 <Wifi_WaitForString+0x108>
	if(CountOfParameter == 0)
 8001088:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <Wifi_WaitForString+0x28>
		return false;
 8001090:	2300      	movs	r3, #0
 8001092:	e06f      	b.n	8001174 <Wifi_WaitForString+0x108>

	*result=0;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]

	va_list tag;
		va_start (tag,CountOfParameter);
 800109a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800109e:	60bb      	str	r3, [r7, #8]
		char *arg[CountOfParameter];
 80010a0:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 80010a4:	460b      	mov	r3, r1
 80010a6:	3b01      	subs	r3, #1
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	b2cb      	uxtb	r3, r1
 80010ac:	2200      	movs	r2, #0
 80010ae:	4698      	mov	r8, r3
 80010b0:	4691      	mov	r9, r2
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	f04f 0300 	mov.w	r3, #0
 80010ba:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80010be:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80010c2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80010c6:	b2cb      	uxtb	r3, r1
 80010c8:	2200      	movs	r2, #0
 80010ca:	461c      	mov	r4, r3
 80010cc:	4615      	mov	r5, r2
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	016b      	lsls	r3, r5, #5
 80010d8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80010dc:	0162      	lsls	r2, r4, #5
 80010de:	460b      	mov	r3, r1
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	3307      	adds	r3, #7
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	ebad 0d03 	sub.w	sp, sp, r3
 80010ec:	466b      	mov	r3, sp
 80010ee:	3303      	adds	r3, #3
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	60fb      	str	r3, [r7, #12]
		for(uint8_t i=0; i<CountOfParameter ; i++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	75fb      	strb	r3, [r7, #23]
 80010fa:	e00a      	b.n	8001112 <Wifi_WaitForString+0xa6>
			arg[i] = va_arg (tag, char *);
 80010fc:	7dfa      	ldrb	r2, [r7, #23]
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1d19      	adds	r1, r3, #4
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	6819      	ldr	r1, [r3, #0]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(uint8_t i=0; i<CountOfParameter ; i++)
 800110c:	7dfb      	ldrb	r3, [r7, #23]
 800110e:	3301      	adds	r3, #1
 8001110:	75fb      	strb	r3, [r7, #23]
 8001112:	7dfa      	ldrb	r2, [r7, #23]
 8001114:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001118:	429a      	cmp	r2, r3
 800111a:	d3ef      	bcc.n	80010fc <Wifi_WaitForString+0x90>
	va_end (tag);

	for(uint32_t t=0 ; t<TimeOut_ms ; t+=20)
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
 8001120:	e023      	b.n	800116a <Wifi_WaitForString+0xfe>
	{
		DWT_Delay_us(20000);
 8001122:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001126:	f000 fab1 	bl	800168c <DWT_Delay_us>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 800112a:	2300      	movs	r3, #0
 800112c:	77fb      	strb	r3, [r7, #31]
 800112e:	e014      	b.n	800115a <Wifi_WaitForString+0xee>
		{
			if(strstr((char*)Wifi.RxBuffer,arg[mx])!=NULL)
 8001130:	7ffa      	ldrb	r2, [r7, #31]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001138:	4619      	mov	r1, r3
 800113a:	4812      	ldr	r0, [pc, #72]	; (8001184 <Wifi_WaitForString+0x118>)
 800113c:	f006 fda5 	bl	8007c8a <strstr>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d006      	beq.n	8001154 <Wifi_WaitForString+0xe8>
			{
				*result = mx+1;
 8001146:	7ffb      	ldrb	r3, [r7, #31]
 8001148:	3301      	adds	r3, #1
 800114a:	b2da      	uxtb	r2, r3
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	701a      	strb	r2, [r3, #0]
				return true;
 8001150:	2301      	movs	r3, #1
 8001152:	e00f      	b.n	8001174 <Wifi_WaitForString+0x108>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8001154:	7ffb      	ldrb	r3, [r7, #31]
 8001156:	3301      	adds	r3, #1
 8001158:	77fb      	strb	r3, [r7, #31]
 800115a:	7ffa      	ldrb	r2, [r7, #31]
 800115c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001160:	429a      	cmp	r2, r3
 8001162:	d3e5      	bcc.n	8001130 <Wifi_WaitForString+0xc4>
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=20)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	3314      	adds	r3, #20
 8001168:	61bb      	str	r3, [r7, #24]
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	429a      	cmp	r2, r3
 8001170:	d3d7      	bcc.n	8001122 <Wifi_WaitForString+0xb6>
			}
		}
	}
	// timeout
	return false;
 8001172:	2300      	movs	r3, #0
 8001174:	46b5      	mov	sp, r6

}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001180:	b002      	add	sp, #8
 8001182:	4770      	bx	lr
 8001184:	20000491 	.word	0x20000491

08001188 <Wifi_RxClear>:
  }
  *dst = '\0';
}
//#########################################################################################################
void Wifi_RxClear(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	memset(Wifi.RxBuffer,0,_WIFI_RX_SIZE);
 800118c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001190:	2100      	movs	r1, #0
 8001192:	4807      	ldr	r0, [pc, #28]	; (80011b0 <Wifi_RxClear+0x28>)
 8001194:	f005 fe8e 	bl	8006eb4 <memset>
	Wifi.RxIndex=0;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <Wifi_RxClear+0x2c>)
 800119a:	2200      	movs	r2, #0
 800119c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	4904      	ldr	r1, [pc, #16]	; (80011b4 <Wifi_RxClear+0x2c>)
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <Wifi_RxClear+0x30>)
 80011a6:	f004 fc41 	bl	8005a2c <HAL_UART_Receive_IT>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000491 	.word	0x20000491
 80011b4:	20000490 	.word	0x20000490
 80011b8:	2000032c 	.word	0x2000032c

080011bc <Wifi_TxClear>:
//#########################################################################################################
void Wifi_TxClear(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	memset(Wifi.TxBuffer,0,_WIFI_TX_SIZE);
 80011c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c4:	2100      	movs	r1, #0
 80011c6:	4802      	ldr	r0, [pc, #8]	; (80011d0 <Wifi_TxClear+0x14>)
 80011c8:	f005 fe74 	bl	8006eb4 <memset>
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000691 	.word	0x20000691

080011d4 <Wifi_RxCallBack>:
//#########################################################################################################
void Wifi_RxCallBack(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	Wifi.RxBuffer[Wifi.RxIndex] = Wifi.usartBuff;
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <Wifi_RxCallBack+0x40>)
 80011da:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80011de:	4619      	mov	r1, r3
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <Wifi_RxCallBack+0x40>)
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <Wifi_RxCallBack+0x40>)
 80011e6:	440b      	add	r3, r1
 80011e8:	705a      	strb	r2, [r3, #1]
	if(Wifi.RxIndex < _WIFI_RX_SIZE)
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <Wifi_RxCallBack+0x40>)
 80011ec:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80011f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011f4:	d207      	bcs.n	8001206 <Wifi_RxCallBack+0x32>
	  Wifi.RxIndex++;
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <Wifi_RxCallBack+0x40>)
 80011f8:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80011fc:	3301      	adds	r3, #1
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <Wifi_RxCallBack+0x40>)
 8001202:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8001206:	2201      	movs	r2, #1
 8001208:	4902      	ldr	r1, [pc, #8]	; (8001214 <Wifi_RxCallBack+0x40>)
 800120a:	4803      	ldr	r0, [pc, #12]	; (8001218 <Wifi_RxCallBack+0x44>)
 800120c:	f004 fc0e 	bl	8005a2c <HAL_UART_Receive_IT>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000490 	.word	0x20000490
 8001218:	2000032c 	.word	0x2000032c

0800121c <Wifi_Init>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool Wifi_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af02      	add	r7, sp, #8
	uint8_t result;
	bool returnVal=false;
 8001222:	2300      	movs	r3, #0
 8001224:	71fb      	strb	r3, [r7, #7]
	// Clean the variables and start the interruption to work with the UART
	do
	{
		Wifi_RxClear();
 8001226:	f7ff ffaf 	bl	8001188 <Wifi_RxClear>

		if(Wifi_SendString("AT\r\n")==false)
 800122a:	4815      	ldr	r0, [pc, #84]	; (8001280 <Wifi_Init+0x64>)
 800122c:	f7ff ff0c 	bl	8001048 <Wifi_SendString>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d01a      	beq.n	800126c <Wifi_Init+0x50>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001236:	1db9      	adds	r1, r7, #6
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <Wifi_Init+0x68>)
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <Wifi_Init+0x6c>)
 800123e:	2202      	movs	r2, #2
 8001240:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001244:	f7ff ff12 	bl	800106c <Wifi_WaitForString>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d010      	beq.n	8001270 <Wifi_Init+0x54>
			break;
		if(result==2)
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d00f      	beq.n	8001274 <Wifi_Init+0x58>
			break;
		returnVal = true;
 8001254:	2301      	movs	r3, #1
 8001256:	71fb      	strb	r3, [r7, #7]
		Wifi_RxClear();
 8001258:	f7ff ff96 	bl	8001188 <Wifi_RxClear>
		Wifi_TxClear();
 800125c:	f7ff ffae 	bl	80011bc <Wifi_TxClear>
		HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8001260:	2201      	movs	r2, #1
 8001262:	490a      	ldr	r1, [pc, #40]	; (800128c <Wifi_Init+0x70>)
 8001264:	480a      	ldr	r0, [pc, #40]	; (8001290 <Wifi_Init+0x74>)
 8001266:	f004 fbe1 	bl	8005a2c <HAL_UART_Receive_IT>
 800126a:	e004      	b.n	8001276 <Wifi_Init+0x5a>
			break;
 800126c:	bf00      	nop
 800126e:	e002      	b.n	8001276 <Wifi_Init+0x5a>
			break;
 8001270:	bf00      	nop
 8001272:	e000      	b.n	8001276 <Wifi_Init+0x5a>
			break;
 8001274:	bf00      	nop
	}while(0);
	return returnVal;
 8001276:	79fb      	ldrb	r3, [r7, #7]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	0800be78 	.word	0x0800be78
 8001284:	0800be84 	.word	0x0800be84
 8001288:	0800be80 	.word	0x0800be80
 800128c:	20000490 	.word	0x20000490
 8001290:	2000032c 	.word	0x2000032c

08001294 <Wifi_Restart>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_Restart(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af02      	add	r7, sp, #8
	// Make a restart of the ESP8266 using the AT Commands

	uint8_t result;
	bool	returnVal=false;
 800129a:	2300      	movs	r3, #0
 800129c:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 800129e:	f7ff ff73 	bl	8001188 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+RST\r\n");
 80012a2:	4913      	ldr	r1, [pc, #76]	; (80012f0 <Wifi_Restart+0x5c>)
 80012a4:	4813      	ldr	r0, [pc, #76]	; (80012f4 <Wifi_Restart+0x60>)
 80012a6:	f006 fc8d 	bl	8007bc4 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80012aa:	4812      	ldr	r0, [pc, #72]	; (80012f4 <Wifi_Restart+0x60>)
 80012ac:	f7ff fecc 	bl	8001048 <Wifi_SendString>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d011      	beq.n	80012da <Wifi_Restart+0x46>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80012b6:	1db9      	adds	r1, r7, #6
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <Wifi_Restart+0x64>)
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <Wifi_Restart+0x68>)
 80012be:	2202      	movs	r2, #2
 80012c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012c4:	f7ff fed2 	bl	800106c <Wifi_WaitForString>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d007      	beq.n	80012de <Wifi_Restart+0x4a>
			break;			// The timeout was completed and the string was not there
		if(result == 2)		// It was find the "ERROR" String in the receiving information
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d006      	beq.n	80012e2 <Wifi_Restart+0x4e>
			break;
		returnVal=true;
 80012d4:	2301      	movs	r3, #1
 80012d6:	71fb      	strb	r3, [r7, #7]
 80012d8:	e004      	b.n	80012e4 <Wifi_Restart+0x50>
			break;
 80012da:	bf00      	nop
 80012dc:	e002      	b.n	80012e4 <Wifi_Restart+0x50>
			break;			// The timeout was completed and the string was not there
 80012de:	bf00      	nop
 80012e0:	e000      	b.n	80012e4 <Wifi_Restart+0x50>
			break;
 80012e2:	bf00      	nop
	}while(0);
	return returnVal;
 80012e4:	79fb      	ldrb	r3, [r7, #7]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	0800be8c 	.word	0x0800be8c
 80012f4:	20000691 	.word	0x20000691
 80012f8:	0800be84 	.word	0x0800be84
 80012fc:	0800be80 	.word	0x0800be80

08001300 <Wifi_SetMode>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_SetMode(WifiMode_t	WifiMode_)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af02      	add	r7, sp, #8
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
	uint8_t result;
	bool	returnVal=false;
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 800130e:	f7ff ff3b 	bl	8001188 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR=%d\r\n",WifiMode_);
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	461a      	mov	r2, r3
 8001316:	4915      	ldr	r1, [pc, #84]	; (800136c <Wifi_SetMode+0x6c>)
 8001318:	4815      	ldr	r0, [pc, #84]	; (8001370 <Wifi_SetMode+0x70>)
 800131a:	f006 fc53 	bl	8007bc4 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <Wifi_SetMode+0x70>)
 8001320:	f7ff fe92 	bl	8001048 <Wifi_SendString>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d016      	beq.n	8001358 <Wifi_SetMode+0x58>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800132a:	f107 010e 	add.w	r1, r7, #14
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <Wifi_SetMode+0x74>)
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <Wifi_SetMode+0x78>)
 8001334:	2202      	movs	r2, #2
 8001336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800133a:	f7ff fe97 	bl	800106c <Wifi_WaitForString>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00b      	beq.n	800135c <Wifi_SetMode+0x5c>
			break;			// The timeout was completed and the string was not there
		if(result == 2)		// It was find the "ERROR" String in the receiving information
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d00a      	beq.n	8001360 <Wifi_SetMode+0x60>
			break;
		Wifi.Mode = WifiMode_;
 800134a:	4a0c      	ldr	r2, [pc, #48]	; (800137c <Wifi_SetMode+0x7c>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f882 3405 	strb.w	r3, [r2, #1029]	; 0x405
		returnVal=true;
 8001352:	2301      	movs	r3, #1
 8001354:	73fb      	strb	r3, [r7, #15]
 8001356:	e004      	b.n	8001362 <Wifi_SetMode+0x62>
			break;
 8001358:	bf00      	nop
 800135a:	e002      	b.n	8001362 <Wifi_SetMode+0x62>
			break;			// The timeout was completed and the string was not there
 800135c:	bf00      	nop
 800135e:	e000      	b.n	8001362 <Wifi_SetMode+0x62>
			break;
 8001360:	bf00      	nop
	}while(0);
	return returnVal;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	0800bed8 	.word	0x0800bed8
 8001370:	20000691 	.word	0x20000691
 8001374:	0800be84 	.word	0x0800be84
 8001378:	0800be80 	.word	0x0800be80
 800137c:	20000490 	.word	0x20000490

08001380 <Wifi_Station_ConnectToAp>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_Station_ConnectToAp(char *SSID,char *Pass,char *MAC)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af02      	add	r7, sp, #8
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
	uint8_t result;
	bool	returnVal=false;
 800138c:	2300      	movs	r3, #0
 800138e:	75fb      	strb	r3, [r7, #23]
	do
	{
		/*
		 * It connects to a WiFi network who has all the parameters correctly
		 */
		Wifi_RxClear();
 8001390:	f7ff fefa 	bl	8001188 <Wifi_RxClear>
		if(MAC==NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d106      	bne.n	80013a8 <Wifi_Station_ConnectToAp+0x28>
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\"\r\n",SSID,Pass);
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	4919      	ldr	r1, [pc, #100]	; (8001404 <Wifi_Station_ConnectToAp+0x84>)
 80013a0:	4819      	ldr	r0, [pc, #100]	; (8001408 <Wifi_Station_ConnectToAp+0x88>)
 80013a2:	f006 fc0f 	bl	8007bc4 <siprintf>
 80013a6:	e007      	b.n	80013b8 <Wifi_Station_ConnectToAp+0x38>
		else
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\",\"%s\"\r\n",SSID,Pass,MAC);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4916      	ldr	r1, [pc, #88]	; (800140c <Wifi_Station_ConnectToAp+0x8c>)
 80013b2:	4815      	ldr	r0, [pc, #84]	; (8001408 <Wifi_Station_ConnectToAp+0x88>)
 80013b4:	f006 fc06 	bl	8007bc4 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80013b8:	4813      	ldr	r0, [pc, #76]	; (8001408 <Wifi_Station_ConnectToAp+0x88>)
 80013ba:	f7ff fe45 	bl	8001048 <Wifi_SendString>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d014      	beq.n	80013ee <Wifi_Station_ConnectToAp+0x6e>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_VERYHIGH,&result,3,"\r\nOK\r\n","\r\nERROR\r\n","\r\nFAIL\r\n")==false)
 80013c4:	f107 0116 	add.w	r1, r7, #22
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <Wifi_Station_ConnectToAp+0x90>)
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <Wifi_Station_ConnectToAp+0x94>)
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <Wifi_Station_ConnectToAp+0x98>)
 80013d2:	2203      	movs	r2, #3
 80013d4:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80013d8:	f7ff fe48 	bl	800106c <Wifi_WaitForString>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d007      	beq.n	80013f2 <Wifi_Station_ConnectToAp+0x72>
			break;
		if(result > 1)		// If the result is higher to 1 is because there were an error
 80013e2:	7dbb      	ldrb	r3, [r7, #22]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d806      	bhi.n	80013f6 <Wifi_Station_ConnectToAp+0x76>
			break;			// in the communication
		returnVal=true;
 80013e8:	2301      	movs	r3, #1
 80013ea:	75fb      	strb	r3, [r7, #23]
 80013ec:	e004      	b.n	80013f8 <Wifi_Station_ConnectToAp+0x78>
			break;
 80013ee:	bf00      	nop
 80013f0:	e002      	b.n	80013f8 <Wifi_Station_ConnectToAp+0x78>
			break;
 80013f2:	bf00      	nop
 80013f4:	e000      	b.n	80013f8 <Wifi_Station_ConnectToAp+0x78>
			break;			// in the communication
 80013f6:	bf00      	nop
	}while(0);
	return returnVal;
 80013f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	0800bf50 	.word	0x0800bf50
 8001408:	20000691 	.word	0x20000691
 800140c:	0800bf6c 	.word	0x0800bf6c
 8001410:	0800bf94 	.word	0x0800bf94
 8001414:	0800bfa0 	.word	0x0800bfa0
 8001418:	0800bf8c 	.word	0x0800bf8c

0800141c <Wifi_TcpIp_SetMultiConnection>:
	}while(0);
	return returnVal;
}
//#########################################################################################################
bool  Wifi_TcpIp_SetMultiConnection(bool EnableMultiConnections)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af02      	add	r7, sp, #8
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
	uint8_t result;
	bool	returnVal=false;
 8001426:	2300      	movs	r3, #0
 8001428:	73fb      	strb	r3, [r7, #15]
	do
	{
		// Enable or Disable the multiconnection possibility
		Wifi_RxClear();
 800142a:	f7ff fead 	bl	8001188 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX=%d\r\n",EnableMultiConnections);
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	461a      	mov	r2, r3
 8001432:	4915      	ldr	r1, [pc, #84]	; (8001488 <Wifi_TcpIp_SetMultiConnection+0x6c>)
 8001434:	4815      	ldr	r0, [pc, #84]	; (800148c <Wifi_TcpIp_SetMultiConnection+0x70>)
 8001436:	f006 fbc5 	bl	8007bc4 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800143a:	4814      	ldr	r0, [pc, #80]	; (800148c <Wifi_TcpIp_SetMultiConnection+0x70>)
 800143c:	f7ff fe04 	bl	8001048 <Wifi_SendString>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d016      	beq.n	8001474 <Wifi_TcpIp_SetMultiConnection+0x58>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001446:	f107 010e 	add.w	r1, r7, #14
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <Wifi_TcpIp_SetMultiConnection+0x74>)
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <Wifi_TcpIp_SetMultiConnection+0x78>)
 8001450:	2202      	movs	r2, #2
 8001452:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001456:	f7ff fe09 	bl	800106c <Wifi_WaitForString>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00b      	beq.n	8001478 <Wifi_TcpIp_SetMultiConnection+0x5c>
			break;
		if(result == 2)
 8001460:	7bbb      	ldrb	r3, [r7, #14]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d00a      	beq.n	800147c <Wifi_TcpIp_SetMultiConnection+0x60>
			break;
    Wifi.TcpIpMultiConnection=EnableMultiConnections;
 8001466:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <Wifi_TcpIp_SetMultiConnection+0x7c>)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	f882 3518 	strb.w	r3, [r2, #1304]	; 0x518
		returnVal=true;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e004      	b.n	800147e <Wifi_TcpIp_SetMultiConnection+0x62>
			break;
 8001474:	bf00      	nop
 8001476:	e002      	b.n	800147e <Wifi_TcpIp_SetMultiConnection+0x62>
			break;
 8001478:	bf00      	nop
 800147a:	e000      	b.n	800147e <Wifi_TcpIp_SetMultiConnection+0x62>
			break;
 800147c:	bf00      	nop
	}while(0);
	return returnVal;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	0800c0b8 	.word	0x0800c0b8
 800148c:	20000691 	.word	0x20000691
 8001490:	0800be84 	.word	0x0800be84
 8001494:	0800be80 	.word	0x0800be80
 8001498:	20000490 	.word	0x20000490

0800149c <Wifi_TcpIp_StartTcpConnection>:
	}while(0);
	return returnVal;
}
//#########################################################################################################
bool  Wifi_TcpIp_StartTcpConnection(uint8_t LinkId,char *RemoteIp,uint16_t RemotePort,uint16_t TimeOut)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af02      	add	r7, sp, #8
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	4611      	mov	r1, r2
 80014a6:	461a      	mov	r2, r3
 80014a8:	4603      	mov	r3, r0
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	460b      	mov	r3, r1
 80014ae:	81bb      	strh	r3, [r7, #12]
 80014b0:	4613      	mov	r3, r2
 80014b2:	80fb      	strh	r3, [r7, #6]
	uint8_t result;
	bool	returnVal=false;
 80014b4:	2300      	movs	r3, #0
 80014b6:	75fb      	strb	r3, [r7, #23]
		/*
		 * It makes a TCP server and then it creates a TCP Connection according to the
		 * settings in the function. It uses a very high time of waiting because the
		 * ESP8266 takes a lot of time to create a connection with a TCP the first time.
		 */
		Wifi_RxClear();
 80014b8:	f7ff fe66 	bl	8001188 <Wifi_RxClear>
		if(Wifi.TcpIpMultiConnection==true){
 80014bc:	4b33      	ldr	r3, [pc, #204]	; (800158c <Wifi_TcpIp_StartTcpConnection+0xf0>)
 80014be:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d11b      	bne.n	80014fe <Wifi_TcpIp_StartTcpConnection+0x62>
			sprintf((char*)Wifi.TxBuffer,"AT+CIPSERVER=1,%d\r\n",RemotePort);
 80014c6:	89bb      	ldrh	r3, [r7, #12]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4931      	ldr	r1, [pc, #196]	; (8001590 <Wifi_TcpIp_StartTcpConnection+0xf4>)
 80014cc:	4831      	ldr	r0, [pc, #196]	; (8001594 <Wifi_TcpIp_StartTcpConnection+0xf8>)
 80014ce:	f006 fb79 	bl	8007bc4 <siprintf>
			if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80014d2:	4830      	ldr	r0, [pc, #192]	; (8001594 <Wifi_TcpIp_StartTcpConnection+0xf8>)
 80014d4:	f7ff fdb8 	bl	8001048 <Wifi_SendString>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d046      	beq.n	800156c <Wifi_TcpIp_StartTcpConnection+0xd0>
				break;
			if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80014de:	f107 0116 	add.w	r1, r7, #22
 80014e2:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <Wifi_TcpIp_StartTcpConnection+0xfc>)
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <Wifi_TcpIp_StartTcpConnection+0x100>)
 80014e8:	2202      	movs	r2, #2
 80014ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ee:	f7ff fdbd 	bl	800106c <Wifi_WaitForString>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d03b      	beq.n	8001570 <Wifi_TcpIp_StartTcpConnection+0xd4>
				break;			// The timeout was completed and the string was not there
			if(result == 2)		// It was find the "ERROR" String in the receiving information
 80014f8:	7dbb      	ldrb	r3, [r7, #22]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d03a      	beq.n	8001574 <Wifi_TcpIp_StartTcpConnection+0xd8>
				break;
		}
		Wifi_RxClear();
 80014fe:	f7ff fe43 	bl	8001188 <Wifi_RxClear>
		if(Wifi.TcpIpMultiConnection==false)
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <Wifi_TcpIp_StartTcpConnection+0xf0>)
 8001504:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 8001508:	2b00      	cmp	r3, #0
 800150a:	d109      	bne.n	8001520 <Wifi_TcpIp_StartTcpConnection+0x84>
		  sprintf((char*)Wifi.TxBuffer,"AT+CIPSTART=\"TCP\",\"%s\",%d,%d\r\n",RemoteIp,RemotePort,TimeOut);
 800150c:	89ba      	ldrh	r2, [r7, #12]
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	4613      	mov	r3, r2
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	4922      	ldr	r1, [pc, #136]	; (80015a0 <Wifi_TcpIp_StartTcpConnection+0x104>)
 8001518:	481e      	ldr	r0, [pc, #120]	; (8001594 <Wifi_TcpIp_StartTcpConnection+0xf8>)
 800151a:	f006 fb53 	bl	8007bc4 <siprintf>
 800151e:	e00a      	b.n	8001536 <Wifi_TcpIp_StartTcpConnection+0x9a>
		else
		  sprintf((char*)Wifi.TxBuffer,"AT+CIPSTART=%d,\"TCP\",\"%s\",%d,%d\r\n",LinkId,RemoteIp,RemotePort,TimeOut);
 8001520:	7bf9      	ldrb	r1, [r7, #15]
 8001522:	89bb      	ldrh	r3, [r7, #12]
 8001524:	88fa      	ldrh	r2, [r7, #6]
 8001526:	9201      	str	r2, [sp, #4]
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	460a      	mov	r2, r1
 800152e:	491d      	ldr	r1, [pc, #116]	; (80015a4 <Wifi_TcpIp_StartTcpConnection+0x108>)
 8001530:	4818      	ldr	r0, [pc, #96]	; (8001594 <Wifi_TcpIp_StartTcpConnection+0xf8>)
 8001532:	f006 fb47 	bl	8007bc4 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001536:	4817      	ldr	r0, [pc, #92]	; (8001594 <Wifi_TcpIp_StartTcpConnection+0xf8>)
 8001538:	f7ff fd86 	bl	8001048 <Wifi_SendString>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d01a      	beq.n	8001578 <Wifi_TcpIp_StartTcpConnection+0xdc>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_HIGH,&result,3,"OK","CONNECT","ERROR")==false)
 8001542:	f107 0116 	add.w	r1, r7, #22
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <Wifi_TcpIp_StartTcpConnection+0xfc>)
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <Wifi_TcpIp_StartTcpConnection+0x10c>)
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <Wifi_TcpIp_StartTcpConnection+0x100>)
 8001550:	2203      	movs	r2, #3
 8001552:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001556:	f7ff fd89 	bl	800106c <Wifi_WaitForString>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00d      	beq.n	800157c <Wifi_TcpIp_StartTcpConnection+0xe0>
			break;
		if(result == 3)
 8001560:	7dbb      	ldrb	r3, [r7, #22]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d00c      	beq.n	8001580 <Wifi_TcpIp_StartTcpConnection+0xe4>
			break;
		returnVal=true;
 8001566:	2301      	movs	r3, #1
 8001568:	75fb      	strb	r3, [r7, #23]
 800156a:	e00a      	b.n	8001582 <Wifi_TcpIp_StartTcpConnection+0xe6>
				break;
 800156c:	bf00      	nop
 800156e:	e008      	b.n	8001582 <Wifi_TcpIp_StartTcpConnection+0xe6>
				break;			// The timeout was completed and the string was not there
 8001570:	bf00      	nop
 8001572:	e006      	b.n	8001582 <Wifi_TcpIp_StartTcpConnection+0xe6>
				break;
 8001574:	bf00      	nop
 8001576:	e004      	b.n	8001582 <Wifi_TcpIp_StartTcpConnection+0xe6>
			break;
 8001578:	bf00      	nop
 800157a:	e002      	b.n	8001582 <Wifi_TcpIp_StartTcpConnection+0xe6>
			break;
 800157c:	bf00      	nop
 800157e:	e000      	b.n	8001582 <Wifi_TcpIp_StartTcpConnection+0xe6>
			break;
 8001580:	bf00      	nop
	}while(0);
	return returnVal;
 8001582:	7dfb      	ldrb	r3, [r7, #23]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000490 	.word	0x20000490
 8001590:	0800c0d8 	.word	0x0800c0d8
 8001594:	20000691 	.word	0x20000691
 8001598:	0800be84 	.word	0x0800be84
 800159c:	0800be80 	.word	0x0800be80
 80015a0:	0800c0ec 	.word	0x0800c0ec
 80015a4:	0800c10c 	.word	0x0800c10c
 80015a8:	0800c130 	.word	0x0800c130

080015ac <Wifi_TcpIp_SendDataRealUdp>:
	}while(0);
	return returnVal;
}

bool  Wifi_TcpIp_SendDataRealUdp(uint8_t LinkId,uint16_t dataLen,uint8_t *data)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	603a      	str	r2, [r7, #0]
 80015b6:	71fb      	strb	r3, [r7, #7]
 80015b8:	460b      	mov	r3, r1
 80015ba:	80bb      	strh	r3, [r7, #4]
	bool	returnVal=false;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 80015c0:	f7ff fde2 	bl	8001188 <Wifi_RxClear>
		if(Wifi.TcpIpMultiConnection==false)
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <Wifi_TcpIp_SendDataRealUdp+0x70>)
 80015c6:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d106      	bne.n	80015dc <Wifi_TcpIp_SendDataRealUdp+0x30>
			sprintf((char*)Wifi.TxBuffer,"AT+CIPSENDBUF=%d\r\n",dataLen);
 80015ce:	88bb      	ldrh	r3, [r7, #4]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4913      	ldr	r1, [pc, #76]	; (8001620 <Wifi_TcpIp_SendDataRealUdp+0x74>)
 80015d4:	4813      	ldr	r0, [pc, #76]	; (8001624 <Wifi_TcpIp_SendDataRealUdp+0x78>)
 80015d6:	f006 faf5 	bl	8007bc4 <siprintf>
 80015da:	e005      	b.n	80015e8 <Wifi_TcpIp_SendDataRealUdp+0x3c>
		else
			sprintf((char*)Wifi.TxBuffer,"AT+CIPSENDBUF=%d,%d\r\n",LinkId,dataLen);
 80015dc:	79fa      	ldrb	r2, [r7, #7]
 80015de:	88bb      	ldrh	r3, [r7, #4]
 80015e0:	4911      	ldr	r1, [pc, #68]	; (8001628 <Wifi_TcpIp_SendDataRealUdp+0x7c>)
 80015e2:	4810      	ldr	r0, [pc, #64]	; (8001624 <Wifi_TcpIp_SendDataRealUdp+0x78>)
 80015e4:	f006 faee 	bl	8007bc4 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80015e8:	480e      	ldr	r0, [pc, #56]	; (8001624 <Wifi_TcpIp_SendDataRealUdp+0x78>)
 80015ea:	f7ff fd2d 	bl	8001048 <Wifi_SendString>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00c      	beq.n	800160e <Wifi_TcpIp_SendDataRealUdp+0x62>
			break;
		DWT_Delay_us(100);
 80015f4:	2064      	movs	r0, #100	; 0x64
 80015f6:	f000 f849 	bl	800168c <DWT_Delay_us>
		Wifi_RxClear();
 80015fa:	f7ff fdc5 	bl	8001188 <Wifi_RxClear>
		Wifi_SendRaw(data,dataLen);
 80015fe:	88bb      	ldrh	r3, [r7, #4]
 8001600:	4619      	mov	r1, r3
 8001602:	6838      	ldr	r0, [r7, #0]
 8001604:	f7ff fcf8 	bl	8000ff8 <Wifi_SendRaw>
		returnVal=true;
 8001608:	2301      	movs	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	e000      	b.n	8001610 <Wifi_TcpIp_SendDataRealUdp+0x64>
			break;
 800160e:	bf00      	nop
	}while(0);
	return returnVal;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000490 	.word	0x20000490
 8001620:	0800c1f4 	.word	0x0800c1f4
 8001624:	20000691 	.word	0x20000691
 8001628:	0800c208 	.word	0x0800c208

0800162c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <DWT_Delay_Init+0x58>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4a13      	ldr	r2, [pc, #76]	; (8001684 <DWT_Delay_Init+0x58>)
 8001636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800163a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <DWT_Delay_Init+0x58>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4a10      	ldr	r2, [pc, #64]	; (8001684 <DWT_Delay_Init+0x58>)
 8001642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001646:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <DWT_Delay_Init+0x5c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <DWT_Delay_Init+0x5c>)
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <DWT_Delay_Init+0x5c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <DWT_Delay_Init+0x5c>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <DWT_Delay_Init+0x5c>)
 8001662:	2200      	movs	r2, #0
 8001664:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001666:	bf00      	nop
     __ASM volatile ("NOP");
 8001668:	bf00      	nop
  __ASM volatile ("NOP");
 800166a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <DWT_Delay_Init+0x5c>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001674:	2300      	movs	r3, #0
 8001676:	e000      	b.n	800167a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001678:	2301      	movs	r3, #1
  }
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000edf0 	.word	0xe000edf0
 8001688:	e0001000 	.word	0xe0001000

0800168c <DWT_Delay_us>:


void DWT_Delay_us(volatile uint32_t microseconds)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001694:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <DWT_Delay_us+0x40>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800169a:	f003 f96b 	bl	8004974 <HAL_RCC_GetHCLKFreq>
 800169e:	4603      	mov	r3, r0
 80016a0:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <DWT_Delay_us+0x44>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	0c9b      	lsrs	r3, r3, #18
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	fb02 f303 	mul.w	r3, r2, r3
 80016ae:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80016b0:	bf00      	nop
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <DWT_Delay_us+0x40>)
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1ad2      	subs	r2, r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d3f8      	bcc.n	80016b2 <DWT_Delay_us+0x26>
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	e0001000 	.word	0xe0001000
 80016d0:	431bde83 	.word	0x431bde83

080016d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d8:	f001 f991 	bl	80029fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016dc:	f000 f8cc 	bl	8001878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e0:	f000 fa1a 	bl	8001b18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016e4:	f000 f9e8 	bl	8001ab8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016e8:	f000 f928 	bl	800193c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80016ec:	f000 f9b4 	bl	8001a58 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80016f0:	f000 f964 	bl	80019bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //int wifi comunication with ESP01S
  DWT_Delay_Init();
 80016f4:	f7ff ff9a 	bl	800162c <DWT_Delay_Init>
  Wifi_Restart();
 80016f8:	f7ff fdcc 	bl	8001294 <Wifi_Restart>
  while(!Wifi_Init())
 80016fc:	e005      	b.n	800170a <main+0x36>
  {
	  while(!Wifi_Restart());
 80016fe:	bf00      	nop
 8001700:	f7ff fdc8 	bl	8001294 <Wifi_Restart>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0fa      	beq.n	8001700 <main+0x2c>
  while(!Wifi_Init())
 800170a:	f7ff fd87 	bl	800121c <Wifi_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f4      	beq.n	80016fe <main+0x2a>
  }

  HAL_Delay(500);
 8001714:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001718:	f001 f9e6 	bl	8002ae8 <HAL_Delay>
  while(!Wifi_SetMode(WifiMode_Station));
 800171c:	bf00      	nop
 800171e:	2001      	movs	r0, #1
 8001720:	f7ff fdee 	bl	8001300 <Wifi_SetMode>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f9      	beq.n	800171e <main+0x4a>
  while(!Wifi_Station_ConnectToAp(SSID_W,PASSWD_W,NULL));
 800172a:	bf00      	nop
 800172c:	2200      	movs	r2, #0
 800172e:	4945      	ldr	r1, [pc, #276]	; (8001844 <main+0x170>)
 8001730:	4845      	ldr	r0, [pc, #276]	; (8001848 <main+0x174>)
 8001732:	f7ff fe25 	bl	8001380 <Wifi_Station_ConnectToAp>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f7      	beq.n	800172c <main+0x58>
  HAL_Delay(500);
 800173c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001740:	f001 f9d2 	bl	8002ae8 <HAL_Delay>
  Wifi_TcpIp_SetMultiConnection(1);
 8001744:	2001      	movs	r0, #1
 8001746:	f7ff fe69 	bl	800141c <Wifi_TcpIp_SetMultiConnection>
  Wifi_TcpIp_StartTcpConnection(0,ACCSESS_POINT_IP,PORT_AP,10);
 800174a:	230a      	movs	r3, #10
 800174c:	2250      	movs	r2, #80	; 0x50
 800174e:	493f      	ldr	r1, [pc, #252]	; (800184c <main+0x178>)
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff fea3 	bl	800149c <Wifi_TcpIp_StartTcpConnection>

  //initialize MPU6050
  while (MPU6050_Init(&hi2c1) == 1);
 8001756:	bf00      	nop
 8001758:	483d      	ldr	r0, [pc, #244]	; (8001850 <main+0x17c>)
 800175a:	f000 fb24 	bl	8001da6 <MPU6050_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b01      	cmp	r3, #1
 8001762:	d0f9      	beq.n	8001758 <main+0x84>

  //calibration(&offset_accel, &offset_gyro);

  sprintf(string, "accel:\r\noffset_x %f\n\r", offset_accel.offset_x);
 8001764:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <main+0x180>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	493b      	ldr	r1, [pc, #236]	; (8001858 <main+0x184>)
 800176c:	483b      	ldr	r0, [pc, #236]	; (800185c <main+0x188>)
 800176e:	f006 fa29 	bl	8007bc4 <siprintf>
  HAL_UART_Transmit(&huart2, string, strlen(string), 1000);
 8001772:	483a      	ldr	r0, [pc, #232]	; (800185c <main+0x188>)
 8001774:	f7fe fd2c 	bl	80001d0 <strlen>
 8001778:	4603      	mov	r3, r0
 800177a:	b29a      	uxth	r2, r3
 800177c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001780:	4936      	ldr	r1, [pc, #216]	; (800185c <main+0x188>)
 8001782:	4837      	ldr	r0, [pc, #220]	; (8001860 <main+0x18c>)
 8001784:	f004 f8be 	bl	8005904 <HAL_UART_Transmit>
  sprintf(string, "offset_y %f\n\r", offset_accel.offset_y);
 8001788:	4b32      	ldr	r3, [pc, #200]	; (8001854 <main+0x180>)
 800178a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800178e:	4935      	ldr	r1, [pc, #212]	; (8001864 <main+0x190>)
 8001790:	4832      	ldr	r0, [pc, #200]	; (800185c <main+0x188>)
 8001792:	f006 fa17 	bl	8007bc4 <siprintf>
  HAL_UART_Transmit(&huart2, string, strlen(string), 1000);
 8001796:	4831      	ldr	r0, [pc, #196]	; (800185c <main+0x188>)
 8001798:	f7fe fd1a 	bl	80001d0 <strlen>
 800179c:	4603      	mov	r3, r0
 800179e:	b29a      	uxth	r2, r3
 80017a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a4:	492d      	ldr	r1, [pc, #180]	; (800185c <main+0x188>)
 80017a6:	482e      	ldr	r0, [pc, #184]	; (8001860 <main+0x18c>)
 80017a8:	f004 f8ac 	bl	8005904 <HAL_UART_Transmit>
  sprintf(string, "offset_z %f\n\r", offset_accel.offset_z);
 80017ac:	4b29      	ldr	r3, [pc, #164]	; (8001854 <main+0x180>)
 80017ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80017b2:	492d      	ldr	r1, [pc, #180]	; (8001868 <main+0x194>)
 80017b4:	4829      	ldr	r0, [pc, #164]	; (800185c <main+0x188>)
 80017b6:	f006 fa05 	bl	8007bc4 <siprintf>
  HAL_UART_Transmit(&huart2, string, strlen(string), 1000);
 80017ba:	4828      	ldr	r0, [pc, #160]	; (800185c <main+0x188>)
 80017bc:	f7fe fd08 	bl	80001d0 <strlen>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c8:	4924      	ldr	r1, [pc, #144]	; (800185c <main+0x188>)
 80017ca:	4825      	ldr	r0, [pc, #148]	; (8001860 <main+0x18c>)
 80017cc:	f004 f89a 	bl	8005904 <HAL_UART_Transmit>

  sprintf(string, "gyro:\r\noffset_x %f\n\r", offset_gyro.offset_x);
 80017d0:	4b26      	ldr	r3, [pc, #152]	; (800186c <main+0x198>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	4926      	ldr	r1, [pc, #152]	; (8001870 <main+0x19c>)
 80017d8:	4820      	ldr	r0, [pc, #128]	; (800185c <main+0x188>)
 80017da:	f006 f9f3 	bl	8007bc4 <siprintf>
  HAL_UART_Transmit(&huart2, string, strlen(string), 1000);
 80017de:	481f      	ldr	r0, [pc, #124]	; (800185c <main+0x188>)
 80017e0:	f7fe fcf6 	bl	80001d0 <strlen>
 80017e4:	4603      	mov	r3, r0
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ec:	491b      	ldr	r1, [pc, #108]	; (800185c <main+0x188>)
 80017ee:	481c      	ldr	r0, [pc, #112]	; (8001860 <main+0x18c>)
 80017f0:	f004 f888 	bl	8005904 <HAL_UART_Transmit>
  sprintf(string, "offset_y %f\n\r", offset_gyro.offset_y);
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <main+0x198>)
 80017f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017fa:	491a      	ldr	r1, [pc, #104]	; (8001864 <main+0x190>)
 80017fc:	4817      	ldr	r0, [pc, #92]	; (800185c <main+0x188>)
 80017fe:	f006 f9e1 	bl	8007bc4 <siprintf>
  HAL_UART_Transmit(&huart2, string, strlen(string), 1000);
 8001802:	4816      	ldr	r0, [pc, #88]	; (800185c <main+0x188>)
 8001804:	f7fe fce4 	bl	80001d0 <strlen>
 8001808:	4603      	mov	r3, r0
 800180a:	b29a      	uxth	r2, r3
 800180c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001810:	4912      	ldr	r1, [pc, #72]	; (800185c <main+0x188>)
 8001812:	4813      	ldr	r0, [pc, #76]	; (8001860 <main+0x18c>)
 8001814:	f004 f876 	bl	8005904 <HAL_UART_Transmit>
  sprintf(string, "offset_z %f\n\r\r\n", offset_gyro.offset_z);
 8001818:	4b14      	ldr	r3, [pc, #80]	; (800186c <main+0x198>)
 800181a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800181e:	4915      	ldr	r1, [pc, #84]	; (8001874 <main+0x1a0>)
 8001820:	480e      	ldr	r0, [pc, #56]	; (800185c <main+0x188>)
 8001822:	f006 f9cf 	bl	8007bc4 <siprintf>
  HAL_UART_Transmit(&huart2, string, strlen(string), 1000);
 8001826:	480d      	ldr	r0, [pc, #52]	; (800185c <main+0x188>)
 8001828:	f7fe fcd2 	bl	80001d0 <strlen>
 800182c:	4603      	mov	r3, r0
 800182e:	b29a      	uxth	r2, r3
 8001830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001834:	4909      	ldr	r1, [pc, #36]	; (800185c <main+0x188>)
 8001836:	480a      	ldr	r0, [pc, #40]	; (8001860 <main+0x18c>)
 8001838:	f004 f864 	bl	8005904 <HAL_UART_Transmit>
  HAL_TIM_Base_Start_IT(&htim2);
#endif
  while (1)
  {
#ifdef TIMING
	  send_data();
 800183c:	f000 f9d6 	bl	8001bec <send_data>
 8001840:	e7fc      	b.n	800183c <main+0x168>
 8001842:	bf00      	nop
 8001844:	0800c22c 	.word	0x0800c22c
 8001848:	0800c238 	.word	0x0800c238
 800184c:	0800c248 	.word	0x0800c248
 8001850:	2000028c 	.word	0x2000028c
 8001854:	20000e48 	.word	0x20000e48
 8001858:	0800c258 	.word	0x0800c258
 800185c:	20000a44 	.word	0x20000a44
 8001860:	200003b0 	.word	0x200003b0
 8001864:	0800c270 	.word	0x0800c270
 8001868:	0800c280 	.word	0x0800c280
 800186c:	20000e60 	.word	0x20000e60
 8001870:	0800c290 	.word	0x0800c290
 8001874:	0800c2a8 	.word	0x0800c2a8

08001878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b096      	sub	sp, #88	; 0x58
 800187c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	2244      	movs	r2, #68	; 0x44
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f005 fb14 	bl	8006eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800188c:	463b      	mov	r3, r7
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800189a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800189e:	f002 fa73 	bl	8003d88 <HAL_PWREx_ControlVoltageScaling>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80018a8:	f000 fa78 	bl	8001d9c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018ac:	f002 fa4e 	bl	8003d4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018b0:	4b21      	ldr	r3, [pc, #132]	; (8001938 <SystemClock_Config+0xc0>)
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b6:	4a20      	ldr	r2, [pc, #128]	; (8001938 <SystemClock_Config+0xc0>)
 80018b8:	f023 0318 	bic.w	r3, r3, #24
 80018bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80018c0:	2314      	movs	r3, #20
 80018c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018c4:	2301      	movs	r3, #1
 80018c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80018c8:	2301      	movs	r3, #1
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80018d0:	2360      	movs	r3, #96	; 0x60
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018d4:	2302      	movs	r3, #2
 80018d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80018d8:	2301      	movs	r3, #1
 80018da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018dc:	2301      	movs	r3, #1
 80018de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80018e0:	2310      	movs	r3, #16
 80018e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018e4:	2307      	movs	r3, #7
 80018e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018e8:	2302      	movs	r3, #2
 80018ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018ec:	2302      	movs	r3, #2
 80018ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4618      	mov	r0, r3
 80018f6:	f002 fa9d 	bl	8003e34 <HAL_RCC_OscConfig>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001900:	f000 fa4c 	bl	8001d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001904:	230f      	movs	r3, #15
 8001906:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001908:	2303      	movs	r3, #3
 800190a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001918:	463b      	mov	r3, r7
 800191a:	2101      	movs	r1, #1
 800191c:	4618      	mov	r0, r3
 800191e:	f002 fe9d 	bl	800465c <HAL_RCC_ClockConfig>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001928:	f000 fa38 	bl	8001d9c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800192c:	f003 fab0 	bl	8004e90 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001930:	bf00      	nop
 8001932:	3758      	adds	r7, #88	; 0x58
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40021000 	.word	0x40021000

0800193c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <MX_I2C1_Init+0x74>)
 8001942:	4a1c      	ldr	r2, [pc, #112]	; (80019b4 <MX_I2C1_Init+0x78>)
 8001944:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <MX_I2C1_Init+0x74>)
 8001948:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <MX_I2C1_Init+0x7c>)
 800194a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <MX_I2C1_Init+0x74>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <MX_I2C1_Init+0x74>)
 8001954:	2201      	movs	r2, #1
 8001956:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <MX_I2C1_Init+0x74>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800195e:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <MX_I2C1_Init+0x74>)
 8001960:	2200      	movs	r2, #0
 8001962:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <MX_I2C1_Init+0x74>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_I2C1_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_I2C1_Init+0x74>)
 8001972:	2200      	movs	r2, #0
 8001974:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001976:	480e      	ldr	r0, [pc, #56]	; (80019b0 <MX_I2C1_Init+0x74>)
 8001978:	f001 fbec 	bl	8003154 <HAL_I2C_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001982:	f000 fa0b 	bl	8001d9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001986:	2100      	movs	r1, #0
 8001988:	4809      	ldr	r0, [pc, #36]	; (80019b0 <MX_I2C1_Init+0x74>)
 800198a:	f002 f947 	bl	8003c1c <HAL_I2CEx_ConfigAnalogFilter>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001994:	f000 fa02 	bl	8001d9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001998:	2100      	movs	r1, #0
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_I2C1_Init+0x74>)
 800199c:	f002 f989 	bl	8003cb2 <HAL_I2CEx_ConfigDigitalFilter>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019a6:	f000 f9f9 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000028c 	.word	0x2000028c
 80019b4:	40005400 	.word	0x40005400
 80019b8:	00300f38 	.word	0x00300f38

080019bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c2:	f107 0310 	add.w	r3, r7, #16
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019da:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <MX_TIM2_Init+0x98>)
 80019dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 80019e2:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <MX_TIM2_Init+0x98>)
 80019e4:	2220      	movs	r2, #32
 80019e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <MX_TIM2_Init+0x98>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80019ee:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <MX_TIM2_Init+0x98>)
 80019f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80019f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f6:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <MX_TIM2_Init+0x98>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fc:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <MX_TIM2_Init+0x98>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a02:	4814      	ldr	r0, [pc, #80]	; (8001a54 <MX_TIM2_Init+0x98>)
 8001a04:	f003 fb46 	bl	8005094 <HAL_TIM_Base_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a0e:	f000 f9c5 	bl	8001d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480d      	ldr	r0, [pc, #52]	; (8001a54 <MX_TIM2_Init+0x98>)
 8001a20:	f003 fcae 	bl	8005380 <HAL_TIM_ConfigClockSource>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a2a:	f000 f9b7 	bl	8001d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4806      	ldr	r0, [pc, #24]	; (8001a54 <MX_TIM2_Init+0x98>)
 8001a3c:	f003 fe90 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a46:	f000 f9a9 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a4a:	bf00      	nop
 8001a4c:	3720      	adds	r7, #32
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200002e0 	.word	0x200002e0

08001a58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <MX_USART1_UART_Init+0x58>)
 8001a5e:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <MX_USART1_UART_Init+0x5c>)
 8001a60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <MX_USART1_UART_Init+0x58>)
 8001a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_USART1_UART_Init+0x58>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <MX_USART1_UART_Init+0x58>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <MX_USART1_UART_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <MX_USART1_UART_Init+0x58>)
 8001a7e:	220c      	movs	r2, #12
 8001a80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <MX_USART1_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <MX_USART1_UART_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <MX_USART1_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_USART1_UART_Init+0x58>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_USART1_UART_Init+0x58>)
 8001a9c:	f003 fee4 	bl	8005868 <HAL_UART_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001aa6:	f000 f979 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000032c 	.word	0x2000032c
 8001ab4:	40013800 	.word	0x40013800

08001ab8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001abe:	4a15      	ldr	r2, [pc, #84]	; (8001b14 <MX_USART2_UART_Init+0x5c>)
 8001ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001ade:	220c      	movs	r2, #12
 8001ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001afc:	f003 feb4 	bl	8005868 <HAL_UART_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b06:	f000 f949 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200003b0 	.word	0x200003b0
 8001b14:	40004400 	.word	0x40004400

08001b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
 8001b2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2e:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	4a27      	ldr	r2, [pc, #156]	; (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3a:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	4a21      	ldr	r2, [pc, #132]	; (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b52:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6a:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_ESP8266_GPIO_Port, EN_ESP8266_Pin, GPIO_PIN_SET);
 8001b76:	2201      	movs	r2, #1
 8001b78:	2102      	movs	r1, #2
 8001b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7e:	f001 fad1 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2108      	movs	r1, #8
 8001b86:	4813      	ldr	r0, [pc, #76]	; (8001bd4 <MX_GPIO_Init+0xbc>)
 8001b88:	f001 facc 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EN_ESP8266_Pin */
  GPIO_InitStruct.Pin = EN_ESP8266_Pin;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EN_ESP8266_GPIO_Port, &GPIO_InitStruct);
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba6:	f001 f953 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001baa:	2308      	movs	r3, #8
 8001bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4804      	ldr	r0, [pc, #16]	; (8001bd4 <MX_GPIO_Init+0xbc>)
 8001bc2:	f001 f945 	bl	8002e50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bc6:	bf00      	nop
 8001bc8:	3720      	adds	r7, #32
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	48000400 	.word	0x48000400

08001bd8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	Wifi_RxCallBack();
 8001be0:	f7ff faf8 	bl	80011d4 <Wifi_RxCallBack>
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <send_data>:
	offset_accel->offset_y = (positive.offset_y + negative.offset_y) / 2.0;
	offset_accel->offset_z = (positive.offset_z + negative.offset_z) / 2.0;

}

void send_data() {
 8001bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bf0:	ed2d 8b02 	vpush	{d8}
 8001bf4:	f5ad 6d90 	sub.w	sp, sp, #1152	; 0x480
 8001bf8:	af0a      	add	r7, sp, #40	; 0x28
#ifdef TIMING
	unsigned int tick = HAL_GetTick();
 8001bfa:	f000 ff69 	bl	8002ad0 <HAL_GetTick>
 8001bfe:	f8c7 0454 	str.w	r0, [r7, #1108]	; 0x454
#endif
	MPU6050_Read_All(&hi2c1, &MPU6050);
 8001c02:	4958      	ldr	r1, [pc, #352]	; (8001d64 <send_data+0x178>)
 8001c04:	4858      	ldr	r0, [pc, #352]	; (8001d68 <send_data+0x17c>)
 8001c06:	f000 f927 	bl	8001e58 <MPU6050_Read_All>
//
//	sprintf(string, "Gz %f\n\r\r\n", MPU6050.Gz + offset_gyro.offset_z);
//	Wifi_Transmit(0, strlen(string),(char *)string);

	sprintf(mybuffer, "Ax %f\n\rAy %f\n\rAz %f\n\rGx %f\n\rGy %f\n\rGz %f\n\r\n\r",
			MPU6050.Ax + offset_accel.offset_x, MPU6050.Ay + offset_accel.offset_y, MPU6050.Az + offset_accel.offset_z,
 8001c0a:	4b56      	ldr	r3, [pc, #344]	; (8001d64 <send_data+0x178>)
 8001c0c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c10:	4b56      	ldr	r3, [pc, #344]	; (8001d6c <send_data+0x180>)
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
	sprintf(mybuffer, "Ax %f\n\rAy %f\n\rAz %f\n\rGx %f\n\rGy %f\n\rGz %f\n\r\n\r",
 8001c16:	f7fe fb39 	bl	800028c <__adddf3>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	e9c7 2300 	strd	r2, r3, [r7]
			MPU6050.Ax + offset_accel.offset_x, MPU6050.Ay + offset_accel.offset_y, MPU6050.Az + offset_accel.offset_z,
 8001c22:	4b50      	ldr	r3, [pc, #320]	; (8001d64 <send_data+0x178>)
 8001c24:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c28:	4b50      	ldr	r3, [pc, #320]	; (8001d6c <send_data+0x180>)
 8001c2a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	sprintf(mybuffer, "Ax %f\n\rAy %f\n\rAz %f\n\rGx %f\n\rGy %f\n\rGz %f\n\r\n\r",
 8001c2e:	f7fe fb2d 	bl	800028c <__adddf3>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4690      	mov	r8, r2
 8001c38:	4699      	mov	r9, r3
			MPU6050.Ax + offset_accel.offset_x, MPU6050.Ay + offset_accel.offset_y, MPU6050.Az + offset_accel.offset_z,
 8001c3a:	4b4a      	ldr	r3, [pc, #296]	; (8001d64 <send_data+0x178>)
 8001c3c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c40:	4b4a      	ldr	r3, [pc, #296]	; (8001d6c <send_data+0x180>)
 8001c42:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	sprintf(mybuffer, "Ax %f\n\rAy %f\n\rAz %f\n\rGx %f\n\rGy %f\n\rGz %f\n\r\n\r",
 8001c46:	f7fe fb21 	bl	800028c <__adddf3>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4692      	mov	sl, r2
 8001c50:	469b      	mov	fp, r3
			MPU6050.Gx + offset_gyro.offset_x, MPU6050.Gy + offset_gyro.offset_y, MPU6050.Gz + offset_gyro.offset_z);
 8001c52:	4b44      	ldr	r3, [pc, #272]	; (8001d64 <send_data+0x178>)
 8001c54:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001c58:	4b45      	ldr	r3, [pc, #276]	; (8001d70 <send_data+0x184>)
 8001c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
	sprintf(mybuffer, "Ax %f\n\rAy %f\n\rAz %f\n\rGx %f\n\rGy %f\n\rGz %f\n\r\n\r",
 8001c5e:	f7fe fb15 	bl	800028c <__adddf3>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	ec43 2b18 	vmov	d8, r2, r3
			MPU6050.Gx + offset_gyro.offset_x, MPU6050.Gy + offset_gyro.offset_y, MPU6050.Gz + offset_gyro.offset_z);
 8001c6a:	4b3e      	ldr	r3, [pc, #248]	; (8001d64 <send_data+0x178>)
 8001c6c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001c70:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <send_data+0x184>)
 8001c72:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	sprintf(mybuffer, "Ax %f\n\rAy %f\n\rAz %f\n\rGx %f\n\rGy %f\n\rGz %f\n\r\n\r",
 8001c76:	f7fe fb09 	bl	800028c <__adddf3>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4614      	mov	r4, r2
 8001c80:	461d      	mov	r5, r3
			MPU6050.Gx + offset_gyro.offset_x, MPU6050.Gy + offset_gyro.offset_y, MPU6050.Gz + offset_gyro.offset_z);
 8001c82:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <send_data+0x178>)
 8001c84:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001c88:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <send_data+0x184>)
 8001c8a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	sprintf(mybuffer, "Ax %f\n\rAy %f\n\rAz %f\n\rGx %f\n\rGy %f\n\rGz %f\n\r\n\r",
 8001c8e:	f7fe fafd 	bl	800028c <__adddf3>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8001c9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001c9e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001ca2:	ed8d 8b04 	vstr	d8, [sp, #16]
 8001ca6:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001caa:	e9cd 8900 	strd	r8, r9, [sp]
 8001cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cb2:	4930      	ldr	r1, [pc, #192]	; (8001d74 <send_data+0x188>)
 8001cb4:	f005 ff86 	bl	8007bc4 <siprintf>
	Wifi_Transmit(0, strlen(mybuffer), mybuffer);
 8001cb8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fa87 	bl	80001d0 <strlen>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001cca:	4619      	mov	r1, r3
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f7ff fc6d 	bl	80015ac <Wifi_TcpIp_SendDataRealUdp>
#ifdef TIMING
	interval += (HAL_GetTick() - tick);
 8001cd2:	f000 fefd 	bl	8002ad0 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8001cdc:	1ad2      	subs	r2, r2, r3
 8001cde:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <send_data+0x18c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4a24      	ldr	r2, [pc, #144]	; (8001d78 <send_data+0x18c>)
 8001ce6:	6013      	str	r3, [r2, #0]
	if (++measures >= 100) {
 8001ce8:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <send_data+0x190>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	4a23      	ldr	r2, [pc, #140]	; (8001d7c <send_data+0x190>)
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <send_data+0x190>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b63      	cmp	r3, #99	; 0x63
 8001cf8:	dd2c      	ble.n	8001d54 <send_data+0x168>
		char temp[100];
		sprintf(temp, "Time: %f ms\r\n", ((double)interval) / (double) measures);
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <send_data+0x18c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fc00 	bl	8000504 <__aeabi_ui2d>
 8001d04:	4604      	mov	r4, r0
 8001d06:	460d      	mov	r5, r1
 8001d08:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <send_data+0x190>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fc09 	bl	8000524 <__aeabi_i2d>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4620      	mov	r0, r4
 8001d18:	4629      	mov	r1, r5
 8001d1a:	f7fe fd97 	bl	800084c <__aeabi_ddiv>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	f107 0008 	add.w	r0, r7, #8
 8001d26:	4916      	ldr	r1, [pc, #88]	; (8001d80 <send_data+0x194>)
 8001d28:	f005 ff4c 	bl	8007bc4 <siprintf>
		HAL_UART_Transmit(&huart2, temp, strlen(temp), HAL_MAX_DELAY);
 8001d2c:	f107 0308 	add.w	r3, r7, #8
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fa4d 	bl	80001d0 <strlen>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	f107 0108 	add.w	r1, r7, #8
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	4810      	ldr	r0, [pc, #64]	; (8001d84 <send_data+0x198>)
 8001d44:	f003 fdde 	bl	8005904 <HAL_UART_Transmit>
		measures = 0;
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <send_data+0x190>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
		interval = 0;
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <send_data+0x18c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
	}
#endif
}
 8001d54:	bf00      	nop
 8001d56:	f507 678b 	add.w	r7, r7, #1112	; 0x458
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	ecbd 8b02 	vpop	{d8}
 8001d60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d64:	20000438 	.word	0x20000438
 8001d68:	2000028c 	.word	0x2000028c
 8001d6c:	20000e48 	.word	0x20000e48
 8001d70:	20000e60 	.word	0x20000e60
 8001d74:	0800c400 	.word	0x0800c400
 8001d78:	20000e78 	.word	0x20000e78
 8001d7c:	20000e7c 	.word	0x20000e7c
 8001d80:	0800c430 	.word	0x0800c430
 8001d84:	200003b0 	.word	0x200003b0

08001d88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	send_data();
 8001d90:	f7ff ff2c 	bl	8001bec <send_data>
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da0:	b672      	cpsid	i
}
 8001da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <Error_Handler+0x8>

08001da6 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b088      	sub	sp, #32
 8001daa:	af04      	add	r7, sp, #16
 8001dac:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001dae:	2364      	movs	r3, #100	; 0x64
 8001db0:	9302      	str	r3, [sp, #8]
 8001db2:	2301      	movs	r3, #1
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	f107 030f 	add.w	r3, r7, #15
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	2275      	movs	r2, #117	; 0x75
 8001dc0:	21d0      	movs	r1, #208	; 0xd0
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f001 fb6a 	bl	800349c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	2b68      	cmp	r3, #104	; 0x68
 8001dcc:	d13d      	bne.n	8001e4a <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001dd2:	2364      	movs	r3, #100	; 0x64
 8001dd4:	9302      	str	r3, [sp, #8]
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	f107 030e 	add.w	r3, r7, #14
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2301      	movs	r3, #1
 8001de2:	226b      	movs	r2, #107	; 0x6b
 8001de4:	21d0      	movs	r1, #208	; 0xd0
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f001 fa44 	bl	8003274 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001dec:	2307      	movs	r3, #7
 8001dee:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001df0:	2364      	movs	r3, #100	; 0x64
 8001df2:	9302      	str	r3, [sp, #8]
 8001df4:	2301      	movs	r3, #1
 8001df6:	9301      	str	r3, [sp, #4]
 8001df8:	f107 030e 	add.w	r3, r7, #14
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	2301      	movs	r3, #1
 8001e00:	2219      	movs	r2, #25
 8001e02:	21d0      	movs	r1, #208	; 0xd0
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f001 fa35 	bl	8003274 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001e0e:	2364      	movs	r3, #100	; 0x64
 8001e10:	9302      	str	r3, [sp, #8]
 8001e12:	2301      	movs	r3, #1
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	f107 030e 	add.w	r3, r7, #14
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	221c      	movs	r2, #28
 8001e20:	21d0      	movs	r1, #208	; 0xd0
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f001 fa26 	bl	8003274 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001e2c:	2364      	movs	r3, #100	; 0x64
 8001e2e:	9302      	str	r3, [sp, #8]
 8001e30:	2301      	movs	r3, #1
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	f107 030e 	add.w	r3, r7, #14
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	221b      	movs	r2, #27
 8001e3e:	21d0      	movs	r1, #208	; 0xd0
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f001 fa17 	bl	8003274 <HAL_I2C_Mem_Write>
        return 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e000      	b.n	8001e4c <MPU6050_Init+0xa6>
    }
    return 1;
 8001e4a:	2301      	movs	r3, #1
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	0000      	movs	r0, r0
	...

08001e58 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e5c:	b094      	sub	sp, #80	; 0x50
 8001e5e:	af04      	add	r7, sp, #16
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001e64:	2364      	movs	r3, #100	; 0x64
 8001e66:	9302      	str	r3, [sp, #8]
 8001e68:	230e      	movs	r3, #14
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	f107 0308 	add.w	r3, r7, #8
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2301      	movs	r3, #1
 8001e74:	223b      	movs	r2, #59	; 0x3b
 8001e76:	21d0      	movs	r1, #208	; 0xd0
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f001 fb0f 	bl	800349c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001e7e:	7a3b      	ldrb	r3, [r7, #8]
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	7a7b      	ldrb	r3, [r7, #9]
 8001e86:	b21b      	sxth	r3, r3
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001e90:	7abb      	ldrb	r3, [r7, #10]
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	b21a      	sxth	r2, r3
 8001e96:	7afb      	ldrb	r3, [r7, #11]
 8001e98:	b21b      	sxth	r3, r3
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	b21a      	sxth	r2, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001ea2:	7b3b      	ldrb	r3, [r7, #12]
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	b21a      	sxth	r2, r3
 8001ea8:	7b7b      	ldrb	r3, [r7, #13]
 8001eaa:	b21b      	sxth	r3, r3
 8001eac:	4313      	orrs	r3, r2
 8001eae:	b21a      	sxth	r2, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001eb4:	7bbb      	ldrb	r3, [r7, #14]
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	b21a      	sxth	r2, r3
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001ec2:	7c3b      	ldrb	r3, [r7, #16]
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	b21a      	sxth	r2, r3
 8001ec8:	7c7b      	ldrb	r3, [r7, #17]
 8001eca:	b21b      	sxth	r3, r3
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	b21a      	sxth	r2, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001ed4:	7cbb      	ldrb	r3, [r7, #18]
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	b21a      	sxth	r2, r3
 8001eda:	7cfb      	ldrb	r3, [r7, #19]
 8001edc:	b21b      	sxth	r3, r3
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	b21a      	sxth	r2, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001ee6:	7d3b      	ldrb	r3, [r7, #20]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	b21a      	sxth	r2, r3
 8001eec:	7d7b      	ldrb	r3, [r7, #21]
 8001eee:	b21b      	sxth	r3, r3
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	b21a      	sxth	r2, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fb10 	bl	8000524 <__aeabi_i2d>
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	4bbd      	ldr	r3, [pc, #756]	; (8002200 <MPU6050_Read_All+0x3a8>)
 8001f0a:	f7fe fc9f 	bl	800084c <__aeabi_ddiv>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	6839      	ldr	r1, [r7, #0]
 8001f14:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fb00 	bl	8000524 <__aeabi_i2d>
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	4bb5      	ldr	r3, [pc, #724]	; (8002200 <MPU6050_Read_All+0x3a8>)
 8001f2a:	f7fe fc8f 	bl	800084c <__aeabi_ddiv>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	6839      	ldr	r1, [r7, #0]
 8001f34:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe faf0 	bl	8000524 <__aeabi_i2d>
 8001f44:	a3a8      	add	r3, pc, #672	; (adr r3, 80021e8 <MPU6050_Read_All+0x390>)
 8001f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4a:	f7fe fc7f 	bl	800084c <__aeabi_ddiv>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	6839      	ldr	r1, [r7, #0]
 8001f54:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001f58:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001f5c:	ee07 3a90 	vmov	s15, r3
 8001f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f64:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8002204 <MPU6050_Read_All+0x3ac>
 8001f68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f6c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002208 <MPU6050_Read_All+0x3b0>
 8001f70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe facf 	bl	8000524 <__aeabi_i2d>
 8001f86:	a39a      	add	r3, pc, #616	; (adr r3, 80021f0 <MPU6050_Read_All+0x398>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	f7fe fc5e 	bl	800084c <__aeabi_ddiv>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	6839      	ldr	r1, [r7, #0]
 8001f96:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fabf 	bl	8000524 <__aeabi_i2d>
 8001fa6:	a392      	add	r3, pc, #584	; (adr r3, 80021f0 <MPU6050_Read_All+0x398>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	f7fe fc4e 	bl	800084c <__aeabi_ddiv>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	6839      	ldr	r1, [r7, #0]
 8001fb6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe faaf 	bl	8000524 <__aeabi_i2d>
 8001fc6:	a38a      	add	r3, pc, #552	; (adr r3, 80021f0 <MPU6050_Read_All+0x398>)
 8001fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fcc:	f7fe fc3e 	bl	800084c <__aeabi_ddiv>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	6839      	ldr	r1, [r7, #0]
 8001fd6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001fda:	f000 fd79 	bl	8002ad0 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	4b8a      	ldr	r3, [pc, #552]	; (800220c <MPU6050_Read_All+0x3b4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fa8c 	bl	8000504 <__aeabi_ui2d>
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	4b87      	ldr	r3, [pc, #540]	; (8002210 <MPU6050_Read_All+0x3b8>)
 8001ff2:	f7fe fc2b 	bl	800084c <__aeabi_ddiv>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001ffe:	f000 fd67 	bl	8002ad0 <HAL_GetTick>
 8002002:	4603      	mov	r3, r0
 8002004:	4a81      	ldr	r2, [pc, #516]	; (800220c <MPU6050_Read_All+0x3b4>)
 8002006:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200e:	461a      	mov	r2, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002016:	fb03 f202 	mul.w	r2, r3, r2
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002020:	4619      	mov	r1, r3
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002028:	fb01 f303 	mul.w	r3, r1, r3
 800202c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fa78 	bl	8000524 <__aeabi_i2d>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	ec43 2b10 	vmov	d0, r2, r3
 800203c:	f009 fd67 	bl	800bb0e <sqrt>
 8002040:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002050:	f7fe fd3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d11f      	bne.n	800209a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa5f 	bl	8000524 <__aeabi_i2d>
 8002066:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800206a:	f7fe fbef 	bl	800084c <__aeabi_ddiv>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	ec43 2b17 	vmov	d7, r2, r3
 8002076:	eeb0 0a47 	vmov.f32	s0, s14
 800207a:	eef0 0a67 	vmov.f32	s1, s15
 800207e:	f009 fb9b 	bl	800b7b8 <atan>
 8002082:	ec51 0b10 	vmov	r0, r1, d0
 8002086:	a35c      	add	r3, pc, #368	; (adr r3, 80021f8 <MPU6050_Read_All+0x3a0>)
 8002088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208c:	f7fe fab4 	bl	80005f8 <__aeabi_dmul>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002098:	e005      	b.n	80020a6 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ac:	425b      	negs	r3, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fa38 	bl	8000524 <__aeabi_i2d>
 80020b4:	4682      	mov	sl, r0
 80020b6:	468b      	mov	fp, r1
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fa30 	bl	8000524 <__aeabi_i2d>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	ec43 2b11 	vmov	d1, r2, r3
 80020cc:	ec4b ab10 	vmov	d0, sl, fp
 80020d0:	f009 fd1b 	bl	800bb0a <atan2>
 80020d4:	ec51 0b10 	vmov	r0, r1, d0
 80020d8:	a347      	add	r3, pc, #284	; (adr r3, 80021f8 <MPU6050_Read_All+0x3a0>)
 80020da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020de:	f7fe fa8b 	bl	80005f8 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	4b49      	ldr	r3, [pc, #292]	; (8002214 <MPU6050_Read_All+0x3bc>)
 80020f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020f4:	f7fe fcf2 	bl	8000adc <__aeabi_dcmplt>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <MPU6050_Read_All+0x2bc>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	4b43      	ldr	r3, [pc, #268]	; (8002218 <MPU6050_Read_All+0x3c0>)
 800210a:	f7fe fd05 	bl	8000b18 <__aeabi_dcmpgt>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d114      	bne.n	800213e <MPU6050_Read_All+0x2e6>
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	4b3f      	ldr	r3, [pc, #252]	; (8002218 <MPU6050_Read_All+0x3c0>)
 800211a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800211e:	f7fe fcfb 	bl	8000b18 <__aeabi_dcmpgt>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d015      	beq.n	8002154 <MPU6050_Read_All+0x2fc>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	4b38      	ldr	r3, [pc, #224]	; (8002214 <MPU6050_Read_All+0x3bc>)
 8002134:	f7fe fcd2 	bl	8000adc <__aeabi_dcmplt>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 800213e:	4937      	ldr	r1, [pc, #220]	; (800221c <MPU6050_Read_All+0x3c4>)
 8002140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002144:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002148:	6839      	ldr	r1, [r7, #0]
 800214a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800214e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002152:	e014      	b.n	800217e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800215a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800215e:	eeb0 1a47 	vmov.f32	s2, s14
 8002162:	eef0 1a67 	vmov.f32	s3, s15
 8002166:	ed97 0b06 	vldr	d0, [r7, #24]
 800216a:	482c      	ldr	r0, [pc, #176]	; (800221c <MPU6050_Read_All+0x3c4>)
 800216c:	f000 f85a 	bl	8002224 <Kalman_getAngle>
 8002170:	eeb0 7a40 	vmov.f32	s14, s0
 8002174:	eef0 7a60 	vmov.f32	s15, s1
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002184:	4690      	mov	r8, r2
 8002186:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <MPU6050_Read_All+0x3c0>)
 8002190:	4640      	mov	r0, r8
 8002192:	4649      	mov	r1, r9
 8002194:	f7fe fcc0 	bl	8000b18 <__aeabi_dcmpgt>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d008      	beq.n	80021b0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021a4:	4614      	mov	r4, r2
 80021a6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80021b6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80021ba:	eeb0 1a47 	vmov.f32	s2, s14
 80021be:	eef0 1a67 	vmov.f32	s3, s15
 80021c2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80021c6:	4816      	ldr	r0, [pc, #88]	; (8002220 <MPU6050_Read_All+0x3c8>)
 80021c8:	f000 f82c 	bl	8002224 <Kalman_getAngle>
 80021cc:	eeb0 7a40 	vmov.f32	s14, s0
 80021d0:	eef0 7a60 	vmov.f32	s15, s1
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 80021da:	bf00      	nop
 80021dc:	3740      	adds	r7, #64	; 0x40
 80021de:	46bd      	mov	sp, r7
 80021e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021e4:	f3af 8000 	nop.w
 80021e8:	00000000 	.word	0x00000000
 80021ec:	40cc2900 	.word	0x40cc2900
 80021f0:	00000000 	.word	0x00000000
 80021f4:	40606000 	.word	0x40606000
 80021f8:	1a63c1f8 	.word	0x1a63c1f8
 80021fc:	404ca5dc 	.word	0x404ca5dc
 8002200:	40d00000 	.word	0x40d00000
 8002204:	43aa0000 	.word	0x43aa0000
 8002208:	42121eb8 	.word	0x42121eb8
 800220c:	20000e80 	.word	0x20000e80
 8002210:	408f4000 	.word	0x408f4000
 8002214:	c0568000 	.word	0xc0568000
 8002218:	40568000 	.word	0x40568000
 800221c:	20000048 	.word	0x20000048
 8002220:	20000000 	.word	0x20000000

08002224 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8002224:	b5b0      	push	{r4, r5, r7, lr}
 8002226:	b096      	sub	sp, #88	; 0x58
 8002228:	af00      	add	r7, sp, #0
 800222a:	61f8      	str	r0, [r7, #28]
 800222c:	ed87 0b04 	vstr	d0, [r7, #16]
 8002230:	ed87 1b02 	vstr	d1, [r7, #8]
 8002234:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800223e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002242:	f7fe f821 	bl	8000288 <__aeabi_dsub>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002254:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002258:	e9d7 0100 	ldrd	r0, r1, [r7]
 800225c:	f7fe f9cc 	bl	80005f8 <__aeabi_dmul>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4620      	mov	r0, r4
 8002266:	4629      	mov	r1, r5
 8002268:	f7fe f810 	bl	800028c <__adddf3>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	69f9      	ldr	r1, [r7, #28]
 8002272:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002282:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002286:	f7fe f9b7 	bl	80005f8 <__aeabi_dmul>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002298:	f7fd fff6 	bl	8000288 <__aeabi_dsub>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80022aa:	f7fd ffed 	bl	8000288 <__aeabi_dsub>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4610      	mov	r0, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	f7fd ffe6 	bl	800028c <__adddf3>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022cc:	f7fe f994 	bl	80005f8 <__aeabi_dmul>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4620      	mov	r0, r4
 80022d6:	4629      	mov	r1, r5
 80022d8:	f7fd ffd8 	bl	800028c <__adddf3>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	69f9      	ldr	r1, [r7, #28]
 80022e2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80022f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022f6:	f7fe f97f 	bl	80005f8 <__aeabi_dmul>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4620      	mov	r0, r4
 8002300:	4629      	mov	r1, r5
 8002302:	f7fd ffc1 	bl	8000288 <__aeabi_dsub>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	69f9      	ldr	r1, [r7, #28]
 800230c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800231c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002320:	f7fe f96a 	bl	80005f8 <__aeabi_dmul>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4620      	mov	r0, r4
 800232a:	4629      	mov	r1, r5
 800232c:	f7fd ffac 	bl	8000288 <__aeabi_dsub>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	69f9      	ldr	r1, [r7, #28]
 8002336:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002346:	e9d7 2300 	ldrd	r2, r3, [r7]
 800234a:	f7fe f955 	bl	80005f8 <__aeabi_dmul>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4620      	mov	r0, r4
 8002354:	4629      	mov	r1, r5
 8002356:	f7fd ff99 	bl	800028c <__adddf3>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	69f9      	ldr	r1, [r7, #28]
 8002360:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002370:	f7fd ff8c 	bl	800028c <__adddf3>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002382:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002386:	f7fe fa61 	bl	800084c <__aeabi_ddiv>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002398:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800239c:	f7fe fa56 	bl	800084c <__aeabi_ddiv>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023b2:	f7fd ff69 	bl	8000288 <__aeabi_dsub>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80023c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023cc:	f7fe f914 	bl	80005f8 <__aeabi_dmul>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4620      	mov	r0, r4
 80023d6:	4629      	mov	r1, r5
 80023d8:	f7fd ff58 	bl	800028c <__adddf3>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	69f9      	ldr	r1, [r7, #28]
 80023e2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80023ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023f4:	f7fe f900 	bl	80005f8 <__aeabi_dmul>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4620      	mov	r0, r4
 80023fe:	4629      	mov	r1, r5
 8002400:	f7fd ff44 	bl	800028c <__adddf3>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	69f9      	ldr	r1, [r7, #28]
 800240a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002414:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800241e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002428:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800242c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002430:	f7fe f8e2 	bl	80005f8 <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4620      	mov	r0, r4
 800243a:	4629      	mov	r1, r5
 800243c:	f7fd ff24 	bl	8000288 <__aeabi_dsub>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	69f9      	ldr	r1, [r7, #28]
 8002446:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002450:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002454:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002458:	f7fe f8ce 	bl	80005f8 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4620      	mov	r0, r4
 8002462:	4629      	mov	r1, r5
 8002464:	f7fd ff10 	bl	8000288 <__aeabi_dsub>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	69f9      	ldr	r1, [r7, #28]
 800246e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002478:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800247c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002480:	f7fe f8ba 	bl	80005f8 <__aeabi_dmul>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4620      	mov	r0, r4
 800248a:	4629      	mov	r1, r5
 800248c:	f7fd fefc 	bl	8000288 <__aeabi_dsub>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	69f9      	ldr	r1, [r7, #28]
 8002496:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80024a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024a8:	f7fe f8a6 	bl	80005f8 <__aeabi_dmul>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4620      	mov	r0, r4
 80024b2:	4629      	mov	r1, r5
 80024b4:	f7fd fee8 	bl	8000288 <__aeabi_dsub>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	69f9      	ldr	r1, [r7, #28]
 80024be:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80024c8:	ec43 2b17 	vmov	d7, r2, r3
}
 80024cc:	eeb0 0a47 	vmov.f32	s0, s14
 80024d0:	eef0 0a67 	vmov.f32	s1, s15
 80024d4:	3758      	adds	r7, #88	; 0x58
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080024dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e2:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HAL_MspInit+0x44>)
 80024e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e6:	4a0e      	ldr	r2, [pc, #56]	; (8002520 <HAL_MspInit+0x44>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6613      	str	r3, [r2, #96]	; 0x60
 80024ee:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <HAL_MspInit+0x44>)
 80024f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	607b      	str	r3, [r7, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_MspInit+0x44>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	4a08      	ldr	r2, [pc, #32]	; (8002520 <HAL_MspInit+0x44>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002504:	6593      	str	r3, [r2, #88]	; 0x58
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_MspInit+0x44>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000

08002524 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b09e      	sub	sp, #120	; 0x78
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800253c:	f107 0310 	add.w	r3, r7, #16
 8002540:	2254      	movs	r2, #84	; 0x54
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f004 fcb5 	bl	8006eb4 <memset>
  if(hi2c->Instance==I2C1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <HAL_I2C_MspInit+0xa8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d137      	bne.n	80025c4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002554:	2340      	movs	r3, #64	; 0x40
 8002556:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002558:	2300      	movs	r3, #0
 800255a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800255c:	f107 0310 	add.w	r3, r7, #16
 8002560:	4618      	mov	r0, r3
 8002562:	f002 fa9f 	bl	8004aa4 <HAL_RCCEx_PeriphCLKConfig>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800256c:	f7ff fc16 	bl	8001d9c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <HAL_I2C_MspInit+0xac>)
 8002572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002574:	4a16      	ldr	r2, [pc, #88]	; (80025d0 <HAL_I2C_MspInit+0xac>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_I2C_MspInit+0xac>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002588:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800258c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800258e:	2312      	movs	r3, #18
 8002590:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800259a:	2304      	movs	r3, #4
 800259c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025a2:	4619      	mov	r1, r3
 80025a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a8:	f000 fc52 	bl	8002e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <HAL_I2C_MspInit+0xac>)
 80025ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b0:	4a07      	ldr	r2, [pc, #28]	; (80025d0 <HAL_I2C_MspInit+0xac>)
 80025b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025b6:	6593      	str	r3, [r2, #88]	; 0x58
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_I2C_MspInit+0xac>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025c4:	bf00      	nop
 80025c6:	3778      	adds	r7, #120	; 0x78
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40005400 	.word	0x40005400
 80025d0:	40021000 	.word	0x40021000

080025d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e4:	d113      	bne.n	800260e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <HAL_TIM_Base_MspInit+0x44>)
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ea:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <HAL_TIM_Base_MspInit+0x44>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6593      	str	r3, [r2, #88]	; 0x58
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_TIM_Base_MspInit+0x44>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2101      	movs	r1, #1
 8002602:	201c      	movs	r0, #28
 8002604:	f000 fb6f 	bl	8002ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002608:	201c      	movs	r0, #28
 800260a:	f000 fb88 	bl	8002d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000

0800261c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b0a0      	sub	sp, #128	; 0x80
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002634:	f107 0318 	add.w	r3, r7, #24
 8002638:	2254      	movs	r2, #84	; 0x54
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f004 fc39 	bl	8006eb4 <memset>
  if(huart->Instance==USART1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a4a      	ldr	r2, [pc, #296]	; (8002770 <HAL_UART_MspInit+0x154>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d13e      	bne.n	80026ca <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800264c:	2301      	movs	r3, #1
 800264e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002650:	2300      	movs	r3, #0
 8002652:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002654:	f107 0318 	add.w	r3, r7, #24
 8002658:	4618      	mov	r0, r3
 800265a:	f002 fa23 	bl	8004aa4 <HAL_RCCEx_PeriphCLKConfig>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002664:	f7ff fb9a 	bl	8001d9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002668:	4b42      	ldr	r3, [pc, #264]	; (8002774 <HAL_UART_MspInit+0x158>)
 800266a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266c:	4a41      	ldr	r2, [pc, #260]	; (8002774 <HAL_UART_MspInit+0x158>)
 800266e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002672:	6613      	str	r3, [r2, #96]	; 0x60
 8002674:	4b3f      	ldr	r3, [pc, #252]	; (8002774 <HAL_UART_MspInit+0x158>)
 8002676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002680:	4b3c      	ldr	r3, [pc, #240]	; (8002774 <HAL_UART_MspInit+0x158>)
 8002682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002684:	4a3b      	ldr	r2, [pc, #236]	; (8002774 <HAL_UART_MspInit+0x158>)
 8002686:	f043 0302 	orr.w	r3, r3, #2
 800268a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800268c:	4b39      	ldr	r3, [pc, #228]	; (8002774 <HAL_UART_MspInit+0x158>)
 800268e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002698:	23c0      	movs	r3, #192	; 0xc0
 800269a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	2302      	movs	r3, #2
 800269e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026a8:	2307      	movs	r3, #7
 80026aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026b0:	4619      	mov	r1, r3
 80026b2:	4831      	ldr	r0, [pc, #196]	; (8002778 <HAL_UART_MspInit+0x15c>)
 80026b4:	f000 fbcc 	bl	8002e50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026b8:	2200      	movs	r2, #0
 80026ba:	2100      	movs	r1, #0
 80026bc:	2025      	movs	r0, #37	; 0x25
 80026be:	f000 fb12 	bl	8002ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026c2:	2025      	movs	r0, #37	; 0x25
 80026c4:	f000 fb2b 	bl	8002d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026c8:	e04d      	b.n	8002766 <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART2)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a2b      	ldr	r2, [pc, #172]	; (800277c <HAL_UART_MspInit+0x160>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d148      	bne.n	8002766 <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026d4:	2302      	movs	r3, #2
 80026d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80026d8:	2300      	movs	r3, #0
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026dc:	f107 0318 	add.w	r3, r7, #24
 80026e0:	4618      	mov	r0, r3
 80026e2:	f002 f9df 	bl	8004aa4 <HAL_RCCEx_PeriphCLKConfig>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80026ec:	f7ff fb56 	bl	8001d9c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026f0:	4b20      	ldr	r3, [pc, #128]	; (8002774 <HAL_UART_MspInit+0x158>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	4a1f      	ldr	r2, [pc, #124]	; (8002774 <HAL_UART_MspInit+0x158>)
 80026f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026fa:	6593      	str	r3, [r2, #88]	; 0x58
 80026fc:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <HAL_UART_MspInit+0x158>)
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002708:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <HAL_UART_MspInit+0x158>)
 800270a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270c:	4a19      	ldr	r2, [pc, #100]	; (8002774 <HAL_UART_MspInit+0x158>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002714:	4b17      	ldr	r3, [pc, #92]	; (8002774 <HAL_UART_MspInit+0x158>)
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002720:	2304      	movs	r3, #4
 8002722:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272c:	2303      	movs	r3, #3
 800272e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002730:	2307      	movs	r3, #7
 8002732:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002734:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002738:	4619      	mov	r1, r3
 800273a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273e:	f000 fb87 	bl	8002e50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002746:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002750:	2303      	movs	r3, #3
 8002752:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002754:	2303      	movs	r3, #3
 8002756:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002758:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800275c:	4619      	mov	r1, r3
 800275e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002762:	f000 fb75 	bl	8002e50 <HAL_GPIO_Init>
}
 8002766:	bf00      	nop
 8002768:	3780      	adds	r7, #128	; 0x80
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40013800 	.word	0x40013800
 8002774:	40021000 	.word	0x40021000
 8002778:	48000400 	.word	0x48000400
 800277c:	40004400 	.word	0x40004400

08002780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002784:	e7fe      	b.n	8002784 <NMI_Handler+0x4>

08002786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800278a:	e7fe      	b.n	800278a <HardFault_Handler+0x4>

0800278c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <MemManage_Handler+0x4>

08002792 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002796:	e7fe      	b.n	8002796 <BusFault_Handler+0x4>

08002798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800279c:	e7fe      	b.n	800279c <UsageFault_Handler+0x4>

0800279e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027cc:	f000 f96c 	bl	8002aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027d8:	4802      	ldr	r0, [pc, #8]	; (80027e4 <TIM2_IRQHandler+0x10>)
 80027da:	f002 fcb2 	bl	8005142 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200002e0 	.word	0x200002e0

080027e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027ec:	4802      	ldr	r0, [pc, #8]	; (80027f8 <USART1_IRQHandler+0x10>)
 80027ee:	f003 f973 	bl	8005ad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	2000032c 	.word	0x2000032c

080027fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return 1;
 8002800:	2301      	movs	r3, #1
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <_kill>:

int _kill(int pid, int sig)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002816:	f004 fb15 	bl	8006e44 <__errno>
 800281a:	4603      	mov	r3, r0
 800281c:	2216      	movs	r2, #22
 800281e:	601a      	str	r2, [r3, #0]
  return -1;
 8002820:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <_exit>:

void _exit (int status)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002834:	f04f 31ff 	mov.w	r1, #4294967295
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ffe7 	bl	800280c <_kill>
  while (1) {}    /* Make sure we hang here */
 800283e:	e7fe      	b.n	800283e <_exit+0x12>

08002840 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	e00a      	b.n	8002868 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002852:	f3af 8000 	nop.w
 8002856:	4601      	mov	r1, r0
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	60ba      	str	r2, [r7, #8]
 800285e:	b2ca      	uxtb	r2, r1
 8002860:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	3301      	adds	r3, #1
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	429a      	cmp	r2, r3
 800286e:	dbf0      	blt.n	8002852 <_read+0x12>
  }

  return len;
 8002870:	687b      	ldr	r3, [r7, #4]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b086      	sub	sp, #24
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	e009      	b.n	80028a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	60ba      	str	r2, [r7, #8]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3301      	adds	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	dbf1      	blt.n	800288c <_write+0x12>
  }
  return len;
 80028a8:	687b      	ldr	r3, [r7, #4]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <_close>:

int _close(int file)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028da:	605a      	str	r2, [r3, #4]
  return 0;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <_isatty>:

int _isatty(int file)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028f2:	2301      	movs	r3, #1
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002924:	4a14      	ldr	r2, [pc, #80]	; (8002978 <_sbrk+0x5c>)
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <_sbrk+0x60>)
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <_sbrk+0x64>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <_sbrk+0x64>)
 800293a:	4a12      	ldr	r2, [pc, #72]	; (8002984 <_sbrk+0x68>)
 800293c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <_sbrk+0x64>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	429a      	cmp	r2, r3
 800294a:	d207      	bcs.n	800295c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800294c:	f004 fa7a 	bl	8006e44 <__errno>
 8002950:	4603      	mov	r3, r0
 8002952:	220c      	movs	r2, #12
 8002954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002956:	f04f 33ff 	mov.w	r3, #4294967295
 800295a:	e009      	b.n	8002970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <_sbrk+0x64>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002962:	4b07      	ldr	r3, [pc, #28]	; (8002980 <_sbrk+0x64>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	4a05      	ldr	r2, [pc, #20]	; (8002980 <_sbrk+0x64>)
 800296c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800296e:	68fb      	ldr	r3, [r7, #12]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20010000 	.word	0x20010000
 800297c:	00000400 	.word	0x00000400
 8002980:	20000e84 	.word	0x20000e84
 8002984:	20000ea0 	.word	0x20000ea0

08002988 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <SystemInit+0x20>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	4a05      	ldr	r2, [pc, #20]	; (80029a8 <SystemInit+0x20>)
 8002994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80029ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029b0:	f7ff ffea 	bl	8002988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029b4:	480c      	ldr	r0, [pc, #48]	; (80029e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80029b6:	490d      	ldr	r1, [pc, #52]	; (80029ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80029b8:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <LoopForever+0xe>)
  movs r3, #0
 80029ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029bc:	e002      	b.n	80029c4 <LoopCopyDataInit>

080029be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029c2:	3304      	adds	r3, #4

080029c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029c8:	d3f9      	bcc.n	80029be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ca:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029cc:	4c0a      	ldr	r4, [pc, #40]	; (80029f8 <LoopForever+0x16>)
  movs r3, #0
 80029ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d0:	e001      	b.n	80029d6 <LoopFillZerobss>

080029d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d4:	3204      	adds	r2, #4

080029d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029d8:	d3fb      	bcc.n	80029d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029da:	f004 fa39 	bl	8006e50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029de:	f7fe fe79 	bl	80016d4 <main>

080029e2 <LoopForever>:

LoopForever:
    b LoopForever
 80029e2:	e7fe      	b.n	80029e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80029e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029ec:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 80029f0:	0800c9b0 	.word	0x0800c9b0
  ldr r2, =_sbss
 80029f4:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 80029f8:	20000e9c 	.word	0x20000e9c

080029fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029fc:	e7fe      	b.n	80029fc <ADC1_IRQHandler>

080029fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a08:	2003      	movs	r0, #3
 8002a0a:	f000 f961 	bl	8002cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f000 f80e 	bl	8002a30 <HAL_InitTick>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	71fb      	strb	r3, [r7, #7]
 8002a1e:	e001      	b.n	8002a24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a20:	f7ff fd5c 	bl	80024dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a24:	79fb      	ldrb	r3, [r7, #7]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a3c:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <HAL_InitTick+0x6c>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d023      	beq.n	8002a8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <HAL_InitTick+0x70>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <HAL_InitTick+0x6c>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f96d 	bl	8002d3a <HAL_SYSTICK_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10f      	bne.n	8002a86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b0f      	cmp	r3, #15
 8002a6a:	d809      	bhi.n	8002a80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	f04f 30ff 	mov.w	r0, #4294967295
 8002a74:	f000 f937 	bl	8002ce6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a78:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <HAL_InitTick+0x74>)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e007      	b.n	8002a90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	e004      	b.n	8002a90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	e001      	b.n	8002a90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000098 	.word	0x20000098
 8002aa0:	20000090 	.word	0x20000090
 8002aa4:	20000094 	.word	0x20000094

08002aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_IncTick+0x20>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_IncTick+0x24>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	4a04      	ldr	r2, [pc, #16]	; (8002acc <HAL_IncTick+0x24>)
 8002aba:	6013      	str	r3, [r2, #0]
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000098 	.word	0x20000098
 8002acc:	20000e88 	.word	0x20000e88

08002ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_GetTick+0x14>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000e88 	.word	0x20000e88

08002ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af0:	f7ff ffee 	bl	8002ad0 <HAL_GetTick>
 8002af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d005      	beq.n	8002b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b02:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <HAL_Delay+0x44>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b0e:	bf00      	nop
 8002b10:	f7ff ffde 	bl	8002ad0 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d8f7      	bhi.n	8002b10 <HAL_Delay+0x28>
  {
  }
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000098 	.word	0x20000098

08002b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b62:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	60d3      	str	r3, [r2, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <__NVIC_GetPriorityGrouping+0x18>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	f003 0307 	and.w	r3, r3, #7
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	db0b      	blt.n	8002bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	f003 021f 	and.w	r2, r3, #31
 8002bac:	4907      	ldr	r1, [pc, #28]	; (8002bcc <__NVIC_EnableIRQ+0x38>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000e100 	.word	0xe000e100

08002bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	db0a      	blt.n	8002bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	490c      	ldr	r1, [pc, #48]	; (8002c1c <__NVIC_SetPriority+0x4c>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	0112      	lsls	r2, r2, #4
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf8:	e00a      	b.n	8002c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4908      	ldr	r1, [pc, #32]	; (8002c20 <__NVIC_SetPriority+0x50>)
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	3b04      	subs	r3, #4
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	761a      	strb	r2, [r3, #24]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000e100 	.word	0xe000e100
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	; 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f1c3 0307 	rsb	r3, r3, #7
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	bf28      	it	cs
 8002c42:	2304      	movcs	r3, #4
 8002c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d902      	bls.n	8002c54 <NVIC_EncodePriority+0x30>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3b03      	subs	r3, #3
 8002c52:	e000      	b.n	8002c56 <NVIC_EncodePriority+0x32>
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	f04f 32ff 	mov.w	r2, #4294967295
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	401a      	ands	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43d9      	mvns	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	4313      	orrs	r3, r2
         );
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3724      	adds	r7, #36	; 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c9c:	d301      	bcc.n	8002ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00f      	b.n	8002cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <SysTick_Config+0x40>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002caa:	210f      	movs	r1, #15
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb0:	f7ff ff8e 	bl	8002bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <SysTick_Config+0x40>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <SysTick_Config+0x40>)
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	e000e010 	.word	0xe000e010

08002cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ff29 	bl	8002b30 <__NVIC_SetPriorityGrouping>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf8:	f7ff ff3e 	bl	8002b78 <__NVIC_GetPriorityGrouping>
 8002cfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	6978      	ldr	r0, [r7, #20]
 8002d04:	f7ff ff8e 	bl	8002c24 <NVIC_EncodePriority>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff5d 	bl	8002bd0 <__NVIC_SetPriority>
}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	4603      	mov	r3, r0
 8002d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff31 	bl	8002b94 <__NVIC_EnableIRQ>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff ffa2 	bl	8002c8c <SysTick_Config>
 8002d48:	4603      	mov	r3, r0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d008      	beq.n	8002d7c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e022      	b.n	8002dc2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 020e 	bic.w	r2, r2, #14
 8002d8a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0201 	bic.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da0:	f003 021c 	and.w	r2, r3, #28
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	2101      	movs	r1, #1
 8002daa:	fa01 f202 	lsl.w	r2, r1, r2
 8002dae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d005      	beq.n	8002df2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2204      	movs	r2, #4
 8002dea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	e029      	b.n	8002e46 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 020e 	bic.w	r2, r2, #14
 8002e00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f003 021c 	and.w	r2, r3, #28
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	2101      	movs	r1, #1
 8002e20:	fa01 f202 	lsl.w	r2, r1, r2
 8002e24:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	4798      	blx	r3
    }
  }
  return status;
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e5e:	e148      	b.n	80030f2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	2101      	movs	r1, #1
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 813a 	beq.w	80030ec <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d005      	beq.n	8002e90 <HAL_GPIO_Init+0x40>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d130      	bne.n	8002ef2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	091b      	lsrs	r3, r3, #4
 8002edc:	f003 0201 	and.w	r2, r3, #1
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d017      	beq.n	8002f2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	2203      	movs	r2, #3
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4013      	ands	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d123      	bne.n	8002f82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	08da      	lsrs	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3208      	adds	r2, #8
 8002f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	220f      	movs	r2, #15
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	08da      	lsrs	r2, r3, #3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3208      	adds	r2, #8
 8002f7c:	6939      	ldr	r1, [r7, #16]
 8002f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0203 	and.w	r2, r3, #3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 8094 	beq.w	80030ec <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc4:	4b52      	ldr	r3, [pc, #328]	; (8003110 <HAL_GPIO_Init+0x2c0>)
 8002fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc8:	4a51      	ldr	r2, [pc, #324]	; (8003110 <HAL_GPIO_Init+0x2c0>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6613      	str	r3, [r2, #96]	; 0x60
 8002fd0:	4b4f      	ldr	r3, [pc, #316]	; (8003110 <HAL_GPIO_Init+0x2c0>)
 8002fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fdc:	4a4d      	ldr	r2, [pc, #308]	; (8003114 <HAL_GPIO_Init+0x2c4>)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	089b      	lsrs	r3, r3, #2
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	220f      	movs	r2, #15
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003006:	d00d      	beq.n	8003024 <HAL_GPIO_Init+0x1d4>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a43      	ldr	r2, [pc, #268]	; (8003118 <HAL_GPIO_Init+0x2c8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d007      	beq.n	8003020 <HAL_GPIO_Init+0x1d0>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a42      	ldr	r2, [pc, #264]	; (800311c <HAL_GPIO_Init+0x2cc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d101      	bne.n	800301c <HAL_GPIO_Init+0x1cc>
 8003018:	2302      	movs	r3, #2
 800301a:	e004      	b.n	8003026 <HAL_GPIO_Init+0x1d6>
 800301c:	2307      	movs	r3, #7
 800301e:	e002      	b.n	8003026 <HAL_GPIO_Init+0x1d6>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_GPIO_Init+0x1d6>
 8003024:	2300      	movs	r3, #0
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	f002 0203 	and.w	r2, r2, #3
 800302c:	0092      	lsls	r2, r2, #2
 800302e:	4093      	lsls	r3, r2
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003036:	4937      	ldr	r1, [pc, #220]	; (8003114 <HAL_GPIO_Init+0x2c4>)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	089b      	lsrs	r3, r3, #2
 800303c:	3302      	adds	r3, #2
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003044:	4b36      	ldr	r3, [pc, #216]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	43db      	mvns	r3, r3
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4013      	ands	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003068:	4a2d      	ldr	r2, [pc, #180]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800306e:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	43db      	mvns	r3, r3
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4013      	ands	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003092:	4a23      	ldr	r2, [pc, #140]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003098:	4b21      	ldr	r3, [pc, #132]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4013      	ands	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030bc:	4a18      	ldr	r2, [pc, #96]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80030c2:	4b17      	ldr	r3, [pc, #92]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4013      	ands	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030e6:	4a0e      	ldr	r2, [pc, #56]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	3301      	adds	r3, #1
 80030f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f47f aeaf 	bne.w	8002e60 <HAL_GPIO_Init+0x10>
  }
}
 8003102:	bf00      	nop
 8003104:	bf00      	nop
 8003106:	371c      	adds	r7, #28
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	40021000 	.word	0x40021000
 8003114:	40010000 	.word	0x40010000
 8003118:	48000400 	.word	0x48000400
 800311c:	48000800 	.word	0x48000800
 8003120:	40010400 	.word	0x40010400

08003124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	807b      	strh	r3, [r7, #2]
 8003130:	4613      	mov	r3, r2
 8003132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003134:	787b      	ldrb	r3, [r7, #1]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003140:	e002      	b.n	8003148 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003142:	887a      	ldrh	r2, [r7, #2]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e081      	b.n	800326a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff f9d2 	bl	8002524 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2224      	movs	r2, #36	; 0x24
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0201 	bic.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d107      	bne.n	80031ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	e006      	b.n	80031dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d104      	bne.n	80031ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003200:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003210:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69d9      	ldr	r1, [r3, #28]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1a      	ldr	r2, [r3, #32]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	4608      	mov	r0, r1
 800327e:	4611      	mov	r1, r2
 8003280:	461a      	mov	r2, r3
 8003282:	4603      	mov	r3, r0
 8003284:	817b      	strh	r3, [r7, #10]
 8003286:	460b      	mov	r3, r1
 8003288:	813b      	strh	r3, [r7, #8]
 800328a:	4613      	mov	r3, r2
 800328c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b20      	cmp	r3, #32
 8003298:	f040 80f9 	bne.w	800348e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_I2C_Mem_Write+0x34>
 80032a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d105      	bne.n	80032b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0ed      	b.n	8003490 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_I2C_Mem_Write+0x4e>
 80032be:	2302      	movs	r3, #2
 80032c0:	e0e6      	b.n	8003490 <HAL_I2C_Mem_Write+0x21c>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032ca:	f7ff fc01 	bl	8002ad0 <HAL_GetTick>
 80032ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	2319      	movs	r3, #25
 80032d6:	2201      	movs	r2, #1
 80032d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 fac3 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0d1      	b.n	8003490 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2221      	movs	r2, #33	; 0x21
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2240      	movs	r2, #64	; 0x40
 80032f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a3a      	ldr	r2, [r7, #32]
 8003306:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800330c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003314:	88f8      	ldrh	r0, [r7, #6]
 8003316:	893a      	ldrh	r2, [r7, #8]
 8003318:	8979      	ldrh	r1, [r7, #10]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	4603      	mov	r3, r0
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f9d3 	bl	80036d0 <I2C_RequestMemoryWrite>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0a9      	b.n	8003490 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	2bff      	cmp	r3, #255	; 0xff
 8003344:	d90e      	bls.n	8003364 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	22ff      	movs	r2, #255	; 0xff
 800334a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003350:	b2da      	uxtb	r2, r3
 8003352:	8979      	ldrh	r1, [r7, #10]
 8003354:	2300      	movs	r3, #0
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 fc2b 	bl	8003bb8 <I2C_TransferConfig>
 8003362:	e00f      	b.n	8003384 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003372:	b2da      	uxtb	r2, r3
 8003374:	8979      	ldrh	r1, [r7, #10]
 8003376:	2300      	movs	r3, #0
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fc1a 	bl	8003bb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 faad 	bl	80038e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e07b      	b.n	8003490 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	781a      	ldrb	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d034      	beq.n	800343c <HAL_I2C_Mem_Write+0x1c8>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d130      	bne.n	800343c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e0:	2200      	movs	r2, #0
 80033e2:	2180      	movs	r1, #128	; 0x80
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fa3f 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e04d      	b.n	8003490 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2bff      	cmp	r3, #255	; 0xff
 80033fc:	d90e      	bls.n	800341c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	22ff      	movs	r2, #255	; 0xff
 8003402:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003408:	b2da      	uxtb	r2, r3
 800340a:	8979      	ldrh	r1, [r7, #10]
 800340c:	2300      	movs	r3, #0
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fbcf 	bl	8003bb8 <I2C_TransferConfig>
 800341a:	e00f      	b.n	800343c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342a:	b2da      	uxtb	r2, r3
 800342c:	8979      	ldrh	r1, [r7, #10]
 800342e:	2300      	movs	r3, #0
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 fbbe 	bl	8003bb8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d19e      	bne.n	8003384 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fa8c 	bl	8003968 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e01a      	b.n	8003490 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2220      	movs	r2, #32
 8003460:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <HAL_I2C_Mem_Write+0x224>)
 800346e:	400b      	ands	r3, r1
 8003470:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	e000      	b.n	8003490 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800348e:	2302      	movs	r3, #2
  }
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	fe00e800 	.word	0xfe00e800

0800349c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	4608      	mov	r0, r1
 80034a6:	4611      	mov	r1, r2
 80034a8:	461a      	mov	r2, r3
 80034aa:	4603      	mov	r3, r0
 80034ac:	817b      	strh	r3, [r7, #10]
 80034ae:	460b      	mov	r3, r1
 80034b0:	813b      	strh	r3, [r7, #8]
 80034b2:	4613      	mov	r3, r2
 80034b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b20      	cmp	r3, #32
 80034c0:	f040 80fd 	bne.w	80036be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_I2C_Mem_Read+0x34>
 80034ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d105      	bne.n	80034dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0f1      	b.n	80036c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_I2C_Mem_Read+0x4e>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e0ea      	b.n	80036c0 <HAL_I2C_Mem_Read+0x224>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034f2:	f7ff faed 	bl	8002ad0 <HAL_GetTick>
 80034f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	2319      	movs	r3, #25
 80034fe:	2201      	movs	r2, #1
 8003500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 f9af 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0d5      	b.n	80036c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2222      	movs	r2, #34	; 0x22
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2240      	movs	r2, #64	; 0x40
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a3a      	ldr	r2, [r7, #32]
 800352e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003534:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800353c:	88f8      	ldrh	r0, [r7, #6]
 800353e:	893a      	ldrh	r2, [r7, #8]
 8003540:	8979      	ldrh	r1, [r7, #10]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	4603      	mov	r3, r0
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f913 	bl	8003778 <I2C_RequestMemoryRead>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0ad      	b.n	80036c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	2bff      	cmp	r3, #255	; 0xff
 800356c:	d90e      	bls.n	800358c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	22ff      	movs	r2, #255	; 0xff
 8003572:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003578:	b2da      	uxtb	r2, r3
 800357a:	8979      	ldrh	r1, [r7, #10]
 800357c:	4b52      	ldr	r3, [pc, #328]	; (80036c8 <HAL_I2C_Mem_Read+0x22c>)
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fb17 	bl	8003bb8 <I2C_TransferConfig>
 800358a:	e00f      	b.n	80035ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359a:	b2da      	uxtb	r2, r3
 800359c:	8979      	ldrh	r1, [r7, #10]
 800359e:	4b4a      	ldr	r3, [pc, #296]	; (80036c8 <HAL_I2C_Mem_Read+0x22c>)
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fb06 	bl	8003bb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b2:	2200      	movs	r2, #0
 80035b4:	2104      	movs	r1, #4
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f956 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e07c      	b.n	80036c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d034      	beq.n	800366c <HAL_I2C_Mem_Read+0x1d0>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003606:	2b00      	cmp	r3, #0
 8003608:	d130      	bne.n	800366c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	2200      	movs	r2, #0
 8003612:	2180      	movs	r1, #128	; 0x80
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f927 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e04d      	b.n	80036c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	2bff      	cmp	r3, #255	; 0xff
 800362c:	d90e      	bls.n	800364c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	22ff      	movs	r2, #255	; 0xff
 8003632:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003638:	b2da      	uxtb	r2, r3
 800363a:	8979      	ldrh	r1, [r7, #10]
 800363c:	2300      	movs	r3, #0
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fab7 	bl	8003bb8 <I2C_TransferConfig>
 800364a:	e00f      	b.n	800366c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365a:	b2da      	uxtb	r2, r3
 800365c:	8979      	ldrh	r1, [r7, #10]
 800365e:	2300      	movs	r3, #0
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 faa6 	bl	8003bb8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d19a      	bne.n	80035ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f974 	bl	8003968 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e01a      	b.n	80036c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2220      	movs	r2, #32
 8003690:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <HAL_I2C_Mem_Read+0x230>)
 800369e:	400b      	ands	r3, r1
 80036a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	e000      	b.n	80036c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80036be:	2302      	movs	r3, #2
  }
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	80002400 	.word	0x80002400
 80036cc:	fe00e800 	.word	0xfe00e800

080036d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	4608      	mov	r0, r1
 80036da:	4611      	mov	r1, r2
 80036dc:	461a      	mov	r2, r3
 80036de:	4603      	mov	r3, r0
 80036e0:	817b      	strh	r3, [r7, #10]
 80036e2:	460b      	mov	r3, r1
 80036e4:	813b      	strh	r3, [r7, #8]
 80036e6:	4613      	mov	r3, r2
 80036e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	8979      	ldrh	r1, [r7, #10]
 80036f0:	4b20      	ldr	r3, [pc, #128]	; (8003774 <I2C_RequestMemoryWrite+0xa4>)
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fa5d 	bl	8003bb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	69b9      	ldr	r1, [r7, #24]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f8f0 	bl	80038e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e02c      	b.n	800376c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d105      	bne.n	8003724 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003718:	893b      	ldrh	r3, [r7, #8]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	629a      	str	r2, [r3, #40]	; 0x28
 8003722:	e015      	b.n	8003750 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003724:	893b      	ldrh	r3, [r7, #8]
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	b29b      	uxth	r3, r3
 800372a:	b2da      	uxtb	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	69b9      	ldr	r1, [r7, #24]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f8d6 	bl	80038e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e012      	b.n	800376c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003746:	893b      	ldrh	r3, [r7, #8]
 8003748:	b2da      	uxtb	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2200      	movs	r2, #0
 8003758:	2180      	movs	r1, #128	; 0x80
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f884 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	80002000 	.word	0x80002000

08003778 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	4608      	mov	r0, r1
 8003782:	4611      	mov	r1, r2
 8003784:	461a      	mov	r2, r3
 8003786:	4603      	mov	r3, r0
 8003788:	817b      	strh	r3, [r7, #10]
 800378a:	460b      	mov	r3, r1
 800378c:	813b      	strh	r3, [r7, #8]
 800378e:	4613      	mov	r3, r2
 8003790:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	b2da      	uxtb	r2, r3
 8003796:	8979      	ldrh	r1, [r7, #10]
 8003798:	4b20      	ldr	r3, [pc, #128]	; (800381c <I2C_RequestMemoryRead+0xa4>)
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	2300      	movs	r3, #0
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fa0a 	bl	8003bb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	69b9      	ldr	r1, [r7, #24]
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f89d 	bl	80038e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e02c      	b.n	8003812 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d105      	bne.n	80037ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037be:	893b      	ldrh	r3, [r7, #8]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	629a      	str	r2, [r3, #40]	; 0x28
 80037c8:	e015      	b.n	80037f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80037ca:	893b      	ldrh	r3, [r7, #8]
 80037cc:	0a1b      	lsrs	r3, r3, #8
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	69b9      	ldr	r1, [r7, #24]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f883 	bl	80038e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e012      	b.n	8003812 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037ec:	893b      	ldrh	r3, [r7, #8]
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2200      	movs	r2, #0
 80037fe:	2140      	movs	r1, #64	; 0x40
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f831 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	80002000 	.word	0x80002000

08003820 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b02      	cmp	r3, #2
 8003834:	d103      	bne.n	800383e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2200      	movs	r2, #0
 800383c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b01      	cmp	r3, #1
 800384a:	d007      	beq.n	800385c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	619a      	str	r2, [r3, #24]
  }
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	4613      	mov	r3, r2
 8003876:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003878:	e022      	b.n	80038c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d01e      	beq.n	80038c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003882:	f7ff f925 	bl	8002ad0 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d302      	bcc.n	8003898 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d113      	bne.n	80038c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	f043 0220 	orr.w	r2, r3, #32
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e00f      	b.n	80038e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4013      	ands	r3, r2
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	bf0c      	ite	eq
 80038d0:	2301      	moveq	r3, #1
 80038d2:	2300      	movne	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d0cd      	beq.n	800387a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038f4:	e02c      	b.n	8003950 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f870 	bl	80039e0 <I2C_IsErrorOccurred>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e02a      	b.n	8003960 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d01e      	beq.n	8003950 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003912:	f7ff f8dd 	bl	8002ad0 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	429a      	cmp	r2, r3
 8003920:	d302      	bcc.n	8003928 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d113      	bne.n	8003950 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392c:	f043 0220 	orr.w	r2, r3, #32
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e007      	b.n	8003960 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b02      	cmp	r3, #2
 800395c:	d1cb      	bne.n	80038f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003974:	e028      	b.n	80039c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f830 	bl	80039e0 <I2C_IsErrorOccurred>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e026      	b.n	80039d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398a:	f7ff f8a1 	bl	8002ad0 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	429a      	cmp	r2, r3
 8003998:	d302      	bcc.n	80039a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d113      	bne.n	80039c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a4:	f043 0220 	orr.w	r2, r3, #32
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e007      	b.n	80039d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d1cf      	bne.n	8003976 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08a      	sub	sp, #40	; 0x28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d075      	beq.n	8003af8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2210      	movs	r2, #16
 8003a12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a14:	e056      	b.n	8003ac4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d052      	beq.n	8003ac4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a1e:	f7ff f857 	bl	8002ad0 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d302      	bcc.n	8003a34 <I2C_IsErrorOccurred+0x54>
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d147      	bne.n	8003ac4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a56:	d12e      	bne.n	8003ab6 <I2C_IsErrorOccurred+0xd6>
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a5e:	d02a      	beq.n	8003ab6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003a60:	7cfb      	ldrb	r3, [r7, #19]
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d027      	beq.n	8003ab6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a76:	f7ff f82b 	bl	8002ad0 <HAL_GetTick>
 8003a7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a7c:	e01b      	b.n	8003ab6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a7e:	f7ff f827 	bl	8002ad0 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b19      	cmp	r3, #25
 8003a8a:	d914      	bls.n	8003ab6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a90:	f043 0220 	orr.w	r2, r3, #32
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d1dc      	bne.n	8003a7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d003      	beq.n	8003ada <I2C_IsErrorOccurred+0xfa>
 8003ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d09d      	beq.n	8003a16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d103      	bne.n	8003aea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	f043 0304 	orr.w	r3, r3, #4
 8003af0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00b      	beq.n	8003b44 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	f043 0308 	orr.w	r3, r3, #8
 8003b32:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	f043 0302 	orr.w	r3, r3, #2
 8003b54:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003b66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01c      	beq.n	8003ba8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f7ff fe56 	bl	8003820 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6859      	ldr	r1, [r3, #4]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <I2C_IsErrorOccurred+0x1d4>)
 8003b80:	400b      	ands	r3, r1
 8003b82:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3728      	adds	r7, #40	; 0x28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	fe00e800 	.word	0xfe00e800

08003bb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	817b      	strh	r3, [r7, #10]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bca:	897b      	ldrh	r3, [r7, #10]
 8003bcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bd0:	7a7b      	ldrb	r3, [r7, #9]
 8003bd2:	041b      	lsls	r3, r3, #16
 8003bd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bd8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003be6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	0d5b      	lsrs	r3, r3, #21
 8003bf2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003bf6:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <I2C_TransferConfig+0x60>)
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	ea02 0103 	and.w	r1, r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	03ff63ff 	.word	0x03ff63ff

08003c1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	d138      	bne.n	8003ca4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e032      	b.n	8003ca6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2224      	movs	r2, #36	; 0x24
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6819      	ldr	r1, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e000      	b.n	8003ca6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
  }
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b085      	sub	sp, #20
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d139      	bne.n	8003d3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e033      	b.n	8003d3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2224      	movs	r2, #36	; 0x24
 8003ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0201 	bic.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e000      	b.n	8003d3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d3c:	2302      	movs	r3, #2
  }
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d50:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a04      	ldr	r2, [pc, #16]	; (8003d68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5a:	6013      	str	r3, [r2, #0]
}
 8003d5c:	bf00      	nop
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40007000 	.word	0x40007000

08003d6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d70:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40007000 	.word	0x40007000

08003d88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d96:	d130      	bne.n	8003dfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d98:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da4:	d038      	beq.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dae:	4a1e      	ldr	r2, [pc, #120]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003db0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003db4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003db6:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2232      	movs	r2, #50	; 0x32
 8003dbc:	fb02 f303 	mul.w	r3, r2, r3
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	0c9b      	lsrs	r3, r3, #18
 8003dc8:	3301      	adds	r3, #1
 8003dca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dcc:	e002      	b.n	8003dd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd4:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de0:	d102      	bne.n	8003de8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1f2      	bne.n	8003dce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df4:	d110      	bne.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e00f      	b.n	8003e1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e06:	d007      	beq.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e08:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e10:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	20000090 	.word	0x20000090
 8003e30:	431bde83 	.word	0x431bde83

08003e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d102      	bne.n	8003e48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f000 bc02 	b.w	800464c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e48:	4b96      	ldr	r3, [pc, #600]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e52:	4b94      	ldr	r3, [pc, #592]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80e4 	beq.w	8004032 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <HAL_RCC_OscConfig+0x4c>
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b0c      	cmp	r3, #12
 8003e74:	f040 808b 	bne.w	8003f8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	f040 8087 	bne.w	8003f8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e80:	4b88      	ldr	r3, [pc, #544]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_OscConfig+0x64>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e3d9      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1a      	ldr	r2, [r3, #32]
 8003e9c:	4b81      	ldr	r3, [pc, #516]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0308 	and.w	r3, r3, #8
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d004      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x7e>
 8003ea8:	4b7e      	ldr	r3, [pc, #504]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb0:	e005      	b.n	8003ebe <HAL_RCC_OscConfig+0x8a>
 8003eb2:	4b7c      	ldr	r3, [pc, #496]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d223      	bcs.n	8003f0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fd8c 	bl	80049e4 <RCC_SetFlashLatencyFromMSIRange>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e3ba      	b.n	800464c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed6:	4b73      	ldr	r3, [pc, #460]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a72      	ldr	r2, [pc, #456]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003edc:	f043 0308 	orr.w	r3, r3, #8
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	4b70      	ldr	r3, [pc, #448]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	496d      	ldr	r1, [pc, #436]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ef4:	4b6b      	ldr	r3, [pc, #428]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	4968      	ldr	r1, [pc, #416]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]
 8003f08:	e025      	b.n	8003f56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f0a:	4b66      	ldr	r3, [pc, #408]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a65      	ldr	r2, [pc, #404]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f10:	f043 0308 	orr.w	r3, r3, #8
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	4b63      	ldr	r3, [pc, #396]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	4960      	ldr	r1, [pc, #384]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f28:	4b5e      	ldr	r3, [pc, #376]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	495b      	ldr	r1, [pc, #364]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fd4c 	bl	80049e4 <RCC_SetFlashLatencyFromMSIRange>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e37a      	b.n	800464c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f56:	f000 fc81 	bl	800485c <HAL_RCC_GetSysClockFreq>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	4b51      	ldr	r3, [pc, #324]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	091b      	lsrs	r3, r3, #4
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	4950      	ldr	r1, [pc, #320]	; (80040a8 <HAL_RCC_OscConfig+0x274>)
 8003f68:	5ccb      	ldrb	r3, [r1, r3]
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f72:	4a4e      	ldr	r2, [pc, #312]	; (80040ac <HAL_RCC_OscConfig+0x278>)
 8003f74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f76:	4b4e      	ldr	r3, [pc, #312]	; (80040b0 <HAL_RCC_OscConfig+0x27c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe fd58 	bl	8002a30 <HAL_InitTick>
 8003f80:	4603      	mov	r3, r0
 8003f82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d052      	beq.n	8004030 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	e35e      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d032      	beq.n	8003ffc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f96:	4b43      	ldr	r3, [pc, #268]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a42      	ldr	r2, [pc, #264]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fa2:	f7fe fd95 	bl	8002ad0 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003faa:	f7fe fd91 	bl	8002ad0 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e347      	b.n	800464c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fbc:	4b39      	ldr	r3, [pc, #228]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fc8:	4b36      	ldr	r3, [pc, #216]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a35      	ldr	r2, [pc, #212]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fce:	f043 0308 	orr.w	r3, r3, #8
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b33      	ldr	r3, [pc, #204]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	4930      	ldr	r1, [pc, #192]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fe6:	4b2f      	ldr	r3, [pc, #188]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	492b      	ldr	r1, [pc, #172]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	604b      	str	r3, [r1, #4]
 8003ffa:	e01a      	b.n	8004032 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ffc:	4b29      	ldr	r3, [pc, #164]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a28      	ldr	r2, [pc, #160]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004002:	f023 0301 	bic.w	r3, r3, #1
 8004006:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004008:	f7fe fd62 	bl	8002ad0 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004010:	f7fe fd5e 	bl	8002ad0 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e314      	b.n	800464c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004022:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x1dc>
 800402e:	e000      	b.n	8004032 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004030:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d073      	beq.n	8004126 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b08      	cmp	r3, #8
 8004042:	d005      	beq.n	8004050 <HAL_RCC_OscConfig+0x21c>
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b0c      	cmp	r3, #12
 8004048:	d10e      	bne.n	8004068 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b03      	cmp	r3, #3
 800404e:	d10b      	bne.n	8004068 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004050:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d063      	beq.n	8004124 <HAL_RCC_OscConfig+0x2f0>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d15f      	bne.n	8004124 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e2f1      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004070:	d106      	bne.n	8004080 <HAL_RCC_OscConfig+0x24c>
 8004072:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a0b      	ldr	r2, [pc, #44]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	e025      	b.n	80040cc <HAL_RCC_OscConfig+0x298>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004088:	d114      	bne.n	80040b4 <HAL_RCC_OscConfig+0x280>
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a05      	ldr	r2, [pc, #20]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a02      	ldr	r2, [pc, #8]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e013      	b.n	80040cc <HAL_RCC_OscConfig+0x298>
 80040a4:	40021000 	.word	0x40021000
 80040a8:	0800c440 	.word	0x0800c440
 80040ac:	20000090 	.word	0x20000090
 80040b0:	20000094 	.word	0x20000094
 80040b4:	4ba0      	ldr	r3, [pc, #640]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a9f      	ldr	r2, [pc, #636]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80040ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	4b9d      	ldr	r3, [pc, #628]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a9c      	ldr	r2, [pc, #624]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80040c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d013      	beq.n	80040fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fe fcfc 	bl	8002ad0 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040dc:	f7fe fcf8 	bl	8002ad0 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	; 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e2ae      	b.n	800464c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ee:	4b92      	ldr	r3, [pc, #584]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x2a8>
 80040fa:	e014      	b.n	8004126 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fe fce8 	bl	8002ad0 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004104:	f7fe fce4 	bl	8002ad0 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	; 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e29a      	b.n	800464c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004116:	4b88      	ldr	r3, [pc, #544]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x2d0>
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d060      	beq.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2b04      	cmp	r3, #4
 8004136:	d005      	beq.n	8004144 <HAL_RCC_OscConfig+0x310>
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2b0c      	cmp	r3, #12
 800413c:	d119      	bne.n	8004172 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d116      	bne.n	8004172 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004144:	4b7c      	ldr	r3, [pc, #496]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_OscConfig+0x328>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e277      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415c:	4b76      	ldr	r3, [pc, #472]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	4973      	ldr	r1, [pc, #460]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800416c:	4313      	orrs	r3, r2
 800416e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004170:	e040      	b.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d023      	beq.n	80041c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800417a:	4b6f      	ldr	r3, [pc, #444]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a6e      	ldr	r2, [pc, #440]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fe fca3 	bl	8002ad0 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800418e:	f7fe fc9f 	bl	8002ad0 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e255      	b.n	800464c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a0:	4b65      	ldr	r3, [pc, #404]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ac:	4b62      	ldr	r3, [pc, #392]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	061b      	lsls	r3, r3, #24
 80041ba:	495f      	ldr	r1, [pc, #380]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	604b      	str	r3, [r1, #4]
 80041c0:	e018      	b.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c2:	4b5d      	ldr	r3, [pc, #372]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a5c      	ldr	r2, [pc, #368]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80041c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ce:	f7fe fc7f 	bl	8002ad0 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d6:	f7fe fc7b 	bl	8002ad0 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e231      	b.n	800464c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041e8:	4b53      	ldr	r3, [pc, #332]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f0      	bne.n	80041d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d03c      	beq.n	800427a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01c      	beq.n	8004242 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004208:	4b4b      	ldr	r3, [pc, #300]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800420a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800420e:	4a4a      	ldr	r2, [pc, #296]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004218:	f7fe fc5a 	bl	8002ad0 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004220:	f7fe fc56 	bl	8002ad0 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e20c      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004232:	4b41      	ldr	r3, [pc, #260]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0ef      	beq.n	8004220 <HAL_RCC_OscConfig+0x3ec>
 8004240:	e01b      	b.n	800427a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004242:	4b3d      	ldr	r3, [pc, #244]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004248:	4a3b      	ldr	r2, [pc, #236]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004252:	f7fe fc3d 	bl	8002ad0 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425a:	f7fe fc39 	bl	8002ad0 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e1ef      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800426c:	4b32      	ldr	r3, [pc, #200]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800426e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1ef      	bne.n	800425a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80a6 	beq.w	80043d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004288:	2300      	movs	r3, #0
 800428a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800428c:	4b2a      	ldr	r3, [pc, #168]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800428e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10d      	bne.n	80042b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004298:	4b27      	ldr	r3, [pc, #156]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800429a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429c:	4a26      	ldr	r2, [pc, #152]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800429e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a2:	6593      	str	r3, [r2, #88]	; 0x58
 80042a4:	4b24      	ldr	r3, [pc, #144]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80042a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b0:	2301      	movs	r3, #1
 80042b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b4:	4b21      	ldr	r3, [pc, #132]	; (800433c <HAL_RCC_OscConfig+0x508>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d118      	bne.n	80042f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042c0:	4b1e      	ldr	r3, [pc, #120]	; (800433c <HAL_RCC_OscConfig+0x508>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1d      	ldr	r2, [pc, #116]	; (800433c <HAL_RCC_OscConfig+0x508>)
 80042c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042cc:	f7fe fc00 	bl	8002ad0 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d4:	f7fe fbfc 	bl	8002ad0 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e1b2      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e6:	4b15      	ldr	r3, [pc, #84]	; (800433c <HAL_RCC_OscConfig+0x508>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d108      	bne.n	800430c <HAL_RCC_OscConfig+0x4d8>
 80042fa:	4b0f      	ldr	r3, [pc, #60]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80042fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004300:	4a0d      	ldr	r2, [pc, #52]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800430a:	e029      	b.n	8004360 <HAL_RCC_OscConfig+0x52c>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b05      	cmp	r3, #5
 8004312:	d115      	bne.n	8004340 <HAL_RCC_OscConfig+0x50c>
 8004314:	4b08      	ldr	r3, [pc, #32]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	4a07      	ldr	r2, [pc, #28]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800431c:	f043 0304 	orr.w	r3, r3, #4
 8004320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004324:	4b04      	ldr	r3, [pc, #16]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432a:	4a03      	ldr	r2, [pc, #12]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004334:	e014      	b.n	8004360 <HAL_RCC_OscConfig+0x52c>
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000
 800433c:	40007000 	.word	0x40007000
 8004340:	4b9a      	ldr	r3, [pc, #616]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	4a99      	ldr	r2, [pc, #612]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004348:	f023 0301 	bic.w	r3, r3, #1
 800434c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004350:	4b96      	ldr	r3, [pc, #600]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	4a95      	ldr	r2, [pc, #596]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004358:	f023 0304 	bic.w	r3, r3, #4
 800435c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d016      	beq.n	8004396 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004368:	f7fe fbb2 	bl	8002ad0 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800436e:	e00a      	b.n	8004386 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004370:	f7fe fbae 	bl	8002ad0 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f241 3288 	movw	r2, #5000	; 0x1388
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e162      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004386:	4b89      	ldr	r3, [pc, #548]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0ed      	beq.n	8004370 <HAL_RCC_OscConfig+0x53c>
 8004394:	e015      	b.n	80043c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004396:	f7fe fb9b 	bl	8002ad0 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800439c:	e00a      	b.n	80043b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439e:	f7fe fb97 	bl	8002ad0 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e14b      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043b4:	4b7d      	ldr	r3, [pc, #500]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1ed      	bne.n	800439e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043c2:	7ffb      	ldrb	r3, [r7, #31]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d105      	bne.n	80043d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c8:	4b78      	ldr	r3, [pc, #480]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	4a77      	ldr	r2, [pc, #476]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 80043ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d03c      	beq.n	800445a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01c      	beq.n	8004422 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043e8:	4b70      	ldr	r3, [pc, #448]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 80043ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043ee:	4a6f      	ldr	r2, [pc, #444]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f8:	f7fe fb6a 	bl	8002ad0 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004400:	f7fe fb66 	bl	8002ad0 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e11c      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004412:	4b66      	ldr	r3, [pc, #408]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004414:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0ef      	beq.n	8004400 <HAL_RCC_OscConfig+0x5cc>
 8004420:	e01b      	b.n	800445a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004422:	4b62      	ldr	r3, [pc, #392]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004424:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004428:	4a60      	ldr	r2, [pc, #384]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004432:	f7fe fb4d 	bl	8002ad0 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800443a:	f7fe fb49 	bl	8002ad0 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e0ff      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800444c:	4b57      	ldr	r3, [pc, #348]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 800444e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1ef      	bne.n	800443a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 80f3 	beq.w	800464a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	2b02      	cmp	r3, #2
 800446a:	f040 80c9 	bne.w	8004600 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800446e:	4b4f      	ldr	r3, [pc, #316]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f003 0203 	and.w	r2, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	429a      	cmp	r2, r3
 8004480:	d12c      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	3b01      	subs	r3, #1
 800448e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d123      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d11b      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d113      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	085b      	lsrs	r3, r3, #1
 80044c0:	3b01      	subs	r3, #1
 80044c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d109      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	3b01      	subs	r3, #1
 80044d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d06b      	beq.n	80045b4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b0c      	cmp	r3, #12
 80044e0:	d062      	beq.n	80045a8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044e2:	4b32      	ldr	r3, [pc, #200]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e0ac      	b.n	800464c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044f2:	4b2e      	ldr	r3, [pc, #184]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a2d      	ldr	r2, [pc, #180]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 80044f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044fe:	f7fe fae7 	bl	8002ad0 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004506:	f7fe fae3 	bl	8002ad0 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e099      	b.n	800464c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004518:	4b24      	ldr	r3, [pc, #144]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004524:	4b21      	ldr	r3, [pc, #132]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	4b21      	ldr	r3, [pc, #132]	; (80045b0 <HAL_RCC_OscConfig+0x77c>)
 800452a:	4013      	ands	r3, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004534:	3a01      	subs	r2, #1
 8004536:	0112      	lsls	r2, r2, #4
 8004538:	4311      	orrs	r1, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800453e:	0212      	lsls	r2, r2, #8
 8004540:	4311      	orrs	r1, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004546:	0852      	lsrs	r2, r2, #1
 8004548:	3a01      	subs	r2, #1
 800454a:	0552      	lsls	r2, r2, #21
 800454c:	4311      	orrs	r1, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004552:	0852      	lsrs	r2, r2, #1
 8004554:	3a01      	subs	r2, #1
 8004556:	0652      	lsls	r2, r2, #25
 8004558:	4311      	orrs	r1, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800455e:	06d2      	lsls	r2, r2, #27
 8004560:	430a      	orrs	r2, r1
 8004562:	4912      	ldr	r1, [pc, #72]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004564:	4313      	orrs	r3, r2
 8004566:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004568:	4b10      	ldr	r3, [pc, #64]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a0f      	ldr	r2, [pc, #60]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 800456e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004572:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004574:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 800457a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800457e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004580:	f7fe faa6 	bl	8002ad0 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004588:	f7fe faa2 	bl	8002ad0 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e058      	b.n	800464c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800459a:	4b04      	ldr	r3, [pc, #16]	; (80045ac <HAL_RCC_OscConfig+0x778>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045a6:	e050      	b.n	800464a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e04f      	b.n	800464c <HAL_RCC_OscConfig+0x818>
 80045ac:	40021000 	.word	0x40021000
 80045b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b4:	4b27      	ldr	r3, [pc, #156]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d144      	bne.n	800464a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045c0:	4b24      	ldr	r3, [pc, #144]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a23      	ldr	r2, [pc, #140]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 80045c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045cc:	4b21      	ldr	r3, [pc, #132]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	4a20      	ldr	r2, [pc, #128]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 80045d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045d8:	f7fe fa7a 	bl	8002ad0 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e0:	f7fe fa76 	bl	8002ad0 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e02c      	b.n	800464c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f2:	4b18      	ldr	r3, [pc, #96]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x7ac>
 80045fe:	e024      	b.n	800464a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b0c      	cmp	r3, #12
 8004604:	d01f      	beq.n	8004646 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004606:	4b13      	ldr	r3, [pc, #76]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a12      	ldr	r2, [pc, #72]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 800460c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004612:	f7fe fa5d 	bl	8002ad0 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461a:	f7fe fa59 	bl	8002ad0 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e00f      	b.n	800464c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800462c:	4b09      	ldr	r3, [pc, #36]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1f0      	bne.n	800461a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004638:	4b06      	ldr	r3, [pc, #24]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	4905      	ldr	r1, [pc, #20]	; (8004654 <HAL_RCC_OscConfig+0x820>)
 800463e:	4b06      	ldr	r3, [pc, #24]	; (8004658 <HAL_RCC_OscConfig+0x824>)
 8004640:	4013      	ands	r3, r2
 8004642:	60cb      	str	r3, [r1, #12]
 8004644:	e001      	b.n	800464a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3720      	adds	r7, #32
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40021000 	.word	0x40021000
 8004658:	feeefffc 	.word	0xfeeefffc

0800465c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0e7      	b.n	8004840 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004670:	4b75      	ldr	r3, [pc, #468]	; (8004848 <HAL_RCC_ClockConfig+0x1ec>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d910      	bls.n	80046a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467e:	4b72      	ldr	r3, [pc, #456]	; (8004848 <HAL_RCC_ClockConfig+0x1ec>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 0207 	bic.w	r2, r3, #7
 8004686:	4970      	ldr	r1, [pc, #448]	; (8004848 <HAL_RCC_ClockConfig+0x1ec>)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	4b6e      	ldr	r3, [pc, #440]	; (8004848 <HAL_RCC_ClockConfig+0x1ec>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0cf      	b.n	8004840 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d010      	beq.n	80046ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	4b66      	ldr	r3, [pc, #408]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d908      	bls.n	80046ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046bc:	4b63      	ldr	r3, [pc, #396]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4960      	ldr	r1, [pc, #384]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d04c      	beq.n	8004774 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d107      	bne.n	80046f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e2:	4b5a      	ldr	r3, [pc, #360]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d121      	bne.n	8004732 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e0a6      	b.n	8004840 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d107      	bne.n	800470a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046fa:	4b54      	ldr	r3, [pc, #336]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d115      	bne.n	8004732 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e09a      	b.n	8004840 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d107      	bne.n	8004722 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004712:	4b4e      	ldr	r3, [pc, #312]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e08e      	b.n	8004840 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004722:	4b4a      	ldr	r3, [pc, #296]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e086      	b.n	8004840 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004732:	4b46      	ldr	r3, [pc, #280]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f023 0203 	bic.w	r2, r3, #3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	4943      	ldr	r1, [pc, #268]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 8004740:	4313      	orrs	r3, r2
 8004742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004744:	f7fe f9c4 	bl	8002ad0 <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474a:	e00a      	b.n	8004762 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800474c:	f7fe f9c0 	bl	8002ad0 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f241 3288 	movw	r2, #5000	; 0x1388
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e06e      	b.n	8004840 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004762:	4b3a      	ldr	r3, [pc, #232]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 020c 	and.w	r2, r3, #12
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	429a      	cmp	r2, r3
 8004772:	d1eb      	bne.n	800474c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d010      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	4b31      	ldr	r3, [pc, #196]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800478c:	429a      	cmp	r2, r3
 800478e:	d208      	bcs.n	80047a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004790:	4b2e      	ldr	r3, [pc, #184]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	492b      	ldr	r1, [pc, #172]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047a2:	4b29      	ldr	r3, [pc, #164]	; (8004848 <HAL_RCC_ClockConfig+0x1ec>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d210      	bcs.n	80047d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b0:	4b25      	ldr	r3, [pc, #148]	; (8004848 <HAL_RCC_ClockConfig+0x1ec>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f023 0207 	bic.w	r2, r3, #7
 80047b8:	4923      	ldr	r1, [pc, #140]	; (8004848 <HAL_RCC_ClockConfig+0x1ec>)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	4313      	orrs	r3, r2
 80047be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c0:	4b21      	ldr	r3, [pc, #132]	; (8004848 <HAL_RCC_ClockConfig+0x1ec>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d001      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e036      	b.n	8004840 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d008      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047de:	4b1b      	ldr	r3, [pc, #108]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	4918      	ldr	r1, [pc, #96]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d009      	beq.n	8004810 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047fc:	4b13      	ldr	r3, [pc, #76]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	4910      	ldr	r1, [pc, #64]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 800480c:	4313      	orrs	r3, r2
 800480e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004810:	f000 f824 	bl	800485c <HAL_RCC_GetSysClockFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	4b0d      	ldr	r3, [pc, #52]	; (800484c <HAL_RCC_ClockConfig+0x1f0>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	f003 030f 	and.w	r3, r3, #15
 8004820:	490b      	ldr	r1, [pc, #44]	; (8004850 <HAL_RCC_ClockConfig+0x1f4>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
 800482c:	4a09      	ldr	r2, [pc, #36]	; (8004854 <HAL_RCC_ClockConfig+0x1f8>)
 800482e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004830:	4b09      	ldr	r3, [pc, #36]	; (8004858 <HAL_RCC_ClockConfig+0x1fc>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f7fe f8fb 	bl	8002a30 <HAL_InitTick>
 800483a:	4603      	mov	r3, r0
 800483c:	72fb      	strb	r3, [r7, #11]

  return status;
 800483e:	7afb      	ldrb	r3, [r7, #11]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40022000 	.word	0x40022000
 800484c:	40021000 	.word	0x40021000
 8004850:	0800c440 	.word	0x0800c440
 8004854:	20000090 	.word	0x20000090
 8004858:	20000094 	.word	0x20000094

0800485c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800485c:	b480      	push	{r7}
 800485e:	b089      	sub	sp, #36	; 0x24
 8004860:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	61fb      	str	r3, [r7, #28]
 8004866:	2300      	movs	r3, #0
 8004868:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800486a:	4b3e      	ldr	r3, [pc, #248]	; (8004964 <HAL_RCC_GetSysClockFreq+0x108>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004874:	4b3b      	ldr	r3, [pc, #236]	; (8004964 <HAL_RCC_GetSysClockFreq+0x108>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_RCC_GetSysClockFreq+0x34>
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2b0c      	cmp	r3, #12
 8004888:	d121      	bne.n	80048ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d11e      	bne.n	80048ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004890:	4b34      	ldr	r3, [pc, #208]	; (8004964 <HAL_RCC_GetSysClockFreq+0x108>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	d107      	bne.n	80048ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800489c:	4b31      	ldr	r3, [pc, #196]	; (8004964 <HAL_RCC_GetSysClockFreq+0x108>)
 800489e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a2:	0a1b      	lsrs	r3, r3, #8
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	e005      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048ac:	4b2d      	ldr	r3, [pc, #180]	; (8004964 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048b8:	4a2b      	ldr	r2, [pc, #172]	; (8004968 <HAL_RCC_GetSysClockFreq+0x10c>)
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10d      	bne.n	80048e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048cc:	e00a      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d102      	bne.n	80048da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048d4:	4b25      	ldr	r3, [pc, #148]	; (800496c <HAL_RCC_GetSysClockFreq+0x110>)
 80048d6:	61bb      	str	r3, [r7, #24]
 80048d8:	e004      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d101      	bne.n	80048e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048e0:	4b23      	ldr	r3, [pc, #140]	; (8004970 <HAL_RCC_GetSysClockFreq+0x114>)
 80048e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	2b0c      	cmp	r3, #12
 80048e8:	d134      	bne.n	8004954 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048ea:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d003      	beq.n	8004902 <HAL_RCC_GetSysClockFreq+0xa6>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d003      	beq.n	8004908 <HAL_RCC_GetSysClockFreq+0xac>
 8004900:	e005      	b.n	800490e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004902:	4b1a      	ldr	r3, [pc, #104]	; (800496c <HAL_RCC_GetSysClockFreq+0x110>)
 8004904:	617b      	str	r3, [r7, #20]
      break;
 8004906:	e005      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004908:	4b19      	ldr	r3, [pc, #100]	; (8004970 <HAL_RCC_GetSysClockFreq+0x114>)
 800490a:	617b      	str	r3, [r7, #20]
      break;
 800490c:	e002      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	617b      	str	r3, [r7, #20]
      break;
 8004912:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004914:	4b13      	ldr	r3, [pc, #76]	; (8004964 <HAL_RCC_GetSysClockFreq+0x108>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	3301      	adds	r3, #1
 8004920:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004922:	4b10      	ldr	r3, [pc, #64]	; (8004964 <HAL_RCC_GetSysClockFreq+0x108>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	0a1b      	lsrs	r3, r3, #8
 8004928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	fb03 f202 	mul.w	r2, r3, r2
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	fbb2 f3f3 	udiv	r3, r2, r3
 8004938:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <HAL_RCC_GetSysClockFreq+0x108>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	0e5b      	lsrs	r3, r3, #25
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	3301      	adds	r3, #1
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004952:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004954:	69bb      	ldr	r3, [r7, #24]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3724      	adds	r7, #36	; 0x24
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40021000 	.word	0x40021000
 8004968:	0800c458 	.word	0x0800c458
 800496c:	00f42400 	.word	0x00f42400
 8004970:	007a1200 	.word	0x007a1200

08004974 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004978:	4b03      	ldr	r3, [pc, #12]	; (8004988 <HAL_RCC_GetHCLKFreq+0x14>)
 800497a:	681b      	ldr	r3, [r3, #0]
}
 800497c:	4618      	mov	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20000090 	.word	0x20000090

0800498c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004990:	f7ff fff0 	bl	8004974 <HAL_RCC_GetHCLKFreq>
 8004994:	4602      	mov	r2, r0
 8004996:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	0a1b      	lsrs	r3, r3, #8
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	4904      	ldr	r1, [pc, #16]	; (80049b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049a2:	5ccb      	ldrb	r3, [r1, r3]
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40021000 	.word	0x40021000
 80049b4:	0800c450 	.word	0x0800c450

080049b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049bc:	f7ff ffda 	bl	8004974 <HAL_RCC_GetHCLKFreq>
 80049c0:	4602      	mov	r2, r0
 80049c2:	4b06      	ldr	r3, [pc, #24]	; (80049dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	0adb      	lsrs	r3, r3, #11
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	4904      	ldr	r1, [pc, #16]	; (80049e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049ce:	5ccb      	ldrb	r3, [r1, r3]
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d8:	4618      	mov	r0, r3
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40021000 	.word	0x40021000
 80049e0:	0800c450 	.word	0x0800c450

080049e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049ec:	2300      	movs	r3, #0
 80049ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049f0:	4b2a      	ldr	r3, [pc, #168]	; (8004a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80049fc:	f7ff f9b6 	bl	8003d6c <HAL_PWREx_GetVoltageRange>
 8004a00:	6178      	str	r0, [r7, #20]
 8004a02:	e014      	b.n	8004a2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a04:	4b25      	ldr	r3, [pc, #148]	; (8004a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a08:	4a24      	ldr	r2, [pc, #144]	; (8004a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a10:	4b22      	ldr	r3, [pc, #136]	; (8004a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a1c:	f7ff f9a6 	bl	8003d6c <HAL_PWREx_GetVoltageRange>
 8004a20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a22:	4b1e      	ldr	r3, [pc, #120]	; (8004a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a26:	4a1d      	ldr	r2, [pc, #116]	; (8004a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a34:	d10b      	bne.n	8004a4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b80      	cmp	r3, #128	; 0x80
 8004a3a:	d919      	bls.n	8004a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2ba0      	cmp	r3, #160	; 0xa0
 8004a40:	d902      	bls.n	8004a48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a42:	2302      	movs	r3, #2
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	e013      	b.n	8004a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a48:	2301      	movs	r3, #1
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	e010      	b.n	8004a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b80      	cmp	r3, #128	; 0x80
 8004a52:	d902      	bls.n	8004a5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a54:	2303      	movs	r3, #3
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	e00a      	b.n	8004a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b80      	cmp	r3, #128	; 0x80
 8004a5e:	d102      	bne.n	8004a66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a60:	2302      	movs	r3, #2
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	e004      	b.n	8004a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b70      	cmp	r3, #112	; 0x70
 8004a6a:	d101      	bne.n	8004a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a70:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f023 0207 	bic.w	r2, r3, #7
 8004a78:	4909      	ldr	r1, [pc, #36]	; (8004aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d001      	beq.n	8004a92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	40022000 	.word	0x40022000

08004aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004aac:	2300      	movs	r3, #0
 8004aae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d031      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ac8:	d01a      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004aca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ace:	d814      	bhi.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d009      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ad4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ad8:	d10f      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004ada:	4b5d      	ldr	r3, [pc, #372]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	4a5c      	ldr	r2, [pc, #368]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ae6:	e00c      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3304      	adds	r3, #4
 8004aec:	2100      	movs	r1, #0
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f9de 	bl	8004eb0 <RCCEx_PLLSAI1_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004af8:	e003      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	74fb      	strb	r3, [r7, #19]
      break;
 8004afe:	e000      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004b00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b02:	7cfb      	ldrb	r3, [r7, #19]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10b      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b08:	4b51      	ldr	r3, [pc, #324]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b16:	494e      	ldr	r1, [pc, #312]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b1e:	e001      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b20:	7cfb      	ldrb	r3, [r7, #19]
 8004b22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 809e 	beq.w	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b32:	2300      	movs	r3, #0
 8004b34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b36:	4b46      	ldr	r3, [pc, #280]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00d      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4c:	4b40      	ldr	r3, [pc, #256]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b50:	4a3f      	ldr	r2, [pc, #252]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b56:	6593      	str	r3, [r2, #88]	; 0x58
 8004b58:	4b3d      	ldr	r3, [pc, #244]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b64:	2301      	movs	r3, #1
 8004b66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b68:	4b3a      	ldr	r3, [pc, #232]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a39      	ldr	r2, [pc, #228]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b74:	f7fd ffac 	bl	8002ad0 <HAL_GetTick>
 8004b78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b7a:	e009      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7c:	f7fd ffa8 	bl	8002ad0 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d902      	bls.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	74fb      	strb	r3, [r7, #19]
        break;
 8004b8e:	e005      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b90:	4b30      	ldr	r3, [pc, #192]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0ef      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004b9c:	7cfb      	ldrb	r3, [r7, #19]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d15a      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ba2:	4b2b      	ldr	r3, [pc, #172]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01e      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d019      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bbe:	4b24      	ldr	r3, [pc, #144]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bca:	4b21      	ldr	r3, [pc, #132]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd0:	4a1f      	ldr	r2, [pc, #124]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bda:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be0:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bea:	4a19      	ldr	r2, [pc, #100]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d016      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fd ff68 	bl	8002ad0 <HAL_GetTick>
 8004c00:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c02:	e00b      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c04:	f7fd ff64 	bl	8002ad0 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d902      	bls.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	74fb      	strb	r3, [r7, #19]
            break;
 8004c1a:	e006      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0ec      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004c2a:	7cfb      	ldrb	r3, [r7, #19]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10b      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c30:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3e:	4904      	ldr	r1, [pc, #16]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c46:	e009      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c48:	7cfb      	ldrb	r3, [r7, #19]
 8004c4a:	74bb      	strb	r3, [r7, #18]
 8004c4c:	e006      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004c4e:	bf00      	nop
 8004c50:	40021000 	.word	0x40021000
 8004c54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c58:	7cfb      	ldrb	r3, [r7, #19]
 8004c5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c5c:	7c7b      	ldrb	r3, [r7, #17]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d105      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c62:	4b8a      	ldr	r3, [pc, #552]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c66:	4a89      	ldr	r2, [pc, #548]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c7a:	4b84      	ldr	r3, [pc, #528]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c80:	f023 0203 	bic.w	r2, r3, #3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	4980      	ldr	r1, [pc, #512]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c9c:	4b7b      	ldr	r3, [pc, #492]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f023 020c 	bic.w	r2, r3, #12
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	4978      	ldr	r1, [pc, #480]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cbe:	4b73      	ldr	r3, [pc, #460]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	496f      	ldr	r1, [pc, #444]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ce0:	4b6a      	ldr	r3, [pc, #424]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cee:	4967      	ldr	r1, [pc, #412]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d02:	4b62      	ldr	r3, [pc, #392]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d10:	495e      	ldr	r1, [pc, #376]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d24:	4b59      	ldr	r3, [pc, #356]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	4956      	ldr	r1, [pc, #344]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d46:	4b51      	ldr	r3, [pc, #324]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	494d      	ldr	r1, [pc, #308]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d028      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d68:	4b48      	ldr	r3, [pc, #288]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	4945      	ldr	r1, [pc, #276]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d86:	d106      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d88:	4b40      	ldr	r3, [pc, #256]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4a3f      	ldr	r2, [pc, #252]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d92:	60d3      	str	r3, [r2, #12]
 8004d94:	e011      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d9e:	d10c      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3304      	adds	r3, #4
 8004da4:	2101      	movs	r1, #1
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 f882 	bl	8004eb0 <RCCEx_PLLSAI1_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004db0:	7cfb      	ldrb	r3, [r7, #19]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004db6:	7cfb      	ldrb	r3, [r7, #19]
 8004db8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d028      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dc6:	4b31      	ldr	r3, [pc, #196]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dcc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd4:	492d      	ldr	r1, [pc, #180]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004de4:	d106      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004de6:	4b29      	ldr	r3, [pc, #164]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	4a28      	ldr	r2, [pc, #160]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004df0:	60d3      	str	r3, [r2, #12]
 8004df2:	e011      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dfc:	d10c      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3304      	adds	r3, #4
 8004e02:	2101      	movs	r1, #1
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 f853 	bl	8004eb0 <RCCEx_PLLSAI1_Config>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e0e:	7cfb      	ldrb	r3, [r7, #19]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004e14:	7cfb      	ldrb	r3, [r7, #19]
 8004e16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01c      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e32:	4916      	ldr	r1, [pc, #88]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e42:	d10c      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3304      	adds	r3, #4
 8004e48:	2102      	movs	r1, #2
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 f830 	bl	8004eb0 <RCCEx_PLLSAI1_Config>
 8004e50:	4603      	mov	r3, r0
 8004e52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e54:	7cfb      	ldrb	r3, [r7, #19]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004e5a:	7cfb      	ldrb	r3, [r7, #19]
 8004e5c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e6a:	4b08      	ldr	r3, [pc, #32]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e70:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e78:	4904      	ldr	r1, [pc, #16]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e80:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40021000 	.word	0x40021000

08004e90 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a04      	ldr	r2, [pc, #16]	; (8004eac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e9a:	f043 0304 	orr.w	r3, r3, #4
 8004e9e:	6013      	str	r3, [r2, #0]
}
 8004ea0:	bf00      	nop
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40021000 	.word	0x40021000

08004eb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ebe:	4b74      	ldr	r3, [pc, #464]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d018      	beq.n	8004efc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004eca:	4b71      	ldr	r3, [pc, #452]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f003 0203 	and.w	r2, r3, #3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d10d      	bne.n	8004ef6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
       ||
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d009      	beq.n	8004ef6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ee2:	4b6b      	ldr	r3, [pc, #428]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	091b      	lsrs	r3, r3, #4
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
       ||
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d047      	beq.n	8004f86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	73fb      	strb	r3, [r7, #15]
 8004efa:	e044      	b.n	8004f86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d018      	beq.n	8004f36 <RCCEx_PLLSAI1_Config+0x86>
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d825      	bhi.n	8004f54 <RCCEx_PLLSAI1_Config+0xa4>
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d002      	beq.n	8004f12 <RCCEx_PLLSAI1_Config+0x62>
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d009      	beq.n	8004f24 <RCCEx_PLLSAI1_Config+0x74>
 8004f10:	e020      	b.n	8004f54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f12:	4b5f      	ldr	r3, [pc, #380]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d11d      	bne.n	8004f5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f22:	e01a      	b.n	8004f5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f24:	4b5a      	ldr	r3, [pc, #360]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d116      	bne.n	8004f5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f34:	e013      	b.n	8004f5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f36:	4b56      	ldr	r3, [pc, #344]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10f      	bne.n	8004f62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f42:	4b53      	ldr	r3, [pc, #332]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d109      	bne.n	8004f62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f52:	e006      	b.n	8004f62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	73fb      	strb	r3, [r7, #15]
      break;
 8004f58:	e004      	b.n	8004f64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f5a:	bf00      	nop
 8004f5c:	e002      	b.n	8004f64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f5e:	bf00      	nop
 8004f60:	e000      	b.n	8004f64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10d      	bne.n	8004f86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f6a:	4b49      	ldr	r3, [pc, #292]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6819      	ldr	r1, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	430b      	orrs	r3, r1
 8004f80:	4943      	ldr	r1, [pc, #268]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d17c      	bne.n	8005086 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f8c:	4b40      	ldr	r3, [pc, #256]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a3f      	ldr	r2, [pc, #252]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f98:	f7fd fd9a 	bl	8002ad0 <HAL_GetTick>
 8004f9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f9e:	e009      	b.n	8004fb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fa0:	f7fd fd96 	bl	8002ad0 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d902      	bls.n	8004fb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	73fb      	strb	r3, [r7, #15]
        break;
 8004fb2:	e005      	b.n	8004fc0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fb4:	4b36      	ldr	r3, [pc, #216]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1ef      	bne.n	8004fa0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d15f      	bne.n	8005086 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d110      	bne.n	8004fee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fcc:	4b30      	ldr	r3, [pc, #192]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004fd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6892      	ldr	r2, [r2, #8]
 8004fdc:	0211      	lsls	r1, r2, #8
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	68d2      	ldr	r2, [r2, #12]
 8004fe2:	06d2      	lsls	r2, r2, #27
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	492a      	ldr	r1, [pc, #168]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	610b      	str	r3, [r1, #16]
 8004fec:	e027      	b.n	800503e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d112      	bne.n	800501a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ff4:	4b26      	ldr	r3, [pc, #152]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ffc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6892      	ldr	r2, [r2, #8]
 8005004:	0211      	lsls	r1, r2, #8
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6912      	ldr	r2, [r2, #16]
 800500a:	0852      	lsrs	r2, r2, #1
 800500c:	3a01      	subs	r2, #1
 800500e:	0552      	lsls	r2, r2, #21
 8005010:	430a      	orrs	r2, r1
 8005012:	491f      	ldr	r1, [pc, #124]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005014:	4313      	orrs	r3, r2
 8005016:	610b      	str	r3, [r1, #16]
 8005018:	e011      	b.n	800503e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800501a:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005022:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6892      	ldr	r2, [r2, #8]
 800502a:	0211      	lsls	r1, r2, #8
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6952      	ldr	r2, [r2, #20]
 8005030:	0852      	lsrs	r2, r2, #1
 8005032:	3a01      	subs	r2, #1
 8005034:	0652      	lsls	r2, r2, #25
 8005036:	430a      	orrs	r2, r1
 8005038:	4915      	ldr	r1, [pc, #84]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 800503a:	4313      	orrs	r3, r2
 800503c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800503e:	4b14      	ldr	r3, [pc, #80]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a13      	ldr	r2, [pc, #76]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005044:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005048:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504a:	f7fd fd41 	bl	8002ad0 <HAL_GetTick>
 800504e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005050:	e009      	b.n	8005066 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005052:	f7fd fd3d 	bl	8002ad0 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d902      	bls.n	8005066 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	73fb      	strb	r3, [r7, #15]
          break;
 8005064:	e005      	b.n	8005072 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005066:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0ef      	beq.n	8005052 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d106      	bne.n	8005086 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	4903      	ldr	r1, [pc, #12]	; (8005090 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005082:	4313      	orrs	r3, r2
 8005084:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005086:	7bfb      	ldrb	r3, [r7, #15]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40021000 	.word	0x40021000

08005094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e049      	b.n	800513a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fd fa8a 	bl	80025d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3304      	adds	r3, #4
 80050d0:	4619      	mov	r1, r3
 80050d2:	4610      	mov	r0, r2
 80050d4:	f000 fa46 	bl	8005564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b02      	cmp	r3, #2
 8005156:	d122      	bne.n	800519e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b02      	cmp	r3, #2
 8005164:	d11b      	bne.n	800519e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f06f 0202 	mvn.w	r2, #2
 800516e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	f003 0303 	and.w	r3, r3, #3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f9ce 	bl	8005526 <HAL_TIM_IC_CaptureCallback>
 800518a:	e005      	b.n	8005198 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f9c0 	bl	8005512 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f9d1 	bl	800553a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d122      	bne.n	80051f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d11b      	bne.n	80051f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f06f 0204 	mvn.w	r2, #4
 80051c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f9a4 	bl	8005526 <HAL_TIM_IC_CaptureCallback>
 80051de:	e005      	b.n	80051ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f996 	bl	8005512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f9a7 	bl	800553a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d122      	bne.n	8005246 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b08      	cmp	r3, #8
 800520c:	d11b      	bne.n	8005246 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f06f 0208 	mvn.w	r2, #8
 8005216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2204      	movs	r2, #4
 800521c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f97a 	bl	8005526 <HAL_TIM_IC_CaptureCallback>
 8005232:	e005      	b.n	8005240 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f96c 	bl	8005512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f97d 	bl	800553a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	2b10      	cmp	r3, #16
 8005252:	d122      	bne.n	800529a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f003 0310 	and.w	r3, r3, #16
 800525e:	2b10      	cmp	r3, #16
 8005260:	d11b      	bne.n	800529a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f06f 0210 	mvn.w	r2, #16
 800526a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2208      	movs	r2, #8
 8005270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f950 	bl	8005526 <HAL_TIM_IC_CaptureCallback>
 8005286:	e005      	b.n	8005294 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f942 	bl	8005512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f953 	bl	800553a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d10e      	bne.n	80052c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d107      	bne.n	80052c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f06f 0201 	mvn.w	r2, #1
 80052be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7fc fd61 	bl	8001d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d0:	2b80      	cmp	r3, #128	; 0x80
 80052d2:	d10e      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052de:	2b80      	cmp	r3, #128	; 0x80
 80052e0:	d107      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 faa7 	bl	8005840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005300:	d10e      	bne.n	8005320 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530c:	2b80      	cmp	r3, #128	; 0x80
 800530e:	d107      	bne.n	8005320 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fa9a 	bl	8005854 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532a:	2b40      	cmp	r3, #64	; 0x40
 800532c:	d10e      	bne.n	800534c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	d107      	bne.n	800534c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f901 	bl	800554e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b20      	cmp	r3, #32
 8005358:	d10e      	bne.n	8005378 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b20      	cmp	r3, #32
 8005366:	d107      	bne.n	8005378 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0220 	mvn.w	r2, #32
 8005370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fa5a 	bl	800582c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005378:	bf00      	nop
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <HAL_TIM_ConfigClockSource+0x1c>
 8005398:	2302      	movs	r3, #2
 800539a:	e0b6      	b.n	800550a <HAL_TIM_ConfigClockSource+0x18a>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d8:	d03e      	beq.n	8005458 <HAL_TIM_ConfigClockSource+0xd8>
 80053da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053de:	f200 8087 	bhi.w	80054f0 <HAL_TIM_ConfigClockSource+0x170>
 80053e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e6:	f000 8086 	beq.w	80054f6 <HAL_TIM_ConfigClockSource+0x176>
 80053ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ee:	d87f      	bhi.n	80054f0 <HAL_TIM_ConfigClockSource+0x170>
 80053f0:	2b70      	cmp	r3, #112	; 0x70
 80053f2:	d01a      	beq.n	800542a <HAL_TIM_ConfigClockSource+0xaa>
 80053f4:	2b70      	cmp	r3, #112	; 0x70
 80053f6:	d87b      	bhi.n	80054f0 <HAL_TIM_ConfigClockSource+0x170>
 80053f8:	2b60      	cmp	r3, #96	; 0x60
 80053fa:	d050      	beq.n	800549e <HAL_TIM_ConfigClockSource+0x11e>
 80053fc:	2b60      	cmp	r3, #96	; 0x60
 80053fe:	d877      	bhi.n	80054f0 <HAL_TIM_ConfigClockSource+0x170>
 8005400:	2b50      	cmp	r3, #80	; 0x50
 8005402:	d03c      	beq.n	800547e <HAL_TIM_ConfigClockSource+0xfe>
 8005404:	2b50      	cmp	r3, #80	; 0x50
 8005406:	d873      	bhi.n	80054f0 <HAL_TIM_ConfigClockSource+0x170>
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d058      	beq.n	80054be <HAL_TIM_ConfigClockSource+0x13e>
 800540c:	2b40      	cmp	r3, #64	; 0x40
 800540e:	d86f      	bhi.n	80054f0 <HAL_TIM_ConfigClockSource+0x170>
 8005410:	2b30      	cmp	r3, #48	; 0x30
 8005412:	d064      	beq.n	80054de <HAL_TIM_ConfigClockSource+0x15e>
 8005414:	2b30      	cmp	r3, #48	; 0x30
 8005416:	d86b      	bhi.n	80054f0 <HAL_TIM_ConfigClockSource+0x170>
 8005418:	2b20      	cmp	r3, #32
 800541a:	d060      	beq.n	80054de <HAL_TIM_ConfigClockSource+0x15e>
 800541c:	2b20      	cmp	r3, #32
 800541e:	d867      	bhi.n	80054f0 <HAL_TIM_ConfigClockSource+0x170>
 8005420:	2b00      	cmp	r3, #0
 8005422:	d05c      	beq.n	80054de <HAL_TIM_ConfigClockSource+0x15e>
 8005424:	2b10      	cmp	r3, #16
 8005426:	d05a      	beq.n	80054de <HAL_TIM_ConfigClockSource+0x15e>
 8005428:	e062      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6818      	ldr	r0, [r3, #0]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	6899      	ldr	r1, [r3, #8]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f000 f971 	bl	8005720 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800544c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	609a      	str	r2, [r3, #8]
      break;
 8005456:	e04f      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6818      	ldr	r0, [r3, #0]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	6899      	ldr	r1, [r3, #8]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f000 f95a 	bl	8005720 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800547a:	609a      	str	r2, [r3, #8]
      break;
 800547c:	e03c      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6818      	ldr	r0, [r3, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	6859      	ldr	r1, [r3, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	461a      	mov	r2, r3
 800548c:	f000 f8ce 	bl	800562c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2150      	movs	r1, #80	; 0x50
 8005496:	4618      	mov	r0, r3
 8005498:	f000 f927 	bl	80056ea <TIM_ITRx_SetConfig>
      break;
 800549c:	e02c      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	6859      	ldr	r1, [r3, #4]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	461a      	mov	r2, r3
 80054ac:	f000 f8ed 	bl	800568a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2160      	movs	r1, #96	; 0x60
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 f917 	bl	80056ea <TIM_ITRx_SetConfig>
      break;
 80054bc:	e01c      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6818      	ldr	r0, [r3, #0]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	6859      	ldr	r1, [r3, #4]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	461a      	mov	r2, r3
 80054cc:	f000 f8ae 	bl	800562c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2140      	movs	r1, #64	; 0x40
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 f907 	bl	80056ea <TIM_ITRx_SetConfig>
      break;
 80054dc:	e00c      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4619      	mov	r1, r3
 80054e8:	4610      	mov	r0, r2
 80054ea:	f000 f8fe 	bl	80056ea <TIM_ITRx_SetConfig>
      break;
 80054ee:	e003      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	73fb      	strb	r3, [r7, #15]
      break;
 80054f4:	e000      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80054f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
	...

08005564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a2a      	ldr	r2, [pc, #168]	; (8005620 <TIM_Base_SetConfig+0xbc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d003      	beq.n	8005584 <TIM_Base_SetConfig+0x20>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005582:	d108      	bne.n	8005596 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a21      	ldr	r2, [pc, #132]	; (8005620 <TIM_Base_SetConfig+0xbc>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00b      	beq.n	80055b6 <TIM_Base_SetConfig+0x52>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a4:	d007      	beq.n	80055b6 <TIM_Base_SetConfig+0x52>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a1e      	ldr	r2, [pc, #120]	; (8005624 <TIM_Base_SetConfig+0xc0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d003      	beq.n	80055b6 <TIM_Base_SetConfig+0x52>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a1d      	ldr	r2, [pc, #116]	; (8005628 <TIM_Base_SetConfig+0xc4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d108      	bne.n	80055c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a0c      	ldr	r2, [pc, #48]	; (8005620 <TIM_Base_SetConfig+0xbc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <TIM_Base_SetConfig+0xa0>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a0b      	ldr	r2, [pc, #44]	; (8005624 <TIM_Base_SetConfig+0xc0>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_Base_SetConfig+0xa0>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a0a      	ldr	r2, [pc, #40]	; (8005628 <TIM_Base_SetConfig+0xc4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d103      	bne.n	800560c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	615a      	str	r2, [r3, #20]
}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40014000 	.word	0x40014000
 8005628:	40014400 	.word	0x40014400

0800562c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f023 0201 	bic.w	r2, r3, #1
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	4313      	orrs	r3, r2
 8005660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f023 030a 	bic.w	r3, r3, #10
 8005668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	621a      	str	r2, [r3, #32]
}
 800567e:	bf00      	nop
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800568a:	b480      	push	{r7}
 800568c:	b087      	sub	sp, #28
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	f023 0210 	bic.w	r2, r3, #16
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	031b      	lsls	r3, r3, #12
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	011b      	lsls	r3, r3, #4
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	621a      	str	r2, [r3, #32]
}
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b085      	sub	sp, #20
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005700:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4313      	orrs	r3, r2
 8005708:	f043 0307 	orr.w	r3, r3, #7
 800570c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	609a      	str	r2, [r3, #8]
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800573a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	021a      	lsls	r2, r3, #8
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	431a      	orrs	r2, r3
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4313      	orrs	r3, r2
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	609a      	str	r2, [r3, #8]
}
 8005754:	bf00      	nop
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005774:	2302      	movs	r3, #2
 8005776:	e04f      	b.n	8005818 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a21      	ldr	r2, [pc, #132]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d108      	bne.n	80057b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a14      	ldr	r2, [pc, #80]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d009      	beq.n	80057ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e0:	d004      	beq.n	80057ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a10      	ldr	r2, [pc, #64]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d10c      	bne.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40014000 	.word	0x40014000

0800582c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e040      	b.n	80058fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fc fec6 	bl	800261c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2224      	movs	r2, #36	; 0x24
 8005894:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0201 	bic.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fc18 	bl	80060dc <UART_SetConfig>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e022      	b.n	80058fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fe38 	bl	8006534 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0201 	orr.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 febf 	bl	8006678 <UART_CheckIdleState>
 80058fa:	4603      	mov	r3, r0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b08a      	sub	sp, #40	; 0x28
 8005908:	af02      	add	r7, sp, #8
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	4613      	mov	r3, r2
 8005912:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005918:	2b20      	cmp	r3, #32
 800591a:	f040 8082 	bne.w	8005a22 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <HAL_UART_Transmit+0x26>
 8005924:	88fb      	ldrh	r3, [r7, #6]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e07a      	b.n	8005a24 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005934:	2b01      	cmp	r3, #1
 8005936:	d101      	bne.n	800593c <HAL_UART_Transmit+0x38>
 8005938:	2302      	movs	r3, #2
 800593a:	e073      	b.n	8005a24 <HAL_UART_Transmit+0x120>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2221      	movs	r2, #33	; 0x21
 8005950:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005952:	f7fd f8bd 	bl	8002ad0 <HAL_GetTick>
 8005956:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	88fa      	ldrh	r2, [r7, #6]
 800595c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	88fa      	ldrh	r2, [r7, #6]
 8005964:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005970:	d108      	bne.n	8005984 <HAL_UART_Transmit+0x80>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d104      	bne.n	8005984 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	61bb      	str	r3, [r7, #24]
 8005982:	e003      	b.n	800598c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005988:	2300      	movs	r3, #0
 800598a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005994:	e02d      	b.n	80059f2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2200      	movs	r2, #0
 800599e:	2180      	movs	r1, #128	; 0x80
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 feb2 	bl	800670a <UART_WaitOnFlagUntilTimeout>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e039      	b.n	8005a24 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10b      	bne.n	80059ce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	881a      	ldrh	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059c2:	b292      	uxth	r2, r2
 80059c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	3302      	adds	r3, #2
 80059ca:	61bb      	str	r3, [r7, #24]
 80059cc:	e008      	b.n	80059e0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	781a      	ldrb	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	b292      	uxth	r2, r2
 80059d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	3301      	adds	r3, #1
 80059de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1cb      	bne.n	8005996 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2200      	movs	r2, #0
 8005a06:	2140      	movs	r1, #64	; 0x40
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 fe7e 	bl	800670a <UART_WaitOnFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e005      	b.n	8005a24 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	e000      	b.n	8005a24 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005a22:	2302      	movs	r3, #2
  }
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3720      	adds	r7, #32
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08a      	sub	sp, #40	; 0x28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a3e:	2b20      	cmp	r3, #32
 8005a40:	d142      	bne.n	8005ac8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <HAL_UART_Receive_IT+0x22>
 8005a48:	88fb      	ldrh	r3, [r7, #6]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e03b      	b.n	8005aca <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_UART_Receive_IT+0x34>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e034      	b.n	8005aca <HAL_UART_Receive_IT+0x9e>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a18      	ldr	r2, [pc, #96]	; (8005ad4 <HAL_UART_Receive_IT+0xa8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d01f      	beq.n	8005ab8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d018      	beq.n	8005ab8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	e853 3f00 	ldrex	r3, [r3]
 8005a92:	613b      	str	r3, [r7, #16]
   return(result);
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	623b      	str	r3, [r7, #32]
 8005aa6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	69f9      	ldr	r1, [r7, #28]
 8005aaa:	6a3a      	ldr	r2, [r7, #32]
 8005aac:	e841 2300 	strex	r3, r2, [r1]
 8005ab0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1e6      	bne.n	8005a86 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ab8:	88fb      	ldrh	r3, [r7, #6]
 8005aba:	461a      	mov	r2, r3
 8005abc:	68b9      	ldr	r1, [r7, #8]
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 fee8 	bl	8006894 <UART_Start_Receive_IT>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	e000      	b.n	8005aca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005ac8:	2302      	movs	r3, #2
  }
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3728      	adds	r7, #40	; 0x28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40008000 	.word	0x40008000

08005ad8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b0ba      	sub	sp, #232	; 0xe8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005afe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005b02:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b06:	4013      	ands	r3, r2
 8005b08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005b0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d115      	bne.n	8005b40 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b18:	f003 0320 	and.w	r3, r3, #32
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00f      	beq.n	8005b40 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b24:	f003 0320 	and.w	r3, r3, #32
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d009      	beq.n	8005b40 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 82a6 	beq.w	8006082 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	4798      	blx	r3
      }
      return;
 8005b3e:	e2a0      	b.n	8006082 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005b40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 8117 	beq.w	8005d78 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d106      	bne.n	8005b64 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005b56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b5a:	4b85      	ldr	r3, [pc, #532]	; (8005d70 <HAL_UART_IRQHandler+0x298>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 810a 	beq.w	8005d78 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d011      	beq.n	8005b94 <HAL_UART_IRQHandler+0xbc>
 8005b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00b      	beq.n	8005b94 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2201      	movs	r2, #1
 8005b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b8a:	f043 0201 	orr.w	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d011      	beq.n	8005bc4 <HAL_UART_IRQHandler+0xec>
 8005ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00b      	beq.n	8005bc4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bba:	f043 0204 	orr.w	r2, r3, #4
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d011      	beq.n	8005bf4 <HAL_UART_IRQHandler+0x11c>
 8005bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00b      	beq.n	8005bf4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2204      	movs	r2, #4
 8005be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bea:	f043 0202 	orr.w	r2, r3, #2
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf8:	f003 0308 	and.w	r3, r3, #8
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d017      	beq.n	8005c30 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d105      	bne.n	8005c18 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c10:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00b      	beq.n	8005c30 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2208      	movs	r2, #8
 8005c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c26:	f043 0208 	orr.w	r2, r3, #8
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d012      	beq.n	8005c62 <HAL_UART_IRQHandler+0x18a>
 8005c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00c      	beq.n	8005c62 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c58:	f043 0220 	orr.w	r2, r3, #32
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 820c 	beq.w	8006086 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00d      	beq.n	8005c96 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c7e:	f003 0320 	and.w	r3, r3, #32
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d007      	beq.n	8005c96 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005caa:	2b40      	cmp	r3, #64	; 0x40
 8005cac:	d005      	beq.n	8005cba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005cae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d04f      	beq.n	8005d5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 feb4 	bl	8006a28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cca:	2b40      	cmp	r3, #64	; 0x40
 8005ccc:	d141      	bne.n	8005d52 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3308      	adds	r3, #8
 8005cd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cdc:	e853 3f00 	ldrex	r3, [r3]
 8005ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1d9      	bne.n	8005cce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d013      	beq.n	8005d4a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d26:	4a13      	ldr	r2, [pc, #76]	; (8005d74 <HAL_UART_IRQHandler+0x29c>)
 8005d28:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fd f84d 	bl	8002dce <HAL_DMA_Abort_IT>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d017      	beq.n	8005d6a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005d44:	4610      	mov	r0, r2
 8005d46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d48:	e00f      	b.n	8005d6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f9b0 	bl	80060b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d50:	e00b      	b.n	8005d6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f9ac 	bl	80060b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d58:	e007      	b.n	8005d6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f9a8 	bl	80060b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005d68:	e18d      	b.n	8006086 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d6a:	bf00      	nop
    return;
 8005d6c:	e18b      	b.n	8006086 <HAL_UART_IRQHandler+0x5ae>
 8005d6e:	bf00      	nop
 8005d70:	04000120 	.word	0x04000120
 8005d74:	08006aef 	.word	0x08006aef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	f040 8146 	bne.w	800600e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d86:	f003 0310 	and.w	r3, r3, #16
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 813f 	beq.w	800600e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d94:	f003 0310 	and.w	r3, r3, #16
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 8138 	beq.w	800600e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2210      	movs	r2, #16
 8005da4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db0:	2b40      	cmp	r3, #64	; 0x40
 8005db2:	f040 80b4 	bne.w	8005f1e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dc2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 815f 	beq.w	800608a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	f080 8157 	bcs.w	800608a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005de2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f040 8085 	bne.w	8005f02 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e26:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e32:	e841 2300 	strex	r3, r2, [r1]
 8005e36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1da      	bne.n	8005df8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3308      	adds	r3, #8
 8005e48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e54:	f023 0301 	bic.w	r3, r3, #1
 8005e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3308      	adds	r3, #8
 8005e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e1      	bne.n	8005e42 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3308      	adds	r3, #8
 8005e84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ea2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ea4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ea8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005eaa:	e841 2300 	strex	r3, r2, [r1]
 8005eae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1e3      	bne.n	8005e7e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed2:	f023 0310 	bic.w	r3, r3, #16
 8005ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ee4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ee6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eec:	e841 2300 	strex	r3, r2, [r1]
 8005ef0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e4      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fc ff28 	bl	8002d52 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f8d4 	bl	80060c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f1c:	e0b5      	b.n	800608a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 80a7 	beq.w	800608e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005f40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 80a2 	beq.w	800608e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f52:	e853 3f00 	ldrex	r3, [r3]
 8005f56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e4      	bne.n	8005f4a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	3308      	adds	r3, #8
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	623b      	str	r3, [r7, #32]
   return(result);
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	f023 0301 	bic.w	r3, r3, #1
 8005f96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fa4:	633a      	str	r2, [r7, #48]	; 0x30
 8005fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fac:	e841 2300 	strex	r3, r2, [r1]
 8005fb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e3      	bne.n	8005f80 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	e853 3f00 	ldrex	r3, [r3]
 8005fd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0310 	bic.w	r3, r3, #16
 8005fde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fec:	61fb      	str	r3, [r7, #28]
 8005fee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff0:	69b9      	ldr	r1, [r7, #24]
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	e841 2300 	strex	r3, r2, [r1]
 8005ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1e4      	bne.n	8005fca <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f85c 	bl	80060c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800600c:	e03f      	b.n	800608e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800600e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00e      	beq.n	8006038 <HAL_UART_IRQHandler+0x560>
 800601a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800601e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d008      	beq.n	8006038 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800602e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fefc 	bl	8006e2e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006036:	e02d      	b.n	8006094 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800603c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00e      	beq.n	8006062 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604c:	2b00      	cmp	r3, #0
 800604e:	d008      	beq.n	8006062 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006054:	2b00      	cmp	r3, #0
 8006056:	d01c      	beq.n	8006092 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	4798      	blx	r3
    }
    return;
 8006060:	e017      	b.n	8006092 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b00      	cmp	r3, #0
 800606c:	d012      	beq.n	8006094 <HAL_UART_IRQHandler+0x5bc>
 800606e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00c      	beq.n	8006094 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fd4d 	bl	8006b1a <UART_EndTransmit_IT>
    return;
 8006080:	e008      	b.n	8006094 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006082:	bf00      	nop
 8006084:	e006      	b.n	8006094 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006086:	bf00      	nop
 8006088:	e004      	b.n	8006094 <HAL_UART_IRQHandler+0x5bc>
      return;
 800608a:	bf00      	nop
 800608c:	e002      	b.n	8006094 <HAL_UART_IRQHandler+0x5bc>
      return;
 800608e:	bf00      	nop
 8006090:	e000      	b.n	8006094 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006092:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006094:	37e8      	adds	r7, #232	; 0xe8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop

0800609c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060e0:	b08a      	sub	sp, #40	; 0x28
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	431a      	orrs	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	431a      	orrs	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	4313      	orrs	r3, r2
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4bb4      	ldr	r3, [pc, #720]	; (80063dc <UART_SetConfig+0x300>)
 800610c:	4013      	ands	r3, r2
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	6812      	ldr	r2, [r2, #0]
 8006112:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006114:	430b      	orrs	r3, r1
 8006116:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4aa9      	ldr	r2, [pc, #676]	; (80063e0 <UART_SetConfig+0x304>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d004      	beq.n	8006148 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006144:	4313      	orrs	r3, r2
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006158:	430a      	orrs	r2, r1
 800615a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4aa0      	ldr	r2, [pc, #640]	; (80063e4 <UART_SetConfig+0x308>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d126      	bne.n	80061b4 <UART_SetConfig+0xd8>
 8006166:	4ba0      	ldr	r3, [pc, #640]	; (80063e8 <UART_SetConfig+0x30c>)
 8006168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616c:	f003 0303 	and.w	r3, r3, #3
 8006170:	2b03      	cmp	r3, #3
 8006172:	d81b      	bhi.n	80061ac <UART_SetConfig+0xd0>
 8006174:	a201      	add	r2, pc, #4	; (adr r2, 800617c <UART_SetConfig+0xa0>)
 8006176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617a:	bf00      	nop
 800617c:	0800618d 	.word	0x0800618d
 8006180:	0800619d 	.word	0x0800619d
 8006184:	08006195 	.word	0x08006195
 8006188:	080061a5 	.word	0x080061a5
 800618c:	2301      	movs	r3, #1
 800618e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006192:	e080      	b.n	8006296 <UART_SetConfig+0x1ba>
 8006194:	2302      	movs	r3, #2
 8006196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800619a:	e07c      	b.n	8006296 <UART_SetConfig+0x1ba>
 800619c:	2304      	movs	r3, #4
 800619e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061a2:	e078      	b.n	8006296 <UART_SetConfig+0x1ba>
 80061a4:	2308      	movs	r3, #8
 80061a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061aa:	e074      	b.n	8006296 <UART_SetConfig+0x1ba>
 80061ac:	2310      	movs	r3, #16
 80061ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b2:	e070      	b.n	8006296 <UART_SetConfig+0x1ba>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a8c      	ldr	r2, [pc, #560]	; (80063ec <UART_SetConfig+0x310>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d138      	bne.n	8006230 <UART_SetConfig+0x154>
 80061be:	4b8a      	ldr	r3, [pc, #552]	; (80063e8 <UART_SetConfig+0x30c>)
 80061c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c4:	f003 030c 	and.w	r3, r3, #12
 80061c8:	2b0c      	cmp	r3, #12
 80061ca:	d82d      	bhi.n	8006228 <UART_SetConfig+0x14c>
 80061cc:	a201      	add	r2, pc, #4	; (adr r2, 80061d4 <UART_SetConfig+0xf8>)
 80061ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d2:	bf00      	nop
 80061d4:	08006209 	.word	0x08006209
 80061d8:	08006229 	.word	0x08006229
 80061dc:	08006229 	.word	0x08006229
 80061e0:	08006229 	.word	0x08006229
 80061e4:	08006219 	.word	0x08006219
 80061e8:	08006229 	.word	0x08006229
 80061ec:	08006229 	.word	0x08006229
 80061f0:	08006229 	.word	0x08006229
 80061f4:	08006211 	.word	0x08006211
 80061f8:	08006229 	.word	0x08006229
 80061fc:	08006229 	.word	0x08006229
 8006200:	08006229 	.word	0x08006229
 8006204:	08006221 	.word	0x08006221
 8006208:	2300      	movs	r3, #0
 800620a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800620e:	e042      	b.n	8006296 <UART_SetConfig+0x1ba>
 8006210:	2302      	movs	r3, #2
 8006212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006216:	e03e      	b.n	8006296 <UART_SetConfig+0x1ba>
 8006218:	2304      	movs	r3, #4
 800621a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800621e:	e03a      	b.n	8006296 <UART_SetConfig+0x1ba>
 8006220:	2308      	movs	r3, #8
 8006222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006226:	e036      	b.n	8006296 <UART_SetConfig+0x1ba>
 8006228:	2310      	movs	r3, #16
 800622a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800622e:	e032      	b.n	8006296 <UART_SetConfig+0x1ba>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a6a      	ldr	r2, [pc, #424]	; (80063e0 <UART_SetConfig+0x304>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d12a      	bne.n	8006290 <UART_SetConfig+0x1b4>
 800623a:	4b6b      	ldr	r3, [pc, #428]	; (80063e8 <UART_SetConfig+0x30c>)
 800623c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006240:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006244:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006248:	d01a      	beq.n	8006280 <UART_SetConfig+0x1a4>
 800624a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800624e:	d81b      	bhi.n	8006288 <UART_SetConfig+0x1ac>
 8006250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006254:	d00c      	beq.n	8006270 <UART_SetConfig+0x194>
 8006256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800625a:	d815      	bhi.n	8006288 <UART_SetConfig+0x1ac>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <UART_SetConfig+0x18c>
 8006260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006264:	d008      	beq.n	8006278 <UART_SetConfig+0x19c>
 8006266:	e00f      	b.n	8006288 <UART_SetConfig+0x1ac>
 8006268:	2300      	movs	r3, #0
 800626a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800626e:	e012      	b.n	8006296 <UART_SetConfig+0x1ba>
 8006270:	2302      	movs	r3, #2
 8006272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006276:	e00e      	b.n	8006296 <UART_SetConfig+0x1ba>
 8006278:	2304      	movs	r3, #4
 800627a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800627e:	e00a      	b.n	8006296 <UART_SetConfig+0x1ba>
 8006280:	2308      	movs	r3, #8
 8006282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006286:	e006      	b.n	8006296 <UART_SetConfig+0x1ba>
 8006288:	2310      	movs	r3, #16
 800628a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800628e:	e002      	b.n	8006296 <UART_SetConfig+0x1ba>
 8006290:	2310      	movs	r3, #16
 8006292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a51      	ldr	r2, [pc, #324]	; (80063e0 <UART_SetConfig+0x304>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d17a      	bne.n	8006396 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d824      	bhi.n	80062f2 <UART_SetConfig+0x216>
 80062a8:	a201      	add	r2, pc, #4	; (adr r2, 80062b0 <UART_SetConfig+0x1d4>)
 80062aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ae:	bf00      	nop
 80062b0:	080062d5 	.word	0x080062d5
 80062b4:	080062f3 	.word	0x080062f3
 80062b8:	080062dd 	.word	0x080062dd
 80062bc:	080062f3 	.word	0x080062f3
 80062c0:	080062e3 	.word	0x080062e3
 80062c4:	080062f3 	.word	0x080062f3
 80062c8:	080062f3 	.word	0x080062f3
 80062cc:	080062f3 	.word	0x080062f3
 80062d0:	080062eb 	.word	0x080062eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062d4:	f7fe fb5a 	bl	800498c <HAL_RCC_GetPCLK1Freq>
 80062d8:	61f8      	str	r0, [r7, #28]
        break;
 80062da:	e010      	b.n	80062fe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062dc:	4b44      	ldr	r3, [pc, #272]	; (80063f0 <UART_SetConfig+0x314>)
 80062de:	61fb      	str	r3, [r7, #28]
        break;
 80062e0:	e00d      	b.n	80062fe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062e2:	f7fe fabb 	bl	800485c <HAL_RCC_GetSysClockFreq>
 80062e6:	61f8      	str	r0, [r7, #28]
        break;
 80062e8:	e009      	b.n	80062fe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ee:	61fb      	str	r3, [r7, #28]
        break;
 80062f0:	e005      	b.n	80062fe <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80062fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 8107 	beq.w	8006514 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	4413      	add	r3, r2
 8006310:	69fa      	ldr	r2, [r7, #28]
 8006312:	429a      	cmp	r2, r3
 8006314:	d305      	bcc.n	8006322 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800631c:	69fa      	ldr	r2, [r7, #28]
 800631e:	429a      	cmp	r2, r3
 8006320:	d903      	bls.n	800632a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006328:	e0f4      	b.n	8006514 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	2200      	movs	r2, #0
 800632e:	461c      	mov	r4, r3
 8006330:	4615      	mov	r5, r2
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	f04f 0300 	mov.w	r3, #0
 800633a:	022b      	lsls	r3, r5, #8
 800633c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006340:	0222      	lsls	r2, r4, #8
 8006342:	68f9      	ldr	r1, [r7, #12]
 8006344:	6849      	ldr	r1, [r1, #4]
 8006346:	0849      	lsrs	r1, r1, #1
 8006348:	2000      	movs	r0, #0
 800634a:	4688      	mov	r8, r1
 800634c:	4681      	mov	r9, r0
 800634e:	eb12 0a08 	adds.w	sl, r2, r8
 8006352:	eb43 0b09 	adc.w	fp, r3, r9
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	603b      	str	r3, [r7, #0]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006364:	4650      	mov	r0, sl
 8006366:	4659      	mov	r1, fp
 8006368:	f7fa fc8e 	bl	8000c88 <__aeabi_uldivmod>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4613      	mov	r3, r2
 8006372:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800637a:	d308      	bcc.n	800638e <UART_SetConfig+0x2b2>
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006382:	d204      	bcs.n	800638e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	60da      	str	r2, [r3, #12]
 800638c:	e0c2      	b.n	8006514 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006394:	e0be      	b.n	8006514 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800639e:	d16a      	bne.n	8006476 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80063a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d834      	bhi.n	8006412 <UART_SetConfig+0x336>
 80063a8:	a201      	add	r2, pc, #4	; (adr r2, 80063b0 <UART_SetConfig+0x2d4>)
 80063aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ae:	bf00      	nop
 80063b0:	080063d5 	.word	0x080063d5
 80063b4:	080063f5 	.word	0x080063f5
 80063b8:	080063fd 	.word	0x080063fd
 80063bc:	08006413 	.word	0x08006413
 80063c0:	08006403 	.word	0x08006403
 80063c4:	08006413 	.word	0x08006413
 80063c8:	08006413 	.word	0x08006413
 80063cc:	08006413 	.word	0x08006413
 80063d0:	0800640b 	.word	0x0800640b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d4:	f7fe fada 	bl	800498c <HAL_RCC_GetPCLK1Freq>
 80063d8:	61f8      	str	r0, [r7, #28]
        break;
 80063da:	e020      	b.n	800641e <UART_SetConfig+0x342>
 80063dc:	efff69f3 	.word	0xefff69f3
 80063e0:	40008000 	.word	0x40008000
 80063e4:	40013800 	.word	0x40013800
 80063e8:	40021000 	.word	0x40021000
 80063ec:	40004400 	.word	0x40004400
 80063f0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f4:	f7fe fae0 	bl	80049b8 <HAL_RCC_GetPCLK2Freq>
 80063f8:	61f8      	str	r0, [r7, #28]
        break;
 80063fa:	e010      	b.n	800641e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063fc:	4b4c      	ldr	r3, [pc, #304]	; (8006530 <UART_SetConfig+0x454>)
 80063fe:	61fb      	str	r3, [r7, #28]
        break;
 8006400:	e00d      	b.n	800641e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006402:	f7fe fa2b 	bl	800485c <HAL_RCC_GetSysClockFreq>
 8006406:	61f8      	str	r0, [r7, #28]
        break;
 8006408:	e009      	b.n	800641e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800640a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800640e:	61fb      	str	r3, [r7, #28]
        break;
 8006410:	e005      	b.n	800641e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800641c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d077      	beq.n	8006514 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	005a      	lsls	r2, r3, #1
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	085b      	lsrs	r3, r3, #1
 800642e:	441a      	add	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	fbb2 f3f3 	udiv	r3, r2, r3
 8006438:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	2b0f      	cmp	r3, #15
 800643e:	d916      	bls.n	800646e <UART_SetConfig+0x392>
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006446:	d212      	bcs.n	800646e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	b29b      	uxth	r3, r3
 800644c:	f023 030f 	bic.w	r3, r3, #15
 8006450:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	085b      	lsrs	r3, r3, #1
 8006456:	b29b      	uxth	r3, r3
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	b29a      	uxth	r2, r3
 800645e:	8afb      	ldrh	r3, [r7, #22]
 8006460:	4313      	orrs	r3, r2
 8006462:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	8afa      	ldrh	r2, [r7, #22]
 800646a:	60da      	str	r2, [r3, #12]
 800646c:	e052      	b.n	8006514 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006474:	e04e      	b.n	8006514 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006476:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800647a:	2b08      	cmp	r3, #8
 800647c:	d827      	bhi.n	80064ce <UART_SetConfig+0x3f2>
 800647e:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <UART_SetConfig+0x3a8>)
 8006480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006484:	080064a9 	.word	0x080064a9
 8006488:	080064b1 	.word	0x080064b1
 800648c:	080064b9 	.word	0x080064b9
 8006490:	080064cf 	.word	0x080064cf
 8006494:	080064bf 	.word	0x080064bf
 8006498:	080064cf 	.word	0x080064cf
 800649c:	080064cf 	.word	0x080064cf
 80064a0:	080064cf 	.word	0x080064cf
 80064a4:	080064c7 	.word	0x080064c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064a8:	f7fe fa70 	bl	800498c <HAL_RCC_GetPCLK1Freq>
 80064ac:	61f8      	str	r0, [r7, #28]
        break;
 80064ae:	e014      	b.n	80064da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064b0:	f7fe fa82 	bl	80049b8 <HAL_RCC_GetPCLK2Freq>
 80064b4:	61f8      	str	r0, [r7, #28]
        break;
 80064b6:	e010      	b.n	80064da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064b8:	4b1d      	ldr	r3, [pc, #116]	; (8006530 <UART_SetConfig+0x454>)
 80064ba:	61fb      	str	r3, [r7, #28]
        break;
 80064bc:	e00d      	b.n	80064da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064be:	f7fe f9cd 	bl	800485c <HAL_RCC_GetSysClockFreq>
 80064c2:	61f8      	str	r0, [r7, #28]
        break;
 80064c4:	e009      	b.n	80064da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ca:	61fb      	str	r3, [r7, #28]
        break;
 80064cc:	e005      	b.n	80064da <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80064d8:	bf00      	nop
    }

    if (pclk != 0U)
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d019      	beq.n	8006514 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	085a      	lsrs	r2, r3, #1
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	441a      	add	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	2b0f      	cmp	r3, #15
 80064f8:	d909      	bls.n	800650e <UART_SetConfig+0x432>
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006500:	d205      	bcs.n	800650e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	60da      	str	r2, [r3, #12]
 800650c:	e002      	b.n	8006514 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006520:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006524:	4618      	mov	r0, r3
 8006526:	3728      	adds	r7, #40	; 0x28
 8006528:	46bd      	mov	sp, r7
 800652a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800652e:	bf00      	nop
 8006530:	00f42400 	.word	0x00f42400

08006534 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	f003 0308 	and.w	r3, r3, #8
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	d01a      	beq.n	800664a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006632:	d10a      	bne.n	800664a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	605a      	str	r2, [r3, #4]
  }
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af02      	add	r7, sp, #8
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006688:	f7fc fa22 	bl	8002ad0 <HAL_GetTick>
 800668c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0308 	and.w	r3, r3, #8
 8006698:	2b08      	cmp	r3, #8
 800669a:	d10e      	bne.n	80066ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800669c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f82d 	bl	800670a <UART_WaitOnFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e023      	b.n	8006702 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d10e      	bne.n	80066e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f817 	bl	800670a <UART_WaitOnFlagUntilTimeout>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e00d      	b.n	8006702 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2220      	movs	r2, #32
 80066ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2220      	movs	r2, #32
 80066f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b09c      	sub	sp, #112	; 0x70
 800670e:	af00      	add	r7, sp, #0
 8006710:	60f8      	str	r0, [r7, #12]
 8006712:	60b9      	str	r1, [r7, #8]
 8006714:	603b      	str	r3, [r7, #0]
 8006716:	4613      	mov	r3, r2
 8006718:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800671a:	e0a5      	b.n	8006868 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800671c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800671e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006722:	f000 80a1 	beq.w	8006868 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006726:	f7fc f9d3 	bl	8002ad0 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006732:	429a      	cmp	r2, r3
 8006734:	d302      	bcc.n	800673c <UART_WaitOnFlagUntilTimeout+0x32>
 8006736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006738:	2b00      	cmp	r3, #0
 800673a:	d13e      	bne.n	80067ba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800674a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006750:	667b      	str	r3, [r7, #100]	; 0x64
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800675a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800675c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006760:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e6      	bne.n	800673c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3308      	adds	r3, #8
 8006774:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006778:	e853 3f00 	ldrex	r3, [r3]
 800677c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	f023 0301 	bic.w	r3, r3, #1
 8006784:	663b      	str	r3, [r7, #96]	; 0x60
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3308      	adds	r3, #8
 800678c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800678e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006790:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006794:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800679c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1e5      	bne.n	800676e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2220      	movs	r2, #32
 80067a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2220      	movs	r2, #32
 80067ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e067      	b.n	800688a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d04f      	beq.n	8006868 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d6:	d147      	bne.n	8006868 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067e0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	e853 3f00 	ldrex	r3, [r3]
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	461a      	mov	r2, r3
 80067fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
 8006802:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e6      	bne.n	80067e2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3308      	adds	r3, #8
 800681a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	e853 3f00 	ldrex	r3, [r3]
 8006822:	613b      	str	r3, [r7, #16]
   return(result);
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f023 0301 	bic.w	r3, r3, #1
 800682a:	66bb      	str	r3, [r7, #104]	; 0x68
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3308      	adds	r3, #8
 8006832:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006834:	623a      	str	r2, [r7, #32]
 8006836:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006838:	69f9      	ldr	r1, [r7, #28]
 800683a:	6a3a      	ldr	r2, [r7, #32]
 800683c:	e841 2300 	strex	r3, r2, [r1]
 8006840:	61bb      	str	r3, [r7, #24]
   return(result);
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1e5      	bne.n	8006814 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2220      	movs	r2, #32
 800684c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2220      	movs	r2, #32
 8006852:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2220      	movs	r2, #32
 8006858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e010      	b.n	800688a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	69da      	ldr	r2, [r3, #28]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	4013      	ands	r3, r2
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	429a      	cmp	r2, r3
 8006876:	bf0c      	ite	eq
 8006878:	2301      	moveq	r3, #1
 800687a:	2300      	movne	r3, #0
 800687c:	b2db      	uxtb	r3, r3
 800687e:	461a      	mov	r2, r3
 8006880:	79fb      	ldrb	r3, [r7, #7]
 8006882:	429a      	cmp	r2, r3
 8006884:	f43f af4a 	beq.w	800671c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3770      	adds	r7, #112	; 0x70
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006894:	b480      	push	{r7}
 8006896:	b097      	sub	sp, #92	; 0x5c
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	4613      	mov	r3, r2
 80068a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	88fa      	ldrh	r2, [r7, #6]
 80068ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	88fa      	ldrh	r2, [r7, #6]
 80068b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c6:	d10e      	bne.n	80068e6 <UART_Start_Receive_IT+0x52>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d105      	bne.n	80068dc <UART_Start_Receive_IT+0x48>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80068d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068da:	e02d      	b.n	8006938 <UART_Start_Receive_IT+0xa4>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	22ff      	movs	r2, #255	; 0xff
 80068e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068e4:	e028      	b.n	8006938 <UART_Start_Receive_IT+0xa4>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10d      	bne.n	800690a <UART_Start_Receive_IT+0x76>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d104      	bne.n	8006900 <UART_Start_Receive_IT+0x6c>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	22ff      	movs	r2, #255	; 0xff
 80068fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068fe:	e01b      	b.n	8006938 <UART_Start_Receive_IT+0xa4>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	227f      	movs	r2, #127	; 0x7f
 8006904:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006908:	e016      	b.n	8006938 <UART_Start_Receive_IT+0xa4>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006912:	d10d      	bne.n	8006930 <UART_Start_Receive_IT+0x9c>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d104      	bne.n	8006926 <UART_Start_Receive_IT+0x92>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	227f      	movs	r2, #127	; 0x7f
 8006920:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006924:	e008      	b.n	8006938 <UART_Start_Receive_IT+0xa4>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	223f      	movs	r2, #63	; 0x3f
 800692a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800692e:	e003      	b.n	8006938 <UART_Start_Receive_IT+0xa4>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2222      	movs	r2, #34	; 0x22
 8006944:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3308      	adds	r3, #8
 800694c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006950:	e853 3f00 	ldrex	r3, [r3]
 8006954:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	f043 0301 	orr.w	r3, r3, #1
 800695c:	657b      	str	r3, [r7, #84]	; 0x54
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3308      	adds	r3, #8
 8006964:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006966:	64ba      	str	r2, [r7, #72]	; 0x48
 8006968:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800696c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e5      	bne.n	8006946 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006982:	d107      	bne.n	8006994 <UART_Start_Receive_IT+0x100>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d103      	bne.n	8006994 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4a24      	ldr	r2, [pc, #144]	; (8006a20 <UART_Start_Receive_IT+0x18c>)
 8006990:	665a      	str	r2, [r3, #100]	; 0x64
 8006992:	e002      	b.n	800699a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4a23      	ldr	r2, [pc, #140]	; (8006a24 <UART_Start_Receive_IT+0x190>)
 8006998:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d019      	beq.n	80069de <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b2:	e853 3f00 	ldrex	r3, [r3]
 80069b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80069be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	461a      	mov	r2, r3
 80069c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c8:	637b      	str	r3, [r7, #52]	; 0x34
 80069ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069d0:	e841 2300 	strex	r3, r2, [r1]
 80069d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e6      	bne.n	80069aa <UART_Start_Receive_IT+0x116>
 80069dc:	e018      	b.n	8006a10 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	613b      	str	r3, [r7, #16]
   return(result);
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	f043 0320 	orr.w	r3, r3, #32
 80069f2:	653b      	str	r3, [r7, #80]	; 0x50
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069fc:	623b      	str	r3, [r7, #32]
 80069fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a00:	69f9      	ldr	r1, [r7, #28]
 8006a02:	6a3a      	ldr	r2, [r7, #32]
 8006a04:	e841 2300 	strex	r3, r2, [r1]
 8006a08:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e6      	bne.n	80069de <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	375c      	adds	r7, #92	; 0x5c
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	08006ccf 	.word	0x08006ccf
 8006a24:	08006b6f 	.word	0x08006b6f

08006a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b095      	sub	sp, #84	; 0x54
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a4e:	643b      	str	r3, [r7, #64]	; 0x40
 8006a50:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a56:	e841 2300 	strex	r3, r2, [r1]
 8006a5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1e6      	bne.n	8006a30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3308      	adds	r3, #8
 8006a68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	f023 0301 	bic.w	r3, r3, #1
 8006a78:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3308      	adds	r3, #8
 8006a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e5      	bne.n	8006a62 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d118      	bne.n	8006ad0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f023 0310 	bic.w	r3, r3, #16
 8006ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006abc:	61bb      	str	r3, [r7, #24]
 8006abe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac0:	6979      	ldr	r1, [r7, #20]
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	e841 2300 	strex	r3, r2, [r1]
 8006ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1e6      	bne.n	8006a9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006ae2:	bf00      	nop
 8006ae4:	3754      	adds	r7, #84	; 0x54
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f7ff facf 	bl	80060b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b12:	bf00      	nop
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b088      	sub	sp, #32
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	e853 3f00 	ldrex	r3, [r3]
 8006b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b36:	61fb      	str	r3, [r7, #28]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	61bb      	str	r3, [r7, #24]
 8006b42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	6979      	ldr	r1, [r7, #20]
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	e841 2300 	strex	r3, r2, [r1]
 8006b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1e6      	bne.n	8006b22 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2220      	movs	r2, #32
 8006b58:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff fa9b 	bl	800609c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b66:	bf00      	nop
 8006b68:	3720      	adds	r7, #32
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b096      	sub	sp, #88	; 0x58
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b7c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b84:	2b22      	cmp	r3, #34	; 0x22
 8006b86:	f040 8094 	bne.w	8006cb2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b90:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b94:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006b98:	b2d9      	uxtb	r1, r3
 8006b9a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba4:	400a      	ands	r2, r1
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d179      	bne.n	8006cc6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bda:	e853 3f00 	ldrex	r3, [r3]
 8006bde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006be6:	653b      	str	r3, [r7, #80]	; 0x50
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	461a      	mov	r2, r3
 8006bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8006bf2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bf8:	e841 2300 	strex	r3, r2, [r1]
 8006bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1e6      	bne.n	8006bd2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3308      	adds	r3, #8
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	623b      	str	r3, [r7, #32]
   return(result);
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	f023 0301 	bic.w	r3, r3, #1
 8006c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3308      	adds	r3, #8
 8006c22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c24:	633a      	str	r2, [r7, #48]	; 0x30
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e5      	bne.n	8006c04 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d12e      	bne.n	8006caa <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 0310 	bic.w	r3, r3, #16
 8006c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c70:	61fb      	str	r3, [r7, #28]
 8006c72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	69b9      	ldr	r1, [r7, #24]
 8006c76:	69fa      	ldr	r2, [r7, #28]
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e6      	bne.n	8006c52 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	f003 0310 	and.w	r3, r3, #16
 8006c8e:	2b10      	cmp	r3, #16
 8006c90:	d103      	bne.n	8006c9a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2210      	movs	r2, #16
 8006c98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7ff fa0e 	bl	80060c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ca8:	e00d      	b.n	8006cc6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7fa ff94 	bl	8001bd8 <HAL_UART_RxCpltCallback>
}
 8006cb0:	e009      	b.n	8006cc6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	8b1b      	ldrh	r3, [r3, #24]
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0208 	orr.w	r2, r2, #8
 8006cc2:	b292      	uxth	r2, r2
 8006cc4:	831a      	strh	r2, [r3, #24]
}
 8006cc6:	bf00      	nop
 8006cc8:	3758      	adds	r7, #88	; 0x58
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b096      	sub	sp, #88	; 0x58
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cdc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ce4:	2b22      	cmp	r3, #34	; 0x22
 8006ce6:	f040 8094 	bne.w	8006e12 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006cf0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006cfa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006cfe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d02:	4013      	ands	r3, r2
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0e:	1c9a      	adds	r2, r3, #2
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d179      	bne.n	8006e26 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3a:	e853 3f00 	ldrex	r3, [r3]
 8006d3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d50:	643b      	str	r3, [r7, #64]	; 0x40
 8006d52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d58:	e841 2300 	strex	r3, r2, [r1]
 8006d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1e6      	bne.n	8006d32 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3308      	adds	r3, #8
 8006d6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	f023 0301 	bic.w	r3, r3, #1
 8006d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3308      	adds	r3, #8
 8006d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e5      	bne.n	8006d64 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d12e      	bne.n	8006e0a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	e853 3f00 	ldrex	r3, [r3]
 8006dbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	f023 0310 	bic.w	r3, r3, #16
 8006dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd4:	6979      	ldr	r1, [r7, #20]
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	e841 2300 	strex	r3, r2, [r1]
 8006ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1e6      	bne.n	8006db2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	f003 0310 	and.w	r3, r3, #16
 8006dee:	2b10      	cmp	r3, #16
 8006df0:	d103      	bne.n	8006dfa <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2210      	movs	r2, #16
 8006df8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff f95e 	bl	80060c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e08:	e00d      	b.n	8006e26 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fa fee4 	bl	8001bd8 <HAL_UART_RxCpltCallback>
}
 8006e10:	e009      	b.n	8006e26 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	8b1b      	ldrh	r3, [r3, #24]
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0208 	orr.w	r2, r2, #8
 8006e22:	b292      	uxth	r2, r2
 8006e24:	831a      	strh	r2, [r3, #24]
}
 8006e26:	bf00      	nop
 8006e28:	3758      	adds	r7, #88	; 0x58
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e36:	bf00      	nop
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
	...

08006e44 <__errno>:
 8006e44:	4b01      	ldr	r3, [pc, #4]	; (8006e4c <__errno+0x8>)
 8006e46:	6818      	ldr	r0, [r3, #0]
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	2000009c 	.word	0x2000009c

08006e50 <__libc_init_array>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	4d0d      	ldr	r5, [pc, #52]	; (8006e88 <__libc_init_array+0x38>)
 8006e54:	4c0d      	ldr	r4, [pc, #52]	; (8006e8c <__libc_init_array+0x3c>)
 8006e56:	1b64      	subs	r4, r4, r5
 8006e58:	10a4      	asrs	r4, r4, #2
 8006e5a:	2600      	movs	r6, #0
 8006e5c:	42a6      	cmp	r6, r4
 8006e5e:	d109      	bne.n	8006e74 <__libc_init_array+0x24>
 8006e60:	4d0b      	ldr	r5, [pc, #44]	; (8006e90 <__libc_init_array+0x40>)
 8006e62:	4c0c      	ldr	r4, [pc, #48]	; (8006e94 <__libc_init_array+0x44>)
 8006e64:	f004 fffc 	bl	800be60 <_init>
 8006e68:	1b64      	subs	r4, r4, r5
 8006e6a:	10a4      	asrs	r4, r4, #2
 8006e6c:	2600      	movs	r6, #0
 8006e6e:	42a6      	cmp	r6, r4
 8006e70:	d105      	bne.n	8006e7e <__libc_init_array+0x2e>
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
 8006e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e78:	4798      	blx	r3
 8006e7a:	3601      	adds	r6, #1
 8006e7c:	e7ee      	b.n	8006e5c <__libc_init_array+0xc>
 8006e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e82:	4798      	blx	r3
 8006e84:	3601      	adds	r6, #1
 8006e86:	e7f2      	b.n	8006e6e <__libc_init_array+0x1e>
 8006e88:	0800c9a8 	.word	0x0800c9a8
 8006e8c:	0800c9a8 	.word	0x0800c9a8
 8006e90:	0800c9a8 	.word	0x0800c9a8
 8006e94:	0800c9ac 	.word	0x0800c9ac

08006e98 <memcpy>:
 8006e98:	440a      	add	r2, r1
 8006e9a:	4291      	cmp	r1, r2
 8006e9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ea0:	d100      	bne.n	8006ea4 <memcpy+0xc>
 8006ea2:	4770      	bx	lr
 8006ea4:	b510      	push	{r4, lr}
 8006ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eae:	4291      	cmp	r1, r2
 8006eb0:	d1f9      	bne.n	8006ea6 <memcpy+0xe>
 8006eb2:	bd10      	pop	{r4, pc}

08006eb4 <memset>:
 8006eb4:	4402      	add	r2, r0
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d100      	bne.n	8006ebe <memset+0xa>
 8006ebc:	4770      	bx	lr
 8006ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8006ec2:	e7f9      	b.n	8006eb8 <memset+0x4>

08006ec4 <__cvt>:
 8006ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ec8:	ec55 4b10 	vmov	r4, r5, d0
 8006ecc:	2d00      	cmp	r5, #0
 8006ece:	460e      	mov	r6, r1
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	462b      	mov	r3, r5
 8006ed4:	bfbb      	ittet	lt
 8006ed6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006eda:	461d      	movlt	r5, r3
 8006edc:	2300      	movge	r3, #0
 8006ede:	232d      	movlt	r3, #45	; 0x2d
 8006ee0:	700b      	strb	r3, [r1, #0]
 8006ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ee4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ee8:	4691      	mov	r9, r2
 8006eea:	f023 0820 	bic.w	r8, r3, #32
 8006eee:	bfbc      	itt	lt
 8006ef0:	4622      	movlt	r2, r4
 8006ef2:	4614      	movlt	r4, r2
 8006ef4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ef8:	d005      	beq.n	8006f06 <__cvt+0x42>
 8006efa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006efe:	d100      	bne.n	8006f02 <__cvt+0x3e>
 8006f00:	3601      	adds	r6, #1
 8006f02:	2102      	movs	r1, #2
 8006f04:	e000      	b.n	8006f08 <__cvt+0x44>
 8006f06:	2103      	movs	r1, #3
 8006f08:	ab03      	add	r3, sp, #12
 8006f0a:	9301      	str	r3, [sp, #4]
 8006f0c:	ab02      	add	r3, sp, #8
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	ec45 4b10 	vmov	d0, r4, r5
 8006f14:	4653      	mov	r3, sl
 8006f16:	4632      	mov	r2, r6
 8006f18:	f001 fe46 	bl	8008ba8 <_dtoa_r>
 8006f1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f20:	4607      	mov	r7, r0
 8006f22:	d102      	bne.n	8006f2a <__cvt+0x66>
 8006f24:	f019 0f01 	tst.w	r9, #1
 8006f28:	d022      	beq.n	8006f70 <__cvt+0xac>
 8006f2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f2e:	eb07 0906 	add.w	r9, r7, r6
 8006f32:	d110      	bne.n	8006f56 <__cvt+0x92>
 8006f34:	783b      	ldrb	r3, [r7, #0]
 8006f36:	2b30      	cmp	r3, #48	; 0x30
 8006f38:	d10a      	bne.n	8006f50 <__cvt+0x8c>
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	4620      	mov	r0, r4
 8006f40:	4629      	mov	r1, r5
 8006f42:	f7f9 fdc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f46:	b918      	cbnz	r0, 8006f50 <__cvt+0x8c>
 8006f48:	f1c6 0601 	rsb	r6, r6, #1
 8006f4c:	f8ca 6000 	str.w	r6, [sl]
 8006f50:	f8da 3000 	ldr.w	r3, [sl]
 8006f54:	4499      	add	r9, r3
 8006f56:	2200      	movs	r2, #0
 8006f58:	2300      	movs	r3, #0
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	f7f9 fdb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f62:	b108      	cbz	r0, 8006f68 <__cvt+0xa4>
 8006f64:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f68:	2230      	movs	r2, #48	; 0x30
 8006f6a:	9b03      	ldr	r3, [sp, #12]
 8006f6c:	454b      	cmp	r3, r9
 8006f6e:	d307      	bcc.n	8006f80 <__cvt+0xbc>
 8006f70:	9b03      	ldr	r3, [sp, #12]
 8006f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f74:	1bdb      	subs	r3, r3, r7
 8006f76:	4638      	mov	r0, r7
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	b004      	add	sp, #16
 8006f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f80:	1c59      	adds	r1, r3, #1
 8006f82:	9103      	str	r1, [sp, #12]
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	e7f0      	b.n	8006f6a <__cvt+0xa6>

08006f88 <__exponent>:
 8006f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2900      	cmp	r1, #0
 8006f8e:	bfb8      	it	lt
 8006f90:	4249      	neglt	r1, r1
 8006f92:	f803 2b02 	strb.w	r2, [r3], #2
 8006f96:	bfb4      	ite	lt
 8006f98:	222d      	movlt	r2, #45	; 0x2d
 8006f9a:	222b      	movge	r2, #43	; 0x2b
 8006f9c:	2909      	cmp	r1, #9
 8006f9e:	7042      	strb	r2, [r0, #1]
 8006fa0:	dd2a      	ble.n	8006ff8 <__exponent+0x70>
 8006fa2:	f10d 0407 	add.w	r4, sp, #7
 8006fa6:	46a4      	mov	ip, r4
 8006fa8:	270a      	movs	r7, #10
 8006faa:	46a6      	mov	lr, r4
 8006fac:	460a      	mov	r2, r1
 8006fae:	fb91 f6f7 	sdiv	r6, r1, r7
 8006fb2:	fb07 1516 	mls	r5, r7, r6, r1
 8006fb6:	3530      	adds	r5, #48	; 0x30
 8006fb8:	2a63      	cmp	r2, #99	; 0x63
 8006fba:	f104 34ff 	add.w	r4, r4, #4294967295
 8006fbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	dcf1      	bgt.n	8006faa <__exponent+0x22>
 8006fc6:	3130      	adds	r1, #48	; 0x30
 8006fc8:	f1ae 0502 	sub.w	r5, lr, #2
 8006fcc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006fd0:	1c44      	adds	r4, r0, #1
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	4561      	cmp	r1, ip
 8006fd6:	d30a      	bcc.n	8006fee <__exponent+0x66>
 8006fd8:	f10d 0209 	add.w	r2, sp, #9
 8006fdc:	eba2 020e 	sub.w	r2, r2, lr
 8006fe0:	4565      	cmp	r5, ip
 8006fe2:	bf88      	it	hi
 8006fe4:	2200      	movhi	r2, #0
 8006fe6:	4413      	add	r3, r2
 8006fe8:	1a18      	subs	r0, r3, r0
 8006fea:	b003      	add	sp, #12
 8006fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ff2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ff6:	e7ed      	b.n	8006fd4 <__exponent+0x4c>
 8006ff8:	2330      	movs	r3, #48	; 0x30
 8006ffa:	3130      	adds	r1, #48	; 0x30
 8006ffc:	7083      	strb	r3, [r0, #2]
 8006ffe:	70c1      	strb	r1, [r0, #3]
 8007000:	1d03      	adds	r3, r0, #4
 8007002:	e7f1      	b.n	8006fe8 <__exponent+0x60>

08007004 <_printf_float>:
 8007004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007008:	ed2d 8b02 	vpush	{d8}
 800700c:	b08d      	sub	sp, #52	; 0x34
 800700e:	460c      	mov	r4, r1
 8007010:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007014:	4616      	mov	r6, r2
 8007016:	461f      	mov	r7, r3
 8007018:	4605      	mov	r5, r0
 800701a:	f002 ff35 	bl	8009e88 <_localeconv_r>
 800701e:	f8d0 a000 	ldr.w	sl, [r0]
 8007022:	4650      	mov	r0, sl
 8007024:	f7f9 f8d4 	bl	80001d0 <strlen>
 8007028:	2300      	movs	r3, #0
 800702a:	930a      	str	r3, [sp, #40]	; 0x28
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	9305      	str	r3, [sp, #20]
 8007030:	f8d8 3000 	ldr.w	r3, [r8]
 8007034:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007038:	3307      	adds	r3, #7
 800703a:	f023 0307 	bic.w	r3, r3, #7
 800703e:	f103 0208 	add.w	r2, r3, #8
 8007042:	f8c8 2000 	str.w	r2, [r8]
 8007046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800704e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007052:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007056:	9307      	str	r3, [sp, #28]
 8007058:	f8cd 8018 	str.w	r8, [sp, #24]
 800705c:	ee08 0a10 	vmov	s16, r0
 8007060:	4b9f      	ldr	r3, [pc, #636]	; (80072e0 <_printf_float+0x2dc>)
 8007062:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007066:	f04f 32ff 	mov.w	r2, #4294967295
 800706a:	f7f9 fd5f 	bl	8000b2c <__aeabi_dcmpun>
 800706e:	bb88      	cbnz	r0, 80070d4 <_printf_float+0xd0>
 8007070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007074:	4b9a      	ldr	r3, [pc, #616]	; (80072e0 <_printf_float+0x2dc>)
 8007076:	f04f 32ff 	mov.w	r2, #4294967295
 800707a:	f7f9 fd39 	bl	8000af0 <__aeabi_dcmple>
 800707e:	bb48      	cbnz	r0, 80070d4 <_printf_float+0xd0>
 8007080:	2200      	movs	r2, #0
 8007082:	2300      	movs	r3, #0
 8007084:	4640      	mov	r0, r8
 8007086:	4649      	mov	r1, r9
 8007088:	f7f9 fd28 	bl	8000adc <__aeabi_dcmplt>
 800708c:	b110      	cbz	r0, 8007094 <_printf_float+0x90>
 800708e:	232d      	movs	r3, #45	; 0x2d
 8007090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007094:	4b93      	ldr	r3, [pc, #588]	; (80072e4 <_printf_float+0x2e0>)
 8007096:	4894      	ldr	r0, [pc, #592]	; (80072e8 <_printf_float+0x2e4>)
 8007098:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800709c:	bf94      	ite	ls
 800709e:	4698      	movls	r8, r3
 80070a0:	4680      	movhi	r8, r0
 80070a2:	2303      	movs	r3, #3
 80070a4:	6123      	str	r3, [r4, #16]
 80070a6:	9b05      	ldr	r3, [sp, #20]
 80070a8:	f023 0204 	bic.w	r2, r3, #4
 80070ac:	6022      	str	r2, [r4, #0]
 80070ae:	f04f 0900 	mov.w	r9, #0
 80070b2:	9700      	str	r7, [sp, #0]
 80070b4:	4633      	mov	r3, r6
 80070b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80070b8:	4621      	mov	r1, r4
 80070ba:	4628      	mov	r0, r5
 80070bc:	f000 f9d8 	bl	8007470 <_printf_common>
 80070c0:	3001      	adds	r0, #1
 80070c2:	f040 8090 	bne.w	80071e6 <_printf_float+0x1e2>
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ca:	b00d      	add	sp, #52	; 0x34
 80070cc:	ecbd 8b02 	vpop	{d8}
 80070d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d4:	4642      	mov	r2, r8
 80070d6:	464b      	mov	r3, r9
 80070d8:	4640      	mov	r0, r8
 80070da:	4649      	mov	r1, r9
 80070dc:	f7f9 fd26 	bl	8000b2c <__aeabi_dcmpun>
 80070e0:	b140      	cbz	r0, 80070f4 <_printf_float+0xf0>
 80070e2:	464b      	mov	r3, r9
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	bfbc      	itt	lt
 80070e8:	232d      	movlt	r3, #45	; 0x2d
 80070ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80070ee:	487f      	ldr	r0, [pc, #508]	; (80072ec <_printf_float+0x2e8>)
 80070f0:	4b7f      	ldr	r3, [pc, #508]	; (80072f0 <_printf_float+0x2ec>)
 80070f2:	e7d1      	b.n	8007098 <_printf_float+0x94>
 80070f4:	6863      	ldr	r3, [r4, #4]
 80070f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80070fa:	9206      	str	r2, [sp, #24]
 80070fc:	1c5a      	adds	r2, r3, #1
 80070fe:	d13f      	bne.n	8007180 <_printf_float+0x17c>
 8007100:	2306      	movs	r3, #6
 8007102:	6063      	str	r3, [r4, #4]
 8007104:	9b05      	ldr	r3, [sp, #20]
 8007106:	6861      	ldr	r1, [r4, #4]
 8007108:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800710c:	2300      	movs	r3, #0
 800710e:	9303      	str	r3, [sp, #12]
 8007110:	ab0a      	add	r3, sp, #40	; 0x28
 8007112:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007116:	ab09      	add	r3, sp, #36	; 0x24
 8007118:	ec49 8b10 	vmov	d0, r8, r9
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	6022      	str	r2, [r4, #0]
 8007120:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007124:	4628      	mov	r0, r5
 8007126:	f7ff fecd 	bl	8006ec4 <__cvt>
 800712a:	9b06      	ldr	r3, [sp, #24]
 800712c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800712e:	2b47      	cmp	r3, #71	; 0x47
 8007130:	4680      	mov	r8, r0
 8007132:	d108      	bne.n	8007146 <_printf_float+0x142>
 8007134:	1cc8      	adds	r0, r1, #3
 8007136:	db02      	blt.n	800713e <_printf_float+0x13a>
 8007138:	6863      	ldr	r3, [r4, #4]
 800713a:	4299      	cmp	r1, r3
 800713c:	dd41      	ble.n	80071c2 <_printf_float+0x1be>
 800713e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007142:	fa5f fb8b 	uxtb.w	fp, fp
 8007146:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800714a:	d820      	bhi.n	800718e <_printf_float+0x18a>
 800714c:	3901      	subs	r1, #1
 800714e:	465a      	mov	r2, fp
 8007150:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007154:	9109      	str	r1, [sp, #36]	; 0x24
 8007156:	f7ff ff17 	bl	8006f88 <__exponent>
 800715a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800715c:	1813      	adds	r3, r2, r0
 800715e:	2a01      	cmp	r2, #1
 8007160:	4681      	mov	r9, r0
 8007162:	6123      	str	r3, [r4, #16]
 8007164:	dc02      	bgt.n	800716c <_printf_float+0x168>
 8007166:	6822      	ldr	r2, [r4, #0]
 8007168:	07d2      	lsls	r2, r2, #31
 800716a:	d501      	bpl.n	8007170 <_printf_float+0x16c>
 800716c:	3301      	adds	r3, #1
 800716e:	6123      	str	r3, [r4, #16]
 8007170:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007174:	2b00      	cmp	r3, #0
 8007176:	d09c      	beq.n	80070b2 <_printf_float+0xae>
 8007178:	232d      	movs	r3, #45	; 0x2d
 800717a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800717e:	e798      	b.n	80070b2 <_printf_float+0xae>
 8007180:	9a06      	ldr	r2, [sp, #24]
 8007182:	2a47      	cmp	r2, #71	; 0x47
 8007184:	d1be      	bne.n	8007104 <_printf_float+0x100>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1bc      	bne.n	8007104 <_printf_float+0x100>
 800718a:	2301      	movs	r3, #1
 800718c:	e7b9      	b.n	8007102 <_printf_float+0xfe>
 800718e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007192:	d118      	bne.n	80071c6 <_printf_float+0x1c2>
 8007194:	2900      	cmp	r1, #0
 8007196:	6863      	ldr	r3, [r4, #4]
 8007198:	dd0b      	ble.n	80071b2 <_printf_float+0x1ae>
 800719a:	6121      	str	r1, [r4, #16]
 800719c:	b913      	cbnz	r3, 80071a4 <_printf_float+0x1a0>
 800719e:	6822      	ldr	r2, [r4, #0]
 80071a0:	07d0      	lsls	r0, r2, #31
 80071a2:	d502      	bpl.n	80071aa <_printf_float+0x1a6>
 80071a4:	3301      	adds	r3, #1
 80071a6:	440b      	add	r3, r1
 80071a8:	6123      	str	r3, [r4, #16]
 80071aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80071ac:	f04f 0900 	mov.w	r9, #0
 80071b0:	e7de      	b.n	8007170 <_printf_float+0x16c>
 80071b2:	b913      	cbnz	r3, 80071ba <_printf_float+0x1b6>
 80071b4:	6822      	ldr	r2, [r4, #0]
 80071b6:	07d2      	lsls	r2, r2, #31
 80071b8:	d501      	bpl.n	80071be <_printf_float+0x1ba>
 80071ba:	3302      	adds	r3, #2
 80071bc:	e7f4      	b.n	80071a8 <_printf_float+0x1a4>
 80071be:	2301      	movs	r3, #1
 80071c0:	e7f2      	b.n	80071a8 <_printf_float+0x1a4>
 80071c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80071c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c8:	4299      	cmp	r1, r3
 80071ca:	db05      	blt.n	80071d8 <_printf_float+0x1d4>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	6121      	str	r1, [r4, #16]
 80071d0:	07d8      	lsls	r0, r3, #31
 80071d2:	d5ea      	bpl.n	80071aa <_printf_float+0x1a6>
 80071d4:	1c4b      	adds	r3, r1, #1
 80071d6:	e7e7      	b.n	80071a8 <_printf_float+0x1a4>
 80071d8:	2900      	cmp	r1, #0
 80071da:	bfd4      	ite	le
 80071dc:	f1c1 0202 	rsble	r2, r1, #2
 80071e0:	2201      	movgt	r2, #1
 80071e2:	4413      	add	r3, r2
 80071e4:	e7e0      	b.n	80071a8 <_printf_float+0x1a4>
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	055a      	lsls	r2, r3, #21
 80071ea:	d407      	bmi.n	80071fc <_printf_float+0x1f8>
 80071ec:	6923      	ldr	r3, [r4, #16]
 80071ee:	4642      	mov	r2, r8
 80071f0:	4631      	mov	r1, r6
 80071f2:	4628      	mov	r0, r5
 80071f4:	47b8      	blx	r7
 80071f6:	3001      	adds	r0, #1
 80071f8:	d12c      	bne.n	8007254 <_printf_float+0x250>
 80071fa:	e764      	b.n	80070c6 <_printf_float+0xc2>
 80071fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007200:	f240 80e0 	bls.w	80073c4 <_printf_float+0x3c0>
 8007204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007208:	2200      	movs	r2, #0
 800720a:	2300      	movs	r3, #0
 800720c:	f7f9 fc5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007210:	2800      	cmp	r0, #0
 8007212:	d034      	beq.n	800727e <_printf_float+0x27a>
 8007214:	4a37      	ldr	r2, [pc, #220]	; (80072f4 <_printf_float+0x2f0>)
 8007216:	2301      	movs	r3, #1
 8007218:	4631      	mov	r1, r6
 800721a:	4628      	mov	r0, r5
 800721c:	47b8      	blx	r7
 800721e:	3001      	adds	r0, #1
 8007220:	f43f af51 	beq.w	80070c6 <_printf_float+0xc2>
 8007224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007228:	429a      	cmp	r2, r3
 800722a:	db02      	blt.n	8007232 <_printf_float+0x22e>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	07d8      	lsls	r0, r3, #31
 8007230:	d510      	bpl.n	8007254 <_printf_float+0x250>
 8007232:	ee18 3a10 	vmov	r3, s16
 8007236:	4652      	mov	r2, sl
 8007238:	4631      	mov	r1, r6
 800723a:	4628      	mov	r0, r5
 800723c:	47b8      	blx	r7
 800723e:	3001      	adds	r0, #1
 8007240:	f43f af41 	beq.w	80070c6 <_printf_float+0xc2>
 8007244:	f04f 0800 	mov.w	r8, #0
 8007248:	f104 091a 	add.w	r9, r4, #26
 800724c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800724e:	3b01      	subs	r3, #1
 8007250:	4543      	cmp	r3, r8
 8007252:	dc09      	bgt.n	8007268 <_printf_float+0x264>
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	079b      	lsls	r3, r3, #30
 8007258:	f100 8105 	bmi.w	8007466 <_printf_float+0x462>
 800725c:	68e0      	ldr	r0, [r4, #12]
 800725e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007260:	4298      	cmp	r0, r3
 8007262:	bfb8      	it	lt
 8007264:	4618      	movlt	r0, r3
 8007266:	e730      	b.n	80070ca <_printf_float+0xc6>
 8007268:	2301      	movs	r3, #1
 800726a:	464a      	mov	r2, r9
 800726c:	4631      	mov	r1, r6
 800726e:	4628      	mov	r0, r5
 8007270:	47b8      	blx	r7
 8007272:	3001      	adds	r0, #1
 8007274:	f43f af27 	beq.w	80070c6 <_printf_float+0xc2>
 8007278:	f108 0801 	add.w	r8, r8, #1
 800727c:	e7e6      	b.n	800724c <_printf_float+0x248>
 800727e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007280:	2b00      	cmp	r3, #0
 8007282:	dc39      	bgt.n	80072f8 <_printf_float+0x2f4>
 8007284:	4a1b      	ldr	r2, [pc, #108]	; (80072f4 <_printf_float+0x2f0>)
 8007286:	2301      	movs	r3, #1
 8007288:	4631      	mov	r1, r6
 800728a:	4628      	mov	r0, r5
 800728c:	47b8      	blx	r7
 800728e:	3001      	adds	r0, #1
 8007290:	f43f af19 	beq.w	80070c6 <_printf_float+0xc2>
 8007294:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007298:	4313      	orrs	r3, r2
 800729a:	d102      	bne.n	80072a2 <_printf_float+0x29e>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	07d9      	lsls	r1, r3, #31
 80072a0:	d5d8      	bpl.n	8007254 <_printf_float+0x250>
 80072a2:	ee18 3a10 	vmov	r3, s16
 80072a6:	4652      	mov	r2, sl
 80072a8:	4631      	mov	r1, r6
 80072aa:	4628      	mov	r0, r5
 80072ac:	47b8      	blx	r7
 80072ae:	3001      	adds	r0, #1
 80072b0:	f43f af09 	beq.w	80070c6 <_printf_float+0xc2>
 80072b4:	f04f 0900 	mov.w	r9, #0
 80072b8:	f104 0a1a 	add.w	sl, r4, #26
 80072bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072be:	425b      	negs	r3, r3
 80072c0:	454b      	cmp	r3, r9
 80072c2:	dc01      	bgt.n	80072c8 <_printf_float+0x2c4>
 80072c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072c6:	e792      	b.n	80071ee <_printf_float+0x1ea>
 80072c8:	2301      	movs	r3, #1
 80072ca:	4652      	mov	r2, sl
 80072cc:	4631      	mov	r1, r6
 80072ce:	4628      	mov	r0, r5
 80072d0:	47b8      	blx	r7
 80072d2:	3001      	adds	r0, #1
 80072d4:	f43f aef7 	beq.w	80070c6 <_printf_float+0xc2>
 80072d8:	f109 0901 	add.w	r9, r9, #1
 80072dc:	e7ee      	b.n	80072bc <_printf_float+0x2b8>
 80072de:	bf00      	nop
 80072e0:	7fefffff 	.word	0x7fefffff
 80072e4:	0800c48c 	.word	0x0800c48c
 80072e8:	0800c490 	.word	0x0800c490
 80072ec:	0800c498 	.word	0x0800c498
 80072f0:	0800c494 	.word	0x0800c494
 80072f4:	0800c49c 	.word	0x0800c49c
 80072f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072fc:	429a      	cmp	r2, r3
 80072fe:	bfa8      	it	ge
 8007300:	461a      	movge	r2, r3
 8007302:	2a00      	cmp	r2, #0
 8007304:	4691      	mov	r9, r2
 8007306:	dc37      	bgt.n	8007378 <_printf_float+0x374>
 8007308:	f04f 0b00 	mov.w	fp, #0
 800730c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007310:	f104 021a 	add.w	r2, r4, #26
 8007314:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007316:	9305      	str	r3, [sp, #20]
 8007318:	eba3 0309 	sub.w	r3, r3, r9
 800731c:	455b      	cmp	r3, fp
 800731e:	dc33      	bgt.n	8007388 <_printf_float+0x384>
 8007320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007324:	429a      	cmp	r2, r3
 8007326:	db3b      	blt.n	80073a0 <_printf_float+0x39c>
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	07da      	lsls	r2, r3, #31
 800732c:	d438      	bmi.n	80073a0 <_printf_float+0x39c>
 800732e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007330:	9a05      	ldr	r2, [sp, #20]
 8007332:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007334:	1a9a      	subs	r2, r3, r2
 8007336:	eba3 0901 	sub.w	r9, r3, r1
 800733a:	4591      	cmp	r9, r2
 800733c:	bfa8      	it	ge
 800733e:	4691      	movge	r9, r2
 8007340:	f1b9 0f00 	cmp.w	r9, #0
 8007344:	dc35      	bgt.n	80073b2 <_printf_float+0x3ae>
 8007346:	f04f 0800 	mov.w	r8, #0
 800734a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800734e:	f104 0a1a 	add.w	sl, r4, #26
 8007352:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007356:	1a9b      	subs	r3, r3, r2
 8007358:	eba3 0309 	sub.w	r3, r3, r9
 800735c:	4543      	cmp	r3, r8
 800735e:	f77f af79 	ble.w	8007254 <_printf_float+0x250>
 8007362:	2301      	movs	r3, #1
 8007364:	4652      	mov	r2, sl
 8007366:	4631      	mov	r1, r6
 8007368:	4628      	mov	r0, r5
 800736a:	47b8      	blx	r7
 800736c:	3001      	adds	r0, #1
 800736e:	f43f aeaa 	beq.w	80070c6 <_printf_float+0xc2>
 8007372:	f108 0801 	add.w	r8, r8, #1
 8007376:	e7ec      	b.n	8007352 <_printf_float+0x34e>
 8007378:	4613      	mov	r3, r2
 800737a:	4631      	mov	r1, r6
 800737c:	4642      	mov	r2, r8
 800737e:	4628      	mov	r0, r5
 8007380:	47b8      	blx	r7
 8007382:	3001      	adds	r0, #1
 8007384:	d1c0      	bne.n	8007308 <_printf_float+0x304>
 8007386:	e69e      	b.n	80070c6 <_printf_float+0xc2>
 8007388:	2301      	movs	r3, #1
 800738a:	4631      	mov	r1, r6
 800738c:	4628      	mov	r0, r5
 800738e:	9205      	str	r2, [sp, #20]
 8007390:	47b8      	blx	r7
 8007392:	3001      	adds	r0, #1
 8007394:	f43f ae97 	beq.w	80070c6 <_printf_float+0xc2>
 8007398:	9a05      	ldr	r2, [sp, #20]
 800739a:	f10b 0b01 	add.w	fp, fp, #1
 800739e:	e7b9      	b.n	8007314 <_printf_float+0x310>
 80073a0:	ee18 3a10 	vmov	r3, s16
 80073a4:	4652      	mov	r2, sl
 80073a6:	4631      	mov	r1, r6
 80073a8:	4628      	mov	r0, r5
 80073aa:	47b8      	blx	r7
 80073ac:	3001      	adds	r0, #1
 80073ae:	d1be      	bne.n	800732e <_printf_float+0x32a>
 80073b0:	e689      	b.n	80070c6 <_printf_float+0xc2>
 80073b2:	9a05      	ldr	r2, [sp, #20]
 80073b4:	464b      	mov	r3, r9
 80073b6:	4442      	add	r2, r8
 80073b8:	4631      	mov	r1, r6
 80073ba:	4628      	mov	r0, r5
 80073bc:	47b8      	blx	r7
 80073be:	3001      	adds	r0, #1
 80073c0:	d1c1      	bne.n	8007346 <_printf_float+0x342>
 80073c2:	e680      	b.n	80070c6 <_printf_float+0xc2>
 80073c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073c6:	2a01      	cmp	r2, #1
 80073c8:	dc01      	bgt.n	80073ce <_printf_float+0x3ca>
 80073ca:	07db      	lsls	r3, r3, #31
 80073cc:	d538      	bpl.n	8007440 <_printf_float+0x43c>
 80073ce:	2301      	movs	r3, #1
 80073d0:	4642      	mov	r2, r8
 80073d2:	4631      	mov	r1, r6
 80073d4:	4628      	mov	r0, r5
 80073d6:	47b8      	blx	r7
 80073d8:	3001      	adds	r0, #1
 80073da:	f43f ae74 	beq.w	80070c6 <_printf_float+0xc2>
 80073de:	ee18 3a10 	vmov	r3, s16
 80073e2:	4652      	mov	r2, sl
 80073e4:	4631      	mov	r1, r6
 80073e6:	4628      	mov	r0, r5
 80073e8:	47b8      	blx	r7
 80073ea:	3001      	adds	r0, #1
 80073ec:	f43f ae6b 	beq.w	80070c6 <_printf_float+0xc2>
 80073f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073f4:	2200      	movs	r2, #0
 80073f6:	2300      	movs	r3, #0
 80073f8:	f7f9 fb66 	bl	8000ac8 <__aeabi_dcmpeq>
 80073fc:	b9d8      	cbnz	r0, 8007436 <_printf_float+0x432>
 80073fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007400:	f108 0201 	add.w	r2, r8, #1
 8007404:	3b01      	subs	r3, #1
 8007406:	4631      	mov	r1, r6
 8007408:	4628      	mov	r0, r5
 800740a:	47b8      	blx	r7
 800740c:	3001      	adds	r0, #1
 800740e:	d10e      	bne.n	800742e <_printf_float+0x42a>
 8007410:	e659      	b.n	80070c6 <_printf_float+0xc2>
 8007412:	2301      	movs	r3, #1
 8007414:	4652      	mov	r2, sl
 8007416:	4631      	mov	r1, r6
 8007418:	4628      	mov	r0, r5
 800741a:	47b8      	blx	r7
 800741c:	3001      	adds	r0, #1
 800741e:	f43f ae52 	beq.w	80070c6 <_printf_float+0xc2>
 8007422:	f108 0801 	add.w	r8, r8, #1
 8007426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007428:	3b01      	subs	r3, #1
 800742a:	4543      	cmp	r3, r8
 800742c:	dcf1      	bgt.n	8007412 <_printf_float+0x40e>
 800742e:	464b      	mov	r3, r9
 8007430:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007434:	e6dc      	b.n	80071f0 <_printf_float+0x1ec>
 8007436:	f04f 0800 	mov.w	r8, #0
 800743a:	f104 0a1a 	add.w	sl, r4, #26
 800743e:	e7f2      	b.n	8007426 <_printf_float+0x422>
 8007440:	2301      	movs	r3, #1
 8007442:	4642      	mov	r2, r8
 8007444:	e7df      	b.n	8007406 <_printf_float+0x402>
 8007446:	2301      	movs	r3, #1
 8007448:	464a      	mov	r2, r9
 800744a:	4631      	mov	r1, r6
 800744c:	4628      	mov	r0, r5
 800744e:	47b8      	blx	r7
 8007450:	3001      	adds	r0, #1
 8007452:	f43f ae38 	beq.w	80070c6 <_printf_float+0xc2>
 8007456:	f108 0801 	add.w	r8, r8, #1
 800745a:	68e3      	ldr	r3, [r4, #12]
 800745c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800745e:	1a5b      	subs	r3, r3, r1
 8007460:	4543      	cmp	r3, r8
 8007462:	dcf0      	bgt.n	8007446 <_printf_float+0x442>
 8007464:	e6fa      	b.n	800725c <_printf_float+0x258>
 8007466:	f04f 0800 	mov.w	r8, #0
 800746a:	f104 0919 	add.w	r9, r4, #25
 800746e:	e7f4      	b.n	800745a <_printf_float+0x456>

08007470 <_printf_common>:
 8007470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007474:	4616      	mov	r6, r2
 8007476:	4699      	mov	r9, r3
 8007478:	688a      	ldr	r2, [r1, #8]
 800747a:	690b      	ldr	r3, [r1, #16]
 800747c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007480:	4293      	cmp	r3, r2
 8007482:	bfb8      	it	lt
 8007484:	4613      	movlt	r3, r2
 8007486:	6033      	str	r3, [r6, #0]
 8007488:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800748c:	4607      	mov	r7, r0
 800748e:	460c      	mov	r4, r1
 8007490:	b10a      	cbz	r2, 8007496 <_printf_common+0x26>
 8007492:	3301      	adds	r3, #1
 8007494:	6033      	str	r3, [r6, #0]
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	0699      	lsls	r1, r3, #26
 800749a:	bf42      	ittt	mi
 800749c:	6833      	ldrmi	r3, [r6, #0]
 800749e:	3302      	addmi	r3, #2
 80074a0:	6033      	strmi	r3, [r6, #0]
 80074a2:	6825      	ldr	r5, [r4, #0]
 80074a4:	f015 0506 	ands.w	r5, r5, #6
 80074a8:	d106      	bne.n	80074b8 <_printf_common+0x48>
 80074aa:	f104 0a19 	add.w	sl, r4, #25
 80074ae:	68e3      	ldr	r3, [r4, #12]
 80074b0:	6832      	ldr	r2, [r6, #0]
 80074b2:	1a9b      	subs	r3, r3, r2
 80074b4:	42ab      	cmp	r3, r5
 80074b6:	dc26      	bgt.n	8007506 <_printf_common+0x96>
 80074b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074bc:	1e13      	subs	r3, r2, #0
 80074be:	6822      	ldr	r2, [r4, #0]
 80074c0:	bf18      	it	ne
 80074c2:	2301      	movne	r3, #1
 80074c4:	0692      	lsls	r2, r2, #26
 80074c6:	d42b      	bmi.n	8007520 <_printf_common+0xb0>
 80074c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074cc:	4649      	mov	r1, r9
 80074ce:	4638      	mov	r0, r7
 80074d0:	47c0      	blx	r8
 80074d2:	3001      	adds	r0, #1
 80074d4:	d01e      	beq.n	8007514 <_printf_common+0xa4>
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	68e5      	ldr	r5, [r4, #12]
 80074da:	6832      	ldr	r2, [r6, #0]
 80074dc:	f003 0306 	and.w	r3, r3, #6
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	bf08      	it	eq
 80074e4:	1aad      	subeq	r5, r5, r2
 80074e6:	68a3      	ldr	r3, [r4, #8]
 80074e8:	6922      	ldr	r2, [r4, #16]
 80074ea:	bf0c      	ite	eq
 80074ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074f0:	2500      	movne	r5, #0
 80074f2:	4293      	cmp	r3, r2
 80074f4:	bfc4      	itt	gt
 80074f6:	1a9b      	subgt	r3, r3, r2
 80074f8:	18ed      	addgt	r5, r5, r3
 80074fa:	2600      	movs	r6, #0
 80074fc:	341a      	adds	r4, #26
 80074fe:	42b5      	cmp	r5, r6
 8007500:	d11a      	bne.n	8007538 <_printf_common+0xc8>
 8007502:	2000      	movs	r0, #0
 8007504:	e008      	b.n	8007518 <_printf_common+0xa8>
 8007506:	2301      	movs	r3, #1
 8007508:	4652      	mov	r2, sl
 800750a:	4649      	mov	r1, r9
 800750c:	4638      	mov	r0, r7
 800750e:	47c0      	blx	r8
 8007510:	3001      	adds	r0, #1
 8007512:	d103      	bne.n	800751c <_printf_common+0xac>
 8007514:	f04f 30ff 	mov.w	r0, #4294967295
 8007518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800751c:	3501      	adds	r5, #1
 800751e:	e7c6      	b.n	80074ae <_printf_common+0x3e>
 8007520:	18e1      	adds	r1, r4, r3
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	2030      	movs	r0, #48	; 0x30
 8007526:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800752a:	4422      	add	r2, r4
 800752c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007534:	3302      	adds	r3, #2
 8007536:	e7c7      	b.n	80074c8 <_printf_common+0x58>
 8007538:	2301      	movs	r3, #1
 800753a:	4622      	mov	r2, r4
 800753c:	4649      	mov	r1, r9
 800753e:	4638      	mov	r0, r7
 8007540:	47c0      	blx	r8
 8007542:	3001      	adds	r0, #1
 8007544:	d0e6      	beq.n	8007514 <_printf_common+0xa4>
 8007546:	3601      	adds	r6, #1
 8007548:	e7d9      	b.n	80074fe <_printf_common+0x8e>
	...

0800754c <_printf_i>:
 800754c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007550:	7e0f      	ldrb	r7, [r1, #24]
 8007552:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007554:	2f78      	cmp	r7, #120	; 0x78
 8007556:	4691      	mov	r9, r2
 8007558:	4680      	mov	r8, r0
 800755a:	460c      	mov	r4, r1
 800755c:	469a      	mov	sl, r3
 800755e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007562:	d807      	bhi.n	8007574 <_printf_i+0x28>
 8007564:	2f62      	cmp	r7, #98	; 0x62
 8007566:	d80a      	bhi.n	800757e <_printf_i+0x32>
 8007568:	2f00      	cmp	r7, #0
 800756a:	f000 80d8 	beq.w	800771e <_printf_i+0x1d2>
 800756e:	2f58      	cmp	r7, #88	; 0x58
 8007570:	f000 80a3 	beq.w	80076ba <_printf_i+0x16e>
 8007574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800757c:	e03a      	b.n	80075f4 <_printf_i+0xa8>
 800757e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007582:	2b15      	cmp	r3, #21
 8007584:	d8f6      	bhi.n	8007574 <_printf_i+0x28>
 8007586:	a101      	add	r1, pc, #4	; (adr r1, 800758c <_printf_i+0x40>)
 8007588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800758c:	080075e5 	.word	0x080075e5
 8007590:	080075f9 	.word	0x080075f9
 8007594:	08007575 	.word	0x08007575
 8007598:	08007575 	.word	0x08007575
 800759c:	08007575 	.word	0x08007575
 80075a0:	08007575 	.word	0x08007575
 80075a4:	080075f9 	.word	0x080075f9
 80075a8:	08007575 	.word	0x08007575
 80075ac:	08007575 	.word	0x08007575
 80075b0:	08007575 	.word	0x08007575
 80075b4:	08007575 	.word	0x08007575
 80075b8:	08007705 	.word	0x08007705
 80075bc:	08007629 	.word	0x08007629
 80075c0:	080076e7 	.word	0x080076e7
 80075c4:	08007575 	.word	0x08007575
 80075c8:	08007575 	.word	0x08007575
 80075cc:	08007727 	.word	0x08007727
 80075d0:	08007575 	.word	0x08007575
 80075d4:	08007629 	.word	0x08007629
 80075d8:	08007575 	.word	0x08007575
 80075dc:	08007575 	.word	0x08007575
 80075e0:	080076ef 	.word	0x080076ef
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	1d1a      	adds	r2, r3, #4
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	602a      	str	r2, [r5, #0]
 80075ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075f4:	2301      	movs	r3, #1
 80075f6:	e0a3      	b.n	8007740 <_printf_i+0x1f4>
 80075f8:	6820      	ldr	r0, [r4, #0]
 80075fa:	6829      	ldr	r1, [r5, #0]
 80075fc:	0606      	lsls	r6, r0, #24
 80075fe:	f101 0304 	add.w	r3, r1, #4
 8007602:	d50a      	bpl.n	800761a <_printf_i+0xce>
 8007604:	680e      	ldr	r6, [r1, #0]
 8007606:	602b      	str	r3, [r5, #0]
 8007608:	2e00      	cmp	r6, #0
 800760a:	da03      	bge.n	8007614 <_printf_i+0xc8>
 800760c:	232d      	movs	r3, #45	; 0x2d
 800760e:	4276      	negs	r6, r6
 8007610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007614:	485e      	ldr	r0, [pc, #376]	; (8007790 <_printf_i+0x244>)
 8007616:	230a      	movs	r3, #10
 8007618:	e019      	b.n	800764e <_printf_i+0x102>
 800761a:	680e      	ldr	r6, [r1, #0]
 800761c:	602b      	str	r3, [r5, #0]
 800761e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007622:	bf18      	it	ne
 8007624:	b236      	sxthne	r6, r6
 8007626:	e7ef      	b.n	8007608 <_printf_i+0xbc>
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	6820      	ldr	r0, [r4, #0]
 800762c:	1d19      	adds	r1, r3, #4
 800762e:	6029      	str	r1, [r5, #0]
 8007630:	0601      	lsls	r1, r0, #24
 8007632:	d501      	bpl.n	8007638 <_printf_i+0xec>
 8007634:	681e      	ldr	r6, [r3, #0]
 8007636:	e002      	b.n	800763e <_printf_i+0xf2>
 8007638:	0646      	lsls	r6, r0, #25
 800763a:	d5fb      	bpl.n	8007634 <_printf_i+0xe8>
 800763c:	881e      	ldrh	r6, [r3, #0]
 800763e:	4854      	ldr	r0, [pc, #336]	; (8007790 <_printf_i+0x244>)
 8007640:	2f6f      	cmp	r7, #111	; 0x6f
 8007642:	bf0c      	ite	eq
 8007644:	2308      	moveq	r3, #8
 8007646:	230a      	movne	r3, #10
 8007648:	2100      	movs	r1, #0
 800764a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800764e:	6865      	ldr	r5, [r4, #4]
 8007650:	60a5      	str	r5, [r4, #8]
 8007652:	2d00      	cmp	r5, #0
 8007654:	bfa2      	ittt	ge
 8007656:	6821      	ldrge	r1, [r4, #0]
 8007658:	f021 0104 	bicge.w	r1, r1, #4
 800765c:	6021      	strge	r1, [r4, #0]
 800765e:	b90e      	cbnz	r6, 8007664 <_printf_i+0x118>
 8007660:	2d00      	cmp	r5, #0
 8007662:	d04d      	beq.n	8007700 <_printf_i+0x1b4>
 8007664:	4615      	mov	r5, r2
 8007666:	fbb6 f1f3 	udiv	r1, r6, r3
 800766a:	fb03 6711 	mls	r7, r3, r1, r6
 800766e:	5dc7      	ldrb	r7, [r0, r7]
 8007670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007674:	4637      	mov	r7, r6
 8007676:	42bb      	cmp	r3, r7
 8007678:	460e      	mov	r6, r1
 800767a:	d9f4      	bls.n	8007666 <_printf_i+0x11a>
 800767c:	2b08      	cmp	r3, #8
 800767e:	d10b      	bne.n	8007698 <_printf_i+0x14c>
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	07de      	lsls	r6, r3, #31
 8007684:	d508      	bpl.n	8007698 <_printf_i+0x14c>
 8007686:	6923      	ldr	r3, [r4, #16]
 8007688:	6861      	ldr	r1, [r4, #4]
 800768a:	4299      	cmp	r1, r3
 800768c:	bfde      	ittt	le
 800768e:	2330      	movle	r3, #48	; 0x30
 8007690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007694:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007698:	1b52      	subs	r2, r2, r5
 800769a:	6122      	str	r2, [r4, #16]
 800769c:	f8cd a000 	str.w	sl, [sp]
 80076a0:	464b      	mov	r3, r9
 80076a2:	aa03      	add	r2, sp, #12
 80076a4:	4621      	mov	r1, r4
 80076a6:	4640      	mov	r0, r8
 80076a8:	f7ff fee2 	bl	8007470 <_printf_common>
 80076ac:	3001      	adds	r0, #1
 80076ae:	d14c      	bne.n	800774a <_printf_i+0x1fe>
 80076b0:	f04f 30ff 	mov.w	r0, #4294967295
 80076b4:	b004      	add	sp, #16
 80076b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ba:	4835      	ldr	r0, [pc, #212]	; (8007790 <_printf_i+0x244>)
 80076bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80076c0:	6829      	ldr	r1, [r5, #0]
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80076c8:	6029      	str	r1, [r5, #0]
 80076ca:	061d      	lsls	r5, r3, #24
 80076cc:	d514      	bpl.n	80076f8 <_printf_i+0x1ac>
 80076ce:	07df      	lsls	r7, r3, #31
 80076d0:	bf44      	itt	mi
 80076d2:	f043 0320 	orrmi.w	r3, r3, #32
 80076d6:	6023      	strmi	r3, [r4, #0]
 80076d8:	b91e      	cbnz	r6, 80076e2 <_printf_i+0x196>
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	f023 0320 	bic.w	r3, r3, #32
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	2310      	movs	r3, #16
 80076e4:	e7b0      	b.n	8007648 <_printf_i+0xfc>
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	f043 0320 	orr.w	r3, r3, #32
 80076ec:	6023      	str	r3, [r4, #0]
 80076ee:	2378      	movs	r3, #120	; 0x78
 80076f0:	4828      	ldr	r0, [pc, #160]	; (8007794 <_printf_i+0x248>)
 80076f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076f6:	e7e3      	b.n	80076c0 <_printf_i+0x174>
 80076f8:	0659      	lsls	r1, r3, #25
 80076fa:	bf48      	it	mi
 80076fc:	b2b6      	uxthmi	r6, r6
 80076fe:	e7e6      	b.n	80076ce <_printf_i+0x182>
 8007700:	4615      	mov	r5, r2
 8007702:	e7bb      	b.n	800767c <_printf_i+0x130>
 8007704:	682b      	ldr	r3, [r5, #0]
 8007706:	6826      	ldr	r6, [r4, #0]
 8007708:	6961      	ldr	r1, [r4, #20]
 800770a:	1d18      	adds	r0, r3, #4
 800770c:	6028      	str	r0, [r5, #0]
 800770e:	0635      	lsls	r5, r6, #24
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	d501      	bpl.n	8007718 <_printf_i+0x1cc>
 8007714:	6019      	str	r1, [r3, #0]
 8007716:	e002      	b.n	800771e <_printf_i+0x1d2>
 8007718:	0670      	lsls	r0, r6, #25
 800771a:	d5fb      	bpl.n	8007714 <_printf_i+0x1c8>
 800771c:	8019      	strh	r1, [r3, #0]
 800771e:	2300      	movs	r3, #0
 8007720:	6123      	str	r3, [r4, #16]
 8007722:	4615      	mov	r5, r2
 8007724:	e7ba      	b.n	800769c <_printf_i+0x150>
 8007726:	682b      	ldr	r3, [r5, #0]
 8007728:	1d1a      	adds	r2, r3, #4
 800772a:	602a      	str	r2, [r5, #0]
 800772c:	681d      	ldr	r5, [r3, #0]
 800772e:	6862      	ldr	r2, [r4, #4]
 8007730:	2100      	movs	r1, #0
 8007732:	4628      	mov	r0, r5
 8007734:	f7f8 fd54 	bl	80001e0 <memchr>
 8007738:	b108      	cbz	r0, 800773e <_printf_i+0x1f2>
 800773a:	1b40      	subs	r0, r0, r5
 800773c:	6060      	str	r0, [r4, #4]
 800773e:	6863      	ldr	r3, [r4, #4]
 8007740:	6123      	str	r3, [r4, #16]
 8007742:	2300      	movs	r3, #0
 8007744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007748:	e7a8      	b.n	800769c <_printf_i+0x150>
 800774a:	6923      	ldr	r3, [r4, #16]
 800774c:	462a      	mov	r2, r5
 800774e:	4649      	mov	r1, r9
 8007750:	4640      	mov	r0, r8
 8007752:	47d0      	blx	sl
 8007754:	3001      	adds	r0, #1
 8007756:	d0ab      	beq.n	80076b0 <_printf_i+0x164>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	079b      	lsls	r3, r3, #30
 800775c:	d413      	bmi.n	8007786 <_printf_i+0x23a>
 800775e:	68e0      	ldr	r0, [r4, #12]
 8007760:	9b03      	ldr	r3, [sp, #12]
 8007762:	4298      	cmp	r0, r3
 8007764:	bfb8      	it	lt
 8007766:	4618      	movlt	r0, r3
 8007768:	e7a4      	b.n	80076b4 <_printf_i+0x168>
 800776a:	2301      	movs	r3, #1
 800776c:	4632      	mov	r2, r6
 800776e:	4649      	mov	r1, r9
 8007770:	4640      	mov	r0, r8
 8007772:	47d0      	blx	sl
 8007774:	3001      	adds	r0, #1
 8007776:	d09b      	beq.n	80076b0 <_printf_i+0x164>
 8007778:	3501      	adds	r5, #1
 800777a:	68e3      	ldr	r3, [r4, #12]
 800777c:	9903      	ldr	r1, [sp, #12]
 800777e:	1a5b      	subs	r3, r3, r1
 8007780:	42ab      	cmp	r3, r5
 8007782:	dcf2      	bgt.n	800776a <_printf_i+0x21e>
 8007784:	e7eb      	b.n	800775e <_printf_i+0x212>
 8007786:	2500      	movs	r5, #0
 8007788:	f104 0619 	add.w	r6, r4, #25
 800778c:	e7f5      	b.n	800777a <_printf_i+0x22e>
 800778e:	bf00      	nop
 8007790:	0800c49e 	.word	0x0800c49e
 8007794:	0800c4af 	.word	0x0800c4af

08007798 <_scanf_float>:
 8007798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779c:	b087      	sub	sp, #28
 800779e:	4617      	mov	r7, r2
 80077a0:	9303      	str	r3, [sp, #12]
 80077a2:	688b      	ldr	r3, [r1, #8]
 80077a4:	1e5a      	subs	r2, r3, #1
 80077a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80077aa:	bf83      	ittte	hi
 80077ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80077b0:	195b      	addhi	r3, r3, r5
 80077b2:	9302      	strhi	r3, [sp, #8]
 80077b4:	2300      	movls	r3, #0
 80077b6:	bf86      	itte	hi
 80077b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80077bc:	608b      	strhi	r3, [r1, #8]
 80077be:	9302      	strls	r3, [sp, #8]
 80077c0:	680b      	ldr	r3, [r1, #0]
 80077c2:	468b      	mov	fp, r1
 80077c4:	2500      	movs	r5, #0
 80077c6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80077ca:	f84b 3b1c 	str.w	r3, [fp], #28
 80077ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80077d2:	4680      	mov	r8, r0
 80077d4:	460c      	mov	r4, r1
 80077d6:	465e      	mov	r6, fp
 80077d8:	46aa      	mov	sl, r5
 80077da:	46a9      	mov	r9, r5
 80077dc:	9501      	str	r5, [sp, #4]
 80077de:	68a2      	ldr	r2, [r4, #8]
 80077e0:	b152      	cbz	r2, 80077f8 <_scanf_float+0x60>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	2b4e      	cmp	r3, #78	; 0x4e
 80077e8:	d864      	bhi.n	80078b4 <_scanf_float+0x11c>
 80077ea:	2b40      	cmp	r3, #64	; 0x40
 80077ec:	d83c      	bhi.n	8007868 <_scanf_float+0xd0>
 80077ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80077f2:	b2c8      	uxtb	r0, r1
 80077f4:	280e      	cmp	r0, #14
 80077f6:	d93a      	bls.n	800786e <_scanf_float+0xd6>
 80077f8:	f1b9 0f00 	cmp.w	r9, #0
 80077fc:	d003      	beq.n	8007806 <_scanf_float+0x6e>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	f10a 3aff 	add.w	sl, sl, #4294967295
 800780a:	f1ba 0f01 	cmp.w	sl, #1
 800780e:	f200 8113 	bhi.w	8007a38 <_scanf_float+0x2a0>
 8007812:	455e      	cmp	r6, fp
 8007814:	f200 8105 	bhi.w	8007a22 <_scanf_float+0x28a>
 8007818:	2501      	movs	r5, #1
 800781a:	4628      	mov	r0, r5
 800781c:	b007      	add	sp, #28
 800781e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007822:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007826:	2a0d      	cmp	r2, #13
 8007828:	d8e6      	bhi.n	80077f8 <_scanf_float+0x60>
 800782a:	a101      	add	r1, pc, #4	; (adr r1, 8007830 <_scanf_float+0x98>)
 800782c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007830:	0800796f 	.word	0x0800796f
 8007834:	080077f9 	.word	0x080077f9
 8007838:	080077f9 	.word	0x080077f9
 800783c:	080077f9 	.word	0x080077f9
 8007840:	080079cf 	.word	0x080079cf
 8007844:	080079a7 	.word	0x080079a7
 8007848:	080077f9 	.word	0x080077f9
 800784c:	080077f9 	.word	0x080077f9
 8007850:	0800797d 	.word	0x0800797d
 8007854:	080077f9 	.word	0x080077f9
 8007858:	080077f9 	.word	0x080077f9
 800785c:	080077f9 	.word	0x080077f9
 8007860:	080077f9 	.word	0x080077f9
 8007864:	08007935 	.word	0x08007935
 8007868:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800786c:	e7db      	b.n	8007826 <_scanf_float+0x8e>
 800786e:	290e      	cmp	r1, #14
 8007870:	d8c2      	bhi.n	80077f8 <_scanf_float+0x60>
 8007872:	a001      	add	r0, pc, #4	; (adr r0, 8007878 <_scanf_float+0xe0>)
 8007874:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007878:	08007927 	.word	0x08007927
 800787c:	080077f9 	.word	0x080077f9
 8007880:	08007927 	.word	0x08007927
 8007884:	080079bb 	.word	0x080079bb
 8007888:	080077f9 	.word	0x080077f9
 800788c:	080078d5 	.word	0x080078d5
 8007890:	08007911 	.word	0x08007911
 8007894:	08007911 	.word	0x08007911
 8007898:	08007911 	.word	0x08007911
 800789c:	08007911 	.word	0x08007911
 80078a0:	08007911 	.word	0x08007911
 80078a4:	08007911 	.word	0x08007911
 80078a8:	08007911 	.word	0x08007911
 80078ac:	08007911 	.word	0x08007911
 80078b0:	08007911 	.word	0x08007911
 80078b4:	2b6e      	cmp	r3, #110	; 0x6e
 80078b6:	d809      	bhi.n	80078cc <_scanf_float+0x134>
 80078b8:	2b60      	cmp	r3, #96	; 0x60
 80078ba:	d8b2      	bhi.n	8007822 <_scanf_float+0x8a>
 80078bc:	2b54      	cmp	r3, #84	; 0x54
 80078be:	d077      	beq.n	80079b0 <_scanf_float+0x218>
 80078c0:	2b59      	cmp	r3, #89	; 0x59
 80078c2:	d199      	bne.n	80077f8 <_scanf_float+0x60>
 80078c4:	2d07      	cmp	r5, #7
 80078c6:	d197      	bne.n	80077f8 <_scanf_float+0x60>
 80078c8:	2508      	movs	r5, #8
 80078ca:	e029      	b.n	8007920 <_scanf_float+0x188>
 80078cc:	2b74      	cmp	r3, #116	; 0x74
 80078ce:	d06f      	beq.n	80079b0 <_scanf_float+0x218>
 80078d0:	2b79      	cmp	r3, #121	; 0x79
 80078d2:	e7f6      	b.n	80078c2 <_scanf_float+0x12a>
 80078d4:	6821      	ldr	r1, [r4, #0]
 80078d6:	05c8      	lsls	r0, r1, #23
 80078d8:	d51a      	bpl.n	8007910 <_scanf_float+0x178>
 80078da:	9b02      	ldr	r3, [sp, #8]
 80078dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80078e0:	6021      	str	r1, [r4, #0]
 80078e2:	f109 0901 	add.w	r9, r9, #1
 80078e6:	b11b      	cbz	r3, 80078f0 <_scanf_float+0x158>
 80078e8:	3b01      	subs	r3, #1
 80078ea:	3201      	adds	r2, #1
 80078ec:	9302      	str	r3, [sp, #8]
 80078ee:	60a2      	str	r2, [r4, #8]
 80078f0:	68a3      	ldr	r3, [r4, #8]
 80078f2:	3b01      	subs	r3, #1
 80078f4:	60a3      	str	r3, [r4, #8]
 80078f6:	6923      	ldr	r3, [r4, #16]
 80078f8:	3301      	adds	r3, #1
 80078fa:	6123      	str	r3, [r4, #16]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3b01      	subs	r3, #1
 8007900:	2b00      	cmp	r3, #0
 8007902:	607b      	str	r3, [r7, #4]
 8007904:	f340 8084 	ble.w	8007a10 <_scanf_float+0x278>
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	3301      	adds	r3, #1
 800790c:	603b      	str	r3, [r7, #0]
 800790e:	e766      	b.n	80077de <_scanf_float+0x46>
 8007910:	eb1a 0f05 	cmn.w	sl, r5
 8007914:	f47f af70 	bne.w	80077f8 <_scanf_float+0x60>
 8007918:	6822      	ldr	r2, [r4, #0]
 800791a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800791e:	6022      	str	r2, [r4, #0]
 8007920:	f806 3b01 	strb.w	r3, [r6], #1
 8007924:	e7e4      	b.n	80078f0 <_scanf_float+0x158>
 8007926:	6822      	ldr	r2, [r4, #0]
 8007928:	0610      	lsls	r0, r2, #24
 800792a:	f57f af65 	bpl.w	80077f8 <_scanf_float+0x60>
 800792e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007932:	e7f4      	b.n	800791e <_scanf_float+0x186>
 8007934:	f1ba 0f00 	cmp.w	sl, #0
 8007938:	d10e      	bne.n	8007958 <_scanf_float+0x1c0>
 800793a:	f1b9 0f00 	cmp.w	r9, #0
 800793e:	d10e      	bne.n	800795e <_scanf_float+0x1c6>
 8007940:	6822      	ldr	r2, [r4, #0]
 8007942:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007946:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800794a:	d108      	bne.n	800795e <_scanf_float+0x1c6>
 800794c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007950:	6022      	str	r2, [r4, #0]
 8007952:	f04f 0a01 	mov.w	sl, #1
 8007956:	e7e3      	b.n	8007920 <_scanf_float+0x188>
 8007958:	f1ba 0f02 	cmp.w	sl, #2
 800795c:	d055      	beq.n	8007a0a <_scanf_float+0x272>
 800795e:	2d01      	cmp	r5, #1
 8007960:	d002      	beq.n	8007968 <_scanf_float+0x1d0>
 8007962:	2d04      	cmp	r5, #4
 8007964:	f47f af48 	bne.w	80077f8 <_scanf_float+0x60>
 8007968:	3501      	adds	r5, #1
 800796a:	b2ed      	uxtb	r5, r5
 800796c:	e7d8      	b.n	8007920 <_scanf_float+0x188>
 800796e:	f1ba 0f01 	cmp.w	sl, #1
 8007972:	f47f af41 	bne.w	80077f8 <_scanf_float+0x60>
 8007976:	f04f 0a02 	mov.w	sl, #2
 800797a:	e7d1      	b.n	8007920 <_scanf_float+0x188>
 800797c:	b97d      	cbnz	r5, 800799e <_scanf_float+0x206>
 800797e:	f1b9 0f00 	cmp.w	r9, #0
 8007982:	f47f af3c 	bne.w	80077fe <_scanf_float+0x66>
 8007986:	6822      	ldr	r2, [r4, #0]
 8007988:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800798c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007990:	f47f af39 	bne.w	8007806 <_scanf_float+0x6e>
 8007994:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007998:	6022      	str	r2, [r4, #0]
 800799a:	2501      	movs	r5, #1
 800799c:	e7c0      	b.n	8007920 <_scanf_float+0x188>
 800799e:	2d03      	cmp	r5, #3
 80079a0:	d0e2      	beq.n	8007968 <_scanf_float+0x1d0>
 80079a2:	2d05      	cmp	r5, #5
 80079a4:	e7de      	b.n	8007964 <_scanf_float+0x1cc>
 80079a6:	2d02      	cmp	r5, #2
 80079a8:	f47f af26 	bne.w	80077f8 <_scanf_float+0x60>
 80079ac:	2503      	movs	r5, #3
 80079ae:	e7b7      	b.n	8007920 <_scanf_float+0x188>
 80079b0:	2d06      	cmp	r5, #6
 80079b2:	f47f af21 	bne.w	80077f8 <_scanf_float+0x60>
 80079b6:	2507      	movs	r5, #7
 80079b8:	e7b2      	b.n	8007920 <_scanf_float+0x188>
 80079ba:	6822      	ldr	r2, [r4, #0]
 80079bc:	0591      	lsls	r1, r2, #22
 80079be:	f57f af1b 	bpl.w	80077f8 <_scanf_float+0x60>
 80079c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80079c6:	6022      	str	r2, [r4, #0]
 80079c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80079cc:	e7a8      	b.n	8007920 <_scanf_float+0x188>
 80079ce:	6822      	ldr	r2, [r4, #0]
 80079d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80079d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80079d8:	d006      	beq.n	80079e8 <_scanf_float+0x250>
 80079da:	0550      	lsls	r0, r2, #21
 80079dc:	f57f af0c 	bpl.w	80077f8 <_scanf_float+0x60>
 80079e0:	f1b9 0f00 	cmp.w	r9, #0
 80079e4:	f43f af0f 	beq.w	8007806 <_scanf_float+0x6e>
 80079e8:	0591      	lsls	r1, r2, #22
 80079ea:	bf58      	it	pl
 80079ec:	9901      	ldrpl	r1, [sp, #4]
 80079ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80079f2:	bf58      	it	pl
 80079f4:	eba9 0101 	subpl.w	r1, r9, r1
 80079f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80079fc:	bf58      	it	pl
 80079fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a02:	6022      	str	r2, [r4, #0]
 8007a04:	f04f 0900 	mov.w	r9, #0
 8007a08:	e78a      	b.n	8007920 <_scanf_float+0x188>
 8007a0a:	f04f 0a03 	mov.w	sl, #3
 8007a0e:	e787      	b.n	8007920 <_scanf_float+0x188>
 8007a10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007a14:	4639      	mov	r1, r7
 8007a16:	4640      	mov	r0, r8
 8007a18:	4798      	blx	r3
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	f43f aedf 	beq.w	80077de <_scanf_float+0x46>
 8007a20:	e6ea      	b.n	80077f8 <_scanf_float+0x60>
 8007a22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a2a:	463a      	mov	r2, r7
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	4798      	blx	r3
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	6123      	str	r3, [r4, #16]
 8007a36:	e6ec      	b.n	8007812 <_scanf_float+0x7a>
 8007a38:	1e6b      	subs	r3, r5, #1
 8007a3a:	2b06      	cmp	r3, #6
 8007a3c:	d825      	bhi.n	8007a8a <_scanf_float+0x2f2>
 8007a3e:	2d02      	cmp	r5, #2
 8007a40:	d836      	bhi.n	8007ab0 <_scanf_float+0x318>
 8007a42:	455e      	cmp	r6, fp
 8007a44:	f67f aee8 	bls.w	8007818 <_scanf_float+0x80>
 8007a48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a4c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a50:	463a      	mov	r2, r7
 8007a52:	4640      	mov	r0, r8
 8007a54:	4798      	blx	r3
 8007a56:	6923      	ldr	r3, [r4, #16]
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	6123      	str	r3, [r4, #16]
 8007a5c:	e7f1      	b.n	8007a42 <_scanf_float+0x2aa>
 8007a5e:	9802      	ldr	r0, [sp, #8]
 8007a60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a64:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007a68:	9002      	str	r0, [sp, #8]
 8007a6a:	463a      	mov	r2, r7
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	4798      	blx	r3
 8007a70:	6923      	ldr	r3, [r4, #16]
 8007a72:	3b01      	subs	r3, #1
 8007a74:	6123      	str	r3, [r4, #16]
 8007a76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a7a:	fa5f fa8a 	uxtb.w	sl, sl
 8007a7e:	f1ba 0f02 	cmp.w	sl, #2
 8007a82:	d1ec      	bne.n	8007a5e <_scanf_float+0x2c6>
 8007a84:	3d03      	subs	r5, #3
 8007a86:	b2ed      	uxtb	r5, r5
 8007a88:	1b76      	subs	r6, r6, r5
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	05da      	lsls	r2, r3, #23
 8007a8e:	d52f      	bpl.n	8007af0 <_scanf_float+0x358>
 8007a90:	055b      	lsls	r3, r3, #21
 8007a92:	d510      	bpl.n	8007ab6 <_scanf_float+0x31e>
 8007a94:	455e      	cmp	r6, fp
 8007a96:	f67f aebf 	bls.w	8007818 <_scanf_float+0x80>
 8007a9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007aa2:	463a      	mov	r2, r7
 8007aa4:	4640      	mov	r0, r8
 8007aa6:	4798      	blx	r3
 8007aa8:	6923      	ldr	r3, [r4, #16]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	6123      	str	r3, [r4, #16]
 8007aae:	e7f1      	b.n	8007a94 <_scanf_float+0x2fc>
 8007ab0:	46aa      	mov	sl, r5
 8007ab2:	9602      	str	r6, [sp, #8]
 8007ab4:	e7df      	b.n	8007a76 <_scanf_float+0x2de>
 8007ab6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007aba:	6923      	ldr	r3, [r4, #16]
 8007abc:	2965      	cmp	r1, #101	; 0x65
 8007abe:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ac2:	f106 35ff 	add.w	r5, r6, #4294967295
 8007ac6:	6123      	str	r3, [r4, #16]
 8007ac8:	d00c      	beq.n	8007ae4 <_scanf_float+0x34c>
 8007aca:	2945      	cmp	r1, #69	; 0x45
 8007acc:	d00a      	beq.n	8007ae4 <_scanf_float+0x34c>
 8007ace:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ad2:	463a      	mov	r2, r7
 8007ad4:	4640      	mov	r0, r8
 8007ad6:	4798      	blx	r3
 8007ad8:	6923      	ldr	r3, [r4, #16]
 8007ada:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	1eb5      	subs	r5, r6, #2
 8007ae2:	6123      	str	r3, [r4, #16]
 8007ae4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ae8:	463a      	mov	r2, r7
 8007aea:	4640      	mov	r0, r8
 8007aec:	4798      	blx	r3
 8007aee:	462e      	mov	r6, r5
 8007af0:	6825      	ldr	r5, [r4, #0]
 8007af2:	f015 0510 	ands.w	r5, r5, #16
 8007af6:	d159      	bne.n	8007bac <_scanf_float+0x414>
 8007af8:	7035      	strb	r5, [r6, #0]
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b04:	d11b      	bne.n	8007b3e <_scanf_float+0x3a6>
 8007b06:	9b01      	ldr	r3, [sp, #4]
 8007b08:	454b      	cmp	r3, r9
 8007b0a:	eba3 0209 	sub.w	r2, r3, r9
 8007b0e:	d123      	bne.n	8007b58 <_scanf_float+0x3c0>
 8007b10:	2200      	movs	r2, #0
 8007b12:	4659      	mov	r1, fp
 8007b14:	4640      	mov	r0, r8
 8007b16:	f000 fef1 	bl	80088fc <_strtod_r>
 8007b1a:	6822      	ldr	r2, [r4, #0]
 8007b1c:	9b03      	ldr	r3, [sp, #12]
 8007b1e:	f012 0f02 	tst.w	r2, #2
 8007b22:	ec57 6b10 	vmov	r6, r7, d0
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	d021      	beq.n	8007b6e <_scanf_float+0x3d6>
 8007b2a:	9903      	ldr	r1, [sp, #12]
 8007b2c:	1d1a      	adds	r2, r3, #4
 8007b2e:	600a      	str	r2, [r1, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	e9c3 6700 	strd	r6, r7, [r3]
 8007b36:	68e3      	ldr	r3, [r4, #12]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	60e3      	str	r3, [r4, #12]
 8007b3c:	e66d      	b.n	800781a <_scanf_float+0x82>
 8007b3e:	9b04      	ldr	r3, [sp, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d0e5      	beq.n	8007b10 <_scanf_float+0x378>
 8007b44:	9905      	ldr	r1, [sp, #20]
 8007b46:	230a      	movs	r3, #10
 8007b48:	462a      	mov	r2, r5
 8007b4a:	3101      	adds	r1, #1
 8007b4c:	4640      	mov	r0, r8
 8007b4e:	f000 ff5d 	bl	8008a0c <_strtol_r>
 8007b52:	9b04      	ldr	r3, [sp, #16]
 8007b54:	9e05      	ldr	r6, [sp, #20]
 8007b56:	1ac2      	subs	r2, r0, r3
 8007b58:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007b5c:	429e      	cmp	r6, r3
 8007b5e:	bf28      	it	cs
 8007b60:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007b64:	4912      	ldr	r1, [pc, #72]	; (8007bb0 <_scanf_float+0x418>)
 8007b66:	4630      	mov	r0, r6
 8007b68:	f000 f82c 	bl	8007bc4 <siprintf>
 8007b6c:	e7d0      	b.n	8007b10 <_scanf_float+0x378>
 8007b6e:	9903      	ldr	r1, [sp, #12]
 8007b70:	f012 0f04 	tst.w	r2, #4
 8007b74:	f103 0204 	add.w	r2, r3, #4
 8007b78:	600a      	str	r2, [r1, #0]
 8007b7a:	d1d9      	bne.n	8007b30 <_scanf_float+0x398>
 8007b7c:	f8d3 8000 	ldr.w	r8, [r3]
 8007b80:	ee10 2a10 	vmov	r2, s0
 8007b84:	ee10 0a10 	vmov	r0, s0
 8007b88:	463b      	mov	r3, r7
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	f7f8 ffce 	bl	8000b2c <__aeabi_dcmpun>
 8007b90:	b128      	cbz	r0, 8007b9e <_scanf_float+0x406>
 8007b92:	4808      	ldr	r0, [pc, #32]	; (8007bb4 <_scanf_float+0x41c>)
 8007b94:	f000 f810 	bl	8007bb8 <nanf>
 8007b98:	ed88 0a00 	vstr	s0, [r8]
 8007b9c:	e7cb      	b.n	8007b36 <_scanf_float+0x39e>
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	4639      	mov	r1, r7
 8007ba2:	f7f9 f821 	bl	8000be8 <__aeabi_d2f>
 8007ba6:	f8c8 0000 	str.w	r0, [r8]
 8007baa:	e7c4      	b.n	8007b36 <_scanf_float+0x39e>
 8007bac:	2500      	movs	r5, #0
 8007bae:	e634      	b.n	800781a <_scanf_float+0x82>
 8007bb0:	0800c4c0 	.word	0x0800c4c0
 8007bb4:	0800c553 	.word	0x0800c553

08007bb8 <nanf>:
 8007bb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007bc0 <nanf+0x8>
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	7fc00000 	.word	0x7fc00000

08007bc4 <siprintf>:
 8007bc4:	b40e      	push	{r1, r2, r3}
 8007bc6:	b500      	push	{lr}
 8007bc8:	b09c      	sub	sp, #112	; 0x70
 8007bca:	ab1d      	add	r3, sp, #116	; 0x74
 8007bcc:	9002      	str	r0, [sp, #8]
 8007bce:	9006      	str	r0, [sp, #24]
 8007bd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bd4:	4809      	ldr	r0, [pc, #36]	; (8007bfc <siprintf+0x38>)
 8007bd6:	9107      	str	r1, [sp, #28]
 8007bd8:	9104      	str	r1, [sp, #16]
 8007bda:	4909      	ldr	r1, [pc, #36]	; (8007c00 <siprintf+0x3c>)
 8007bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be0:	9105      	str	r1, [sp, #20]
 8007be2:	6800      	ldr	r0, [r0, #0]
 8007be4:	9301      	str	r3, [sp, #4]
 8007be6:	a902      	add	r1, sp, #8
 8007be8:	f002 ff92 	bl	800ab10 <_svfiprintf_r>
 8007bec:	9b02      	ldr	r3, [sp, #8]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	701a      	strb	r2, [r3, #0]
 8007bf2:	b01c      	add	sp, #112	; 0x70
 8007bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bf8:	b003      	add	sp, #12
 8007bfa:	4770      	bx	lr
 8007bfc:	2000009c 	.word	0x2000009c
 8007c00:	ffff0208 	.word	0xffff0208

08007c04 <__sread>:
 8007c04:	b510      	push	{r4, lr}
 8007c06:	460c      	mov	r4, r1
 8007c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0c:	f003 f9da 	bl	800afc4 <_read_r>
 8007c10:	2800      	cmp	r0, #0
 8007c12:	bfab      	itete	ge
 8007c14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c16:	89a3      	ldrhlt	r3, [r4, #12]
 8007c18:	181b      	addge	r3, r3, r0
 8007c1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c1e:	bfac      	ite	ge
 8007c20:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c22:	81a3      	strhlt	r3, [r4, #12]
 8007c24:	bd10      	pop	{r4, pc}

08007c26 <__swrite>:
 8007c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2a:	461f      	mov	r7, r3
 8007c2c:	898b      	ldrh	r3, [r1, #12]
 8007c2e:	05db      	lsls	r3, r3, #23
 8007c30:	4605      	mov	r5, r0
 8007c32:	460c      	mov	r4, r1
 8007c34:	4616      	mov	r6, r2
 8007c36:	d505      	bpl.n	8007c44 <__swrite+0x1e>
 8007c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f002 f926 	bl	8009e90 <_lseek_r>
 8007c44:	89a3      	ldrh	r3, [r4, #12]
 8007c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c4e:	81a3      	strh	r3, [r4, #12]
 8007c50:	4632      	mov	r2, r6
 8007c52:	463b      	mov	r3, r7
 8007c54:	4628      	mov	r0, r5
 8007c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5a:	f000 bed9 	b.w	8008a10 <_write_r>

08007c5e <__sseek>:
 8007c5e:	b510      	push	{r4, lr}
 8007c60:	460c      	mov	r4, r1
 8007c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c66:	f002 f913 	bl	8009e90 <_lseek_r>
 8007c6a:	1c43      	adds	r3, r0, #1
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	bf15      	itete	ne
 8007c70:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c7a:	81a3      	strheq	r3, [r4, #12]
 8007c7c:	bf18      	it	ne
 8007c7e:	81a3      	strhne	r3, [r4, #12]
 8007c80:	bd10      	pop	{r4, pc}

08007c82 <__sclose>:
 8007c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c86:	f000 bef3 	b.w	8008a70 <_close_r>

08007c8a <strstr>:
 8007c8a:	780a      	ldrb	r2, [r1, #0]
 8007c8c:	b570      	push	{r4, r5, r6, lr}
 8007c8e:	b96a      	cbnz	r2, 8007cac <strstr+0x22>
 8007c90:	bd70      	pop	{r4, r5, r6, pc}
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d109      	bne.n	8007caa <strstr+0x20>
 8007c96:	460c      	mov	r4, r1
 8007c98:	4605      	mov	r5, r0
 8007c9a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0f6      	beq.n	8007c90 <strstr+0x6>
 8007ca2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007ca6:	429e      	cmp	r6, r3
 8007ca8:	d0f7      	beq.n	8007c9a <strstr+0x10>
 8007caa:	3001      	adds	r0, #1
 8007cac:	7803      	ldrb	r3, [r0, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1ef      	bne.n	8007c92 <strstr+0x8>
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	e7ec      	b.n	8007c90 <strstr+0x6>

08007cb6 <sulp>:
 8007cb6:	b570      	push	{r4, r5, r6, lr}
 8007cb8:	4604      	mov	r4, r0
 8007cba:	460d      	mov	r5, r1
 8007cbc:	ec45 4b10 	vmov	d0, r4, r5
 8007cc0:	4616      	mov	r6, r2
 8007cc2:	f002 fc83 	bl	800a5cc <__ulp>
 8007cc6:	ec51 0b10 	vmov	r0, r1, d0
 8007cca:	b17e      	cbz	r6, 8007cec <sulp+0x36>
 8007ccc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007cd0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	dd09      	ble.n	8007cec <sulp+0x36>
 8007cd8:	051b      	lsls	r3, r3, #20
 8007cda:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007cde:	2400      	movs	r4, #0
 8007ce0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	462b      	mov	r3, r5
 8007ce8:	f7f8 fc86 	bl	80005f8 <__aeabi_dmul>
 8007cec:	bd70      	pop	{r4, r5, r6, pc}
	...

08007cf0 <_strtod_l>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	ed2d 8b02 	vpush	{d8}
 8007cf8:	b09d      	sub	sp, #116	; 0x74
 8007cfa:	461f      	mov	r7, r3
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	9318      	str	r3, [sp, #96]	; 0x60
 8007d00:	4ba2      	ldr	r3, [pc, #648]	; (8007f8c <_strtod_l+0x29c>)
 8007d02:	9213      	str	r2, [sp, #76]	; 0x4c
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	9305      	str	r3, [sp, #20]
 8007d08:	4604      	mov	r4, r0
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	4688      	mov	r8, r1
 8007d0e:	f7f8 fa5f 	bl	80001d0 <strlen>
 8007d12:	f04f 0a00 	mov.w	sl, #0
 8007d16:	4605      	mov	r5, r0
 8007d18:	f04f 0b00 	mov.w	fp, #0
 8007d1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d22:	781a      	ldrb	r2, [r3, #0]
 8007d24:	2a2b      	cmp	r2, #43	; 0x2b
 8007d26:	d04e      	beq.n	8007dc6 <_strtod_l+0xd6>
 8007d28:	d83b      	bhi.n	8007da2 <_strtod_l+0xb2>
 8007d2a:	2a0d      	cmp	r2, #13
 8007d2c:	d834      	bhi.n	8007d98 <_strtod_l+0xa8>
 8007d2e:	2a08      	cmp	r2, #8
 8007d30:	d834      	bhi.n	8007d9c <_strtod_l+0xac>
 8007d32:	2a00      	cmp	r2, #0
 8007d34:	d03e      	beq.n	8007db4 <_strtod_l+0xc4>
 8007d36:	2300      	movs	r3, #0
 8007d38:	930a      	str	r3, [sp, #40]	; 0x28
 8007d3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007d3c:	7833      	ldrb	r3, [r6, #0]
 8007d3e:	2b30      	cmp	r3, #48	; 0x30
 8007d40:	f040 80b0 	bne.w	8007ea4 <_strtod_l+0x1b4>
 8007d44:	7873      	ldrb	r3, [r6, #1]
 8007d46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d4a:	2b58      	cmp	r3, #88	; 0x58
 8007d4c:	d168      	bne.n	8007e20 <_strtod_l+0x130>
 8007d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d50:	9301      	str	r3, [sp, #4]
 8007d52:	ab18      	add	r3, sp, #96	; 0x60
 8007d54:	9702      	str	r7, [sp, #8]
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	4a8d      	ldr	r2, [pc, #564]	; (8007f90 <_strtod_l+0x2a0>)
 8007d5a:	ab19      	add	r3, sp, #100	; 0x64
 8007d5c:	a917      	add	r1, sp, #92	; 0x5c
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f001 fd8a 	bl	8009878 <__gethex>
 8007d64:	f010 0707 	ands.w	r7, r0, #7
 8007d68:	4605      	mov	r5, r0
 8007d6a:	d005      	beq.n	8007d78 <_strtod_l+0x88>
 8007d6c:	2f06      	cmp	r7, #6
 8007d6e:	d12c      	bne.n	8007dca <_strtod_l+0xda>
 8007d70:	3601      	adds	r6, #1
 8007d72:	2300      	movs	r3, #0
 8007d74:	9617      	str	r6, [sp, #92]	; 0x5c
 8007d76:	930a      	str	r3, [sp, #40]	; 0x28
 8007d78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f040 8590 	bne.w	80088a0 <_strtod_l+0xbb0>
 8007d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d82:	b1eb      	cbz	r3, 8007dc0 <_strtod_l+0xd0>
 8007d84:	4652      	mov	r2, sl
 8007d86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d8a:	ec43 2b10 	vmov	d0, r2, r3
 8007d8e:	b01d      	add	sp, #116	; 0x74
 8007d90:	ecbd 8b02 	vpop	{d8}
 8007d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d98:	2a20      	cmp	r2, #32
 8007d9a:	d1cc      	bne.n	8007d36 <_strtod_l+0x46>
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007da0:	e7be      	b.n	8007d20 <_strtod_l+0x30>
 8007da2:	2a2d      	cmp	r2, #45	; 0x2d
 8007da4:	d1c7      	bne.n	8007d36 <_strtod_l+0x46>
 8007da6:	2201      	movs	r2, #1
 8007da8:	920a      	str	r2, [sp, #40]	; 0x28
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	9217      	str	r2, [sp, #92]	; 0x5c
 8007dae:	785b      	ldrb	r3, [r3, #1]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1c2      	bne.n	8007d3a <_strtod_l+0x4a>
 8007db4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007db6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f040 856e 	bne.w	800889c <_strtod_l+0xbac>
 8007dc0:	4652      	mov	r2, sl
 8007dc2:	465b      	mov	r3, fp
 8007dc4:	e7e1      	b.n	8007d8a <_strtod_l+0x9a>
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	e7ee      	b.n	8007da8 <_strtod_l+0xb8>
 8007dca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007dcc:	b13a      	cbz	r2, 8007dde <_strtod_l+0xee>
 8007dce:	2135      	movs	r1, #53	; 0x35
 8007dd0:	a81a      	add	r0, sp, #104	; 0x68
 8007dd2:	f002 fd06 	bl	800a7e2 <__copybits>
 8007dd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f002 f8c5 	bl	8009f68 <_Bfree>
 8007dde:	3f01      	subs	r7, #1
 8007de0:	2f04      	cmp	r7, #4
 8007de2:	d806      	bhi.n	8007df2 <_strtod_l+0x102>
 8007de4:	e8df f007 	tbb	[pc, r7]
 8007de8:	1714030a 	.word	0x1714030a
 8007dec:	0a          	.byte	0x0a
 8007ded:	00          	.byte	0x00
 8007dee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007df2:	0728      	lsls	r0, r5, #28
 8007df4:	d5c0      	bpl.n	8007d78 <_strtod_l+0x88>
 8007df6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007dfa:	e7bd      	b.n	8007d78 <_strtod_l+0x88>
 8007dfc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007e00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007e02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007e06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007e0a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007e0e:	e7f0      	b.n	8007df2 <_strtod_l+0x102>
 8007e10:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007f94 <_strtod_l+0x2a4>
 8007e14:	e7ed      	b.n	8007df2 <_strtod_l+0x102>
 8007e16:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007e1a:	f04f 3aff 	mov.w	sl, #4294967295
 8007e1e:	e7e8      	b.n	8007df2 <_strtod_l+0x102>
 8007e20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e22:	1c5a      	adds	r2, r3, #1
 8007e24:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e26:	785b      	ldrb	r3, [r3, #1]
 8007e28:	2b30      	cmp	r3, #48	; 0x30
 8007e2a:	d0f9      	beq.n	8007e20 <_strtod_l+0x130>
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d0a3      	beq.n	8007d78 <_strtod_l+0x88>
 8007e30:	2301      	movs	r3, #1
 8007e32:	f04f 0900 	mov.w	r9, #0
 8007e36:	9304      	str	r3, [sp, #16]
 8007e38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e3a:	9308      	str	r3, [sp, #32]
 8007e3c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007e40:	464f      	mov	r7, r9
 8007e42:	220a      	movs	r2, #10
 8007e44:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007e46:	7806      	ldrb	r6, [r0, #0]
 8007e48:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007e4c:	b2d9      	uxtb	r1, r3
 8007e4e:	2909      	cmp	r1, #9
 8007e50:	d92a      	bls.n	8007ea8 <_strtod_l+0x1b8>
 8007e52:	9905      	ldr	r1, [sp, #20]
 8007e54:	462a      	mov	r2, r5
 8007e56:	f003 f8df 	bl	800b018 <strncmp>
 8007e5a:	b398      	cbz	r0, 8007ec4 <_strtod_l+0x1d4>
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	4632      	mov	r2, r6
 8007e60:	463d      	mov	r5, r7
 8007e62:	9005      	str	r0, [sp, #20]
 8007e64:	4603      	mov	r3, r0
 8007e66:	2a65      	cmp	r2, #101	; 0x65
 8007e68:	d001      	beq.n	8007e6e <_strtod_l+0x17e>
 8007e6a:	2a45      	cmp	r2, #69	; 0x45
 8007e6c:	d118      	bne.n	8007ea0 <_strtod_l+0x1b0>
 8007e6e:	b91d      	cbnz	r5, 8007e78 <_strtod_l+0x188>
 8007e70:	9a04      	ldr	r2, [sp, #16]
 8007e72:	4302      	orrs	r2, r0
 8007e74:	d09e      	beq.n	8007db4 <_strtod_l+0xc4>
 8007e76:	2500      	movs	r5, #0
 8007e78:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007e7c:	f108 0201 	add.w	r2, r8, #1
 8007e80:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e82:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007e86:	2a2b      	cmp	r2, #43	; 0x2b
 8007e88:	d075      	beq.n	8007f76 <_strtod_l+0x286>
 8007e8a:	2a2d      	cmp	r2, #45	; 0x2d
 8007e8c:	d07b      	beq.n	8007f86 <_strtod_l+0x296>
 8007e8e:	f04f 0c00 	mov.w	ip, #0
 8007e92:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007e96:	2909      	cmp	r1, #9
 8007e98:	f240 8082 	bls.w	8007fa0 <_strtod_l+0x2b0>
 8007e9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007ea0:	2600      	movs	r6, #0
 8007ea2:	e09d      	b.n	8007fe0 <_strtod_l+0x2f0>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e7c4      	b.n	8007e32 <_strtod_l+0x142>
 8007ea8:	2f08      	cmp	r7, #8
 8007eaa:	bfd8      	it	le
 8007eac:	9907      	ldrle	r1, [sp, #28]
 8007eae:	f100 0001 	add.w	r0, r0, #1
 8007eb2:	bfda      	itte	le
 8007eb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007eb8:	9307      	strle	r3, [sp, #28]
 8007eba:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007ebe:	3701      	adds	r7, #1
 8007ec0:	9017      	str	r0, [sp, #92]	; 0x5c
 8007ec2:	e7bf      	b.n	8007e44 <_strtod_l+0x154>
 8007ec4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ec6:	195a      	adds	r2, r3, r5
 8007ec8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007eca:	5d5a      	ldrb	r2, [r3, r5]
 8007ecc:	2f00      	cmp	r7, #0
 8007ece:	d037      	beq.n	8007f40 <_strtod_l+0x250>
 8007ed0:	9005      	str	r0, [sp, #20]
 8007ed2:	463d      	mov	r5, r7
 8007ed4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007ed8:	2b09      	cmp	r3, #9
 8007eda:	d912      	bls.n	8007f02 <_strtod_l+0x212>
 8007edc:	2301      	movs	r3, #1
 8007ede:	e7c2      	b.n	8007e66 <_strtod_l+0x176>
 8007ee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ee6:	785a      	ldrb	r2, [r3, #1]
 8007ee8:	3001      	adds	r0, #1
 8007eea:	2a30      	cmp	r2, #48	; 0x30
 8007eec:	d0f8      	beq.n	8007ee0 <_strtod_l+0x1f0>
 8007eee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007ef2:	2b08      	cmp	r3, #8
 8007ef4:	f200 84d9 	bhi.w	80088aa <_strtod_l+0xbba>
 8007ef8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007efa:	9005      	str	r0, [sp, #20]
 8007efc:	2000      	movs	r0, #0
 8007efe:	9308      	str	r3, [sp, #32]
 8007f00:	4605      	mov	r5, r0
 8007f02:	3a30      	subs	r2, #48	; 0x30
 8007f04:	f100 0301 	add.w	r3, r0, #1
 8007f08:	d014      	beq.n	8007f34 <_strtod_l+0x244>
 8007f0a:	9905      	ldr	r1, [sp, #20]
 8007f0c:	4419      	add	r1, r3
 8007f0e:	9105      	str	r1, [sp, #20]
 8007f10:	462b      	mov	r3, r5
 8007f12:	eb00 0e05 	add.w	lr, r0, r5
 8007f16:	210a      	movs	r1, #10
 8007f18:	4573      	cmp	r3, lr
 8007f1a:	d113      	bne.n	8007f44 <_strtod_l+0x254>
 8007f1c:	182b      	adds	r3, r5, r0
 8007f1e:	2b08      	cmp	r3, #8
 8007f20:	f105 0501 	add.w	r5, r5, #1
 8007f24:	4405      	add	r5, r0
 8007f26:	dc1c      	bgt.n	8007f62 <_strtod_l+0x272>
 8007f28:	9907      	ldr	r1, [sp, #28]
 8007f2a:	230a      	movs	r3, #10
 8007f2c:	fb03 2301 	mla	r3, r3, r1, r2
 8007f30:	9307      	str	r3, [sp, #28]
 8007f32:	2300      	movs	r3, #0
 8007f34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f36:	1c51      	adds	r1, r2, #1
 8007f38:	9117      	str	r1, [sp, #92]	; 0x5c
 8007f3a:	7852      	ldrb	r2, [r2, #1]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	e7c9      	b.n	8007ed4 <_strtod_l+0x1e4>
 8007f40:	4638      	mov	r0, r7
 8007f42:	e7d2      	b.n	8007eea <_strtod_l+0x1fa>
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	dc04      	bgt.n	8007f52 <_strtod_l+0x262>
 8007f48:	9e07      	ldr	r6, [sp, #28]
 8007f4a:	434e      	muls	r6, r1
 8007f4c:	9607      	str	r6, [sp, #28]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	e7e2      	b.n	8007f18 <_strtod_l+0x228>
 8007f52:	f103 0c01 	add.w	ip, r3, #1
 8007f56:	f1bc 0f10 	cmp.w	ip, #16
 8007f5a:	bfd8      	it	le
 8007f5c:	fb01 f909 	mulle.w	r9, r1, r9
 8007f60:	e7f5      	b.n	8007f4e <_strtod_l+0x25e>
 8007f62:	2d10      	cmp	r5, #16
 8007f64:	bfdc      	itt	le
 8007f66:	230a      	movle	r3, #10
 8007f68:	fb03 2909 	mlale	r9, r3, r9, r2
 8007f6c:	e7e1      	b.n	8007f32 <_strtod_l+0x242>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	9305      	str	r3, [sp, #20]
 8007f72:	2301      	movs	r3, #1
 8007f74:	e77c      	b.n	8007e70 <_strtod_l+0x180>
 8007f76:	f04f 0c00 	mov.w	ip, #0
 8007f7a:	f108 0202 	add.w	r2, r8, #2
 8007f7e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007f80:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007f84:	e785      	b.n	8007e92 <_strtod_l+0x1a2>
 8007f86:	f04f 0c01 	mov.w	ip, #1
 8007f8a:	e7f6      	b.n	8007f7a <_strtod_l+0x28a>
 8007f8c:	0800c74c 	.word	0x0800c74c
 8007f90:	0800c4c8 	.word	0x0800c4c8
 8007f94:	7ff00000 	.word	0x7ff00000
 8007f98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f9a:	1c51      	adds	r1, r2, #1
 8007f9c:	9117      	str	r1, [sp, #92]	; 0x5c
 8007f9e:	7852      	ldrb	r2, [r2, #1]
 8007fa0:	2a30      	cmp	r2, #48	; 0x30
 8007fa2:	d0f9      	beq.n	8007f98 <_strtod_l+0x2a8>
 8007fa4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007fa8:	2908      	cmp	r1, #8
 8007faa:	f63f af79 	bhi.w	8007ea0 <_strtod_l+0x1b0>
 8007fae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007fb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007fb4:	9206      	str	r2, [sp, #24]
 8007fb6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007fb8:	1c51      	adds	r1, r2, #1
 8007fba:	9117      	str	r1, [sp, #92]	; 0x5c
 8007fbc:	7852      	ldrb	r2, [r2, #1]
 8007fbe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007fc2:	2e09      	cmp	r6, #9
 8007fc4:	d937      	bls.n	8008036 <_strtod_l+0x346>
 8007fc6:	9e06      	ldr	r6, [sp, #24]
 8007fc8:	1b89      	subs	r1, r1, r6
 8007fca:	2908      	cmp	r1, #8
 8007fcc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007fd0:	dc02      	bgt.n	8007fd8 <_strtod_l+0x2e8>
 8007fd2:	4576      	cmp	r6, lr
 8007fd4:	bfa8      	it	ge
 8007fd6:	4676      	movge	r6, lr
 8007fd8:	f1bc 0f00 	cmp.w	ip, #0
 8007fdc:	d000      	beq.n	8007fe0 <_strtod_l+0x2f0>
 8007fde:	4276      	negs	r6, r6
 8007fe0:	2d00      	cmp	r5, #0
 8007fe2:	d14d      	bne.n	8008080 <_strtod_l+0x390>
 8007fe4:	9904      	ldr	r1, [sp, #16]
 8007fe6:	4301      	orrs	r1, r0
 8007fe8:	f47f aec6 	bne.w	8007d78 <_strtod_l+0x88>
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f47f aee1 	bne.w	8007db4 <_strtod_l+0xc4>
 8007ff2:	2a69      	cmp	r2, #105	; 0x69
 8007ff4:	d027      	beq.n	8008046 <_strtod_l+0x356>
 8007ff6:	dc24      	bgt.n	8008042 <_strtod_l+0x352>
 8007ff8:	2a49      	cmp	r2, #73	; 0x49
 8007ffa:	d024      	beq.n	8008046 <_strtod_l+0x356>
 8007ffc:	2a4e      	cmp	r2, #78	; 0x4e
 8007ffe:	f47f aed9 	bne.w	8007db4 <_strtod_l+0xc4>
 8008002:	499f      	ldr	r1, [pc, #636]	; (8008280 <_strtod_l+0x590>)
 8008004:	a817      	add	r0, sp, #92	; 0x5c
 8008006:	f001 fe8f 	bl	8009d28 <__match>
 800800a:	2800      	cmp	r0, #0
 800800c:	f43f aed2 	beq.w	8007db4 <_strtod_l+0xc4>
 8008010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b28      	cmp	r3, #40	; 0x28
 8008016:	d12d      	bne.n	8008074 <_strtod_l+0x384>
 8008018:	499a      	ldr	r1, [pc, #616]	; (8008284 <_strtod_l+0x594>)
 800801a:	aa1a      	add	r2, sp, #104	; 0x68
 800801c:	a817      	add	r0, sp, #92	; 0x5c
 800801e:	f001 fe97 	bl	8009d50 <__hexnan>
 8008022:	2805      	cmp	r0, #5
 8008024:	d126      	bne.n	8008074 <_strtod_l+0x384>
 8008026:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008028:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800802c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008030:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008034:	e6a0      	b.n	8007d78 <_strtod_l+0x88>
 8008036:	210a      	movs	r1, #10
 8008038:	fb01 2e0e 	mla	lr, r1, lr, r2
 800803c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008040:	e7b9      	b.n	8007fb6 <_strtod_l+0x2c6>
 8008042:	2a6e      	cmp	r2, #110	; 0x6e
 8008044:	e7db      	b.n	8007ffe <_strtod_l+0x30e>
 8008046:	4990      	ldr	r1, [pc, #576]	; (8008288 <_strtod_l+0x598>)
 8008048:	a817      	add	r0, sp, #92	; 0x5c
 800804a:	f001 fe6d 	bl	8009d28 <__match>
 800804e:	2800      	cmp	r0, #0
 8008050:	f43f aeb0 	beq.w	8007db4 <_strtod_l+0xc4>
 8008054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008056:	498d      	ldr	r1, [pc, #564]	; (800828c <_strtod_l+0x59c>)
 8008058:	3b01      	subs	r3, #1
 800805a:	a817      	add	r0, sp, #92	; 0x5c
 800805c:	9317      	str	r3, [sp, #92]	; 0x5c
 800805e:	f001 fe63 	bl	8009d28 <__match>
 8008062:	b910      	cbnz	r0, 800806a <_strtod_l+0x37a>
 8008064:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008066:	3301      	adds	r3, #1
 8008068:	9317      	str	r3, [sp, #92]	; 0x5c
 800806a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800829c <_strtod_l+0x5ac>
 800806e:	f04f 0a00 	mov.w	sl, #0
 8008072:	e681      	b.n	8007d78 <_strtod_l+0x88>
 8008074:	4886      	ldr	r0, [pc, #536]	; (8008290 <_strtod_l+0x5a0>)
 8008076:	f002 ffb7 	bl	800afe8 <nan>
 800807a:	ec5b ab10 	vmov	sl, fp, d0
 800807e:	e67b      	b.n	8007d78 <_strtod_l+0x88>
 8008080:	9b05      	ldr	r3, [sp, #20]
 8008082:	9807      	ldr	r0, [sp, #28]
 8008084:	1af3      	subs	r3, r6, r3
 8008086:	2f00      	cmp	r7, #0
 8008088:	bf08      	it	eq
 800808a:	462f      	moveq	r7, r5
 800808c:	2d10      	cmp	r5, #16
 800808e:	9306      	str	r3, [sp, #24]
 8008090:	46a8      	mov	r8, r5
 8008092:	bfa8      	it	ge
 8008094:	f04f 0810 	movge.w	r8, #16
 8008098:	f7f8 fa34 	bl	8000504 <__aeabi_ui2d>
 800809c:	2d09      	cmp	r5, #9
 800809e:	4682      	mov	sl, r0
 80080a0:	468b      	mov	fp, r1
 80080a2:	dd13      	ble.n	80080cc <_strtod_l+0x3dc>
 80080a4:	4b7b      	ldr	r3, [pc, #492]	; (8008294 <_strtod_l+0x5a4>)
 80080a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80080aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80080ae:	f7f8 faa3 	bl	80005f8 <__aeabi_dmul>
 80080b2:	4682      	mov	sl, r0
 80080b4:	4648      	mov	r0, r9
 80080b6:	468b      	mov	fp, r1
 80080b8:	f7f8 fa24 	bl	8000504 <__aeabi_ui2d>
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	4650      	mov	r0, sl
 80080c2:	4659      	mov	r1, fp
 80080c4:	f7f8 f8e2 	bl	800028c <__adddf3>
 80080c8:	4682      	mov	sl, r0
 80080ca:	468b      	mov	fp, r1
 80080cc:	2d0f      	cmp	r5, #15
 80080ce:	dc38      	bgt.n	8008142 <_strtod_l+0x452>
 80080d0:	9b06      	ldr	r3, [sp, #24]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f43f ae50 	beq.w	8007d78 <_strtod_l+0x88>
 80080d8:	dd24      	ble.n	8008124 <_strtod_l+0x434>
 80080da:	2b16      	cmp	r3, #22
 80080dc:	dc0b      	bgt.n	80080f6 <_strtod_l+0x406>
 80080de:	496d      	ldr	r1, [pc, #436]	; (8008294 <_strtod_l+0x5a4>)
 80080e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080e8:	4652      	mov	r2, sl
 80080ea:	465b      	mov	r3, fp
 80080ec:	f7f8 fa84 	bl	80005f8 <__aeabi_dmul>
 80080f0:	4682      	mov	sl, r0
 80080f2:	468b      	mov	fp, r1
 80080f4:	e640      	b.n	8007d78 <_strtod_l+0x88>
 80080f6:	9a06      	ldr	r2, [sp, #24]
 80080f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80080fc:	4293      	cmp	r3, r2
 80080fe:	db20      	blt.n	8008142 <_strtod_l+0x452>
 8008100:	4c64      	ldr	r4, [pc, #400]	; (8008294 <_strtod_l+0x5a4>)
 8008102:	f1c5 050f 	rsb	r5, r5, #15
 8008106:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800810a:	4652      	mov	r2, sl
 800810c:	465b      	mov	r3, fp
 800810e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008112:	f7f8 fa71 	bl	80005f8 <__aeabi_dmul>
 8008116:	9b06      	ldr	r3, [sp, #24]
 8008118:	1b5d      	subs	r5, r3, r5
 800811a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800811e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008122:	e7e3      	b.n	80080ec <_strtod_l+0x3fc>
 8008124:	9b06      	ldr	r3, [sp, #24]
 8008126:	3316      	adds	r3, #22
 8008128:	db0b      	blt.n	8008142 <_strtod_l+0x452>
 800812a:	9b05      	ldr	r3, [sp, #20]
 800812c:	1b9e      	subs	r6, r3, r6
 800812e:	4b59      	ldr	r3, [pc, #356]	; (8008294 <_strtod_l+0x5a4>)
 8008130:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008134:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008138:	4650      	mov	r0, sl
 800813a:	4659      	mov	r1, fp
 800813c:	f7f8 fb86 	bl	800084c <__aeabi_ddiv>
 8008140:	e7d6      	b.n	80080f0 <_strtod_l+0x400>
 8008142:	9b06      	ldr	r3, [sp, #24]
 8008144:	eba5 0808 	sub.w	r8, r5, r8
 8008148:	4498      	add	r8, r3
 800814a:	f1b8 0f00 	cmp.w	r8, #0
 800814e:	dd74      	ble.n	800823a <_strtod_l+0x54a>
 8008150:	f018 030f 	ands.w	r3, r8, #15
 8008154:	d00a      	beq.n	800816c <_strtod_l+0x47c>
 8008156:	494f      	ldr	r1, [pc, #316]	; (8008294 <_strtod_l+0x5a4>)
 8008158:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800815c:	4652      	mov	r2, sl
 800815e:	465b      	mov	r3, fp
 8008160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008164:	f7f8 fa48 	bl	80005f8 <__aeabi_dmul>
 8008168:	4682      	mov	sl, r0
 800816a:	468b      	mov	fp, r1
 800816c:	f038 080f 	bics.w	r8, r8, #15
 8008170:	d04f      	beq.n	8008212 <_strtod_l+0x522>
 8008172:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008176:	dd22      	ble.n	80081be <_strtod_l+0x4ce>
 8008178:	2500      	movs	r5, #0
 800817a:	462e      	mov	r6, r5
 800817c:	9507      	str	r5, [sp, #28]
 800817e:	9505      	str	r5, [sp, #20]
 8008180:	2322      	movs	r3, #34	; 0x22
 8008182:	f8df b118 	ldr.w	fp, [pc, #280]	; 800829c <_strtod_l+0x5ac>
 8008186:	6023      	str	r3, [r4, #0]
 8008188:	f04f 0a00 	mov.w	sl, #0
 800818c:	9b07      	ldr	r3, [sp, #28]
 800818e:	2b00      	cmp	r3, #0
 8008190:	f43f adf2 	beq.w	8007d78 <_strtod_l+0x88>
 8008194:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008196:	4620      	mov	r0, r4
 8008198:	f001 fee6 	bl	8009f68 <_Bfree>
 800819c:	9905      	ldr	r1, [sp, #20]
 800819e:	4620      	mov	r0, r4
 80081a0:	f001 fee2 	bl	8009f68 <_Bfree>
 80081a4:	4631      	mov	r1, r6
 80081a6:	4620      	mov	r0, r4
 80081a8:	f001 fede 	bl	8009f68 <_Bfree>
 80081ac:	9907      	ldr	r1, [sp, #28]
 80081ae:	4620      	mov	r0, r4
 80081b0:	f001 feda 	bl	8009f68 <_Bfree>
 80081b4:	4629      	mov	r1, r5
 80081b6:	4620      	mov	r0, r4
 80081b8:	f001 fed6 	bl	8009f68 <_Bfree>
 80081bc:	e5dc      	b.n	8007d78 <_strtod_l+0x88>
 80081be:	4b36      	ldr	r3, [pc, #216]	; (8008298 <_strtod_l+0x5a8>)
 80081c0:	9304      	str	r3, [sp, #16]
 80081c2:	2300      	movs	r3, #0
 80081c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80081c8:	4650      	mov	r0, sl
 80081ca:	4659      	mov	r1, fp
 80081cc:	4699      	mov	r9, r3
 80081ce:	f1b8 0f01 	cmp.w	r8, #1
 80081d2:	dc21      	bgt.n	8008218 <_strtod_l+0x528>
 80081d4:	b10b      	cbz	r3, 80081da <_strtod_l+0x4ea>
 80081d6:	4682      	mov	sl, r0
 80081d8:	468b      	mov	fp, r1
 80081da:	4b2f      	ldr	r3, [pc, #188]	; (8008298 <_strtod_l+0x5a8>)
 80081dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80081e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80081e4:	4652      	mov	r2, sl
 80081e6:	465b      	mov	r3, fp
 80081e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80081ec:	f7f8 fa04 	bl	80005f8 <__aeabi_dmul>
 80081f0:	4b2a      	ldr	r3, [pc, #168]	; (800829c <_strtod_l+0x5ac>)
 80081f2:	460a      	mov	r2, r1
 80081f4:	400b      	ands	r3, r1
 80081f6:	492a      	ldr	r1, [pc, #168]	; (80082a0 <_strtod_l+0x5b0>)
 80081f8:	428b      	cmp	r3, r1
 80081fa:	4682      	mov	sl, r0
 80081fc:	d8bc      	bhi.n	8008178 <_strtod_l+0x488>
 80081fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008202:	428b      	cmp	r3, r1
 8008204:	bf86      	itte	hi
 8008206:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80082a4 <_strtod_l+0x5b4>
 800820a:	f04f 3aff 	movhi.w	sl, #4294967295
 800820e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008212:	2300      	movs	r3, #0
 8008214:	9304      	str	r3, [sp, #16]
 8008216:	e084      	b.n	8008322 <_strtod_l+0x632>
 8008218:	f018 0f01 	tst.w	r8, #1
 800821c:	d005      	beq.n	800822a <_strtod_l+0x53a>
 800821e:	9b04      	ldr	r3, [sp, #16]
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	f7f8 f9e8 	bl	80005f8 <__aeabi_dmul>
 8008228:	2301      	movs	r3, #1
 800822a:	9a04      	ldr	r2, [sp, #16]
 800822c:	3208      	adds	r2, #8
 800822e:	f109 0901 	add.w	r9, r9, #1
 8008232:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008236:	9204      	str	r2, [sp, #16]
 8008238:	e7c9      	b.n	80081ce <_strtod_l+0x4de>
 800823a:	d0ea      	beq.n	8008212 <_strtod_l+0x522>
 800823c:	f1c8 0800 	rsb	r8, r8, #0
 8008240:	f018 020f 	ands.w	r2, r8, #15
 8008244:	d00a      	beq.n	800825c <_strtod_l+0x56c>
 8008246:	4b13      	ldr	r3, [pc, #76]	; (8008294 <_strtod_l+0x5a4>)
 8008248:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800824c:	4650      	mov	r0, sl
 800824e:	4659      	mov	r1, fp
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	f7f8 fafa 	bl	800084c <__aeabi_ddiv>
 8008258:	4682      	mov	sl, r0
 800825a:	468b      	mov	fp, r1
 800825c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008260:	d0d7      	beq.n	8008212 <_strtod_l+0x522>
 8008262:	f1b8 0f1f 	cmp.w	r8, #31
 8008266:	dd1f      	ble.n	80082a8 <_strtod_l+0x5b8>
 8008268:	2500      	movs	r5, #0
 800826a:	462e      	mov	r6, r5
 800826c:	9507      	str	r5, [sp, #28]
 800826e:	9505      	str	r5, [sp, #20]
 8008270:	2322      	movs	r3, #34	; 0x22
 8008272:	f04f 0a00 	mov.w	sl, #0
 8008276:	f04f 0b00 	mov.w	fp, #0
 800827a:	6023      	str	r3, [r4, #0]
 800827c:	e786      	b.n	800818c <_strtod_l+0x49c>
 800827e:	bf00      	nop
 8008280:	0800c499 	.word	0x0800c499
 8008284:	0800c4dc 	.word	0x0800c4dc
 8008288:	0800c491 	.word	0x0800c491
 800828c:	0800c658 	.word	0x0800c658
 8008290:	0800c553 	.word	0x0800c553
 8008294:	0800c7e8 	.word	0x0800c7e8
 8008298:	0800c7c0 	.word	0x0800c7c0
 800829c:	7ff00000 	.word	0x7ff00000
 80082a0:	7ca00000 	.word	0x7ca00000
 80082a4:	7fefffff 	.word	0x7fefffff
 80082a8:	f018 0310 	ands.w	r3, r8, #16
 80082ac:	bf18      	it	ne
 80082ae:	236a      	movne	r3, #106	; 0x6a
 80082b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008660 <_strtod_l+0x970>
 80082b4:	9304      	str	r3, [sp, #16]
 80082b6:	4650      	mov	r0, sl
 80082b8:	4659      	mov	r1, fp
 80082ba:	2300      	movs	r3, #0
 80082bc:	f018 0f01 	tst.w	r8, #1
 80082c0:	d004      	beq.n	80082cc <_strtod_l+0x5dc>
 80082c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80082c6:	f7f8 f997 	bl	80005f8 <__aeabi_dmul>
 80082ca:	2301      	movs	r3, #1
 80082cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80082d0:	f109 0908 	add.w	r9, r9, #8
 80082d4:	d1f2      	bne.n	80082bc <_strtod_l+0x5cc>
 80082d6:	b10b      	cbz	r3, 80082dc <_strtod_l+0x5ec>
 80082d8:	4682      	mov	sl, r0
 80082da:	468b      	mov	fp, r1
 80082dc:	9b04      	ldr	r3, [sp, #16]
 80082de:	b1c3      	cbz	r3, 8008312 <_strtod_l+0x622>
 80082e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80082e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	4659      	mov	r1, fp
 80082ec:	dd11      	ble.n	8008312 <_strtod_l+0x622>
 80082ee:	2b1f      	cmp	r3, #31
 80082f0:	f340 8124 	ble.w	800853c <_strtod_l+0x84c>
 80082f4:	2b34      	cmp	r3, #52	; 0x34
 80082f6:	bfde      	ittt	le
 80082f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80082fc:	f04f 33ff 	movle.w	r3, #4294967295
 8008300:	fa03 f202 	lslle.w	r2, r3, r2
 8008304:	f04f 0a00 	mov.w	sl, #0
 8008308:	bfcc      	ite	gt
 800830a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800830e:	ea02 0b01 	andle.w	fp, r2, r1
 8008312:	2200      	movs	r2, #0
 8008314:	2300      	movs	r3, #0
 8008316:	4650      	mov	r0, sl
 8008318:	4659      	mov	r1, fp
 800831a:	f7f8 fbd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800831e:	2800      	cmp	r0, #0
 8008320:	d1a2      	bne.n	8008268 <_strtod_l+0x578>
 8008322:	9b07      	ldr	r3, [sp, #28]
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	9908      	ldr	r1, [sp, #32]
 8008328:	462b      	mov	r3, r5
 800832a:	463a      	mov	r2, r7
 800832c:	4620      	mov	r0, r4
 800832e:	f001 fe83 	bl	800a038 <__s2b>
 8008332:	9007      	str	r0, [sp, #28]
 8008334:	2800      	cmp	r0, #0
 8008336:	f43f af1f 	beq.w	8008178 <_strtod_l+0x488>
 800833a:	9b05      	ldr	r3, [sp, #20]
 800833c:	1b9e      	subs	r6, r3, r6
 800833e:	9b06      	ldr	r3, [sp, #24]
 8008340:	2b00      	cmp	r3, #0
 8008342:	bfb4      	ite	lt
 8008344:	4633      	movlt	r3, r6
 8008346:	2300      	movge	r3, #0
 8008348:	930c      	str	r3, [sp, #48]	; 0x30
 800834a:	9b06      	ldr	r3, [sp, #24]
 800834c:	2500      	movs	r5, #0
 800834e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008352:	9312      	str	r3, [sp, #72]	; 0x48
 8008354:	462e      	mov	r6, r5
 8008356:	9b07      	ldr	r3, [sp, #28]
 8008358:	4620      	mov	r0, r4
 800835a:	6859      	ldr	r1, [r3, #4]
 800835c:	f001 fdc4 	bl	8009ee8 <_Balloc>
 8008360:	9005      	str	r0, [sp, #20]
 8008362:	2800      	cmp	r0, #0
 8008364:	f43f af0c 	beq.w	8008180 <_strtod_l+0x490>
 8008368:	9b07      	ldr	r3, [sp, #28]
 800836a:	691a      	ldr	r2, [r3, #16]
 800836c:	3202      	adds	r2, #2
 800836e:	f103 010c 	add.w	r1, r3, #12
 8008372:	0092      	lsls	r2, r2, #2
 8008374:	300c      	adds	r0, #12
 8008376:	f7fe fd8f 	bl	8006e98 <memcpy>
 800837a:	ec4b ab10 	vmov	d0, sl, fp
 800837e:	aa1a      	add	r2, sp, #104	; 0x68
 8008380:	a919      	add	r1, sp, #100	; 0x64
 8008382:	4620      	mov	r0, r4
 8008384:	f002 f99e 	bl	800a6c4 <__d2b>
 8008388:	ec4b ab18 	vmov	d8, sl, fp
 800838c:	9018      	str	r0, [sp, #96]	; 0x60
 800838e:	2800      	cmp	r0, #0
 8008390:	f43f aef6 	beq.w	8008180 <_strtod_l+0x490>
 8008394:	2101      	movs	r1, #1
 8008396:	4620      	mov	r0, r4
 8008398:	f001 fee8 	bl	800a16c <__i2b>
 800839c:	4606      	mov	r6, r0
 800839e:	2800      	cmp	r0, #0
 80083a0:	f43f aeee 	beq.w	8008180 <_strtod_l+0x490>
 80083a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083a6:	9904      	ldr	r1, [sp, #16]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	bfab      	itete	ge
 80083ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80083ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80083b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80083b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80083b6:	bfac      	ite	ge
 80083b8:	eb03 0902 	addge.w	r9, r3, r2
 80083bc:	1ad7      	sublt	r7, r2, r3
 80083be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80083c0:	eba3 0801 	sub.w	r8, r3, r1
 80083c4:	4490      	add	r8, r2
 80083c6:	4ba1      	ldr	r3, [pc, #644]	; (800864c <_strtod_l+0x95c>)
 80083c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80083cc:	4598      	cmp	r8, r3
 80083ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80083d2:	f280 80c7 	bge.w	8008564 <_strtod_l+0x874>
 80083d6:	eba3 0308 	sub.w	r3, r3, r8
 80083da:	2b1f      	cmp	r3, #31
 80083dc:	eba2 0203 	sub.w	r2, r2, r3
 80083e0:	f04f 0101 	mov.w	r1, #1
 80083e4:	f300 80b1 	bgt.w	800854a <_strtod_l+0x85a>
 80083e8:	fa01 f303 	lsl.w	r3, r1, r3
 80083ec:	930d      	str	r3, [sp, #52]	; 0x34
 80083ee:	2300      	movs	r3, #0
 80083f0:	9308      	str	r3, [sp, #32]
 80083f2:	eb09 0802 	add.w	r8, r9, r2
 80083f6:	9b04      	ldr	r3, [sp, #16]
 80083f8:	45c1      	cmp	r9, r8
 80083fa:	4417      	add	r7, r2
 80083fc:	441f      	add	r7, r3
 80083fe:	464b      	mov	r3, r9
 8008400:	bfa8      	it	ge
 8008402:	4643      	movge	r3, r8
 8008404:	42bb      	cmp	r3, r7
 8008406:	bfa8      	it	ge
 8008408:	463b      	movge	r3, r7
 800840a:	2b00      	cmp	r3, #0
 800840c:	bfc2      	ittt	gt
 800840e:	eba8 0803 	subgt.w	r8, r8, r3
 8008412:	1aff      	subgt	r7, r7, r3
 8008414:	eba9 0903 	subgt.w	r9, r9, r3
 8008418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800841a:	2b00      	cmp	r3, #0
 800841c:	dd17      	ble.n	800844e <_strtod_l+0x75e>
 800841e:	4631      	mov	r1, r6
 8008420:	461a      	mov	r2, r3
 8008422:	4620      	mov	r0, r4
 8008424:	f001 ff62 	bl	800a2ec <__pow5mult>
 8008428:	4606      	mov	r6, r0
 800842a:	2800      	cmp	r0, #0
 800842c:	f43f aea8 	beq.w	8008180 <_strtod_l+0x490>
 8008430:	4601      	mov	r1, r0
 8008432:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008434:	4620      	mov	r0, r4
 8008436:	f001 feaf 	bl	800a198 <__multiply>
 800843a:	900b      	str	r0, [sp, #44]	; 0x2c
 800843c:	2800      	cmp	r0, #0
 800843e:	f43f ae9f 	beq.w	8008180 <_strtod_l+0x490>
 8008442:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008444:	4620      	mov	r0, r4
 8008446:	f001 fd8f 	bl	8009f68 <_Bfree>
 800844a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800844c:	9318      	str	r3, [sp, #96]	; 0x60
 800844e:	f1b8 0f00 	cmp.w	r8, #0
 8008452:	f300 808c 	bgt.w	800856e <_strtod_l+0x87e>
 8008456:	9b06      	ldr	r3, [sp, #24]
 8008458:	2b00      	cmp	r3, #0
 800845a:	dd08      	ble.n	800846e <_strtod_l+0x77e>
 800845c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800845e:	9905      	ldr	r1, [sp, #20]
 8008460:	4620      	mov	r0, r4
 8008462:	f001 ff43 	bl	800a2ec <__pow5mult>
 8008466:	9005      	str	r0, [sp, #20]
 8008468:	2800      	cmp	r0, #0
 800846a:	f43f ae89 	beq.w	8008180 <_strtod_l+0x490>
 800846e:	2f00      	cmp	r7, #0
 8008470:	dd08      	ble.n	8008484 <_strtod_l+0x794>
 8008472:	9905      	ldr	r1, [sp, #20]
 8008474:	463a      	mov	r2, r7
 8008476:	4620      	mov	r0, r4
 8008478:	f001 ff92 	bl	800a3a0 <__lshift>
 800847c:	9005      	str	r0, [sp, #20]
 800847e:	2800      	cmp	r0, #0
 8008480:	f43f ae7e 	beq.w	8008180 <_strtod_l+0x490>
 8008484:	f1b9 0f00 	cmp.w	r9, #0
 8008488:	dd08      	ble.n	800849c <_strtod_l+0x7ac>
 800848a:	4631      	mov	r1, r6
 800848c:	464a      	mov	r2, r9
 800848e:	4620      	mov	r0, r4
 8008490:	f001 ff86 	bl	800a3a0 <__lshift>
 8008494:	4606      	mov	r6, r0
 8008496:	2800      	cmp	r0, #0
 8008498:	f43f ae72 	beq.w	8008180 <_strtod_l+0x490>
 800849c:	9a05      	ldr	r2, [sp, #20]
 800849e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80084a0:	4620      	mov	r0, r4
 80084a2:	f002 f809 	bl	800a4b8 <__mdiff>
 80084a6:	4605      	mov	r5, r0
 80084a8:	2800      	cmp	r0, #0
 80084aa:	f43f ae69 	beq.w	8008180 <_strtod_l+0x490>
 80084ae:	68c3      	ldr	r3, [r0, #12]
 80084b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80084b2:	2300      	movs	r3, #0
 80084b4:	60c3      	str	r3, [r0, #12]
 80084b6:	4631      	mov	r1, r6
 80084b8:	f001 ffe2 	bl	800a480 <__mcmp>
 80084bc:	2800      	cmp	r0, #0
 80084be:	da60      	bge.n	8008582 <_strtod_l+0x892>
 80084c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084c2:	ea53 030a 	orrs.w	r3, r3, sl
 80084c6:	f040 8082 	bne.w	80085ce <_strtod_l+0x8de>
 80084ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d17d      	bne.n	80085ce <_strtod_l+0x8de>
 80084d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80084d6:	0d1b      	lsrs	r3, r3, #20
 80084d8:	051b      	lsls	r3, r3, #20
 80084da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80084de:	d976      	bls.n	80085ce <_strtod_l+0x8de>
 80084e0:	696b      	ldr	r3, [r5, #20]
 80084e2:	b913      	cbnz	r3, 80084ea <_strtod_l+0x7fa>
 80084e4:	692b      	ldr	r3, [r5, #16]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	dd71      	ble.n	80085ce <_strtod_l+0x8de>
 80084ea:	4629      	mov	r1, r5
 80084ec:	2201      	movs	r2, #1
 80084ee:	4620      	mov	r0, r4
 80084f0:	f001 ff56 	bl	800a3a0 <__lshift>
 80084f4:	4631      	mov	r1, r6
 80084f6:	4605      	mov	r5, r0
 80084f8:	f001 ffc2 	bl	800a480 <__mcmp>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	dd66      	ble.n	80085ce <_strtod_l+0x8de>
 8008500:	9904      	ldr	r1, [sp, #16]
 8008502:	4a53      	ldr	r2, [pc, #332]	; (8008650 <_strtod_l+0x960>)
 8008504:	465b      	mov	r3, fp
 8008506:	2900      	cmp	r1, #0
 8008508:	f000 8081 	beq.w	800860e <_strtod_l+0x91e>
 800850c:	ea02 010b 	and.w	r1, r2, fp
 8008510:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008514:	dc7b      	bgt.n	800860e <_strtod_l+0x91e>
 8008516:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800851a:	f77f aea9 	ble.w	8008270 <_strtod_l+0x580>
 800851e:	4b4d      	ldr	r3, [pc, #308]	; (8008654 <_strtod_l+0x964>)
 8008520:	4650      	mov	r0, sl
 8008522:	4659      	mov	r1, fp
 8008524:	2200      	movs	r2, #0
 8008526:	f7f8 f867 	bl	80005f8 <__aeabi_dmul>
 800852a:	460b      	mov	r3, r1
 800852c:	4303      	orrs	r3, r0
 800852e:	bf08      	it	eq
 8008530:	2322      	moveq	r3, #34	; 0x22
 8008532:	4682      	mov	sl, r0
 8008534:	468b      	mov	fp, r1
 8008536:	bf08      	it	eq
 8008538:	6023      	streq	r3, [r4, #0]
 800853a:	e62b      	b.n	8008194 <_strtod_l+0x4a4>
 800853c:	f04f 32ff 	mov.w	r2, #4294967295
 8008540:	fa02 f303 	lsl.w	r3, r2, r3
 8008544:	ea03 0a0a 	and.w	sl, r3, sl
 8008548:	e6e3      	b.n	8008312 <_strtod_l+0x622>
 800854a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800854e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008552:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008556:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800855a:	fa01 f308 	lsl.w	r3, r1, r8
 800855e:	9308      	str	r3, [sp, #32]
 8008560:	910d      	str	r1, [sp, #52]	; 0x34
 8008562:	e746      	b.n	80083f2 <_strtod_l+0x702>
 8008564:	2300      	movs	r3, #0
 8008566:	9308      	str	r3, [sp, #32]
 8008568:	2301      	movs	r3, #1
 800856a:	930d      	str	r3, [sp, #52]	; 0x34
 800856c:	e741      	b.n	80083f2 <_strtod_l+0x702>
 800856e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008570:	4642      	mov	r2, r8
 8008572:	4620      	mov	r0, r4
 8008574:	f001 ff14 	bl	800a3a0 <__lshift>
 8008578:	9018      	str	r0, [sp, #96]	; 0x60
 800857a:	2800      	cmp	r0, #0
 800857c:	f47f af6b 	bne.w	8008456 <_strtod_l+0x766>
 8008580:	e5fe      	b.n	8008180 <_strtod_l+0x490>
 8008582:	465f      	mov	r7, fp
 8008584:	d16e      	bne.n	8008664 <_strtod_l+0x974>
 8008586:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008588:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800858c:	b342      	cbz	r2, 80085e0 <_strtod_l+0x8f0>
 800858e:	4a32      	ldr	r2, [pc, #200]	; (8008658 <_strtod_l+0x968>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d128      	bne.n	80085e6 <_strtod_l+0x8f6>
 8008594:	9b04      	ldr	r3, [sp, #16]
 8008596:	4651      	mov	r1, sl
 8008598:	b1eb      	cbz	r3, 80085d6 <_strtod_l+0x8e6>
 800859a:	4b2d      	ldr	r3, [pc, #180]	; (8008650 <_strtod_l+0x960>)
 800859c:	403b      	ands	r3, r7
 800859e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80085a2:	f04f 32ff 	mov.w	r2, #4294967295
 80085a6:	d819      	bhi.n	80085dc <_strtod_l+0x8ec>
 80085a8:	0d1b      	lsrs	r3, r3, #20
 80085aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085ae:	fa02 f303 	lsl.w	r3, r2, r3
 80085b2:	4299      	cmp	r1, r3
 80085b4:	d117      	bne.n	80085e6 <_strtod_l+0x8f6>
 80085b6:	4b29      	ldr	r3, [pc, #164]	; (800865c <_strtod_l+0x96c>)
 80085b8:	429f      	cmp	r7, r3
 80085ba:	d102      	bne.n	80085c2 <_strtod_l+0x8d2>
 80085bc:	3101      	adds	r1, #1
 80085be:	f43f addf 	beq.w	8008180 <_strtod_l+0x490>
 80085c2:	4b23      	ldr	r3, [pc, #140]	; (8008650 <_strtod_l+0x960>)
 80085c4:	403b      	ands	r3, r7
 80085c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80085ca:	f04f 0a00 	mov.w	sl, #0
 80085ce:	9b04      	ldr	r3, [sp, #16]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1a4      	bne.n	800851e <_strtod_l+0x82e>
 80085d4:	e5de      	b.n	8008194 <_strtod_l+0x4a4>
 80085d6:	f04f 33ff 	mov.w	r3, #4294967295
 80085da:	e7ea      	b.n	80085b2 <_strtod_l+0x8c2>
 80085dc:	4613      	mov	r3, r2
 80085de:	e7e8      	b.n	80085b2 <_strtod_l+0x8c2>
 80085e0:	ea53 030a 	orrs.w	r3, r3, sl
 80085e4:	d08c      	beq.n	8008500 <_strtod_l+0x810>
 80085e6:	9b08      	ldr	r3, [sp, #32]
 80085e8:	b1db      	cbz	r3, 8008622 <_strtod_l+0x932>
 80085ea:	423b      	tst	r3, r7
 80085ec:	d0ef      	beq.n	80085ce <_strtod_l+0x8de>
 80085ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085f0:	9a04      	ldr	r2, [sp, #16]
 80085f2:	4650      	mov	r0, sl
 80085f4:	4659      	mov	r1, fp
 80085f6:	b1c3      	cbz	r3, 800862a <_strtod_l+0x93a>
 80085f8:	f7ff fb5d 	bl	8007cb6 <sulp>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	ec51 0b18 	vmov	r0, r1, d8
 8008604:	f7f7 fe42 	bl	800028c <__adddf3>
 8008608:	4682      	mov	sl, r0
 800860a:	468b      	mov	fp, r1
 800860c:	e7df      	b.n	80085ce <_strtod_l+0x8de>
 800860e:	4013      	ands	r3, r2
 8008610:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008614:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008618:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800861c:	f04f 3aff 	mov.w	sl, #4294967295
 8008620:	e7d5      	b.n	80085ce <_strtod_l+0x8de>
 8008622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008624:	ea13 0f0a 	tst.w	r3, sl
 8008628:	e7e0      	b.n	80085ec <_strtod_l+0x8fc>
 800862a:	f7ff fb44 	bl	8007cb6 <sulp>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	ec51 0b18 	vmov	r0, r1, d8
 8008636:	f7f7 fe27 	bl	8000288 <__aeabi_dsub>
 800863a:	2200      	movs	r2, #0
 800863c:	2300      	movs	r3, #0
 800863e:	4682      	mov	sl, r0
 8008640:	468b      	mov	fp, r1
 8008642:	f7f8 fa41 	bl	8000ac8 <__aeabi_dcmpeq>
 8008646:	2800      	cmp	r0, #0
 8008648:	d0c1      	beq.n	80085ce <_strtod_l+0x8de>
 800864a:	e611      	b.n	8008270 <_strtod_l+0x580>
 800864c:	fffffc02 	.word	0xfffffc02
 8008650:	7ff00000 	.word	0x7ff00000
 8008654:	39500000 	.word	0x39500000
 8008658:	000fffff 	.word	0x000fffff
 800865c:	7fefffff 	.word	0x7fefffff
 8008660:	0800c4f0 	.word	0x0800c4f0
 8008664:	4631      	mov	r1, r6
 8008666:	4628      	mov	r0, r5
 8008668:	f002 f888 	bl	800a77c <__ratio>
 800866c:	ec59 8b10 	vmov	r8, r9, d0
 8008670:	ee10 0a10 	vmov	r0, s0
 8008674:	2200      	movs	r2, #0
 8008676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800867a:	4649      	mov	r1, r9
 800867c:	f7f8 fa38 	bl	8000af0 <__aeabi_dcmple>
 8008680:	2800      	cmp	r0, #0
 8008682:	d07a      	beq.n	800877a <_strtod_l+0xa8a>
 8008684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008686:	2b00      	cmp	r3, #0
 8008688:	d04a      	beq.n	8008720 <_strtod_l+0xa30>
 800868a:	4b95      	ldr	r3, [pc, #596]	; (80088e0 <_strtod_l+0xbf0>)
 800868c:	2200      	movs	r2, #0
 800868e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008692:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80088e0 <_strtod_l+0xbf0>
 8008696:	f04f 0800 	mov.w	r8, #0
 800869a:	4b92      	ldr	r3, [pc, #584]	; (80088e4 <_strtod_l+0xbf4>)
 800869c:	403b      	ands	r3, r7
 800869e:	930d      	str	r3, [sp, #52]	; 0x34
 80086a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086a2:	4b91      	ldr	r3, [pc, #580]	; (80088e8 <_strtod_l+0xbf8>)
 80086a4:	429a      	cmp	r2, r3
 80086a6:	f040 80b0 	bne.w	800880a <_strtod_l+0xb1a>
 80086aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80086b2:	ec4b ab10 	vmov	d0, sl, fp
 80086b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80086ba:	f001 ff87 	bl	800a5cc <__ulp>
 80086be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086c2:	ec53 2b10 	vmov	r2, r3, d0
 80086c6:	f7f7 ff97 	bl	80005f8 <__aeabi_dmul>
 80086ca:	4652      	mov	r2, sl
 80086cc:	465b      	mov	r3, fp
 80086ce:	f7f7 fddd 	bl	800028c <__adddf3>
 80086d2:	460b      	mov	r3, r1
 80086d4:	4983      	ldr	r1, [pc, #524]	; (80088e4 <_strtod_l+0xbf4>)
 80086d6:	4a85      	ldr	r2, [pc, #532]	; (80088ec <_strtod_l+0xbfc>)
 80086d8:	4019      	ands	r1, r3
 80086da:	4291      	cmp	r1, r2
 80086dc:	4682      	mov	sl, r0
 80086de:	d960      	bls.n	80087a2 <_strtod_l+0xab2>
 80086e0:	ee18 3a90 	vmov	r3, s17
 80086e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d104      	bne.n	80086f6 <_strtod_l+0xa06>
 80086ec:	ee18 3a10 	vmov	r3, s16
 80086f0:	3301      	adds	r3, #1
 80086f2:	f43f ad45 	beq.w	8008180 <_strtod_l+0x490>
 80086f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80088f8 <_strtod_l+0xc08>
 80086fa:	f04f 3aff 	mov.w	sl, #4294967295
 80086fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008700:	4620      	mov	r0, r4
 8008702:	f001 fc31 	bl	8009f68 <_Bfree>
 8008706:	9905      	ldr	r1, [sp, #20]
 8008708:	4620      	mov	r0, r4
 800870a:	f001 fc2d 	bl	8009f68 <_Bfree>
 800870e:	4631      	mov	r1, r6
 8008710:	4620      	mov	r0, r4
 8008712:	f001 fc29 	bl	8009f68 <_Bfree>
 8008716:	4629      	mov	r1, r5
 8008718:	4620      	mov	r0, r4
 800871a:	f001 fc25 	bl	8009f68 <_Bfree>
 800871e:	e61a      	b.n	8008356 <_strtod_l+0x666>
 8008720:	f1ba 0f00 	cmp.w	sl, #0
 8008724:	d11b      	bne.n	800875e <_strtod_l+0xa6e>
 8008726:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800872a:	b9f3      	cbnz	r3, 800876a <_strtod_l+0xa7a>
 800872c:	4b6c      	ldr	r3, [pc, #432]	; (80088e0 <_strtod_l+0xbf0>)
 800872e:	2200      	movs	r2, #0
 8008730:	4640      	mov	r0, r8
 8008732:	4649      	mov	r1, r9
 8008734:	f7f8 f9d2 	bl	8000adc <__aeabi_dcmplt>
 8008738:	b9d0      	cbnz	r0, 8008770 <_strtod_l+0xa80>
 800873a:	4640      	mov	r0, r8
 800873c:	4649      	mov	r1, r9
 800873e:	4b6c      	ldr	r3, [pc, #432]	; (80088f0 <_strtod_l+0xc00>)
 8008740:	2200      	movs	r2, #0
 8008742:	f7f7 ff59 	bl	80005f8 <__aeabi_dmul>
 8008746:	4680      	mov	r8, r0
 8008748:	4689      	mov	r9, r1
 800874a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800874e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008752:	9315      	str	r3, [sp, #84]	; 0x54
 8008754:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008758:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800875c:	e79d      	b.n	800869a <_strtod_l+0x9aa>
 800875e:	f1ba 0f01 	cmp.w	sl, #1
 8008762:	d102      	bne.n	800876a <_strtod_l+0xa7a>
 8008764:	2f00      	cmp	r7, #0
 8008766:	f43f ad83 	beq.w	8008270 <_strtod_l+0x580>
 800876a:	4b62      	ldr	r3, [pc, #392]	; (80088f4 <_strtod_l+0xc04>)
 800876c:	2200      	movs	r2, #0
 800876e:	e78e      	b.n	800868e <_strtod_l+0x99e>
 8008770:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80088f0 <_strtod_l+0xc00>
 8008774:	f04f 0800 	mov.w	r8, #0
 8008778:	e7e7      	b.n	800874a <_strtod_l+0xa5a>
 800877a:	4b5d      	ldr	r3, [pc, #372]	; (80088f0 <_strtod_l+0xc00>)
 800877c:	4640      	mov	r0, r8
 800877e:	4649      	mov	r1, r9
 8008780:	2200      	movs	r2, #0
 8008782:	f7f7 ff39 	bl	80005f8 <__aeabi_dmul>
 8008786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008788:	4680      	mov	r8, r0
 800878a:	4689      	mov	r9, r1
 800878c:	b933      	cbnz	r3, 800879c <_strtod_l+0xaac>
 800878e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008792:	900e      	str	r0, [sp, #56]	; 0x38
 8008794:	930f      	str	r3, [sp, #60]	; 0x3c
 8008796:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800879a:	e7dd      	b.n	8008758 <_strtod_l+0xa68>
 800879c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80087a0:	e7f9      	b.n	8008796 <_strtod_l+0xaa6>
 80087a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80087a6:	9b04      	ldr	r3, [sp, #16]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1a8      	bne.n	80086fe <_strtod_l+0xa0e>
 80087ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80087b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087b2:	0d1b      	lsrs	r3, r3, #20
 80087b4:	051b      	lsls	r3, r3, #20
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d1a1      	bne.n	80086fe <_strtod_l+0xa0e>
 80087ba:	4640      	mov	r0, r8
 80087bc:	4649      	mov	r1, r9
 80087be:	f7f8 fa7b 	bl	8000cb8 <__aeabi_d2lz>
 80087c2:	f7f7 feeb 	bl	800059c <__aeabi_l2d>
 80087c6:	4602      	mov	r2, r0
 80087c8:	460b      	mov	r3, r1
 80087ca:	4640      	mov	r0, r8
 80087cc:	4649      	mov	r1, r9
 80087ce:	f7f7 fd5b 	bl	8000288 <__aeabi_dsub>
 80087d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087d8:	ea43 030a 	orr.w	r3, r3, sl
 80087dc:	4313      	orrs	r3, r2
 80087de:	4680      	mov	r8, r0
 80087e0:	4689      	mov	r9, r1
 80087e2:	d055      	beq.n	8008890 <_strtod_l+0xba0>
 80087e4:	a336      	add	r3, pc, #216	; (adr r3, 80088c0 <_strtod_l+0xbd0>)
 80087e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ea:	f7f8 f977 	bl	8000adc <__aeabi_dcmplt>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	f47f acd0 	bne.w	8008194 <_strtod_l+0x4a4>
 80087f4:	a334      	add	r3, pc, #208	; (adr r3, 80088c8 <_strtod_l+0xbd8>)
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	4640      	mov	r0, r8
 80087fc:	4649      	mov	r1, r9
 80087fe:	f7f8 f98b 	bl	8000b18 <__aeabi_dcmpgt>
 8008802:	2800      	cmp	r0, #0
 8008804:	f43f af7b 	beq.w	80086fe <_strtod_l+0xa0e>
 8008808:	e4c4      	b.n	8008194 <_strtod_l+0x4a4>
 800880a:	9b04      	ldr	r3, [sp, #16]
 800880c:	b333      	cbz	r3, 800885c <_strtod_l+0xb6c>
 800880e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008810:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008814:	d822      	bhi.n	800885c <_strtod_l+0xb6c>
 8008816:	a32e      	add	r3, pc, #184	; (adr r3, 80088d0 <_strtod_l+0xbe0>)
 8008818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881c:	4640      	mov	r0, r8
 800881e:	4649      	mov	r1, r9
 8008820:	f7f8 f966 	bl	8000af0 <__aeabi_dcmple>
 8008824:	b1a0      	cbz	r0, 8008850 <_strtod_l+0xb60>
 8008826:	4649      	mov	r1, r9
 8008828:	4640      	mov	r0, r8
 800882a:	f7f8 f9bd 	bl	8000ba8 <__aeabi_d2uiz>
 800882e:	2801      	cmp	r0, #1
 8008830:	bf38      	it	cc
 8008832:	2001      	movcc	r0, #1
 8008834:	f7f7 fe66 	bl	8000504 <__aeabi_ui2d>
 8008838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800883a:	4680      	mov	r8, r0
 800883c:	4689      	mov	r9, r1
 800883e:	bb23      	cbnz	r3, 800888a <_strtod_l+0xb9a>
 8008840:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008844:	9010      	str	r0, [sp, #64]	; 0x40
 8008846:	9311      	str	r3, [sp, #68]	; 0x44
 8008848:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800884c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008852:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008854:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008858:	1a9b      	subs	r3, r3, r2
 800885a:	9309      	str	r3, [sp, #36]	; 0x24
 800885c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008860:	eeb0 0a48 	vmov.f32	s0, s16
 8008864:	eef0 0a68 	vmov.f32	s1, s17
 8008868:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800886c:	f001 feae 	bl	800a5cc <__ulp>
 8008870:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008874:	ec53 2b10 	vmov	r2, r3, d0
 8008878:	f7f7 febe 	bl	80005f8 <__aeabi_dmul>
 800887c:	ec53 2b18 	vmov	r2, r3, d8
 8008880:	f7f7 fd04 	bl	800028c <__adddf3>
 8008884:	4682      	mov	sl, r0
 8008886:	468b      	mov	fp, r1
 8008888:	e78d      	b.n	80087a6 <_strtod_l+0xab6>
 800888a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800888e:	e7db      	b.n	8008848 <_strtod_l+0xb58>
 8008890:	a311      	add	r3, pc, #68	; (adr r3, 80088d8 <_strtod_l+0xbe8>)
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	f7f8 f921 	bl	8000adc <__aeabi_dcmplt>
 800889a:	e7b2      	b.n	8008802 <_strtod_l+0xb12>
 800889c:	2300      	movs	r3, #0
 800889e:	930a      	str	r3, [sp, #40]	; 0x28
 80088a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80088a4:	6013      	str	r3, [r2, #0]
 80088a6:	f7ff ba6b 	b.w	8007d80 <_strtod_l+0x90>
 80088aa:	2a65      	cmp	r2, #101	; 0x65
 80088ac:	f43f ab5f 	beq.w	8007f6e <_strtod_l+0x27e>
 80088b0:	2a45      	cmp	r2, #69	; 0x45
 80088b2:	f43f ab5c 	beq.w	8007f6e <_strtod_l+0x27e>
 80088b6:	2301      	movs	r3, #1
 80088b8:	f7ff bb94 	b.w	8007fe4 <_strtod_l+0x2f4>
 80088bc:	f3af 8000 	nop.w
 80088c0:	94a03595 	.word	0x94a03595
 80088c4:	3fdfffff 	.word	0x3fdfffff
 80088c8:	35afe535 	.word	0x35afe535
 80088cc:	3fe00000 	.word	0x3fe00000
 80088d0:	ffc00000 	.word	0xffc00000
 80088d4:	41dfffff 	.word	0x41dfffff
 80088d8:	94a03595 	.word	0x94a03595
 80088dc:	3fcfffff 	.word	0x3fcfffff
 80088e0:	3ff00000 	.word	0x3ff00000
 80088e4:	7ff00000 	.word	0x7ff00000
 80088e8:	7fe00000 	.word	0x7fe00000
 80088ec:	7c9fffff 	.word	0x7c9fffff
 80088f0:	3fe00000 	.word	0x3fe00000
 80088f4:	bff00000 	.word	0xbff00000
 80088f8:	7fefffff 	.word	0x7fefffff

080088fc <_strtod_r>:
 80088fc:	4b01      	ldr	r3, [pc, #4]	; (8008904 <_strtod_r+0x8>)
 80088fe:	f7ff b9f7 	b.w	8007cf0 <_strtod_l>
 8008902:	bf00      	nop
 8008904:	20000104 	.word	0x20000104

08008908 <_strtol_l.constprop.0>:
 8008908:	2b01      	cmp	r3, #1
 800890a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800890e:	d001      	beq.n	8008914 <_strtol_l.constprop.0+0xc>
 8008910:	2b24      	cmp	r3, #36	; 0x24
 8008912:	d906      	bls.n	8008922 <_strtol_l.constprop.0+0x1a>
 8008914:	f7fe fa96 	bl	8006e44 <__errno>
 8008918:	2316      	movs	r3, #22
 800891a:	6003      	str	r3, [r0, #0]
 800891c:	2000      	movs	r0, #0
 800891e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008922:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008a08 <_strtol_l.constprop.0+0x100>
 8008926:	460d      	mov	r5, r1
 8008928:	462e      	mov	r6, r5
 800892a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800892e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008932:	f017 0708 	ands.w	r7, r7, #8
 8008936:	d1f7      	bne.n	8008928 <_strtol_l.constprop.0+0x20>
 8008938:	2c2d      	cmp	r4, #45	; 0x2d
 800893a:	d132      	bne.n	80089a2 <_strtol_l.constprop.0+0x9a>
 800893c:	782c      	ldrb	r4, [r5, #0]
 800893e:	2701      	movs	r7, #1
 8008940:	1cb5      	adds	r5, r6, #2
 8008942:	2b00      	cmp	r3, #0
 8008944:	d05b      	beq.n	80089fe <_strtol_l.constprop.0+0xf6>
 8008946:	2b10      	cmp	r3, #16
 8008948:	d109      	bne.n	800895e <_strtol_l.constprop.0+0x56>
 800894a:	2c30      	cmp	r4, #48	; 0x30
 800894c:	d107      	bne.n	800895e <_strtol_l.constprop.0+0x56>
 800894e:	782c      	ldrb	r4, [r5, #0]
 8008950:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008954:	2c58      	cmp	r4, #88	; 0x58
 8008956:	d14d      	bne.n	80089f4 <_strtol_l.constprop.0+0xec>
 8008958:	786c      	ldrb	r4, [r5, #1]
 800895a:	2310      	movs	r3, #16
 800895c:	3502      	adds	r5, #2
 800895e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008962:	f108 38ff 	add.w	r8, r8, #4294967295
 8008966:	f04f 0c00 	mov.w	ip, #0
 800896a:	fbb8 f9f3 	udiv	r9, r8, r3
 800896e:	4666      	mov	r6, ip
 8008970:	fb03 8a19 	mls	sl, r3, r9, r8
 8008974:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008978:	f1be 0f09 	cmp.w	lr, #9
 800897c:	d816      	bhi.n	80089ac <_strtol_l.constprop.0+0xa4>
 800897e:	4674      	mov	r4, lr
 8008980:	42a3      	cmp	r3, r4
 8008982:	dd24      	ble.n	80089ce <_strtol_l.constprop.0+0xc6>
 8008984:	f1bc 0f00 	cmp.w	ip, #0
 8008988:	db1e      	blt.n	80089c8 <_strtol_l.constprop.0+0xc0>
 800898a:	45b1      	cmp	r9, r6
 800898c:	d31c      	bcc.n	80089c8 <_strtol_l.constprop.0+0xc0>
 800898e:	d101      	bne.n	8008994 <_strtol_l.constprop.0+0x8c>
 8008990:	45a2      	cmp	sl, r4
 8008992:	db19      	blt.n	80089c8 <_strtol_l.constprop.0+0xc0>
 8008994:	fb06 4603 	mla	r6, r6, r3, r4
 8008998:	f04f 0c01 	mov.w	ip, #1
 800899c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089a0:	e7e8      	b.n	8008974 <_strtol_l.constprop.0+0x6c>
 80089a2:	2c2b      	cmp	r4, #43	; 0x2b
 80089a4:	bf04      	itt	eq
 80089a6:	782c      	ldrbeq	r4, [r5, #0]
 80089a8:	1cb5      	addeq	r5, r6, #2
 80089aa:	e7ca      	b.n	8008942 <_strtol_l.constprop.0+0x3a>
 80089ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80089b0:	f1be 0f19 	cmp.w	lr, #25
 80089b4:	d801      	bhi.n	80089ba <_strtol_l.constprop.0+0xb2>
 80089b6:	3c37      	subs	r4, #55	; 0x37
 80089b8:	e7e2      	b.n	8008980 <_strtol_l.constprop.0+0x78>
 80089ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80089be:	f1be 0f19 	cmp.w	lr, #25
 80089c2:	d804      	bhi.n	80089ce <_strtol_l.constprop.0+0xc6>
 80089c4:	3c57      	subs	r4, #87	; 0x57
 80089c6:	e7db      	b.n	8008980 <_strtol_l.constprop.0+0x78>
 80089c8:	f04f 3cff 	mov.w	ip, #4294967295
 80089cc:	e7e6      	b.n	800899c <_strtol_l.constprop.0+0x94>
 80089ce:	f1bc 0f00 	cmp.w	ip, #0
 80089d2:	da05      	bge.n	80089e0 <_strtol_l.constprop.0+0xd8>
 80089d4:	2322      	movs	r3, #34	; 0x22
 80089d6:	6003      	str	r3, [r0, #0]
 80089d8:	4646      	mov	r6, r8
 80089da:	b942      	cbnz	r2, 80089ee <_strtol_l.constprop.0+0xe6>
 80089dc:	4630      	mov	r0, r6
 80089de:	e79e      	b.n	800891e <_strtol_l.constprop.0+0x16>
 80089e0:	b107      	cbz	r7, 80089e4 <_strtol_l.constprop.0+0xdc>
 80089e2:	4276      	negs	r6, r6
 80089e4:	2a00      	cmp	r2, #0
 80089e6:	d0f9      	beq.n	80089dc <_strtol_l.constprop.0+0xd4>
 80089e8:	f1bc 0f00 	cmp.w	ip, #0
 80089ec:	d000      	beq.n	80089f0 <_strtol_l.constprop.0+0xe8>
 80089ee:	1e69      	subs	r1, r5, #1
 80089f0:	6011      	str	r1, [r2, #0]
 80089f2:	e7f3      	b.n	80089dc <_strtol_l.constprop.0+0xd4>
 80089f4:	2430      	movs	r4, #48	; 0x30
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1b1      	bne.n	800895e <_strtol_l.constprop.0+0x56>
 80089fa:	2308      	movs	r3, #8
 80089fc:	e7af      	b.n	800895e <_strtol_l.constprop.0+0x56>
 80089fe:	2c30      	cmp	r4, #48	; 0x30
 8008a00:	d0a5      	beq.n	800894e <_strtol_l.constprop.0+0x46>
 8008a02:	230a      	movs	r3, #10
 8008a04:	e7ab      	b.n	800895e <_strtol_l.constprop.0+0x56>
 8008a06:	bf00      	nop
 8008a08:	0800c555 	.word	0x0800c555

08008a0c <_strtol_r>:
 8008a0c:	f7ff bf7c 	b.w	8008908 <_strtol_l.constprop.0>

08008a10 <_write_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	4d07      	ldr	r5, [pc, #28]	; (8008a30 <_write_r+0x20>)
 8008a14:	4604      	mov	r4, r0
 8008a16:	4608      	mov	r0, r1
 8008a18:	4611      	mov	r1, r2
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	602a      	str	r2, [r5, #0]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	f7f9 ff2b 	bl	800287a <_write>
 8008a24:	1c43      	adds	r3, r0, #1
 8008a26:	d102      	bne.n	8008a2e <_write_r+0x1e>
 8008a28:	682b      	ldr	r3, [r5, #0]
 8008a2a:	b103      	cbz	r3, 8008a2e <_write_r+0x1e>
 8008a2c:	6023      	str	r3, [r4, #0]
 8008a2e:	bd38      	pop	{r3, r4, r5, pc}
 8008a30:	20000e94 	.word	0x20000e94

08008a34 <__assert_func>:
 8008a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a36:	4614      	mov	r4, r2
 8008a38:	461a      	mov	r2, r3
 8008a3a:	4b09      	ldr	r3, [pc, #36]	; (8008a60 <__assert_func+0x2c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4605      	mov	r5, r0
 8008a40:	68d8      	ldr	r0, [r3, #12]
 8008a42:	b14c      	cbz	r4, 8008a58 <__assert_func+0x24>
 8008a44:	4b07      	ldr	r3, [pc, #28]	; (8008a64 <__assert_func+0x30>)
 8008a46:	9100      	str	r1, [sp, #0]
 8008a48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a4c:	4906      	ldr	r1, [pc, #24]	; (8008a68 <__assert_func+0x34>)
 8008a4e:	462b      	mov	r3, r5
 8008a50:	f000 fe98 	bl	8009784 <fiprintf>
 8008a54:	f002 fbc2 	bl	800b1dc <abort>
 8008a58:	4b04      	ldr	r3, [pc, #16]	; (8008a6c <__assert_func+0x38>)
 8008a5a:	461c      	mov	r4, r3
 8008a5c:	e7f3      	b.n	8008a46 <__assert_func+0x12>
 8008a5e:	bf00      	nop
 8008a60:	2000009c 	.word	0x2000009c
 8008a64:	0800c518 	.word	0x0800c518
 8008a68:	0800c525 	.word	0x0800c525
 8008a6c:	0800c553 	.word	0x0800c553

08008a70 <_close_r>:
 8008a70:	b538      	push	{r3, r4, r5, lr}
 8008a72:	4d06      	ldr	r5, [pc, #24]	; (8008a8c <_close_r+0x1c>)
 8008a74:	2300      	movs	r3, #0
 8008a76:	4604      	mov	r4, r0
 8008a78:	4608      	mov	r0, r1
 8008a7a:	602b      	str	r3, [r5, #0]
 8008a7c:	f7f9 ff19 	bl	80028b2 <_close>
 8008a80:	1c43      	adds	r3, r0, #1
 8008a82:	d102      	bne.n	8008a8a <_close_r+0x1a>
 8008a84:	682b      	ldr	r3, [r5, #0]
 8008a86:	b103      	cbz	r3, 8008a8a <_close_r+0x1a>
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	bd38      	pop	{r3, r4, r5, pc}
 8008a8c:	20000e94 	.word	0x20000e94

08008a90 <quorem>:
 8008a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	6903      	ldr	r3, [r0, #16]
 8008a96:	690c      	ldr	r4, [r1, #16]
 8008a98:	42a3      	cmp	r3, r4
 8008a9a:	4607      	mov	r7, r0
 8008a9c:	f2c0 8081 	blt.w	8008ba2 <quorem+0x112>
 8008aa0:	3c01      	subs	r4, #1
 8008aa2:	f101 0814 	add.w	r8, r1, #20
 8008aa6:	f100 0514 	add.w	r5, r0, #20
 8008aaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008aae:	9301      	str	r3, [sp, #4]
 8008ab0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ab4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	429a      	cmp	r2, r3
 8008abc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ac0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ac4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ac8:	d331      	bcc.n	8008b2e <quorem+0x9e>
 8008aca:	f04f 0e00 	mov.w	lr, #0
 8008ace:	4640      	mov	r0, r8
 8008ad0:	46ac      	mov	ip, r5
 8008ad2:	46f2      	mov	sl, lr
 8008ad4:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ad8:	b293      	uxth	r3, r2
 8008ada:	fb06 e303 	mla	r3, r6, r3, lr
 8008ade:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	ebaa 0303 	sub.w	r3, sl, r3
 8008ae8:	f8dc a000 	ldr.w	sl, [ip]
 8008aec:	0c12      	lsrs	r2, r2, #16
 8008aee:	fa13 f38a 	uxtah	r3, r3, sl
 8008af2:	fb06 e202 	mla	r2, r6, r2, lr
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	9b00      	ldr	r3, [sp, #0]
 8008afa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008afe:	b292      	uxth	r2, r2
 8008b00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b08:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b0c:	4581      	cmp	r9, r0
 8008b0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b12:	f84c 3b04 	str.w	r3, [ip], #4
 8008b16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b1a:	d2db      	bcs.n	8008ad4 <quorem+0x44>
 8008b1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b20:	b92b      	cbnz	r3, 8008b2e <quorem+0x9e>
 8008b22:	9b01      	ldr	r3, [sp, #4]
 8008b24:	3b04      	subs	r3, #4
 8008b26:	429d      	cmp	r5, r3
 8008b28:	461a      	mov	r2, r3
 8008b2a:	d32e      	bcc.n	8008b8a <quorem+0xfa>
 8008b2c:	613c      	str	r4, [r7, #16]
 8008b2e:	4638      	mov	r0, r7
 8008b30:	f001 fca6 	bl	800a480 <__mcmp>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	db24      	blt.n	8008b82 <quorem+0xf2>
 8008b38:	3601      	adds	r6, #1
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	f04f 0c00 	mov.w	ip, #0
 8008b40:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b44:	f8d0 e000 	ldr.w	lr, [r0]
 8008b48:	b293      	uxth	r3, r2
 8008b4a:	ebac 0303 	sub.w	r3, ip, r3
 8008b4e:	0c12      	lsrs	r2, r2, #16
 8008b50:	fa13 f38e 	uxtah	r3, r3, lr
 8008b54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b62:	45c1      	cmp	r9, r8
 8008b64:	f840 3b04 	str.w	r3, [r0], #4
 8008b68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b6c:	d2e8      	bcs.n	8008b40 <quorem+0xb0>
 8008b6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b76:	b922      	cbnz	r2, 8008b82 <quorem+0xf2>
 8008b78:	3b04      	subs	r3, #4
 8008b7a:	429d      	cmp	r5, r3
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	d30a      	bcc.n	8008b96 <quorem+0x106>
 8008b80:	613c      	str	r4, [r7, #16]
 8008b82:	4630      	mov	r0, r6
 8008b84:	b003      	add	sp, #12
 8008b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8a:	6812      	ldr	r2, [r2, #0]
 8008b8c:	3b04      	subs	r3, #4
 8008b8e:	2a00      	cmp	r2, #0
 8008b90:	d1cc      	bne.n	8008b2c <quorem+0x9c>
 8008b92:	3c01      	subs	r4, #1
 8008b94:	e7c7      	b.n	8008b26 <quorem+0x96>
 8008b96:	6812      	ldr	r2, [r2, #0]
 8008b98:	3b04      	subs	r3, #4
 8008b9a:	2a00      	cmp	r2, #0
 8008b9c:	d1f0      	bne.n	8008b80 <quorem+0xf0>
 8008b9e:	3c01      	subs	r4, #1
 8008ba0:	e7eb      	b.n	8008b7a <quorem+0xea>
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	e7ee      	b.n	8008b84 <quorem+0xf4>
	...

08008ba8 <_dtoa_r>:
 8008ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bac:	ed2d 8b04 	vpush	{d8-d9}
 8008bb0:	ec57 6b10 	vmov	r6, r7, d0
 8008bb4:	b093      	sub	sp, #76	; 0x4c
 8008bb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008bb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008bbc:	9106      	str	r1, [sp, #24]
 8008bbe:	ee10 aa10 	vmov	sl, s0
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	9209      	str	r2, [sp, #36]	; 0x24
 8008bc6:	930c      	str	r3, [sp, #48]	; 0x30
 8008bc8:	46bb      	mov	fp, r7
 8008bca:	b975      	cbnz	r5, 8008bea <_dtoa_r+0x42>
 8008bcc:	2010      	movs	r0, #16
 8008bce:	f001 f971 	bl	8009eb4 <malloc>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	6260      	str	r0, [r4, #36]	; 0x24
 8008bd6:	b920      	cbnz	r0, 8008be2 <_dtoa_r+0x3a>
 8008bd8:	4ba7      	ldr	r3, [pc, #668]	; (8008e78 <_dtoa_r+0x2d0>)
 8008bda:	21ea      	movs	r1, #234	; 0xea
 8008bdc:	48a7      	ldr	r0, [pc, #668]	; (8008e7c <_dtoa_r+0x2d4>)
 8008bde:	f7ff ff29 	bl	8008a34 <__assert_func>
 8008be2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008be6:	6005      	str	r5, [r0, #0]
 8008be8:	60c5      	str	r5, [r0, #12]
 8008bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bec:	6819      	ldr	r1, [r3, #0]
 8008bee:	b151      	cbz	r1, 8008c06 <_dtoa_r+0x5e>
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	604a      	str	r2, [r1, #4]
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	4093      	lsls	r3, r2
 8008bf8:	608b      	str	r3, [r1, #8]
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f001 f9b4 	bl	8009f68 <_Bfree>
 8008c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	1e3b      	subs	r3, r7, #0
 8008c08:	bfaa      	itet	ge
 8008c0a:	2300      	movge	r3, #0
 8008c0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008c10:	f8c8 3000 	strge.w	r3, [r8]
 8008c14:	4b9a      	ldr	r3, [pc, #616]	; (8008e80 <_dtoa_r+0x2d8>)
 8008c16:	bfbc      	itt	lt
 8008c18:	2201      	movlt	r2, #1
 8008c1a:	f8c8 2000 	strlt.w	r2, [r8]
 8008c1e:	ea33 030b 	bics.w	r3, r3, fp
 8008c22:	d11b      	bne.n	8008c5c <_dtoa_r+0xb4>
 8008c24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c26:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c2a:	6013      	str	r3, [r2, #0]
 8008c2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c30:	4333      	orrs	r3, r6
 8008c32:	f000 8592 	beq.w	800975a <_dtoa_r+0xbb2>
 8008c36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c38:	b963      	cbnz	r3, 8008c54 <_dtoa_r+0xac>
 8008c3a:	4b92      	ldr	r3, [pc, #584]	; (8008e84 <_dtoa_r+0x2dc>)
 8008c3c:	e022      	b.n	8008c84 <_dtoa_r+0xdc>
 8008c3e:	4b92      	ldr	r3, [pc, #584]	; (8008e88 <_dtoa_r+0x2e0>)
 8008c40:	9301      	str	r3, [sp, #4]
 8008c42:	3308      	adds	r3, #8
 8008c44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	9801      	ldr	r0, [sp, #4]
 8008c4a:	b013      	add	sp, #76	; 0x4c
 8008c4c:	ecbd 8b04 	vpop	{d8-d9}
 8008c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c54:	4b8b      	ldr	r3, [pc, #556]	; (8008e84 <_dtoa_r+0x2dc>)
 8008c56:	9301      	str	r3, [sp, #4]
 8008c58:	3303      	adds	r3, #3
 8008c5a:	e7f3      	b.n	8008c44 <_dtoa_r+0x9c>
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	2300      	movs	r3, #0
 8008c60:	4650      	mov	r0, sl
 8008c62:	4659      	mov	r1, fp
 8008c64:	f7f7 ff30 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c68:	ec4b ab19 	vmov	d9, sl, fp
 8008c6c:	4680      	mov	r8, r0
 8008c6e:	b158      	cbz	r0, 8008c88 <_dtoa_r+0xe0>
 8008c70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c72:	2301      	movs	r3, #1
 8008c74:	6013      	str	r3, [r2, #0]
 8008c76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 856b 	beq.w	8009754 <_dtoa_r+0xbac>
 8008c7e:	4883      	ldr	r0, [pc, #524]	; (8008e8c <_dtoa_r+0x2e4>)
 8008c80:	6018      	str	r0, [r3, #0]
 8008c82:	1e43      	subs	r3, r0, #1
 8008c84:	9301      	str	r3, [sp, #4]
 8008c86:	e7df      	b.n	8008c48 <_dtoa_r+0xa0>
 8008c88:	ec4b ab10 	vmov	d0, sl, fp
 8008c8c:	aa10      	add	r2, sp, #64	; 0x40
 8008c8e:	a911      	add	r1, sp, #68	; 0x44
 8008c90:	4620      	mov	r0, r4
 8008c92:	f001 fd17 	bl	800a6c4 <__d2b>
 8008c96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008c9a:	ee08 0a10 	vmov	s16, r0
 8008c9e:	2d00      	cmp	r5, #0
 8008ca0:	f000 8084 	beq.w	8008dac <_dtoa_r+0x204>
 8008ca4:	ee19 3a90 	vmov	r3, s19
 8008ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008cb0:	4656      	mov	r6, sl
 8008cb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008cb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008cba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008cbe:	4b74      	ldr	r3, [pc, #464]	; (8008e90 <_dtoa_r+0x2e8>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	4639      	mov	r1, r7
 8008cc6:	f7f7 fadf 	bl	8000288 <__aeabi_dsub>
 8008cca:	a365      	add	r3, pc, #404	; (adr r3, 8008e60 <_dtoa_r+0x2b8>)
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	f7f7 fc92 	bl	80005f8 <__aeabi_dmul>
 8008cd4:	a364      	add	r3, pc, #400	; (adr r3, 8008e68 <_dtoa_r+0x2c0>)
 8008cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cda:	f7f7 fad7 	bl	800028c <__adddf3>
 8008cde:	4606      	mov	r6, r0
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	460f      	mov	r7, r1
 8008ce4:	f7f7 fc1e 	bl	8000524 <__aeabi_i2d>
 8008ce8:	a361      	add	r3, pc, #388	; (adr r3, 8008e70 <_dtoa_r+0x2c8>)
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	f7f7 fc83 	bl	80005f8 <__aeabi_dmul>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	4639      	mov	r1, r7
 8008cfa:	f7f7 fac7 	bl	800028c <__adddf3>
 8008cfe:	4606      	mov	r6, r0
 8008d00:	460f      	mov	r7, r1
 8008d02:	f7f7 ff29 	bl	8000b58 <__aeabi_d2iz>
 8008d06:	2200      	movs	r2, #0
 8008d08:	9000      	str	r0, [sp, #0]
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	4639      	mov	r1, r7
 8008d10:	f7f7 fee4 	bl	8000adc <__aeabi_dcmplt>
 8008d14:	b150      	cbz	r0, 8008d2c <_dtoa_r+0x184>
 8008d16:	9800      	ldr	r0, [sp, #0]
 8008d18:	f7f7 fc04 	bl	8000524 <__aeabi_i2d>
 8008d1c:	4632      	mov	r2, r6
 8008d1e:	463b      	mov	r3, r7
 8008d20:	f7f7 fed2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d24:	b910      	cbnz	r0, 8008d2c <_dtoa_r+0x184>
 8008d26:	9b00      	ldr	r3, [sp, #0]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	9b00      	ldr	r3, [sp, #0]
 8008d2e:	2b16      	cmp	r3, #22
 8008d30:	d85a      	bhi.n	8008de8 <_dtoa_r+0x240>
 8008d32:	9a00      	ldr	r2, [sp, #0]
 8008d34:	4b57      	ldr	r3, [pc, #348]	; (8008e94 <_dtoa_r+0x2ec>)
 8008d36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3e:	ec51 0b19 	vmov	r0, r1, d9
 8008d42:	f7f7 fecb 	bl	8000adc <__aeabi_dcmplt>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d050      	beq.n	8008dec <_dtoa_r+0x244>
 8008d4a:	9b00      	ldr	r3, [sp, #0]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	2300      	movs	r3, #0
 8008d52:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d56:	1b5d      	subs	r5, r3, r5
 8008d58:	1e6b      	subs	r3, r5, #1
 8008d5a:	9305      	str	r3, [sp, #20]
 8008d5c:	bf45      	ittet	mi
 8008d5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008d62:	9304      	strmi	r3, [sp, #16]
 8008d64:	2300      	movpl	r3, #0
 8008d66:	2300      	movmi	r3, #0
 8008d68:	bf4c      	ite	mi
 8008d6a:	9305      	strmi	r3, [sp, #20]
 8008d6c:	9304      	strpl	r3, [sp, #16]
 8008d6e:	9b00      	ldr	r3, [sp, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	db3d      	blt.n	8008df0 <_dtoa_r+0x248>
 8008d74:	9b05      	ldr	r3, [sp, #20]
 8008d76:	9a00      	ldr	r2, [sp, #0]
 8008d78:	920a      	str	r2, [sp, #40]	; 0x28
 8008d7a:	4413      	add	r3, r2
 8008d7c:	9305      	str	r3, [sp, #20]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	9307      	str	r3, [sp, #28]
 8008d82:	9b06      	ldr	r3, [sp, #24]
 8008d84:	2b09      	cmp	r3, #9
 8008d86:	f200 8089 	bhi.w	8008e9c <_dtoa_r+0x2f4>
 8008d8a:	2b05      	cmp	r3, #5
 8008d8c:	bfc4      	itt	gt
 8008d8e:	3b04      	subgt	r3, #4
 8008d90:	9306      	strgt	r3, [sp, #24]
 8008d92:	9b06      	ldr	r3, [sp, #24]
 8008d94:	f1a3 0302 	sub.w	r3, r3, #2
 8008d98:	bfcc      	ite	gt
 8008d9a:	2500      	movgt	r5, #0
 8008d9c:	2501      	movle	r5, #1
 8008d9e:	2b03      	cmp	r3, #3
 8008da0:	f200 8087 	bhi.w	8008eb2 <_dtoa_r+0x30a>
 8008da4:	e8df f003 	tbb	[pc, r3]
 8008da8:	59383a2d 	.word	0x59383a2d
 8008dac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008db0:	441d      	add	r5, r3
 8008db2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008db6:	2b20      	cmp	r3, #32
 8008db8:	bfc1      	itttt	gt
 8008dba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008dbe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008dc2:	fa0b f303 	lslgt.w	r3, fp, r3
 8008dc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008dca:	bfda      	itte	le
 8008dcc:	f1c3 0320 	rsble	r3, r3, #32
 8008dd0:	fa06 f003 	lslle.w	r0, r6, r3
 8008dd4:	4318      	orrgt	r0, r3
 8008dd6:	f7f7 fb95 	bl	8000504 <__aeabi_ui2d>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	4606      	mov	r6, r0
 8008dde:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008de2:	3d01      	subs	r5, #1
 8008de4:	930e      	str	r3, [sp, #56]	; 0x38
 8008de6:	e76a      	b.n	8008cbe <_dtoa_r+0x116>
 8008de8:	2301      	movs	r3, #1
 8008dea:	e7b2      	b.n	8008d52 <_dtoa_r+0x1aa>
 8008dec:	900b      	str	r0, [sp, #44]	; 0x2c
 8008dee:	e7b1      	b.n	8008d54 <_dtoa_r+0x1ac>
 8008df0:	9b04      	ldr	r3, [sp, #16]
 8008df2:	9a00      	ldr	r2, [sp, #0]
 8008df4:	1a9b      	subs	r3, r3, r2
 8008df6:	9304      	str	r3, [sp, #16]
 8008df8:	4253      	negs	r3, r2
 8008dfa:	9307      	str	r3, [sp, #28]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8008e00:	e7bf      	b.n	8008d82 <_dtoa_r+0x1da>
 8008e02:	2300      	movs	r3, #0
 8008e04:	9308      	str	r3, [sp, #32]
 8008e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	dc55      	bgt.n	8008eb8 <_dtoa_r+0x310>
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e12:	461a      	mov	r2, r3
 8008e14:	9209      	str	r2, [sp, #36]	; 0x24
 8008e16:	e00c      	b.n	8008e32 <_dtoa_r+0x28a>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e7f3      	b.n	8008e04 <_dtoa_r+0x25c>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e20:	9308      	str	r3, [sp, #32]
 8008e22:	9b00      	ldr	r3, [sp, #0]
 8008e24:	4413      	add	r3, r2
 8008e26:	9302      	str	r3, [sp, #8]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	9303      	str	r3, [sp, #12]
 8008e2e:	bfb8      	it	lt
 8008e30:	2301      	movlt	r3, #1
 8008e32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e34:	2200      	movs	r2, #0
 8008e36:	6042      	str	r2, [r0, #4]
 8008e38:	2204      	movs	r2, #4
 8008e3a:	f102 0614 	add.w	r6, r2, #20
 8008e3e:	429e      	cmp	r6, r3
 8008e40:	6841      	ldr	r1, [r0, #4]
 8008e42:	d93d      	bls.n	8008ec0 <_dtoa_r+0x318>
 8008e44:	4620      	mov	r0, r4
 8008e46:	f001 f84f 	bl	8009ee8 <_Balloc>
 8008e4a:	9001      	str	r0, [sp, #4]
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d13b      	bne.n	8008ec8 <_dtoa_r+0x320>
 8008e50:	4b11      	ldr	r3, [pc, #68]	; (8008e98 <_dtoa_r+0x2f0>)
 8008e52:	4602      	mov	r2, r0
 8008e54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e58:	e6c0      	b.n	8008bdc <_dtoa_r+0x34>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e7df      	b.n	8008e1e <_dtoa_r+0x276>
 8008e5e:	bf00      	nop
 8008e60:	636f4361 	.word	0x636f4361
 8008e64:	3fd287a7 	.word	0x3fd287a7
 8008e68:	8b60c8b3 	.word	0x8b60c8b3
 8008e6c:	3fc68a28 	.word	0x3fc68a28
 8008e70:	509f79fb 	.word	0x509f79fb
 8008e74:	3fd34413 	.word	0x3fd34413
 8008e78:	0800c662 	.word	0x0800c662
 8008e7c:	0800c679 	.word	0x0800c679
 8008e80:	7ff00000 	.word	0x7ff00000
 8008e84:	0800c65e 	.word	0x0800c65e
 8008e88:	0800c655 	.word	0x0800c655
 8008e8c:	0800c49d 	.word	0x0800c49d
 8008e90:	3ff80000 	.word	0x3ff80000
 8008e94:	0800c7e8 	.word	0x0800c7e8
 8008e98:	0800c6d4 	.word	0x0800c6d4
 8008e9c:	2501      	movs	r5, #1
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	9306      	str	r3, [sp, #24]
 8008ea2:	9508      	str	r5, [sp, #32]
 8008ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ea8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008eac:	2200      	movs	r2, #0
 8008eae:	2312      	movs	r3, #18
 8008eb0:	e7b0      	b.n	8008e14 <_dtoa_r+0x26c>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	9308      	str	r3, [sp, #32]
 8008eb6:	e7f5      	b.n	8008ea4 <_dtoa_r+0x2fc>
 8008eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ebe:	e7b8      	b.n	8008e32 <_dtoa_r+0x28a>
 8008ec0:	3101      	adds	r1, #1
 8008ec2:	6041      	str	r1, [r0, #4]
 8008ec4:	0052      	lsls	r2, r2, #1
 8008ec6:	e7b8      	b.n	8008e3a <_dtoa_r+0x292>
 8008ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eca:	9a01      	ldr	r2, [sp, #4]
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	9b03      	ldr	r3, [sp, #12]
 8008ed0:	2b0e      	cmp	r3, #14
 8008ed2:	f200 809d 	bhi.w	8009010 <_dtoa_r+0x468>
 8008ed6:	2d00      	cmp	r5, #0
 8008ed8:	f000 809a 	beq.w	8009010 <_dtoa_r+0x468>
 8008edc:	9b00      	ldr	r3, [sp, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	dd32      	ble.n	8008f48 <_dtoa_r+0x3a0>
 8008ee2:	4ab7      	ldr	r2, [pc, #732]	; (80091c0 <_dtoa_r+0x618>)
 8008ee4:	f003 030f 	and.w	r3, r3, #15
 8008ee8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008eec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ef0:	9b00      	ldr	r3, [sp, #0]
 8008ef2:	05d8      	lsls	r0, r3, #23
 8008ef4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008ef8:	d516      	bpl.n	8008f28 <_dtoa_r+0x380>
 8008efa:	4bb2      	ldr	r3, [pc, #712]	; (80091c4 <_dtoa_r+0x61c>)
 8008efc:	ec51 0b19 	vmov	r0, r1, d9
 8008f00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f04:	f7f7 fca2 	bl	800084c <__aeabi_ddiv>
 8008f08:	f007 070f 	and.w	r7, r7, #15
 8008f0c:	4682      	mov	sl, r0
 8008f0e:	468b      	mov	fp, r1
 8008f10:	2503      	movs	r5, #3
 8008f12:	4eac      	ldr	r6, [pc, #688]	; (80091c4 <_dtoa_r+0x61c>)
 8008f14:	b957      	cbnz	r7, 8008f2c <_dtoa_r+0x384>
 8008f16:	4642      	mov	r2, r8
 8008f18:	464b      	mov	r3, r9
 8008f1a:	4650      	mov	r0, sl
 8008f1c:	4659      	mov	r1, fp
 8008f1e:	f7f7 fc95 	bl	800084c <__aeabi_ddiv>
 8008f22:	4682      	mov	sl, r0
 8008f24:	468b      	mov	fp, r1
 8008f26:	e028      	b.n	8008f7a <_dtoa_r+0x3d2>
 8008f28:	2502      	movs	r5, #2
 8008f2a:	e7f2      	b.n	8008f12 <_dtoa_r+0x36a>
 8008f2c:	07f9      	lsls	r1, r7, #31
 8008f2e:	d508      	bpl.n	8008f42 <_dtoa_r+0x39a>
 8008f30:	4640      	mov	r0, r8
 8008f32:	4649      	mov	r1, r9
 8008f34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f38:	f7f7 fb5e 	bl	80005f8 <__aeabi_dmul>
 8008f3c:	3501      	adds	r5, #1
 8008f3e:	4680      	mov	r8, r0
 8008f40:	4689      	mov	r9, r1
 8008f42:	107f      	asrs	r7, r7, #1
 8008f44:	3608      	adds	r6, #8
 8008f46:	e7e5      	b.n	8008f14 <_dtoa_r+0x36c>
 8008f48:	f000 809b 	beq.w	8009082 <_dtoa_r+0x4da>
 8008f4c:	9b00      	ldr	r3, [sp, #0]
 8008f4e:	4f9d      	ldr	r7, [pc, #628]	; (80091c4 <_dtoa_r+0x61c>)
 8008f50:	425e      	negs	r6, r3
 8008f52:	4b9b      	ldr	r3, [pc, #620]	; (80091c0 <_dtoa_r+0x618>)
 8008f54:	f006 020f 	and.w	r2, r6, #15
 8008f58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f60:	ec51 0b19 	vmov	r0, r1, d9
 8008f64:	f7f7 fb48 	bl	80005f8 <__aeabi_dmul>
 8008f68:	1136      	asrs	r6, r6, #4
 8008f6a:	4682      	mov	sl, r0
 8008f6c:	468b      	mov	fp, r1
 8008f6e:	2300      	movs	r3, #0
 8008f70:	2502      	movs	r5, #2
 8008f72:	2e00      	cmp	r6, #0
 8008f74:	d17a      	bne.n	800906c <_dtoa_r+0x4c4>
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1d3      	bne.n	8008f22 <_dtoa_r+0x37a>
 8008f7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f000 8082 	beq.w	8009086 <_dtoa_r+0x4de>
 8008f82:	4b91      	ldr	r3, [pc, #580]	; (80091c8 <_dtoa_r+0x620>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	4650      	mov	r0, sl
 8008f88:	4659      	mov	r1, fp
 8008f8a:	f7f7 fda7 	bl	8000adc <__aeabi_dcmplt>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d079      	beq.n	8009086 <_dtoa_r+0x4de>
 8008f92:	9b03      	ldr	r3, [sp, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d076      	beq.n	8009086 <_dtoa_r+0x4de>
 8008f98:	9b02      	ldr	r3, [sp, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	dd36      	ble.n	800900c <_dtoa_r+0x464>
 8008f9e:	9b00      	ldr	r3, [sp, #0]
 8008fa0:	4650      	mov	r0, sl
 8008fa2:	4659      	mov	r1, fp
 8008fa4:	1e5f      	subs	r7, r3, #1
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	4b88      	ldr	r3, [pc, #544]	; (80091cc <_dtoa_r+0x624>)
 8008faa:	f7f7 fb25 	bl	80005f8 <__aeabi_dmul>
 8008fae:	9e02      	ldr	r6, [sp, #8]
 8008fb0:	4682      	mov	sl, r0
 8008fb2:	468b      	mov	fp, r1
 8008fb4:	3501      	adds	r5, #1
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f7f7 fab4 	bl	8000524 <__aeabi_i2d>
 8008fbc:	4652      	mov	r2, sl
 8008fbe:	465b      	mov	r3, fp
 8008fc0:	f7f7 fb1a 	bl	80005f8 <__aeabi_dmul>
 8008fc4:	4b82      	ldr	r3, [pc, #520]	; (80091d0 <_dtoa_r+0x628>)
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f7f7 f960 	bl	800028c <__adddf3>
 8008fcc:	46d0      	mov	r8, sl
 8008fce:	46d9      	mov	r9, fp
 8008fd0:	4682      	mov	sl, r0
 8008fd2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008fd6:	2e00      	cmp	r6, #0
 8008fd8:	d158      	bne.n	800908c <_dtoa_r+0x4e4>
 8008fda:	4b7e      	ldr	r3, [pc, #504]	; (80091d4 <_dtoa_r+0x62c>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	4640      	mov	r0, r8
 8008fe0:	4649      	mov	r1, r9
 8008fe2:	f7f7 f951 	bl	8000288 <__aeabi_dsub>
 8008fe6:	4652      	mov	r2, sl
 8008fe8:	465b      	mov	r3, fp
 8008fea:	4680      	mov	r8, r0
 8008fec:	4689      	mov	r9, r1
 8008fee:	f7f7 fd93 	bl	8000b18 <__aeabi_dcmpgt>
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	f040 8295 	bne.w	8009522 <_dtoa_r+0x97a>
 8008ff8:	4652      	mov	r2, sl
 8008ffa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008ffe:	4640      	mov	r0, r8
 8009000:	4649      	mov	r1, r9
 8009002:	f7f7 fd6b 	bl	8000adc <__aeabi_dcmplt>
 8009006:	2800      	cmp	r0, #0
 8009008:	f040 8289 	bne.w	800951e <_dtoa_r+0x976>
 800900c:	ec5b ab19 	vmov	sl, fp, d9
 8009010:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009012:	2b00      	cmp	r3, #0
 8009014:	f2c0 8148 	blt.w	80092a8 <_dtoa_r+0x700>
 8009018:	9a00      	ldr	r2, [sp, #0]
 800901a:	2a0e      	cmp	r2, #14
 800901c:	f300 8144 	bgt.w	80092a8 <_dtoa_r+0x700>
 8009020:	4b67      	ldr	r3, [pc, #412]	; (80091c0 <_dtoa_r+0x618>)
 8009022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009026:	e9d3 8900 	ldrd	r8, r9, [r3]
 800902a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800902c:	2b00      	cmp	r3, #0
 800902e:	f280 80d5 	bge.w	80091dc <_dtoa_r+0x634>
 8009032:	9b03      	ldr	r3, [sp, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	f300 80d1 	bgt.w	80091dc <_dtoa_r+0x634>
 800903a:	f040 826f 	bne.w	800951c <_dtoa_r+0x974>
 800903e:	4b65      	ldr	r3, [pc, #404]	; (80091d4 <_dtoa_r+0x62c>)
 8009040:	2200      	movs	r2, #0
 8009042:	4640      	mov	r0, r8
 8009044:	4649      	mov	r1, r9
 8009046:	f7f7 fad7 	bl	80005f8 <__aeabi_dmul>
 800904a:	4652      	mov	r2, sl
 800904c:	465b      	mov	r3, fp
 800904e:	f7f7 fd59 	bl	8000b04 <__aeabi_dcmpge>
 8009052:	9e03      	ldr	r6, [sp, #12]
 8009054:	4637      	mov	r7, r6
 8009056:	2800      	cmp	r0, #0
 8009058:	f040 8245 	bne.w	80094e6 <_dtoa_r+0x93e>
 800905c:	9d01      	ldr	r5, [sp, #4]
 800905e:	2331      	movs	r3, #49	; 0x31
 8009060:	f805 3b01 	strb.w	r3, [r5], #1
 8009064:	9b00      	ldr	r3, [sp, #0]
 8009066:	3301      	adds	r3, #1
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	e240      	b.n	80094ee <_dtoa_r+0x946>
 800906c:	07f2      	lsls	r2, r6, #31
 800906e:	d505      	bpl.n	800907c <_dtoa_r+0x4d4>
 8009070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009074:	f7f7 fac0 	bl	80005f8 <__aeabi_dmul>
 8009078:	3501      	adds	r5, #1
 800907a:	2301      	movs	r3, #1
 800907c:	1076      	asrs	r6, r6, #1
 800907e:	3708      	adds	r7, #8
 8009080:	e777      	b.n	8008f72 <_dtoa_r+0x3ca>
 8009082:	2502      	movs	r5, #2
 8009084:	e779      	b.n	8008f7a <_dtoa_r+0x3d2>
 8009086:	9f00      	ldr	r7, [sp, #0]
 8009088:	9e03      	ldr	r6, [sp, #12]
 800908a:	e794      	b.n	8008fb6 <_dtoa_r+0x40e>
 800908c:	9901      	ldr	r1, [sp, #4]
 800908e:	4b4c      	ldr	r3, [pc, #304]	; (80091c0 <_dtoa_r+0x618>)
 8009090:	4431      	add	r1, r6
 8009092:	910d      	str	r1, [sp, #52]	; 0x34
 8009094:	9908      	ldr	r1, [sp, #32]
 8009096:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800909a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800909e:	2900      	cmp	r1, #0
 80090a0:	d043      	beq.n	800912a <_dtoa_r+0x582>
 80090a2:	494d      	ldr	r1, [pc, #308]	; (80091d8 <_dtoa_r+0x630>)
 80090a4:	2000      	movs	r0, #0
 80090a6:	f7f7 fbd1 	bl	800084c <__aeabi_ddiv>
 80090aa:	4652      	mov	r2, sl
 80090ac:	465b      	mov	r3, fp
 80090ae:	f7f7 f8eb 	bl	8000288 <__aeabi_dsub>
 80090b2:	9d01      	ldr	r5, [sp, #4]
 80090b4:	4682      	mov	sl, r0
 80090b6:	468b      	mov	fp, r1
 80090b8:	4649      	mov	r1, r9
 80090ba:	4640      	mov	r0, r8
 80090bc:	f7f7 fd4c 	bl	8000b58 <__aeabi_d2iz>
 80090c0:	4606      	mov	r6, r0
 80090c2:	f7f7 fa2f 	bl	8000524 <__aeabi_i2d>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4640      	mov	r0, r8
 80090cc:	4649      	mov	r1, r9
 80090ce:	f7f7 f8db 	bl	8000288 <__aeabi_dsub>
 80090d2:	3630      	adds	r6, #48	; 0x30
 80090d4:	f805 6b01 	strb.w	r6, [r5], #1
 80090d8:	4652      	mov	r2, sl
 80090da:	465b      	mov	r3, fp
 80090dc:	4680      	mov	r8, r0
 80090de:	4689      	mov	r9, r1
 80090e0:	f7f7 fcfc 	bl	8000adc <__aeabi_dcmplt>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d163      	bne.n	80091b0 <_dtoa_r+0x608>
 80090e8:	4642      	mov	r2, r8
 80090ea:	464b      	mov	r3, r9
 80090ec:	4936      	ldr	r1, [pc, #216]	; (80091c8 <_dtoa_r+0x620>)
 80090ee:	2000      	movs	r0, #0
 80090f0:	f7f7 f8ca 	bl	8000288 <__aeabi_dsub>
 80090f4:	4652      	mov	r2, sl
 80090f6:	465b      	mov	r3, fp
 80090f8:	f7f7 fcf0 	bl	8000adc <__aeabi_dcmplt>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	f040 80b5 	bne.w	800926c <_dtoa_r+0x6c4>
 8009102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009104:	429d      	cmp	r5, r3
 8009106:	d081      	beq.n	800900c <_dtoa_r+0x464>
 8009108:	4b30      	ldr	r3, [pc, #192]	; (80091cc <_dtoa_r+0x624>)
 800910a:	2200      	movs	r2, #0
 800910c:	4650      	mov	r0, sl
 800910e:	4659      	mov	r1, fp
 8009110:	f7f7 fa72 	bl	80005f8 <__aeabi_dmul>
 8009114:	4b2d      	ldr	r3, [pc, #180]	; (80091cc <_dtoa_r+0x624>)
 8009116:	4682      	mov	sl, r0
 8009118:	468b      	mov	fp, r1
 800911a:	4640      	mov	r0, r8
 800911c:	4649      	mov	r1, r9
 800911e:	2200      	movs	r2, #0
 8009120:	f7f7 fa6a 	bl	80005f8 <__aeabi_dmul>
 8009124:	4680      	mov	r8, r0
 8009126:	4689      	mov	r9, r1
 8009128:	e7c6      	b.n	80090b8 <_dtoa_r+0x510>
 800912a:	4650      	mov	r0, sl
 800912c:	4659      	mov	r1, fp
 800912e:	f7f7 fa63 	bl	80005f8 <__aeabi_dmul>
 8009132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009134:	9d01      	ldr	r5, [sp, #4]
 8009136:	930f      	str	r3, [sp, #60]	; 0x3c
 8009138:	4682      	mov	sl, r0
 800913a:	468b      	mov	fp, r1
 800913c:	4649      	mov	r1, r9
 800913e:	4640      	mov	r0, r8
 8009140:	f7f7 fd0a 	bl	8000b58 <__aeabi_d2iz>
 8009144:	4606      	mov	r6, r0
 8009146:	f7f7 f9ed 	bl	8000524 <__aeabi_i2d>
 800914a:	3630      	adds	r6, #48	; 0x30
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4640      	mov	r0, r8
 8009152:	4649      	mov	r1, r9
 8009154:	f7f7 f898 	bl	8000288 <__aeabi_dsub>
 8009158:	f805 6b01 	strb.w	r6, [r5], #1
 800915c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800915e:	429d      	cmp	r5, r3
 8009160:	4680      	mov	r8, r0
 8009162:	4689      	mov	r9, r1
 8009164:	f04f 0200 	mov.w	r2, #0
 8009168:	d124      	bne.n	80091b4 <_dtoa_r+0x60c>
 800916a:	4b1b      	ldr	r3, [pc, #108]	; (80091d8 <_dtoa_r+0x630>)
 800916c:	4650      	mov	r0, sl
 800916e:	4659      	mov	r1, fp
 8009170:	f7f7 f88c 	bl	800028c <__adddf3>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	4640      	mov	r0, r8
 800917a:	4649      	mov	r1, r9
 800917c:	f7f7 fccc 	bl	8000b18 <__aeabi_dcmpgt>
 8009180:	2800      	cmp	r0, #0
 8009182:	d173      	bne.n	800926c <_dtoa_r+0x6c4>
 8009184:	4652      	mov	r2, sl
 8009186:	465b      	mov	r3, fp
 8009188:	4913      	ldr	r1, [pc, #76]	; (80091d8 <_dtoa_r+0x630>)
 800918a:	2000      	movs	r0, #0
 800918c:	f7f7 f87c 	bl	8000288 <__aeabi_dsub>
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	4640      	mov	r0, r8
 8009196:	4649      	mov	r1, r9
 8009198:	f7f7 fca0 	bl	8000adc <__aeabi_dcmplt>
 800919c:	2800      	cmp	r0, #0
 800919e:	f43f af35 	beq.w	800900c <_dtoa_r+0x464>
 80091a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80091a4:	1e6b      	subs	r3, r5, #1
 80091a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80091a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091ac:	2b30      	cmp	r3, #48	; 0x30
 80091ae:	d0f8      	beq.n	80091a2 <_dtoa_r+0x5fa>
 80091b0:	9700      	str	r7, [sp, #0]
 80091b2:	e049      	b.n	8009248 <_dtoa_r+0x6a0>
 80091b4:	4b05      	ldr	r3, [pc, #20]	; (80091cc <_dtoa_r+0x624>)
 80091b6:	f7f7 fa1f 	bl	80005f8 <__aeabi_dmul>
 80091ba:	4680      	mov	r8, r0
 80091bc:	4689      	mov	r9, r1
 80091be:	e7bd      	b.n	800913c <_dtoa_r+0x594>
 80091c0:	0800c7e8 	.word	0x0800c7e8
 80091c4:	0800c7c0 	.word	0x0800c7c0
 80091c8:	3ff00000 	.word	0x3ff00000
 80091cc:	40240000 	.word	0x40240000
 80091d0:	401c0000 	.word	0x401c0000
 80091d4:	40140000 	.word	0x40140000
 80091d8:	3fe00000 	.word	0x3fe00000
 80091dc:	9d01      	ldr	r5, [sp, #4]
 80091de:	4656      	mov	r6, sl
 80091e0:	465f      	mov	r7, fp
 80091e2:	4642      	mov	r2, r8
 80091e4:	464b      	mov	r3, r9
 80091e6:	4630      	mov	r0, r6
 80091e8:	4639      	mov	r1, r7
 80091ea:	f7f7 fb2f 	bl	800084c <__aeabi_ddiv>
 80091ee:	f7f7 fcb3 	bl	8000b58 <__aeabi_d2iz>
 80091f2:	4682      	mov	sl, r0
 80091f4:	f7f7 f996 	bl	8000524 <__aeabi_i2d>
 80091f8:	4642      	mov	r2, r8
 80091fa:	464b      	mov	r3, r9
 80091fc:	f7f7 f9fc 	bl	80005f8 <__aeabi_dmul>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	4630      	mov	r0, r6
 8009206:	4639      	mov	r1, r7
 8009208:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800920c:	f7f7 f83c 	bl	8000288 <__aeabi_dsub>
 8009210:	f805 6b01 	strb.w	r6, [r5], #1
 8009214:	9e01      	ldr	r6, [sp, #4]
 8009216:	9f03      	ldr	r7, [sp, #12]
 8009218:	1bae      	subs	r6, r5, r6
 800921a:	42b7      	cmp	r7, r6
 800921c:	4602      	mov	r2, r0
 800921e:	460b      	mov	r3, r1
 8009220:	d135      	bne.n	800928e <_dtoa_r+0x6e6>
 8009222:	f7f7 f833 	bl	800028c <__adddf3>
 8009226:	4642      	mov	r2, r8
 8009228:	464b      	mov	r3, r9
 800922a:	4606      	mov	r6, r0
 800922c:	460f      	mov	r7, r1
 800922e:	f7f7 fc73 	bl	8000b18 <__aeabi_dcmpgt>
 8009232:	b9d0      	cbnz	r0, 800926a <_dtoa_r+0x6c2>
 8009234:	4642      	mov	r2, r8
 8009236:	464b      	mov	r3, r9
 8009238:	4630      	mov	r0, r6
 800923a:	4639      	mov	r1, r7
 800923c:	f7f7 fc44 	bl	8000ac8 <__aeabi_dcmpeq>
 8009240:	b110      	cbz	r0, 8009248 <_dtoa_r+0x6a0>
 8009242:	f01a 0f01 	tst.w	sl, #1
 8009246:	d110      	bne.n	800926a <_dtoa_r+0x6c2>
 8009248:	4620      	mov	r0, r4
 800924a:	ee18 1a10 	vmov	r1, s16
 800924e:	f000 fe8b 	bl	8009f68 <_Bfree>
 8009252:	2300      	movs	r3, #0
 8009254:	9800      	ldr	r0, [sp, #0]
 8009256:	702b      	strb	r3, [r5, #0]
 8009258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800925a:	3001      	adds	r0, #1
 800925c:	6018      	str	r0, [r3, #0]
 800925e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009260:	2b00      	cmp	r3, #0
 8009262:	f43f acf1 	beq.w	8008c48 <_dtoa_r+0xa0>
 8009266:	601d      	str	r5, [r3, #0]
 8009268:	e4ee      	b.n	8008c48 <_dtoa_r+0xa0>
 800926a:	9f00      	ldr	r7, [sp, #0]
 800926c:	462b      	mov	r3, r5
 800926e:	461d      	mov	r5, r3
 8009270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009274:	2a39      	cmp	r2, #57	; 0x39
 8009276:	d106      	bne.n	8009286 <_dtoa_r+0x6de>
 8009278:	9a01      	ldr	r2, [sp, #4]
 800927a:	429a      	cmp	r2, r3
 800927c:	d1f7      	bne.n	800926e <_dtoa_r+0x6c6>
 800927e:	9901      	ldr	r1, [sp, #4]
 8009280:	2230      	movs	r2, #48	; 0x30
 8009282:	3701      	adds	r7, #1
 8009284:	700a      	strb	r2, [r1, #0]
 8009286:	781a      	ldrb	r2, [r3, #0]
 8009288:	3201      	adds	r2, #1
 800928a:	701a      	strb	r2, [r3, #0]
 800928c:	e790      	b.n	80091b0 <_dtoa_r+0x608>
 800928e:	4ba6      	ldr	r3, [pc, #664]	; (8009528 <_dtoa_r+0x980>)
 8009290:	2200      	movs	r2, #0
 8009292:	f7f7 f9b1 	bl	80005f8 <__aeabi_dmul>
 8009296:	2200      	movs	r2, #0
 8009298:	2300      	movs	r3, #0
 800929a:	4606      	mov	r6, r0
 800929c:	460f      	mov	r7, r1
 800929e:	f7f7 fc13 	bl	8000ac8 <__aeabi_dcmpeq>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d09d      	beq.n	80091e2 <_dtoa_r+0x63a>
 80092a6:	e7cf      	b.n	8009248 <_dtoa_r+0x6a0>
 80092a8:	9a08      	ldr	r2, [sp, #32]
 80092aa:	2a00      	cmp	r2, #0
 80092ac:	f000 80d7 	beq.w	800945e <_dtoa_r+0x8b6>
 80092b0:	9a06      	ldr	r2, [sp, #24]
 80092b2:	2a01      	cmp	r2, #1
 80092b4:	f300 80ba 	bgt.w	800942c <_dtoa_r+0x884>
 80092b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092ba:	2a00      	cmp	r2, #0
 80092bc:	f000 80b2 	beq.w	8009424 <_dtoa_r+0x87c>
 80092c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80092c4:	9e07      	ldr	r6, [sp, #28]
 80092c6:	9d04      	ldr	r5, [sp, #16]
 80092c8:	9a04      	ldr	r2, [sp, #16]
 80092ca:	441a      	add	r2, r3
 80092cc:	9204      	str	r2, [sp, #16]
 80092ce:	9a05      	ldr	r2, [sp, #20]
 80092d0:	2101      	movs	r1, #1
 80092d2:	441a      	add	r2, r3
 80092d4:	4620      	mov	r0, r4
 80092d6:	9205      	str	r2, [sp, #20]
 80092d8:	f000 ff48 	bl	800a16c <__i2b>
 80092dc:	4607      	mov	r7, r0
 80092de:	2d00      	cmp	r5, #0
 80092e0:	dd0c      	ble.n	80092fc <_dtoa_r+0x754>
 80092e2:	9b05      	ldr	r3, [sp, #20]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	dd09      	ble.n	80092fc <_dtoa_r+0x754>
 80092e8:	42ab      	cmp	r3, r5
 80092ea:	9a04      	ldr	r2, [sp, #16]
 80092ec:	bfa8      	it	ge
 80092ee:	462b      	movge	r3, r5
 80092f0:	1ad2      	subs	r2, r2, r3
 80092f2:	9204      	str	r2, [sp, #16]
 80092f4:	9a05      	ldr	r2, [sp, #20]
 80092f6:	1aed      	subs	r5, r5, r3
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	9305      	str	r3, [sp, #20]
 80092fc:	9b07      	ldr	r3, [sp, #28]
 80092fe:	b31b      	cbz	r3, 8009348 <_dtoa_r+0x7a0>
 8009300:	9b08      	ldr	r3, [sp, #32]
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 80af 	beq.w	8009466 <_dtoa_r+0x8be>
 8009308:	2e00      	cmp	r6, #0
 800930a:	dd13      	ble.n	8009334 <_dtoa_r+0x78c>
 800930c:	4639      	mov	r1, r7
 800930e:	4632      	mov	r2, r6
 8009310:	4620      	mov	r0, r4
 8009312:	f000 ffeb 	bl	800a2ec <__pow5mult>
 8009316:	ee18 2a10 	vmov	r2, s16
 800931a:	4601      	mov	r1, r0
 800931c:	4607      	mov	r7, r0
 800931e:	4620      	mov	r0, r4
 8009320:	f000 ff3a 	bl	800a198 <__multiply>
 8009324:	ee18 1a10 	vmov	r1, s16
 8009328:	4680      	mov	r8, r0
 800932a:	4620      	mov	r0, r4
 800932c:	f000 fe1c 	bl	8009f68 <_Bfree>
 8009330:	ee08 8a10 	vmov	s16, r8
 8009334:	9b07      	ldr	r3, [sp, #28]
 8009336:	1b9a      	subs	r2, r3, r6
 8009338:	d006      	beq.n	8009348 <_dtoa_r+0x7a0>
 800933a:	ee18 1a10 	vmov	r1, s16
 800933e:	4620      	mov	r0, r4
 8009340:	f000 ffd4 	bl	800a2ec <__pow5mult>
 8009344:	ee08 0a10 	vmov	s16, r0
 8009348:	2101      	movs	r1, #1
 800934a:	4620      	mov	r0, r4
 800934c:	f000 ff0e 	bl	800a16c <__i2b>
 8009350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009352:	2b00      	cmp	r3, #0
 8009354:	4606      	mov	r6, r0
 8009356:	f340 8088 	ble.w	800946a <_dtoa_r+0x8c2>
 800935a:	461a      	mov	r2, r3
 800935c:	4601      	mov	r1, r0
 800935e:	4620      	mov	r0, r4
 8009360:	f000 ffc4 	bl	800a2ec <__pow5mult>
 8009364:	9b06      	ldr	r3, [sp, #24]
 8009366:	2b01      	cmp	r3, #1
 8009368:	4606      	mov	r6, r0
 800936a:	f340 8081 	ble.w	8009470 <_dtoa_r+0x8c8>
 800936e:	f04f 0800 	mov.w	r8, #0
 8009372:	6933      	ldr	r3, [r6, #16]
 8009374:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009378:	6918      	ldr	r0, [r3, #16]
 800937a:	f000 fea7 	bl	800a0cc <__hi0bits>
 800937e:	f1c0 0020 	rsb	r0, r0, #32
 8009382:	9b05      	ldr	r3, [sp, #20]
 8009384:	4418      	add	r0, r3
 8009386:	f010 001f 	ands.w	r0, r0, #31
 800938a:	f000 8092 	beq.w	80094b2 <_dtoa_r+0x90a>
 800938e:	f1c0 0320 	rsb	r3, r0, #32
 8009392:	2b04      	cmp	r3, #4
 8009394:	f340 808a 	ble.w	80094ac <_dtoa_r+0x904>
 8009398:	f1c0 001c 	rsb	r0, r0, #28
 800939c:	9b04      	ldr	r3, [sp, #16]
 800939e:	4403      	add	r3, r0
 80093a0:	9304      	str	r3, [sp, #16]
 80093a2:	9b05      	ldr	r3, [sp, #20]
 80093a4:	4403      	add	r3, r0
 80093a6:	4405      	add	r5, r0
 80093a8:	9305      	str	r3, [sp, #20]
 80093aa:	9b04      	ldr	r3, [sp, #16]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	dd07      	ble.n	80093c0 <_dtoa_r+0x818>
 80093b0:	ee18 1a10 	vmov	r1, s16
 80093b4:	461a      	mov	r2, r3
 80093b6:	4620      	mov	r0, r4
 80093b8:	f000 fff2 	bl	800a3a0 <__lshift>
 80093bc:	ee08 0a10 	vmov	s16, r0
 80093c0:	9b05      	ldr	r3, [sp, #20]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	dd05      	ble.n	80093d2 <_dtoa_r+0x82a>
 80093c6:	4631      	mov	r1, r6
 80093c8:	461a      	mov	r2, r3
 80093ca:	4620      	mov	r0, r4
 80093cc:	f000 ffe8 	bl	800a3a0 <__lshift>
 80093d0:	4606      	mov	r6, r0
 80093d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d06e      	beq.n	80094b6 <_dtoa_r+0x90e>
 80093d8:	ee18 0a10 	vmov	r0, s16
 80093dc:	4631      	mov	r1, r6
 80093de:	f001 f84f 	bl	800a480 <__mcmp>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	da67      	bge.n	80094b6 <_dtoa_r+0x90e>
 80093e6:	9b00      	ldr	r3, [sp, #0]
 80093e8:	3b01      	subs	r3, #1
 80093ea:	ee18 1a10 	vmov	r1, s16
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	220a      	movs	r2, #10
 80093f2:	2300      	movs	r3, #0
 80093f4:	4620      	mov	r0, r4
 80093f6:	f000 fdd9 	bl	8009fac <__multadd>
 80093fa:	9b08      	ldr	r3, [sp, #32]
 80093fc:	ee08 0a10 	vmov	s16, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	f000 81b1 	beq.w	8009768 <_dtoa_r+0xbc0>
 8009406:	2300      	movs	r3, #0
 8009408:	4639      	mov	r1, r7
 800940a:	220a      	movs	r2, #10
 800940c:	4620      	mov	r0, r4
 800940e:	f000 fdcd 	bl	8009fac <__multadd>
 8009412:	9b02      	ldr	r3, [sp, #8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	4607      	mov	r7, r0
 8009418:	f300 808e 	bgt.w	8009538 <_dtoa_r+0x990>
 800941c:	9b06      	ldr	r3, [sp, #24]
 800941e:	2b02      	cmp	r3, #2
 8009420:	dc51      	bgt.n	80094c6 <_dtoa_r+0x91e>
 8009422:	e089      	b.n	8009538 <_dtoa_r+0x990>
 8009424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009426:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800942a:	e74b      	b.n	80092c4 <_dtoa_r+0x71c>
 800942c:	9b03      	ldr	r3, [sp, #12]
 800942e:	1e5e      	subs	r6, r3, #1
 8009430:	9b07      	ldr	r3, [sp, #28]
 8009432:	42b3      	cmp	r3, r6
 8009434:	bfbf      	itttt	lt
 8009436:	9b07      	ldrlt	r3, [sp, #28]
 8009438:	9607      	strlt	r6, [sp, #28]
 800943a:	1af2      	sublt	r2, r6, r3
 800943c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800943e:	bfb6      	itet	lt
 8009440:	189b      	addlt	r3, r3, r2
 8009442:	1b9e      	subge	r6, r3, r6
 8009444:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009446:	9b03      	ldr	r3, [sp, #12]
 8009448:	bfb8      	it	lt
 800944a:	2600      	movlt	r6, #0
 800944c:	2b00      	cmp	r3, #0
 800944e:	bfb7      	itett	lt
 8009450:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009454:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009458:	1a9d      	sublt	r5, r3, r2
 800945a:	2300      	movlt	r3, #0
 800945c:	e734      	b.n	80092c8 <_dtoa_r+0x720>
 800945e:	9e07      	ldr	r6, [sp, #28]
 8009460:	9d04      	ldr	r5, [sp, #16]
 8009462:	9f08      	ldr	r7, [sp, #32]
 8009464:	e73b      	b.n	80092de <_dtoa_r+0x736>
 8009466:	9a07      	ldr	r2, [sp, #28]
 8009468:	e767      	b.n	800933a <_dtoa_r+0x792>
 800946a:	9b06      	ldr	r3, [sp, #24]
 800946c:	2b01      	cmp	r3, #1
 800946e:	dc18      	bgt.n	80094a2 <_dtoa_r+0x8fa>
 8009470:	f1ba 0f00 	cmp.w	sl, #0
 8009474:	d115      	bne.n	80094a2 <_dtoa_r+0x8fa>
 8009476:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800947a:	b993      	cbnz	r3, 80094a2 <_dtoa_r+0x8fa>
 800947c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009480:	0d1b      	lsrs	r3, r3, #20
 8009482:	051b      	lsls	r3, r3, #20
 8009484:	b183      	cbz	r3, 80094a8 <_dtoa_r+0x900>
 8009486:	9b04      	ldr	r3, [sp, #16]
 8009488:	3301      	adds	r3, #1
 800948a:	9304      	str	r3, [sp, #16]
 800948c:	9b05      	ldr	r3, [sp, #20]
 800948e:	3301      	adds	r3, #1
 8009490:	9305      	str	r3, [sp, #20]
 8009492:	f04f 0801 	mov.w	r8, #1
 8009496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009498:	2b00      	cmp	r3, #0
 800949a:	f47f af6a 	bne.w	8009372 <_dtoa_r+0x7ca>
 800949e:	2001      	movs	r0, #1
 80094a0:	e76f      	b.n	8009382 <_dtoa_r+0x7da>
 80094a2:	f04f 0800 	mov.w	r8, #0
 80094a6:	e7f6      	b.n	8009496 <_dtoa_r+0x8ee>
 80094a8:	4698      	mov	r8, r3
 80094aa:	e7f4      	b.n	8009496 <_dtoa_r+0x8ee>
 80094ac:	f43f af7d 	beq.w	80093aa <_dtoa_r+0x802>
 80094b0:	4618      	mov	r0, r3
 80094b2:	301c      	adds	r0, #28
 80094b4:	e772      	b.n	800939c <_dtoa_r+0x7f4>
 80094b6:	9b03      	ldr	r3, [sp, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	dc37      	bgt.n	800952c <_dtoa_r+0x984>
 80094bc:	9b06      	ldr	r3, [sp, #24]
 80094be:	2b02      	cmp	r3, #2
 80094c0:	dd34      	ble.n	800952c <_dtoa_r+0x984>
 80094c2:	9b03      	ldr	r3, [sp, #12]
 80094c4:	9302      	str	r3, [sp, #8]
 80094c6:	9b02      	ldr	r3, [sp, #8]
 80094c8:	b96b      	cbnz	r3, 80094e6 <_dtoa_r+0x93e>
 80094ca:	4631      	mov	r1, r6
 80094cc:	2205      	movs	r2, #5
 80094ce:	4620      	mov	r0, r4
 80094d0:	f000 fd6c 	bl	8009fac <__multadd>
 80094d4:	4601      	mov	r1, r0
 80094d6:	4606      	mov	r6, r0
 80094d8:	ee18 0a10 	vmov	r0, s16
 80094dc:	f000 ffd0 	bl	800a480 <__mcmp>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	f73f adbb 	bgt.w	800905c <_dtoa_r+0x4b4>
 80094e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094e8:	9d01      	ldr	r5, [sp, #4]
 80094ea:	43db      	mvns	r3, r3
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	f04f 0800 	mov.w	r8, #0
 80094f2:	4631      	mov	r1, r6
 80094f4:	4620      	mov	r0, r4
 80094f6:	f000 fd37 	bl	8009f68 <_Bfree>
 80094fa:	2f00      	cmp	r7, #0
 80094fc:	f43f aea4 	beq.w	8009248 <_dtoa_r+0x6a0>
 8009500:	f1b8 0f00 	cmp.w	r8, #0
 8009504:	d005      	beq.n	8009512 <_dtoa_r+0x96a>
 8009506:	45b8      	cmp	r8, r7
 8009508:	d003      	beq.n	8009512 <_dtoa_r+0x96a>
 800950a:	4641      	mov	r1, r8
 800950c:	4620      	mov	r0, r4
 800950e:	f000 fd2b 	bl	8009f68 <_Bfree>
 8009512:	4639      	mov	r1, r7
 8009514:	4620      	mov	r0, r4
 8009516:	f000 fd27 	bl	8009f68 <_Bfree>
 800951a:	e695      	b.n	8009248 <_dtoa_r+0x6a0>
 800951c:	2600      	movs	r6, #0
 800951e:	4637      	mov	r7, r6
 8009520:	e7e1      	b.n	80094e6 <_dtoa_r+0x93e>
 8009522:	9700      	str	r7, [sp, #0]
 8009524:	4637      	mov	r7, r6
 8009526:	e599      	b.n	800905c <_dtoa_r+0x4b4>
 8009528:	40240000 	.word	0x40240000
 800952c:	9b08      	ldr	r3, [sp, #32]
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 80ca 	beq.w	80096c8 <_dtoa_r+0xb20>
 8009534:	9b03      	ldr	r3, [sp, #12]
 8009536:	9302      	str	r3, [sp, #8]
 8009538:	2d00      	cmp	r5, #0
 800953a:	dd05      	ble.n	8009548 <_dtoa_r+0x9a0>
 800953c:	4639      	mov	r1, r7
 800953e:	462a      	mov	r2, r5
 8009540:	4620      	mov	r0, r4
 8009542:	f000 ff2d 	bl	800a3a0 <__lshift>
 8009546:	4607      	mov	r7, r0
 8009548:	f1b8 0f00 	cmp.w	r8, #0
 800954c:	d05b      	beq.n	8009606 <_dtoa_r+0xa5e>
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	4620      	mov	r0, r4
 8009552:	f000 fcc9 	bl	8009ee8 <_Balloc>
 8009556:	4605      	mov	r5, r0
 8009558:	b928      	cbnz	r0, 8009566 <_dtoa_r+0x9be>
 800955a:	4b87      	ldr	r3, [pc, #540]	; (8009778 <_dtoa_r+0xbd0>)
 800955c:	4602      	mov	r2, r0
 800955e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009562:	f7ff bb3b 	b.w	8008bdc <_dtoa_r+0x34>
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	3202      	adds	r2, #2
 800956a:	0092      	lsls	r2, r2, #2
 800956c:	f107 010c 	add.w	r1, r7, #12
 8009570:	300c      	adds	r0, #12
 8009572:	f7fd fc91 	bl	8006e98 <memcpy>
 8009576:	2201      	movs	r2, #1
 8009578:	4629      	mov	r1, r5
 800957a:	4620      	mov	r0, r4
 800957c:	f000 ff10 	bl	800a3a0 <__lshift>
 8009580:	9b01      	ldr	r3, [sp, #4]
 8009582:	f103 0901 	add.w	r9, r3, #1
 8009586:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800958a:	4413      	add	r3, r2
 800958c:	9305      	str	r3, [sp, #20]
 800958e:	f00a 0301 	and.w	r3, sl, #1
 8009592:	46b8      	mov	r8, r7
 8009594:	9304      	str	r3, [sp, #16]
 8009596:	4607      	mov	r7, r0
 8009598:	4631      	mov	r1, r6
 800959a:	ee18 0a10 	vmov	r0, s16
 800959e:	f7ff fa77 	bl	8008a90 <quorem>
 80095a2:	4641      	mov	r1, r8
 80095a4:	9002      	str	r0, [sp, #8]
 80095a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80095aa:	ee18 0a10 	vmov	r0, s16
 80095ae:	f000 ff67 	bl	800a480 <__mcmp>
 80095b2:	463a      	mov	r2, r7
 80095b4:	9003      	str	r0, [sp, #12]
 80095b6:	4631      	mov	r1, r6
 80095b8:	4620      	mov	r0, r4
 80095ba:	f000 ff7d 	bl	800a4b8 <__mdiff>
 80095be:	68c2      	ldr	r2, [r0, #12]
 80095c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80095c4:	4605      	mov	r5, r0
 80095c6:	bb02      	cbnz	r2, 800960a <_dtoa_r+0xa62>
 80095c8:	4601      	mov	r1, r0
 80095ca:	ee18 0a10 	vmov	r0, s16
 80095ce:	f000 ff57 	bl	800a480 <__mcmp>
 80095d2:	4602      	mov	r2, r0
 80095d4:	4629      	mov	r1, r5
 80095d6:	4620      	mov	r0, r4
 80095d8:	9207      	str	r2, [sp, #28]
 80095da:	f000 fcc5 	bl	8009f68 <_Bfree>
 80095de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80095e2:	ea43 0102 	orr.w	r1, r3, r2
 80095e6:	9b04      	ldr	r3, [sp, #16]
 80095e8:	430b      	orrs	r3, r1
 80095ea:	464d      	mov	r5, r9
 80095ec:	d10f      	bne.n	800960e <_dtoa_r+0xa66>
 80095ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095f2:	d02a      	beq.n	800964a <_dtoa_r+0xaa2>
 80095f4:	9b03      	ldr	r3, [sp, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	dd02      	ble.n	8009600 <_dtoa_r+0xa58>
 80095fa:	9b02      	ldr	r3, [sp, #8]
 80095fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009600:	f88b a000 	strb.w	sl, [fp]
 8009604:	e775      	b.n	80094f2 <_dtoa_r+0x94a>
 8009606:	4638      	mov	r0, r7
 8009608:	e7ba      	b.n	8009580 <_dtoa_r+0x9d8>
 800960a:	2201      	movs	r2, #1
 800960c:	e7e2      	b.n	80095d4 <_dtoa_r+0xa2c>
 800960e:	9b03      	ldr	r3, [sp, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	db04      	blt.n	800961e <_dtoa_r+0xa76>
 8009614:	9906      	ldr	r1, [sp, #24]
 8009616:	430b      	orrs	r3, r1
 8009618:	9904      	ldr	r1, [sp, #16]
 800961a:	430b      	orrs	r3, r1
 800961c:	d122      	bne.n	8009664 <_dtoa_r+0xabc>
 800961e:	2a00      	cmp	r2, #0
 8009620:	ddee      	ble.n	8009600 <_dtoa_r+0xa58>
 8009622:	ee18 1a10 	vmov	r1, s16
 8009626:	2201      	movs	r2, #1
 8009628:	4620      	mov	r0, r4
 800962a:	f000 feb9 	bl	800a3a0 <__lshift>
 800962e:	4631      	mov	r1, r6
 8009630:	ee08 0a10 	vmov	s16, r0
 8009634:	f000 ff24 	bl	800a480 <__mcmp>
 8009638:	2800      	cmp	r0, #0
 800963a:	dc03      	bgt.n	8009644 <_dtoa_r+0xa9c>
 800963c:	d1e0      	bne.n	8009600 <_dtoa_r+0xa58>
 800963e:	f01a 0f01 	tst.w	sl, #1
 8009642:	d0dd      	beq.n	8009600 <_dtoa_r+0xa58>
 8009644:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009648:	d1d7      	bne.n	80095fa <_dtoa_r+0xa52>
 800964a:	2339      	movs	r3, #57	; 0x39
 800964c:	f88b 3000 	strb.w	r3, [fp]
 8009650:	462b      	mov	r3, r5
 8009652:	461d      	mov	r5, r3
 8009654:	3b01      	subs	r3, #1
 8009656:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800965a:	2a39      	cmp	r2, #57	; 0x39
 800965c:	d071      	beq.n	8009742 <_dtoa_r+0xb9a>
 800965e:	3201      	adds	r2, #1
 8009660:	701a      	strb	r2, [r3, #0]
 8009662:	e746      	b.n	80094f2 <_dtoa_r+0x94a>
 8009664:	2a00      	cmp	r2, #0
 8009666:	dd07      	ble.n	8009678 <_dtoa_r+0xad0>
 8009668:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800966c:	d0ed      	beq.n	800964a <_dtoa_r+0xaa2>
 800966e:	f10a 0301 	add.w	r3, sl, #1
 8009672:	f88b 3000 	strb.w	r3, [fp]
 8009676:	e73c      	b.n	80094f2 <_dtoa_r+0x94a>
 8009678:	9b05      	ldr	r3, [sp, #20]
 800967a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800967e:	4599      	cmp	r9, r3
 8009680:	d047      	beq.n	8009712 <_dtoa_r+0xb6a>
 8009682:	ee18 1a10 	vmov	r1, s16
 8009686:	2300      	movs	r3, #0
 8009688:	220a      	movs	r2, #10
 800968a:	4620      	mov	r0, r4
 800968c:	f000 fc8e 	bl	8009fac <__multadd>
 8009690:	45b8      	cmp	r8, r7
 8009692:	ee08 0a10 	vmov	s16, r0
 8009696:	f04f 0300 	mov.w	r3, #0
 800969a:	f04f 020a 	mov.w	r2, #10
 800969e:	4641      	mov	r1, r8
 80096a0:	4620      	mov	r0, r4
 80096a2:	d106      	bne.n	80096b2 <_dtoa_r+0xb0a>
 80096a4:	f000 fc82 	bl	8009fac <__multadd>
 80096a8:	4680      	mov	r8, r0
 80096aa:	4607      	mov	r7, r0
 80096ac:	f109 0901 	add.w	r9, r9, #1
 80096b0:	e772      	b.n	8009598 <_dtoa_r+0x9f0>
 80096b2:	f000 fc7b 	bl	8009fac <__multadd>
 80096b6:	4639      	mov	r1, r7
 80096b8:	4680      	mov	r8, r0
 80096ba:	2300      	movs	r3, #0
 80096bc:	220a      	movs	r2, #10
 80096be:	4620      	mov	r0, r4
 80096c0:	f000 fc74 	bl	8009fac <__multadd>
 80096c4:	4607      	mov	r7, r0
 80096c6:	e7f1      	b.n	80096ac <_dtoa_r+0xb04>
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	9302      	str	r3, [sp, #8]
 80096cc:	9d01      	ldr	r5, [sp, #4]
 80096ce:	ee18 0a10 	vmov	r0, s16
 80096d2:	4631      	mov	r1, r6
 80096d4:	f7ff f9dc 	bl	8008a90 <quorem>
 80096d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80096dc:	9b01      	ldr	r3, [sp, #4]
 80096de:	f805 ab01 	strb.w	sl, [r5], #1
 80096e2:	1aea      	subs	r2, r5, r3
 80096e4:	9b02      	ldr	r3, [sp, #8]
 80096e6:	4293      	cmp	r3, r2
 80096e8:	dd09      	ble.n	80096fe <_dtoa_r+0xb56>
 80096ea:	ee18 1a10 	vmov	r1, s16
 80096ee:	2300      	movs	r3, #0
 80096f0:	220a      	movs	r2, #10
 80096f2:	4620      	mov	r0, r4
 80096f4:	f000 fc5a 	bl	8009fac <__multadd>
 80096f8:	ee08 0a10 	vmov	s16, r0
 80096fc:	e7e7      	b.n	80096ce <_dtoa_r+0xb26>
 80096fe:	9b02      	ldr	r3, [sp, #8]
 8009700:	2b00      	cmp	r3, #0
 8009702:	bfc8      	it	gt
 8009704:	461d      	movgt	r5, r3
 8009706:	9b01      	ldr	r3, [sp, #4]
 8009708:	bfd8      	it	le
 800970a:	2501      	movle	r5, #1
 800970c:	441d      	add	r5, r3
 800970e:	f04f 0800 	mov.w	r8, #0
 8009712:	ee18 1a10 	vmov	r1, s16
 8009716:	2201      	movs	r2, #1
 8009718:	4620      	mov	r0, r4
 800971a:	f000 fe41 	bl	800a3a0 <__lshift>
 800971e:	4631      	mov	r1, r6
 8009720:	ee08 0a10 	vmov	s16, r0
 8009724:	f000 feac 	bl	800a480 <__mcmp>
 8009728:	2800      	cmp	r0, #0
 800972a:	dc91      	bgt.n	8009650 <_dtoa_r+0xaa8>
 800972c:	d102      	bne.n	8009734 <_dtoa_r+0xb8c>
 800972e:	f01a 0f01 	tst.w	sl, #1
 8009732:	d18d      	bne.n	8009650 <_dtoa_r+0xaa8>
 8009734:	462b      	mov	r3, r5
 8009736:	461d      	mov	r5, r3
 8009738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800973c:	2a30      	cmp	r2, #48	; 0x30
 800973e:	d0fa      	beq.n	8009736 <_dtoa_r+0xb8e>
 8009740:	e6d7      	b.n	80094f2 <_dtoa_r+0x94a>
 8009742:	9a01      	ldr	r2, [sp, #4]
 8009744:	429a      	cmp	r2, r3
 8009746:	d184      	bne.n	8009652 <_dtoa_r+0xaaa>
 8009748:	9b00      	ldr	r3, [sp, #0]
 800974a:	3301      	adds	r3, #1
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	2331      	movs	r3, #49	; 0x31
 8009750:	7013      	strb	r3, [r2, #0]
 8009752:	e6ce      	b.n	80094f2 <_dtoa_r+0x94a>
 8009754:	4b09      	ldr	r3, [pc, #36]	; (800977c <_dtoa_r+0xbd4>)
 8009756:	f7ff ba95 	b.w	8008c84 <_dtoa_r+0xdc>
 800975a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800975c:	2b00      	cmp	r3, #0
 800975e:	f47f aa6e 	bne.w	8008c3e <_dtoa_r+0x96>
 8009762:	4b07      	ldr	r3, [pc, #28]	; (8009780 <_dtoa_r+0xbd8>)
 8009764:	f7ff ba8e 	b.w	8008c84 <_dtoa_r+0xdc>
 8009768:	9b02      	ldr	r3, [sp, #8]
 800976a:	2b00      	cmp	r3, #0
 800976c:	dcae      	bgt.n	80096cc <_dtoa_r+0xb24>
 800976e:	9b06      	ldr	r3, [sp, #24]
 8009770:	2b02      	cmp	r3, #2
 8009772:	f73f aea8 	bgt.w	80094c6 <_dtoa_r+0x91e>
 8009776:	e7a9      	b.n	80096cc <_dtoa_r+0xb24>
 8009778:	0800c6d4 	.word	0x0800c6d4
 800977c:	0800c49c 	.word	0x0800c49c
 8009780:	0800c655 	.word	0x0800c655

08009784 <fiprintf>:
 8009784:	b40e      	push	{r1, r2, r3}
 8009786:	b503      	push	{r0, r1, lr}
 8009788:	4601      	mov	r1, r0
 800978a:	ab03      	add	r3, sp, #12
 800978c:	4805      	ldr	r0, [pc, #20]	; (80097a4 <fiprintf+0x20>)
 800978e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009792:	6800      	ldr	r0, [r0, #0]
 8009794:	9301      	str	r3, [sp, #4]
 8009796:	f001 fae5 	bl	800ad64 <_vfiprintf_r>
 800979a:	b002      	add	sp, #8
 800979c:	f85d eb04 	ldr.w	lr, [sp], #4
 80097a0:	b003      	add	sp, #12
 80097a2:	4770      	bx	lr
 80097a4:	2000009c 	.word	0x2000009c

080097a8 <rshift>:
 80097a8:	6903      	ldr	r3, [r0, #16]
 80097aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80097ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80097b6:	f100 0414 	add.w	r4, r0, #20
 80097ba:	dd45      	ble.n	8009848 <rshift+0xa0>
 80097bc:	f011 011f 	ands.w	r1, r1, #31
 80097c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80097c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80097c8:	d10c      	bne.n	80097e4 <rshift+0x3c>
 80097ca:	f100 0710 	add.w	r7, r0, #16
 80097ce:	4629      	mov	r1, r5
 80097d0:	42b1      	cmp	r1, r6
 80097d2:	d334      	bcc.n	800983e <rshift+0x96>
 80097d4:	1a9b      	subs	r3, r3, r2
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	1eea      	subs	r2, r5, #3
 80097da:	4296      	cmp	r6, r2
 80097dc:	bf38      	it	cc
 80097de:	2300      	movcc	r3, #0
 80097e0:	4423      	add	r3, r4
 80097e2:	e015      	b.n	8009810 <rshift+0x68>
 80097e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80097e8:	f1c1 0820 	rsb	r8, r1, #32
 80097ec:	40cf      	lsrs	r7, r1
 80097ee:	f105 0e04 	add.w	lr, r5, #4
 80097f2:	46a1      	mov	r9, r4
 80097f4:	4576      	cmp	r6, lr
 80097f6:	46f4      	mov	ip, lr
 80097f8:	d815      	bhi.n	8009826 <rshift+0x7e>
 80097fa:	1a9a      	subs	r2, r3, r2
 80097fc:	0092      	lsls	r2, r2, #2
 80097fe:	3a04      	subs	r2, #4
 8009800:	3501      	adds	r5, #1
 8009802:	42ae      	cmp	r6, r5
 8009804:	bf38      	it	cc
 8009806:	2200      	movcc	r2, #0
 8009808:	18a3      	adds	r3, r4, r2
 800980a:	50a7      	str	r7, [r4, r2]
 800980c:	b107      	cbz	r7, 8009810 <rshift+0x68>
 800980e:	3304      	adds	r3, #4
 8009810:	1b1a      	subs	r2, r3, r4
 8009812:	42a3      	cmp	r3, r4
 8009814:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009818:	bf08      	it	eq
 800981a:	2300      	moveq	r3, #0
 800981c:	6102      	str	r2, [r0, #16]
 800981e:	bf08      	it	eq
 8009820:	6143      	streq	r3, [r0, #20]
 8009822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009826:	f8dc c000 	ldr.w	ip, [ip]
 800982a:	fa0c fc08 	lsl.w	ip, ip, r8
 800982e:	ea4c 0707 	orr.w	r7, ip, r7
 8009832:	f849 7b04 	str.w	r7, [r9], #4
 8009836:	f85e 7b04 	ldr.w	r7, [lr], #4
 800983a:	40cf      	lsrs	r7, r1
 800983c:	e7da      	b.n	80097f4 <rshift+0x4c>
 800983e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009842:	f847 cf04 	str.w	ip, [r7, #4]!
 8009846:	e7c3      	b.n	80097d0 <rshift+0x28>
 8009848:	4623      	mov	r3, r4
 800984a:	e7e1      	b.n	8009810 <rshift+0x68>

0800984c <__hexdig_fun>:
 800984c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009850:	2b09      	cmp	r3, #9
 8009852:	d802      	bhi.n	800985a <__hexdig_fun+0xe>
 8009854:	3820      	subs	r0, #32
 8009856:	b2c0      	uxtb	r0, r0
 8009858:	4770      	bx	lr
 800985a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800985e:	2b05      	cmp	r3, #5
 8009860:	d801      	bhi.n	8009866 <__hexdig_fun+0x1a>
 8009862:	3847      	subs	r0, #71	; 0x47
 8009864:	e7f7      	b.n	8009856 <__hexdig_fun+0xa>
 8009866:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800986a:	2b05      	cmp	r3, #5
 800986c:	d801      	bhi.n	8009872 <__hexdig_fun+0x26>
 800986e:	3827      	subs	r0, #39	; 0x27
 8009870:	e7f1      	b.n	8009856 <__hexdig_fun+0xa>
 8009872:	2000      	movs	r0, #0
 8009874:	4770      	bx	lr
	...

08009878 <__gethex>:
 8009878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987c:	ed2d 8b02 	vpush	{d8}
 8009880:	b089      	sub	sp, #36	; 0x24
 8009882:	ee08 0a10 	vmov	s16, r0
 8009886:	9304      	str	r3, [sp, #16]
 8009888:	4bb4      	ldr	r3, [pc, #720]	; (8009b5c <__gethex+0x2e4>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	4618      	mov	r0, r3
 8009890:	468b      	mov	fp, r1
 8009892:	4690      	mov	r8, r2
 8009894:	f7f6 fc9c 	bl	80001d0 <strlen>
 8009898:	9b01      	ldr	r3, [sp, #4]
 800989a:	f8db 2000 	ldr.w	r2, [fp]
 800989e:	4403      	add	r3, r0
 80098a0:	4682      	mov	sl, r0
 80098a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80098a6:	9305      	str	r3, [sp, #20]
 80098a8:	1c93      	adds	r3, r2, #2
 80098aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80098ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80098b2:	32fe      	adds	r2, #254	; 0xfe
 80098b4:	18d1      	adds	r1, r2, r3
 80098b6:	461f      	mov	r7, r3
 80098b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80098bc:	9100      	str	r1, [sp, #0]
 80098be:	2830      	cmp	r0, #48	; 0x30
 80098c0:	d0f8      	beq.n	80098b4 <__gethex+0x3c>
 80098c2:	f7ff ffc3 	bl	800984c <__hexdig_fun>
 80098c6:	4604      	mov	r4, r0
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d13a      	bne.n	8009942 <__gethex+0xca>
 80098cc:	9901      	ldr	r1, [sp, #4]
 80098ce:	4652      	mov	r2, sl
 80098d0:	4638      	mov	r0, r7
 80098d2:	f001 fba1 	bl	800b018 <strncmp>
 80098d6:	4605      	mov	r5, r0
 80098d8:	2800      	cmp	r0, #0
 80098da:	d168      	bne.n	80099ae <__gethex+0x136>
 80098dc:	f817 000a 	ldrb.w	r0, [r7, sl]
 80098e0:	eb07 060a 	add.w	r6, r7, sl
 80098e4:	f7ff ffb2 	bl	800984c <__hexdig_fun>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d062      	beq.n	80099b2 <__gethex+0x13a>
 80098ec:	4633      	mov	r3, r6
 80098ee:	7818      	ldrb	r0, [r3, #0]
 80098f0:	2830      	cmp	r0, #48	; 0x30
 80098f2:	461f      	mov	r7, r3
 80098f4:	f103 0301 	add.w	r3, r3, #1
 80098f8:	d0f9      	beq.n	80098ee <__gethex+0x76>
 80098fa:	f7ff ffa7 	bl	800984c <__hexdig_fun>
 80098fe:	2301      	movs	r3, #1
 8009900:	fab0 f480 	clz	r4, r0
 8009904:	0964      	lsrs	r4, r4, #5
 8009906:	4635      	mov	r5, r6
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	463a      	mov	r2, r7
 800990c:	4616      	mov	r6, r2
 800990e:	3201      	adds	r2, #1
 8009910:	7830      	ldrb	r0, [r6, #0]
 8009912:	f7ff ff9b 	bl	800984c <__hexdig_fun>
 8009916:	2800      	cmp	r0, #0
 8009918:	d1f8      	bne.n	800990c <__gethex+0x94>
 800991a:	9901      	ldr	r1, [sp, #4]
 800991c:	4652      	mov	r2, sl
 800991e:	4630      	mov	r0, r6
 8009920:	f001 fb7a 	bl	800b018 <strncmp>
 8009924:	b980      	cbnz	r0, 8009948 <__gethex+0xd0>
 8009926:	b94d      	cbnz	r5, 800993c <__gethex+0xc4>
 8009928:	eb06 050a 	add.w	r5, r6, sl
 800992c:	462a      	mov	r2, r5
 800992e:	4616      	mov	r6, r2
 8009930:	3201      	adds	r2, #1
 8009932:	7830      	ldrb	r0, [r6, #0]
 8009934:	f7ff ff8a 	bl	800984c <__hexdig_fun>
 8009938:	2800      	cmp	r0, #0
 800993a:	d1f8      	bne.n	800992e <__gethex+0xb6>
 800993c:	1bad      	subs	r5, r5, r6
 800993e:	00ad      	lsls	r5, r5, #2
 8009940:	e004      	b.n	800994c <__gethex+0xd4>
 8009942:	2400      	movs	r4, #0
 8009944:	4625      	mov	r5, r4
 8009946:	e7e0      	b.n	800990a <__gethex+0x92>
 8009948:	2d00      	cmp	r5, #0
 800994a:	d1f7      	bne.n	800993c <__gethex+0xc4>
 800994c:	7833      	ldrb	r3, [r6, #0]
 800994e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009952:	2b50      	cmp	r3, #80	; 0x50
 8009954:	d13b      	bne.n	80099ce <__gethex+0x156>
 8009956:	7873      	ldrb	r3, [r6, #1]
 8009958:	2b2b      	cmp	r3, #43	; 0x2b
 800995a:	d02c      	beq.n	80099b6 <__gethex+0x13e>
 800995c:	2b2d      	cmp	r3, #45	; 0x2d
 800995e:	d02e      	beq.n	80099be <__gethex+0x146>
 8009960:	1c71      	adds	r1, r6, #1
 8009962:	f04f 0900 	mov.w	r9, #0
 8009966:	7808      	ldrb	r0, [r1, #0]
 8009968:	f7ff ff70 	bl	800984c <__hexdig_fun>
 800996c:	1e43      	subs	r3, r0, #1
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b18      	cmp	r3, #24
 8009972:	d82c      	bhi.n	80099ce <__gethex+0x156>
 8009974:	f1a0 0210 	sub.w	r2, r0, #16
 8009978:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800997c:	f7ff ff66 	bl	800984c <__hexdig_fun>
 8009980:	1e43      	subs	r3, r0, #1
 8009982:	b2db      	uxtb	r3, r3
 8009984:	2b18      	cmp	r3, #24
 8009986:	d91d      	bls.n	80099c4 <__gethex+0x14c>
 8009988:	f1b9 0f00 	cmp.w	r9, #0
 800998c:	d000      	beq.n	8009990 <__gethex+0x118>
 800998e:	4252      	negs	r2, r2
 8009990:	4415      	add	r5, r2
 8009992:	f8cb 1000 	str.w	r1, [fp]
 8009996:	b1e4      	cbz	r4, 80099d2 <__gethex+0x15a>
 8009998:	9b00      	ldr	r3, [sp, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	bf14      	ite	ne
 800999e:	2700      	movne	r7, #0
 80099a0:	2706      	moveq	r7, #6
 80099a2:	4638      	mov	r0, r7
 80099a4:	b009      	add	sp, #36	; 0x24
 80099a6:	ecbd 8b02 	vpop	{d8}
 80099aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ae:	463e      	mov	r6, r7
 80099b0:	4625      	mov	r5, r4
 80099b2:	2401      	movs	r4, #1
 80099b4:	e7ca      	b.n	800994c <__gethex+0xd4>
 80099b6:	f04f 0900 	mov.w	r9, #0
 80099ba:	1cb1      	adds	r1, r6, #2
 80099bc:	e7d3      	b.n	8009966 <__gethex+0xee>
 80099be:	f04f 0901 	mov.w	r9, #1
 80099c2:	e7fa      	b.n	80099ba <__gethex+0x142>
 80099c4:	230a      	movs	r3, #10
 80099c6:	fb03 0202 	mla	r2, r3, r2, r0
 80099ca:	3a10      	subs	r2, #16
 80099cc:	e7d4      	b.n	8009978 <__gethex+0x100>
 80099ce:	4631      	mov	r1, r6
 80099d0:	e7df      	b.n	8009992 <__gethex+0x11a>
 80099d2:	1bf3      	subs	r3, r6, r7
 80099d4:	3b01      	subs	r3, #1
 80099d6:	4621      	mov	r1, r4
 80099d8:	2b07      	cmp	r3, #7
 80099da:	dc0b      	bgt.n	80099f4 <__gethex+0x17c>
 80099dc:	ee18 0a10 	vmov	r0, s16
 80099e0:	f000 fa82 	bl	8009ee8 <_Balloc>
 80099e4:	4604      	mov	r4, r0
 80099e6:	b940      	cbnz	r0, 80099fa <__gethex+0x182>
 80099e8:	4b5d      	ldr	r3, [pc, #372]	; (8009b60 <__gethex+0x2e8>)
 80099ea:	4602      	mov	r2, r0
 80099ec:	21de      	movs	r1, #222	; 0xde
 80099ee:	485d      	ldr	r0, [pc, #372]	; (8009b64 <__gethex+0x2ec>)
 80099f0:	f7ff f820 	bl	8008a34 <__assert_func>
 80099f4:	3101      	adds	r1, #1
 80099f6:	105b      	asrs	r3, r3, #1
 80099f8:	e7ee      	b.n	80099d8 <__gethex+0x160>
 80099fa:	f100 0914 	add.w	r9, r0, #20
 80099fe:	f04f 0b00 	mov.w	fp, #0
 8009a02:	f1ca 0301 	rsb	r3, sl, #1
 8009a06:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a0a:	f8cd b000 	str.w	fp, [sp]
 8009a0e:	9306      	str	r3, [sp, #24]
 8009a10:	42b7      	cmp	r7, r6
 8009a12:	d340      	bcc.n	8009a96 <__gethex+0x21e>
 8009a14:	9802      	ldr	r0, [sp, #8]
 8009a16:	9b00      	ldr	r3, [sp, #0]
 8009a18:	f840 3b04 	str.w	r3, [r0], #4
 8009a1c:	eba0 0009 	sub.w	r0, r0, r9
 8009a20:	1080      	asrs	r0, r0, #2
 8009a22:	0146      	lsls	r6, r0, #5
 8009a24:	6120      	str	r0, [r4, #16]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 fb50 	bl	800a0cc <__hi0bits>
 8009a2c:	1a30      	subs	r0, r6, r0
 8009a2e:	f8d8 6000 	ldr.w	r6, [r8]
 8009a32:	42b0      	cmp	r0, r6
 8009a34:	dd63      	ble.n	8009afe <__gethex+0x286>
 8009a36:	1b87      	subs	r7, r0, r6
 8009a38:	4639      	mov	r1, r7
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f000 fef4 	bl	800a828 <__any_on>
 8009a40:	4682      	mov	sl, r0
 8009a42:	b1a8      	cbz	r0, 8009a70 <__gethex+0x1f8>
 8009a44:	1e7b      	subs	r3, r7, #1
 8009a46:	1159      	asrs	r1, r3, #5
 8009a48:	f003 021f 	and.w	r2, r3, #31
 8009a4c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009a50:	f04f 0a01 	mov.w	sl, #1
 8009a54:	fa0a f202 	lsl.w	r2, sl, r2
 8009a58:	420a      	tst	r2, r1
 8009a5a:	d009      	beq.n	8009a70 <__gethex+0x1f8>
 8009a5c:	4553      	cmp	r3, sl
 8009a5e:	dd05      	ble.n	8009a6c <__gethex+0x1f4>
 8009a60:	1eb9      	subs	r1, r7, #2
 8009a62:	4620      	mov	r0, r4
 8009a64:	f000 fee0 	bl	800a828 <__any_on>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d145      	bne.n	8009af8 <__gethex+0x280>
 8009a6c:	f04f 0a02 	mov.w	sl, #2
 8009a70:	4639      	mov	r1, r7
 8009a72:	4620      	mov	r0, r4
 8009a74:	f7ff fe98 	bl	80097a8 <rshift>
 8009a78:	443d      	add	r5, r7
 8009a7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a7e:	42ab      	cmp	r3, r5
 8009a80:	da4c      	bge.n	8009b1c <__gethex+0x2a4>
 8009a82:	ee18 0a10 	vmov	r0, s16
 8009a86:	4621      	mov	r1, r4
 8009a88:	f000 fa6e 	bl	8009f68 <_Bfree>
 8009a8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a8e:	2300      	movs	r3, #0
 8009a90:	6013      	str	r3, [r2, #0]
 8009a92:	27a3      	movs	r7, #163	; 0xa3
 8009a94:	e785      	b.n	80099a2 <__gethex+0x12a>
 8009a96:	1e73      	subs	r3, r6, #1
 8009a98:	9a05      	ldr	r2, [sp, #20]
 8009a9a:	9303      	str	r3, [sp, #12]
 8009a9c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d019      	beq.n	8009ad8 <__gethex+0x260>
 8009aa4:	f1bb 0f20 	cmp.w	fp, #32
 8009aa8:	d107      	bne.n	8009aba <__gethex+0x242>
 8009aaa:	9b02      	ldr	r3, [sp, #8]
 8009aac:	9a00      	ldr	r2, [sp, #0]
 8009aae:	f843 2b04 	str.w	r2, [r3], #4
 8009ab2:	9302      	str	r3, [sp, #8]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	469b      	mov	fp, r3
 8009aba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009abe:	f7ff fec5 	bl	800984c <__hexdig_fun>
 8009ac2:	9b00      	ldr	r3, [sp, #0]
 8009ac4:	f000 000f 	and.w	r0, r0, #15
 8009ac8:	fa00 f00b 	lsl.w	r0, r0, fp
 8009acc:	4303      	orrs	r3, r0
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	f10b 0b04 	add.w	fp, fp, #4
 8009ad4:	9b03      	ldr	r3, [sp, #12]
 8009ad6:	e00d      	b.n	8009af4 <__gethex+0x27c>
 8009ad8:	9b03      	ldr	r3, [sp, #12]
 8009ada:	9a06      	ldr	r2, [sp, #24]
 8009adc:	4413      	add	r3, r2
 8009ade:	42bb      	cmp	r3, r7
 8009ae0:	d3e0      	bcc.n	8009aa4 <__gethex+0x22c>
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	9901      	ldr	r1, [sp, #4]
 8009ae6:	9307      	str	r3, [sp, #28]
 8009ae8:	4652      	mov	r2, sl
 8009aea:	f001 fa95 	bl	800b018 <strncmp>
 8009aee:	9b07      	ldr	r3, [sp, #28]
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d1d7      	bne.n	8009aa4 <__gethex+0x22c>
 8009af4:	461e      	mov	r6, r3
 8009af6:	e78b      	b.n	8009a10 <__gethex+0x198>
 8009af8:	f04f 0a03 	mov.w	sl, #3
 8009afc:	e7b8      	b.n	8009a70 <__gethex+0x1f8>
 8009afe:	da0a      	bge.n	8009b16 <__gethex+0x29e>
 8009b00:	1a37      	subs	r7, r6, r0
 8009b02:	4621      	mov	r1, r4
 8009b04:	ee18 0a10 	vmov	r0, s16
 8009b08:	463a      	mov	r2, r7
 8009b0a:	f000 fc49 	bl	800a3a0 <__lshift>
 8009b0e:	1bed      	subs	r5, r5, r7
 8009b10:	4604      	mov	r4, r0
 8009b12:	f100 0914 	add.w	r9, r0, #20
 8009b16:	f04f 0a00 	mov.w	sl, #0
 8009b1a:	e7ae      	b.n	8009a7a <__gethex+0x202>
 8009b1c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009b20:	42a8      	cmp	r0, r5
 8009b22:	dd72      	ble.n	8009c0a <__gethex+0x392>
 8009b24:	1b45      	subs	r5, r0, r5
 8009b26:	42ae      	cmp	r6, r5
 8009b28:	dc36      	bgt.n	8009b98 <__gethex+0x320>
 8009b2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d02a      	beq.n	8009b88 <__gethex+0x310>
 8009b32:	2b03      	cmp	r3, #3
 8009b34:	d02c      	beq.n	8009b90 <__gethex+0x318>
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d11c      	bne.n	8009b74 <__gethex+0x2fc>
 8009b3a:	42ae      	cmp	r6, r5
 8009b3c:	d11a      	bne.n	8009b74 <__gethex+0x2fc>
 8009b3e:	2e01      	cmp	r6, #1
 8009b40:	d112      	bne.n	8009b68 <__gethex+0x2f0>
 8009b42:	9a04      	ldr	r2, [sp, #16]
 8009b44:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009b48:	6013      	str	r3, [r2, #0]
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	6123      	str	r3, [r4, #16]
 8009b4e:	f8c9 3000 	str.w	r3, [r9]
 8009b52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b54:	2762      	movs	r7, #98	; 0x62
 8009b56:	601c      	str	r4, [r3, #0]
 8009b58:	e723      	b.n	80099a2 <__gethex+0x12a>
 8009b5a:	bf00      	nop
 8009b5c:	0800c74c 	.word	0x0800c74c
 8009b60:	0800c6d4 	.word	0x0800c6d4
 8009b64:	0800c6e5 	.word	0x0800c6e5
 8009b68:	1e71      	subs	r1, r6, #1
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f000 fe5c 	bl	800a828 <__any_on>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d1e6      	bne.n	8009b42 <__gethex+0x2ca>
 8009b74:	ee18 0a10 	vmov	r0, s16
 8009b78:	4621      	mov	r1, r4
 8009b7a:	f000 f9f5 	bl	8009f68 <_Bfree>
 8009b7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b80:	2300      	movs	r3, #0
 8009b82:	6013      	str	r3, [r2, #0]
 8009b84:	2750      	movs	r7, #80	; 0x50
 8009b86:	e70c      	b.n	80099a2 <__gethex+0x12a>
 8009b88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1f2      	bne.n	8009b74 <__gethex+0x2fc>
 8009b8e:	e7d8      	b.n	8009b42 <__gethex+0x2ca>
 8009b90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1d5      	bne.n	8009b42 <__gethex+0x2ca>
 8009b96:	e7ed      	b.n	8009b74 <__gethex+0x2fc>
 8009b98:	1e6f      	subs	r7, r5, #1
 8009b9a:	f1ba 0f00 	cmp.w	sl, #0
 8009b9e:	d131      	bne.n	8009c04 <__gethex+0x38c>
 8009ba0:	b127      	cbz	r7, 8009bac <__gethex+0x334>
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	f000 fe3f 	bl	800a828 <__any_on>
 8009baa:	4682      	mov	sl, r0
 8009bac:	117b      	asrs	r3, r7, #5
 8009bae:	2101      	movs	r1, #1
 8009bb0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009bb4:	f007 071f 	and.w	r7, r7, #31
 8009bb8:	fa01 f707 	lsl.w	r7, r1, r7
 8009bbc:	421f      	tst	r7, r3
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	bf18      	it	ne
 8009bc4:	f04a 0a02 	orrne.w	sl, sl, #2
 8009bc8:	1b76      	subs	r6, r6, r5
 8009bca:	f7ff fded 	bl	80097a8 <rshift>
 8009bce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009bd2:	2702      	movs	r7, #2
 8009bd4:	f1ba 0f00 	cmp.w	sl, #0
 8009bd8:	d048      	beq.n	8009c6c <__gethex+0x3f4>
 8009bda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d015      	beq.n	8009c0e <__gethex+0x396>
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d017      	beq.n	8009c16 <__gethex+0x39e>
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d109      	bne.n	8009bfe <__gethex+0x386>
 8009bea:	f01a 0f02 	tst.w	sl, #2
 8009bee:	d006      	beq.n	8009bfe <__gethex+0x386>
 8009bf0:	f8d9 0000 	ldr.w	r0, [r9]
 8009bf4:	ea4a 0a00 	orr.w	sl, sl, r0
 8009bf8:	f01a 0f01 	tst.w	sl, #1
 8009bfc:	d10e      	bne.n	8009c1c <__gethex+0x3a4>
 8009bfe:	f047 0710 	orr.w	r7, r7, #16
 8009c02:	e033      	b.n	8009c6c <__gethex+0x3f4>
 8009c04:	f04f 0a01 	mov.w	sl, #1
 8009c08:	e7d0      	b.n	8009bac <__gethex+0x334>
 8009c0a:	2701      	movs	r7, #1
 8009c0c:	e7e2      	b.n	8009bd4 <__gethex+0x35c>
 8009c0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c10:	f1c3 0301 	rsb	r3, r3, #1
 8009c14:	9315      	str	r3, [sp, #84]	; 0x54
 8009c16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d0f0      	beq.n	8009bfe <__gethex+0x386>
 8009c1c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c20:	f104 0314 	add.w	r3, r4, #20
 8009c24:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009c28:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009c2c:	f04f 0c00 	mov.w	ip, #0
 8009c30:	4618      	mov	r0, r3
 8009c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c36:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009c3a:	d01c      	beq.n	8009c76 <__gethex+0x3fe>
 8009c3c:	3201      	adds	r2, #1
 8009c3e:	6002      	str	r2, [r0, #0]
 8009c40:	2f02      	cmp	r7, #2
 8009c42:	f104 0314 	add.w	r3, r4, #20
 8009c46:	d13f      	bne.n	8009cc8 <__gethex+0x450>
 8009c48:	f8d8 2000 	ldr.w	r2, [r8]
 8009c4c:	3a01      	subs	r2, #1
 8009c4e:	42b2      	cmp	r2, r6
 8009c50:	d10a      	bne.n	8009c68 <__gethex+0x3f0>
 8009c52:	1171      	asrs	r1, r6, #5
 8009c54:	2201      	movs	r2, #1
 8009c56:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c5a:	f006 061f 	and.w	r6, r6, #31
 8009c5e:	fa02 f606 	lsl.w	r6, r2, r6
 8009c62:	421e      	tst	r6, r3
 8009c64:	bf18      	it	ne
 8009c66:	4617      	movne	r7, r2
 8009c68:	f047 0720 	orr.w	r7, r7, #32
 8009c6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c6e:	601c      	str	r4, [r3, #0]
 8009c70:	9b04      	ldr	r3, [sp, #16]
 8009c72:	601d      	str	r5, [r3, #0]
 8009c74:	e695      	b.n	80099a2 <__gethex+0x12a>
 8009c76:	4299      	cmp	r1, r3
 8009c78:	f843 cc04 	str.w	ip, [r3, #-4]
 8009c7c:	d8d8      	bhi.n	8009c30 <__gethex+0x3b8>
 8009c7e:	68a3      	ldr	r3, [r4, #8]
 8009c80:	459b      	cmp	fp, r3
 8009c82:	db19      	blt.n	8009cb8 <__gethex+0x440>
 8009c84:	6861      	ldr	r1, [r4, #4]
 8009c86:	ee18 0a10 	vmov	r0, s16
 8009c8a:	3101      	adds	r1, #1
 8009c8c:	f000 f92c 	bl	8009ee8 <_Balloc>
 8009c90:	4681      	mov	r9, r0
 8009c92:	b918      	cbnz	r0, 8009c9c <__gethex+0x424>
 8009c94:	4b1a      	ldr	r3, [pc, #104]	; (8009d00 <__gethex+0x488>)
 8009c96:	4602      	mov	r2, r0
 8009c98:	2184      	movs	r1, #132	; 0x84
 8009c9a:	e6a8      	b.n	80099ee <__gethex+0x176>
 8009c9c:	6922      	ldr	r2, [r4, #16]
 8009c9e:	3202      	adds	r2, #2
 8009ca0:	f104 010c 	add.w	r1, r4, #12
 8009ca4:	0092      	lsls	r2, r2, #2
 8009ca6:	300c      	adds	r0, #12
 8009ca8:	f7fd f8f6 	bl	8006e98 <memcpy>
 8009cac:	4621      	mov	r1, r4
 8009cae:	ee18 0a10 	vmov	r0, s16
 8009cb2:	f000 f959 	bl	8009f68 <_Bfree>
 8009cb6:	464c      	mov	r4, r9
 8009cb8:	6923      	ldr	r3, [r4, #16]
 8009cba:	1c5a      	adds	r2, r3, #1
 8009cbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009cc0:	6122      	str	r2, [r4, #16]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	615a      	str	r2, [r3, #20]
 8009cc6:	e7bb      	b.n	8009c40 <__gethex+0x3c8>
 8009cc8:	6922      	ldr	r2, [r4, #16]
 8009cca:	455a      	cmp	r2, fp
 8009ccc:	dd0b      	ble.n	8009ce6 <__gethex+0x46e>
 8009cce:	2101      	movs	r1, #1
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f7ff fd69 	bl	80097a8 <rshift>
 8009cd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009cda:	3501      	adds	r5, #1
 8009cdc:	42ab      	cmp	r3, r5
 8009cde:	f6ff aed0 	blt.w	8009a82 <__gethex+0x20a>
 8009ce2:	2701      	movs	r7, #1
 8009ce4:	e7c0      	b.n	8009c68 <__gethex+0x3f0>
 8009ce6:	f016 061f 	ands.w	r6, r6, #31
 8009cea:	d0fa      	beq.n	8009ce2 <__gethex+0x46a>
 8009cec:	4453      	add	r3, sl
 8009cee:	f1c6 0620 	rsb	r6, r6, #32
 8009cf2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009cf6:	f000 f9e9 	bl	800a0cc <__hi0bits>
 8009cfa:	42b0      	cmp	r0, r6
 8009cfc:	dbe7      	blt.n	8009cce <__gethex+0x456>
 8009cfe:	e7f0      	b.n	8009ce2 <__gethex+0x46a>
 8009d00:	0800c6d4 	.word	0x0800c6d4

08009d04 <L_shift>:
 8009d04:	f1c2 0208 	rsb	r2, r2, #8
 8009d08:	0092      	lsls	r2, r2, #2
 8009d0a:	b570      	push	{r4, r5, r6, lr}
 8009d0c:	f1c2 0620 	rsb	r6, r2, #32
 8009d10:	6843      	ldr	r3, [r0, #4]
 8009d12:	6804      	ldr	r4, [r0, #0]
 8009d14:	fa03 f506 	lsl.w	r5, r3, r6
 8009d18:	432c      	orrs	r4, r5
 8009d1a:	40d3      	lsrs	r3, r2
 8009d1c:	6004      	str	r4, [r0, #0]
 8009d1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d22:	4288      	cmp	r0, r1
 8009d24:	d3f4      	bcc.n	8009d10 <L_shift+0xc>
 8009d26:	bd70      	pop	{r4, r5, r6, pc}

08009d28 <__match>:
 8009d28:	b530      	push	{r4, r5, lr}
 8009d2a:	6803      	ldr	r3, [r0, #0]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d32:	b914      	cbnz	r4, 8009d3a <__match+0x12>
 8009d34:	6003      	str	r3, [r0, #0]
 8009d36:	2001      	movs	r0, #1
 8009d38:	bd30      	pop	{r4, r5, pc}
 8009d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009d42:	2d19      	cmp	r5, #25
 8009d44:	bf98      	it	ls
 8009d46:	3220      	addls	r2, #32
 8009d48:	42a2      	cmp	r2, r4
 8009d4a:	d0f0      	beq.n	8009d2e <__match+0x6>
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	e7f3      	b.n	8009d38 <__match+0x10>

08009d50 <__hexnan>:
 8009d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d54:	680b      	ldr	r3, [r1, #0]
 8009d56:	115e      	asrs	r6, r3, #5
 8009d58:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009d5c:	f013 031f 	ands.w	r3, r3, #31
 8009d60:	b087      	sub	sp, #28
 8009d62:	bf18      	it	ne
 8009d64:	3604      	addne	r6, #4
 8009d66:	2500      	movs	r5, #0
 8009d68:	1f37      	subs	r7, r6, #4
 8009d6a:	4690      	mov	r8, r2
 8009d6c:	6802      	ldr	r2, [r0, #0]
 8009d6e:	9301      	str	r3, [sp, #4]
 8009d70:	4682      	mov	sl, r0
 8009d72:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d76:	46b9      	mov	r9, r7
 8009d78:	463c      	mov	r4, r7
 8009d7a:	9502      	str	r5, [sp, #8]
 8009d7c:	46ab      	mov	fp, r5
 8009d7e:	7851      	ldrb	r1, [r2, #1]
 8009d80:	1c53      	adds	r3, r2, #1
 8009d82:	9303      	str	r3, [sp, #12]
 8009d84:	b341      	cbz	r1, 8009dd8 <__hexnan+0x88>
 8009d86:	4608      	mov	r0, r1
 8009d88:	9205      	str	r2, [sp, #20]
 8009d8a:	9104      	str	r1, [sp, #16]
 8009d8c:	f7ff fd5e 	bl	800984c <__hexdig_fun>
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d14f      	bne.n	8009e34 <__hexnan+0xe4>
 8009d94:	9904      	ldr	r1, [sp, #16]
 8009d96:	9a05      	ldr	r2, [sp, #20]
 8009d98:	2920      	cmp	r1, #32
 8009d9a:	d818      	bhi.n	8009dce <__hexnan+0x7e>
 8009d9c:	9b02      	ldr	r3, [sp, #8]
 8009d9e:	459b      	cmp	fp, r3
 8009da0:	dd13      	ble.n	8009dca <__hexnan+0x7a>
 8009da2:	454c      	cmp	r4, r9
 8009da4:	d206      	bcs.n	8009db4 <__hexnan+0x64>
 8009da6:	2d07      	cmp	r5, #7
 8009da8:	dc04      	bgt.n	8009db4 <__hexnan+0x64>
 8009daa:	462a      	mov	r2, r5
 8009dac:	4649      	mov	r1, r9
 8009dae:	4620      	mov	r0, r4
 8009db0:	f7ff ffa8 	bl	8009d04 <L_shift>
 8009db4:	4544      	cmp	r4, r8
 8009db6:	d950      	bls.n	8009e5a <__hexnan+0x10a>
 8009db8:	2300      	movs	r3, #0
 8009dba:	f1a4 0904 	sub.w	r9, r4, #4
 8009dbe:	f844 3c04 	str.w	r3, [r4, #-4]
 8009dc2:	f8cd b008 	str.w	fp, [sp, #8]
 8009dc6:	464c      	mov	r4, r9
 8009dc8:	461d      	mov	r5, r3
 8009dca:	9a03      	ldr	r2, [sp, #12]
 8009dcc:	e7d7      	b.n	8009d7e <__hexnan+0x2e>
 8009dce:	2929      	cmp	r1, #41	; 0x29
 8009dd0:	d156      	bne.n	8009e80 <__hexnan+0x130>
 8009dd2:	3202      	adds	r2, #2
 8009dd4:	f8ca 2000 	str.w	r2, [sl]
 8009dd8:	f1bb 0f00 	cmp.w	fp, #0
 8009ddc:	d050      	beq.n	8009e80 <__hexnan+0x130>
 8009dde:	454c      	cmp	r4, r9
 8009de0:	d206      	bcs.n	8009df0 <__hexnan+0xa0>
 8009de2:	2d07      	cmp	r5, #7
 8009de4:	dc04      	bgt.n	8009df0 <__hexnan+0xa0>
 8009de6:	462a      	mov	r2, r5
 8009de8:	4649      	mov	r1, r9
 8009dea:	4620      	mov	r0, r4
 8009dec:	f7ff ff8a 	bl	8009d04 <L_shift>
 8009df0:	4544      	cmp	r4, r8
 8009df2:	d934      	bls.n	8009e5e <__hexnan+0x10e>
 8009df4:	f1a8 0204 	sub.w	r2, r8, #4
 8009df8:	4623      	mov	r3, r4
 8009dfa:	f853 1b04 	ldr.w	r1, [r3], #4
 8009dfe:	f842 1f04 	str.w	r1, [r2, #4]!
 8009e02:	429f      	cmp	r7, r3
 8009e04:	d2f9      	bcs.n	8009dfa <__hexnan+0xaa>
 8009e06:	1b3b      	subs	r3, r7, r4
 8009e08:	f023 0303 	bic.w	r3, r3, #3
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	3401      	adds	r4, #1
 8009e10:	3e03      	subs	r6, #3
 8009e12:	42b4      	cmp	r4, r6
 8009e14:	bf88      	it	hi
 8009e16:	2304      	movhi	r3, #4
 8009e18:	4443      	add	r3, r8
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f843 2b04 	str.w	r2, [r3], #4
 8009e20:	429f      	cmp	r7, r3
 8009e22:	d2fb      	bcs.n	8009e1c <__hexnan+0xcc>
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	b91b      	cbnz	r3, 8009e30 <__hexnan+0xe0>
 8009e28:	4547      	cmp	r7, r8
 8009e2a:	d127      	bne.n	8009e7c <__hexnan+0x12c>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	603b      	str	r3, [r7, #0]
 8009e30:	2005      	movs	r0, #5
 8009e32:	e026      	b.n	8009e82 <__hexnan+0x132>
 8009e34:	3501      	adds	r5, #1
 8009e36:	2d08      	cmp	r5, #8
 8009e38:	f10b 0b01 	add.w	fp, fp, #1
 8009e3c:	dd06      	ble.n	8009e4c <__hexnan+0xfc>
 8009e3e:	4544      	cmp	r4, r8
 8009e40:	d9c3      	bls.n	8009dca <__hexnan+0x7a>
 8009e42:	2300      	movs	r3, #0
 8009e44:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e48:	2501      	movs	r5, #1
 8009e4a:	3c04      	subs	r4, #4
 8009e4c:	6822      	ldr	r2, [r4, #0]
 8009e4e:	f000 000f 	and.w	r0, r0, #15
 8009e52:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009e56:	6022      	str	r2, [r4, #0]
 8009e58:	e7b7      	b.n	8009dca <__hexnan+0x7a>
 8009e5a:	2508      	movs	r5, #8
 8009e5c:	e7b5      	b.n	8009dca <__hexnan+0x7a>
 8009e5e:	9b01      	ldr	r3, [sp, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d0df      	beq.n	8009e24 <__hexnan+0xd4>
 8009e64:	f04f 32ff 	mov.w	r2, #4294967295
 8009e68:	f1c3 0320 	rsb	r3, r3, #32
 8009e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009e74:	401a      	ands	r2, r3
 8009e76:	f846 2c04 	str.w	r2, [r6, #-4]
 8009e7a:	e7d3      	b.n	8009e24 <__hexnan+0xd4>
 8009e7c:	3f04      	subs	r7, #4
 8009e7e:	e7d1      	b.n	8009e24 <__hexnan+0xd4>
 8009e80:	2004      	movs	r0, #4
 8009e82:	b007      	add	sp, #28
 8009e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e88 <_localeconv_r>:
 8009e88:	4800      	ldr	r0, [pc, #0]	; (8009e8c <_localeconv_r+0x4>)
 8009e8a:	4770      	bx	lr
 8009e8c:	200001f4 	.word	0x200001f4

08009e90 <_lseek_r>:
 8009e90:	b538      	push	{r3, r4, r5, lr}
 8009e92:	4d07      	ldr	r5, [pc, #28]	; (8009eb0 <_lseek_r+0x20>)
 8009e94:	4604      	mov	r4, r0
 8009e96:	4608      	mov	r0, r1
 8009e98:	4611      	mov	r1, r2
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	602a      	str	r2, [r5, #0]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	f7f8 fd2e 	bl	8002900 <_lseek>
 8009ea4:	1c43      	adds	r3, r0, #1
 8009ea6:	d102      	bne.n	8009eae <_lseek_r+0x1e>
 8009ea8:	682b      	ldr	r3, [r5, #0]
 8009eaa:	b103      	cbz	r3, 8009eae <_lseek_r+0x1e>
 8009eac:	6023      	str	r3, [r4, #0]
 8009eae:	bd38      	pop	{r3, r4, r5, pc}
 8009eb0:	20000e94 	.word	0x20000e94

08009eb4 <malloc>:
 8009eb4:	4b02      	ldr	r3, [pc, #8]	; (8009ec0 <malloc+0xc>)
 8009eb6:	4601      	mov	r1, r0
 8009eb8:	6818      	ldr	r0, [r3, #0]
 8009eba:	f000 bd59 	b.w	800a970 <_malloc_r>
 8009ebe:	bf00      	nop
 8009ec0:	2000009c 	.word	0x2000009c

08009ec4 <__ascii_mbtowc>:
 8009ec4:	b082      	sub	sp, #8
 8009ec6:	b901      	cbnz	r1, 8009eca <__ascii_mbtowc+0x6>
 8009ec8:	a901      	add	r1, sp, #4
 8009eca:	b142      	cbz	r2, 8009ede <__ascii_mbtowc+0x1a>
 8009ecc:	b14b      	cbz	r3, 8009ee2 <__ascii_mbtowc+0x1e>
 8009ece:	7813      	ldrb	r3, [r2, #0]
 8009ed0:	600b      	str	r3, [r1, #0]
 8009ed2:	7812      	ldrb	r2, [r2, #0]
 8009ed4:	1e10      	subs	r0, r2, #0
 8009ed6:	bf18      	it	ne
 8009ed8:	2001      	movne	r0, #1
 8009eda:	b002      	add	sp, #8
 8009edc:	4770      	bx	lr
 8009ede:	4610      	mov	r0, r2
 8009ee0:	e7fb      	b.n	8009eda <__ascii_mbtowc+0x16>
 8009ee2:	f06f 0001 	mvn.w	r0, #1
 8009ee6:	e7f8      	b.n	8009eda <__ascii_mbtowc+0x16>

08009ee8 <_Balloc>:
 8009ee8:	b570      	push	{r4, r5, r6, lr}
 8009eea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009eec:	4604      	mov	r4, r0
 8009eee:	460d      	mov	r5, r1
 8009ef0:	b976      	cbnz	r6, 8009f10 <_Balloc+0x28>
 8009ef2:	2010      	movs	r0, #16
 8009ef4:	f7ff ffde 	bl	8009eb4 <malloc>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	6260      	str	r0, [r4, #36]	; 0x24
 8009efc:	b920      	cbnz	r0, 8009f08 <_Balloc+0x20>
 8009efe:	4b18      	ldr	r3, [pc, #96]	; (8009f60 <_Balloc+0x78>)
 8009f00:	4818      	ldr	r0, [pc, #96]	; (8009f64 <_Balloc+0x7c>)
 8009f02:	2166      	movs	r1, #102	; 0x66
 8009f04:	f7fe fd96 	bl	8008a34 <__assert_func>
 8009f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f0c:	6006      	str	r6, [r0, #0]
 8009f0e:	60c6      	str	r6, [r0, #12]
 8009f10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009f12:	68f3      	ldr	r3, [r6, #12]
 8009f14:	b183      	cbz	r3, 8009f38 <_Balloc+0x50>
 8009f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f1e:	b9b8      	cbnz	r0, 8009f50 <_Balloc+0x68>
 8009f20:	2101      	movs	r1, #1
 8009f22:	fa01 f605 	lsl.w	r6, r1, r5
 8009f26:	1d72      	adds	r2, r6, #5
 8009f28:	0092      	lsls	r2, r2, #2
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f000 fc9d 	bl	800a86a <_calloc_r>
 8009f30:	b160      	cbz	r0, 8009f4c <_Balloc+0x64>
 8009f32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f36:	e00e      	b.n	8009f56 <_Balloc+0x6e>
 8009f38:	2221      	movs	r2, #33	; 0x21
 8009f3a:	2104      	movs	r1, #4
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 fc94 	bl	800a86a <_calloc_r>
 8009f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f44:	60f0      	str	r0, [r6, #12]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1e4      	bne.n	8009f16 <_Balloc+0x2e>
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	bd70      	pop	{r4, r5, r6, pc}
 8009f50:	6802      	ldr	r2, [r0, #0]
 8009f52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f56:	2300      	movs	r3, #0
 8009f58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f5c:	e7f7      	b.n	8009f4e <_Balloc+0x66>
 8009f5e:	bf00      	nop
 8009f60:	0800c662 	.word	0x0800c662
 8009f64:	0800c760 	.word	0x0800c760

08009f68 <_Bfree>:
 8009f68:	b570      	push	{r4, r5, r6, lr}
 8009f6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	460c      	mov	r4, r1
 8009f70:	b976      	cbnz	r6, 8009f90 <_Bfree+0x28>
 8009f72:	2010      	movs	r0, #16
 8009f74:	f7ff ff9e 	bl	8009eb4 <malloc>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	6268      	str	r0, [r5, #36]	; 0x24
 8009f7c:	b920      	cbnz	r0, 8009f88 <_Bfree+0x20>
 8009f7e:	4b09      	ldr	r3, [pc, #36]	; (8009fa4 <_Bfree+0x3c>)
 8009f80:	4809      	ldr	r0, [pc, #36]	; (8009fa8 <_Bfree+0x40>)
 8009f82:	218a      	movs	r1, #138	; 0x8a
 8009f84:	f7fe fd56 	bl	8008a34 <__assert_func>
 8009f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f8c:	6006      	str	r6, [r0, #0]
 8009f8e:	60c6      	str	r6, [r0, #12]
 8009f90:	b13c      	cbz	r4, 8009fa2 <_Bfree+0x3a>
 8009f92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f94:	6862      	ldr	r2, [r4, #4]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f9c:	6021      	str	r1, [r4, #0]
 8009f9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009fa2:	bd70      	pop	{r4, r5, r6, pc}
 8009fa4:	0800c662 	.word	0x0800c662
 8009fa8:	0800c760 	.word	0x0800c760

08009fac <__multadd>:
 8009fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb0:	690d      	ldr	r5, [r1, #16]
 8009fb2:	4607      	mov	r7, r0
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	461e      	mov	r6, r3
 8009fb8:	f101 0c14 	add.w	ip, r1, #20
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	f8dc 3000 	ldr.w	r3, [ip]
 8009fc2:	b299      	uxth	r1, r3
 8009fc4:	fb02 6101 	mla	r1, r2, r1, r6
 8009fc8:	0c1e      	lsrs	r6, r3, #16
 8009fca:	0c0b      	lsrs	r3, r1, #16
 8009fcc:	fb02 3306 	mla	r3, r2, r6, r3
 8009fd0:	b289      	uxth	r1, r1
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009fd8:	4285      	cmp	r5, r0
 8009fda:	f84c 1b04 	str.w	r1, [ip], #4
 8009fde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009fe2:	dcec      	bgt.n	8009fbe <__multadd+0x12>
 8009fe4:	b30e      	cbz	r6, 800a02a <__multadd+0x7e>
 8009fe6:	68a3      	ldr	r3, [r4, #8]
 8009fe8:	42ab      	cmp	r3, r5
 8009fea:	dc19      	bgt.n	800a020 <__multadd+0x74>
 8009fec:	6861      	ldr	r1, [r4, #4]
 8009fee:	4638      	mov	r0, r7
 8009ff0:	3101      	adds	r1, #1
 8009ff2:	f7ff ff79 	bl	8009ee8 <_Balloc>
 8009ff6:	4680      	mov	r8, r0
 8009ff8:	b928      	cbnz	r0, 800a006 <__multadd+0x5a>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	4b0c      	ldr	r3, [pc, #48]	; (800a030 <__multadd+0x84>)
 8009ffe:	480d      	ldr	r0, [pc, #52]	; (800a034 <__multadd+0x88>)
 800a000:	21b5      	movs	r1, #181	; 0xb5
 800a002:	f7fe fd17 	bl	8008a34 <__assert_func>
 800a006:	6922      	ldr	r2, [r4, #16]
 800a008:	3202      	adds	r2, #2
 800a00a:	f104 010c 	add.w	r1, r4, #12
 800a00e:	0092      	lsls	r2, r2, #2
 800a010:	300c      	adds	r0, #12
 800a012:	f7fc ff41 	bl	8006e98 <memcpy>
 800a016:	4621      	mov	r1, r4
 800a018:	4638      	mov	r0, r7
 800a01a:	f7ff ffa5 	bl	8009f68 <_Bfree>
 800a01e:	4644      	mov	r4, r8
 800a020:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a024:	3501      	adds	r5, #1
 800a026:	615e      	str	r6, [r3, #20]
 800a028:	6125      	str	r5, [r4, #16]
 800a02a:	4620      	mov	r0, r4
 800a02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a030:	0800c6d4 	.word	0x0800c6d4
 800a034:	0800c760 	.word	0x0800c760

0800a038 <__s2b>:
 800a038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a03c:	460c      	mov	r4, r1
 800a03e:	4615      	mov	r5, r2
 800a040:	461f      	mov	r7, r3
 800a042:	2209      	movs	r2, #9
 800a044:	3308      	adds	r3, #8
 800a046:	4606      	mov	r6, r0
 800a048:	fb93 f3f2 	sdiv	r3, r3, r2
 800a04c:	2100      	movs	r1, #0
 800a04e:	2201      	movs	r2, #1
 800a050:	429a      	cmp	r2, r3
 800a052:	db09      	blt.n	800a068 <__s2b+0x30>
 800a054:	4630      	mov	r0, r6
 800a056:	f7ff ff47 	bl	8009ee8 <_Balloc>
 800a05a:	b940      	cbnz	r0, 800a06e <__s2b+0x36>
 800a05c:	4602      	mov	r2, r0
 800a05e:	4b19      	ldr	r3, [pc, #100]	; (800a0c4 <__s2b+0x8c>)
 800a060:	4819      	ldr	r0, [pc, #100]	; (800a0c8 <__s2b+0x90>)
 800a062:	21ce      	movs	r1, #206	; 0xce
 800a064:	f7fe fce6 	bl	8008a34 <__assert_func>
 800a068:	0052      	lsls	r2, r2, #1
 800a06a:	3101      	adds	r1, #1
 800a06c:	e7f0      	b.n	800a050 <__s2b+0x18>
 800a06e:	9b08      	ldr	r3, [sp, #32]
 800a070:	6143      	str	r3, [r0, #20]
 800a072:	2d09      	cmp	r5, #9
 800a074:	f04f 0301 	mov.w	r3, #1
 800a078:	6103      	str	r3, [r0, #16]
 800a07a:	dd16      	ble.n	800a0aa <__s2b+0x72>
 800a07c:	f104 0909 	add.w	r9, r4, #9
 800a080:	46c8      	mov	r8, r9
 800a082:	442c      	add	r4, r5
 800a084:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a088:	4601      	mov	r1, r0
 800a08a:	3b30      	subs	r3, #48	; 0x30
 800a08c:	220a      	movs	r2, #10
 800a08e:	4630      	mov	r0, r6
 800a090:	f7ff ff8c 	bl	8009fac <__multadd>
 800a094:	45a0      	cmp	r8, r4
 800a096:	d1f5      	bne.n	800a084 <__s2b+0x4c>
 800a098:	f1a5 0408 	sub.w	r4, r5, #8
 800a09c:	444c      	add	r4, r9
 800a09e:	1b2d      	subs	r5, r5, r4
 800a0a0:	1963      	adds	r3, r4, r5
 800a0a2:	42bb      	cmp	r3, r7
 800a0a4:	db04      	blt.n	800a0b0 <__s2b+0x78>
 800a0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0aa:	340a      	adds	r4, #10
 800a0ac:	2509      	movs	r5, #9
 800a0ae:	e7f6      	b.n	800a09e <__s2b+0x66>
 800a0b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a0b4:	4601      	mov	r1, r0
 800a0b6:	3b30      	subs	r3, #48	; 0x30
 800a0b8:	220a      	movs	r2, #10
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f7ff ff76 	bl	8009fac <__multadd>
 800a0c0:	e7ee      	b.n	800a0a0 <__s2b+0x68>
 800a0c2:	bf00      	nop
 800a0c4:	0800c6d4 	.word	0x0800c6d4
 800a0c8:	0800c760 	.word	0x0800c760

0800a0cc <__hi0bits>:
 800a0cc:	0c03      	lsrs	r3, r0, #16
 800a0ce:	041b      	lsls	r3, r3, #16
 800a0d0:	b9d3      	cbnz	r3, 800a108 <__hi0bits+0x3c>
 800a0d2:	0400      	lsls	r0, r0, #16
 800a0d4:	2310      	movs	r3, #16
 800a0d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a0da:	bf04      	itt	eq
 800a0dc:	0200      	lsleq	r0, r0, #8
 800a0de:	3308      	addeq	r3, #8
 800a0e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a0e4:	bf04      	itt	eq
 800a0e6:	0100      	lsleq	r0, r0, #4
 800a0e8:	3304      	addeq	r3, #4
 800a0ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a0ee:	bf04      	itt	eq
 800a0f0:	0080      	lsleq	r0, r0, #2
 800a0f2:	3302      	addeq	r3, #2
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	db05      	blt.n	800a104 <__hi0bits+0x38>
 800a0f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a0fc:	f103 0301 	add.w	r3, r3, #1
 800a100:	bf08      	it	eq
 800a102:	2320      	moveq	r3, #32
 800a104:	4618      	mov	r0, r3
 800a106:	4770      	bx	lr
 800a108:	2300      	movs	r3, #0
 800a10a:	e7e4      	b.n	800a0d6 <__hi0bits+0xa>

0800a10c <__lo0bits>:
 800a10c:	6803      	ldr	r3, [r0, #0]
 800a10e:	f013 0207 	ands.w	r2, r3, #7
 800a112:	4601      	mov	r1, r0
 800a114:	d00b      	beq.n	800a12e <__lo0bits+0x22>
 800a116:	07da      	lsls	r2, r3, #31
 800a118:	d423      	bmi.n	800a162 <__lo0bits+0x56>
 800a11a:	0798      	lsls	r0, r3, #30
 800a11c:	bf49      	itett	mi
 800a11e:	085b      	lsrmi	r3, r3, #1
 800a120:	089b      	lsrpl	r3, r3, #2
 800a122:	2001      	movmi	r0, #1
 800a124:	600b      	strmi	r3, [r1, #0]
 800a126:	bf5c      	itt	pl
 800a128:	600b      	strpl	r3, [r1, #0]
 800a12a:	2002      	movpl	r0, #2
 800a12c:	4770      	bx	lr
 800a12e:	b298      	uxth	r0, r3
 800a130:	b9a8      	cbnz	r0, 800a15e <__lo0bits+0x52>
 800a132:	0c1b      	lsrs	r3, r3, #16
 800a134:	2010      	movs	r0, #16
 800a136:	b2da      	uxtb	r2, r3
 800a138:	b90a      	cbnz	r2, 800a13e <__lo0bits+0x32>
 800a13a:	3008      	adds	r0, #8
 800a13c:	0a1b      	lsrs	r3, r3, #8
 800a13e:	071a      	lsls	r2, r3, #28
 800a140:	bf04      	itt	eq
 800a142:	091b      	lsreq	r3, r3, #4
 800a144:	3004      	addeq	r0, #4
 800a146:	079a      	lsls	r2, r3, #30
 800a148:	bf04      	itt	eq
 800a14a:	089b      	lsreq	r3, r3, #2
 800a14c:	3002      	addeq	r0, #2
 800a14e:	07da      	lsls	r2, r3, #31
 800a150:	d403      	bmi.n	800a15a <__lo0bits+0x4e>
 800a152:	085b      	lsrs	r3, r3, #1
 800a154:	f100 0001 	add.w	r0, r0, #1
 800a158:	d005      	beq.n	800a166 <__lo0bits+0x5a>
 800a15a:	600b      	str	r3, [r1, #0]
 800a15c:	4770      	bx	lr
 800a15e:	4610      	mov	r0, r2
 800a160:	e7e9      	b.n	800a136 <__lo0bits+0x2a>
 800a162:	2000      	movs	r0, #0
 800a164:	4770      	bx	lr
 800a166:	2020      	movs	r0, #32
 800a168:	4770      	bx	lr
	...

0800a16c <__i2b>:
 800a16c:	b510      	push	{r4, lr}
 800a16e:	460c      	mov	r4, r1
 800a170:	2101      	movs	r1, #1
 800a172:	f7ff feb9 	bl	8009ee8 <_Balloc>
 800a176:	4602      	mov	r2, r0
 800a178:	b928      	cbnz	r0, 800a186 <__i2b+0x1a>
 800a17a:	4b05      	ldr	r3, [pc, #20]	; (800a190 <__i2b+0x24>)
 800a17c:	4805      	ldr	r0, [pc, #20]	; (800a194 <__i2b+0x28>)
 800a17e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a182:	f7fe fc57 	bl	8008a34 <__assert_func>
 800a186:	2301      	movs	r3, #1
 800a188:	6144      	str	r4, [r0, #20]
 800a18a:	6103      	str	r3, [r0, #16]
 800a18c:	bd10      	pop	{r4, pc}
 800a18e:	bf00      	nop
 800a190:	0800c6d4 	.word	0x0800c6d4
 800a194:	0800c760 	.word	0x0800c760

0800a198 <__multiply>:
 800a198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19c:	4691      	mov	r9, r2
 800a19e:	690a      	ldr	r2, [r1, #16]
 800a1a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	bfb8      	it	lt
 800a1a8:	460b      	movlt	r3, r1
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	bfbc      	itt	lt
 800a1ae:	464c      	movlt	r4, r9
 800a1b0:	4699      	movlt	r9, r3
 800a1b2:	6927      	ldr	r7, [r4, #16]
 800a1b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a1b8:	68a3      	ldr	r3, [r4, #8]
 800a1ba:	6861      	ldr	r1, [r4, #4]
 800a1bc:	eb07 060a 	add.w	r6, r7, sl
 800a1c0:	42b3      	cmp	r3, r6
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	bfb8      	it	lt
 800a1c6:	3101      	addlt	r1, #1
 800a1c8:	f7ff fe8e 	bl	8009ee8 <_Balloc>
 800a1cc:	b930      	cbnz	r0, 800a1dc <__multiply+0x44>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	4b44      	ldr	r3, [pc, #272]	; (800a2e4 <__multiply+0x14c>)
 800a1d2:	4845      	ldr	r0, [pc, #276]	; (800a2e8 <__multiply+0x150>)
 800a1d4:	f240 115d 	movw	r1, #349	; 0x15d
 800a1d8:	f7fe fc2c 	bl	8008a34 <__assert_func>
 800a1dc:	f100 0514 	add.w	r5, r0, #20
 800a1e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a1e4:	462b      	mov	r3, r5
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	4543      	cmp	r3, r8
 800a1ea:	d321      	bcc.n	800a230 <__multiply+0x98>
 800a1ec:	f104 0314 	add.w	r3, r4, #20
 800a1f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a1f4:	f109 0314 	add.w	r3, r9, #20
 800a1f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a1fc:	9202      	str	r2, [sp, #8]
 800a1fe:	1b3a      	subs	r2, r7, r4
 800a200:	3a15      	subs	r2, #21
 800a202:	f022 0203 	bic.w	r2, r2, #3
 800a206:	3204      	adds	r2, #4
 800a208:	f104 0115 	add.w	r1, r4, #21
 800a20c:	428f      	cmp	r7, r1
 800a20e:	bf38      	it	cc
 800a210:	2204      	movcc	r2, #4
 800a212:	9201      	str	r2, [sp, #4]
 800a214:	9a02      	ldr	r2, [sp, #8]
 800a216:	9303      	str	r3, [sp, #12]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d80c      	bhi.n	800a236 <__multiply+0x9e>
 800a21c:	2e00      	cmp	r6, #0
 800a21e:	dd03      	ble.n	800a228 <__multiply+0x90>
 800a220:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a224:	2b00      	cmp	r3, #0
 800a226:	d05a      	beq.n	800a2de <__multiply+0x146>
 800a228:	6106      	str	r6, [r0, #16]
 800a22a:	b005      	add	sp, #20
 800a22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a230:	f843 2b04 	str.w	r2, [r3], #4
 800a234:	e7d8      	b.n	800a1e8 <__multiply+0x50>
 800a236:	f8b3 a000 	ldrh.w	sl, [r3]
 800a23a:	f1ba 0f00 	cmp.w	sl, #0
 800a23e:	d024      	beq.n	800a28a <__multiply+0xf2>
 800a240:	f104 0e14 	add.w	lr, r4, #20
 800a244:	46a9      	mov	r9, r5
 800a246:	f04f 0c00 	mov.w	ip, #0
 800a24a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a24e:	f8d9 1000 	ldr.w	r1, [r9]
 800a252:	fa1f fb82 	uxth.w	fp, r2
 800a256:	b289      	uxth	r1, r1
 800a258:	fb0a 110b 	mla	r1, sl, fp, r1
 800a25c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a260:	f8d9 2000 	ldr.w	r2, [r9]
 800a264:	4461      	add	r1, ip
 800a266:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a26a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a26e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a272:	b289      	uxth	r1, r1
 800a274:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a278:	4577      	cmp	r7, lr
 800a27a:	f849 1b04 	str.w	r1, [r9], #4
 800a27e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a282:	d8e2      	bhi.n	800a24a <__multiply+0xb2>
 800a284:	9a01      	ldr	r2, [sp, #4]
 800a286:	f845 c002 	str.w	ip, [r5, r2]
 800a28a:	9a03      	ldr	r2, [sp, #12]
 800a28c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a290:	3304      	adds	r3, #4
 800a292:	f1b9 0f00 	cmp.w	r9, #0
 800a296:	d020      	beq.n	800a2da <__multiply+0x142>
 800a298:	6829      	ldr	r1, [r5, #0]
 800a29a:	f104 0c14 	add.w	ip, r4, #20
 800a29e:	46ae      	mov	lr, r5
 800a2a0:	f04f 0a00 	mov.w	sl, #0
 800a2a4:	f8bc b000 	ldrh.w	fp, [ip]
 800a2a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a2ac:	fb09 220b 	mla	r2, r9, fp, r2
 800a2b0:	4492      	add	sl, r2
 800a2b2:	b289      	uxth	r1, r1
 800a2b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a2b8:	f84e 1b04 	str.w	r1, [lr], #4
 800a2bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a2c0:	f8be 1000 	ldrh.w	r1, [lr]
 800a2c4:	0c12      	lsrs	r2, r2, #16
 800a2c6:	fb09 1102 	mla	r1, r9, r2, r1
 800a2ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a2ce:	4567      	cmp	r7, ip
 800a2d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a2d4:	d8e6      	bhi.n	800a2a4 <__multiply+0x10c>
 800a2d6:	9a01      	ldr	r2, [sp, #4]
 800a2d8:	50a9      	str	r1, [r5, r2]
 800a2da:	3504      	adds	r5, #4
 800a2dc:	e79a      	b.n	800a214 <__multiply+0x7c>
 800a2de:	3e01      	subs	r6, #1
 800a2e0:	e79c      	b.n	800a21c <__multiply+0x84>
 800a2e2:	bf00      	nop
 800a2e4:	0800c6d4 	.word	0x0800c6d4
 800a2e8:	0800c760 	.word	0x0800c760

0800a2ec <__pow5mult>:
 800a2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2f0:	4615      	mov	r5, r2
 800a2f2:	f012 0203 	ands.w	r2, r2, #3
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	460f      	mov	r7, r1
 800a2fa:	d007      	beq.n	800a30c <__pow5mult+0x20>
 800a2fc:	4c25      	ldr	r4, [pc, #148]	; (800a394 <__pow5mult+0xa8>)
 800a2fe:	3a01      	subs	r2, #1
 800a300:	2300      	movs	r3, #0
 800a302:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a306:	f7ff fe51 	bl	8009fac <__multadd>
 800a30a:	4607      	mov	r7, r0
 800a30c:	10ad      	asrs	r5, r5, #2
 800a30e:	d03d      	beq.n	800a38c <__pow5mult+0xa0>
 800a310:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a312:	b97c      	cbnz	r4, 800a334 <__pow5mult+0x48>
 800a314:	2010      	movs	r0, #16
 800a316:	f7ff fdcd 	bl	8009eb4 <malloc>
 800a31a:	4602      	mov	r2, r0
 800a31c:	6270      	str	r0, [r6, #36]	; 0x24
 800a31e:	b928      	cbnz	r0, 800a32c <__pow5mult+0x40>
 800a320:	4b1d      	ldr	r3, [pc, #116]	; (800a398 <__pow5mult+0xac>)
 800a322:	481e      	ldr	r0, [pc, #120]	; (800a39c <__pow5mult+0xb0>)
 800a324:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a328:	f7fe fb84 	bl	8008a34 <__assert_func>
 800a32c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a330:	6004      	str	r4, [r0, #0]
 800a332:	60c4      	str	r4, [r0, #12]
 800a334:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a338:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a33c:	b94c      	cbnz	r4, 800a352 <__pow5mult+0x66>
 800a33e:	f240 2171 	movw	r1, #625	; 0x271
 800a342:	4630      	mov	r0, r6
 800a344:	f7ff ff12 	bl	800a16c <__i2b>
 800a348:	2300      	movs	r3, #0
 800a34a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a34e:	4604      	mov	r4, r0
 800a350:	6003      	str	r3, [r0, #0]
 800a352:	f04f 0900 	mov.w	r9, #0
 800a356:	07eb      	lsls	r3, r5, #31
 800a358:	d50a      	bpl.n	800a370 <__pow5mult+0x84>
 800a35a:	4639      	mov	r1, r7
 800a35c:	4622      	mov	r2, r4
 800a35e:	4630      	mov	r0, r6
 800a360:	f7ff ff1a 	bl	800a198 <__multiply>
 800a364:	4639      	mov	r1, r7
 800a366:	4680      	mov	r8, r0
 800a368:	4630      	mov	r0, r6
 800a36a:	f7ff fdfd 	bl	8009f68 <_Bfree>
 800a36e:	4647      	mov	r7, r8
 800a370:	106d      	asrs	r5, r5, #1
 800a372:	d00b      	beq.n	800a38c <__pow5mult+0xa0>
 800a374:	6820      	ldr	r0, [r4, #0]
 800a376:	b938      	cbnz	r0, 800a388 <__pow5mult+0x9c>
 800a378:	4622      	mov	r2, r4
 800a37a:	4621      	mov	r1, r4
 800a37c:	4630      	mov	r0, r6
 800a37e:	f7ff ff0b 	bl	800a198 <__multiply>
 800a382:	6020      	str	r0, [r4, #0]
 800a384:	f8c0 9000 	str.w	r9, [r0]
 800a388:	4604      	mov	r4, r0
 800a38a:	e7e4      	b.n	800a356 <__pow5mult+0x6a>
 800a38c:	4638      	mov	r0, r7
 800a38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a392:	bf00      	nop
 800a394:	0800c8b0 	.word	0x0800c8b0
 800a398:	0800c662 	.word	0x0800c662
 800a39c:	0800c760 	.word	0x0800c760

0800a3a0 <__lshift>:
 800a3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	6849      	ldr	r1, [r1, #4]
 800a3a8:	6923      	ldr	r3, [r4, #16]
 800a3aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3ae:	68a3      	ldr	r3, [r4, #8]
 800a3b0:	4607      	mov	r7, r0
 800a3b2:	4691      	mov	r9, r2
 800a3b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3b8:	f108 0601 	add.w	r6, r8, #1
 800a3bc:	42b3      	cmp	r3, r6
 800a3be:	db0b      	blt.n	800a3d8 <__lshift+0x38>
 800a3c0:	4638      	mov	r0, r7
 800a3c2:	f7ff fd91 	bl	8009ee8 <_Balloc>
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	b948      	cbnz	r0, 800a3de <__lshift+0x3e>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	4b2a      	ldr	r3, [pc, #168]	; (800a478 <__lshift+0xd8>)
 800a3ce:	482b      	ldr	r0, [pc, #172]	; (800a47c <__lshift+0xdc>)
 800a3d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a3d4:	f7fe fb2e 	bl	8008a34 <__assert_func>
 800a3d8:	3101      	adds	r1, #1
 800a3da:	005b      	lsls	r3, r3, #1
 800a3dc:	e7ee      	b.n	800a3bc <__lshift+0x1c>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f100 0114 	add.w	r1, r0, #20
 800a3e4:	f100 0210 	add.w	r2, r0, #16
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	4553      	cmp	r3, sl
 800a3ec:	db37      	blt.n	800a45e <__lshift+0xbe>
 800a3ee:	6920      	ldr	r0, [r4, #16]
 800a3f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a3f4:	f104 0314 	add.w	r3, r4, #20
 800a3f8:	f019 091f 	ands.w	r9, r9, #31
 800a3fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a400:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a404:	d02f      	beq.n	800a466 <__lshift+0xc6>
 800a406:	f1c9 0e20 	rsb	lr, r9, #32
 800a40a:	468a      	mov	sl, r1
 800a40c:	f04f 0c00 	mov.w	ip, #0
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	fa02 f209 	lsl.w	r2, r2, r9
 800a416:	ea42 020c 	orr.w	r2, r2, ip
 800a41a:	f84a 2b04 	str.w	r2, [sl], #4
 800a41e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a422:	4298      	cmp	r0, r3
 800a424:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a428:	d8f2      	bhi.n	800a410 <__lshift+0x70>
 800a42a:	1b03      	subs	r3, r0, r4
 800a42c:	3b15      	subs	r3, #21
 800a42e:	f023 0303 	bic.w	r3, r3, #3
 800a432:	3304      	adds	r3, #4
 800a434:	f104 0215 	add.w	r2, r4, #21
 800a438:	4290      	cmp	r0, r2
 800a43a:	bf38      	it	cc
 800a43c:	2304      	movcc	r3, #4
 800a43e:	f841 c003 	str.w	ip, [r1, r3]
 800a442:	f1bc 0f00 	cmp.w	ip, #0
 800a446:	d001      	beq.n	800a44c <__lshift+0xac>
 800a448:	f108 0602 	add.w	r6, r8, #2
 800a44c:	3e01      	subs	r6, #1
 800a44e:	4638      	mov	r0, r7
 800a450:	612e      	str	r6, [r5, #16]
 800a452:	4621      	mov	r1, r4
 800a454:	f7ff fd88 	bl	8009f68 <_Bfree>
 800a458:	4628      	mov	r0, r5
 800a45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a45e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a462:	3301      	adds	r3, #1
 800a464:	e7c1      	b.n	800a3ea <__lshift+0x4a>
 800a466:	3904      	subs	r1, #4
 800a468:	f853 2b04 	ldr.w	r2, [r3], #4
 800a46c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a470:	4298      	cmp	r0, r3
 800a472:	d8f9      	bhi.n	800a468 <__lshift+0xc8>
 800a474:	e7ea      	b.n	800a44c <__lshift+0xac>
 800a476:	bf00      	nop
 800a478:	0800c6d4 	.word	0x0800c6d4
 800a47c:	0800c760 	.word	0x0800c760

0800a480 <__mcmp>:
 800a480:	b530      	push	{r4, r5, lr}
 800a482:	6902      	ldr	r2, [r0, #16]
 800a484:	690c      	ldr	r4, [r1, #16]
 800a486:	1b12      	subs	r2, r2, r4
 800a488:	d10e      	bne.n	800a4a8 <__mcmp+0x28>
 800a48a:	f100 0314 	add.w	r3, r0, #20
 800a48e:	3114      	adds	r1, #20
 800a490:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a494:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a498:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a49c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a4a0:	42a5      	cmp	r5, r4
 800a4a2:	d003      	beq.n	800a4ac <__mcmp+0x2c>
 800a4a4:	d305      	bcc.n	800a4b2 <__mcmp+0x32>
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	4610      	mov	r0, r2
 800a4aa:	bd30      	pop	{r4, r5, pc}
 800a4ac:	4283      	cmp	r3, r0
 800a4ae:	d3f3      	bcc.n	800a498 <__mcmp+0x18>
 800a4b0:	e7fa      	b.n	800a4a8 <__mcmp+0x28>
 800a4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4b6:	e7f7      	b.n	800a4a8 <__mcmp+0x28>

0800a4b8 <__mdiff>:
 800a4b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4bc:	460c      	mov	r4, r1
 800a4be:	4606      	mov	r6, r0
 800a4c0:	4611      	mov	r1, r2
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	4690      	mov	r8, r2
 800a4c6:	f7ff ffdb 	bl	800a480 <__mcmp>
 800a4ca:	1e05      	subs	r5, r0, #0
 800a4cc:	d110      	bne.n	800a4f0 <__mdiff+0x38>
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f7ff fd09 	bl	8009ee8 <_Balloc>
 800a4d6:	b930      	cbnz	r0, 800a4e6 <__mdiff+0x2e>
 800a4d8:	4b3a      	ldr	r3, [pc, #232]	; (800a5c4 <__mdiff+0x10c>)
 800a4da:	4602      	mov	r2, r0
 800a4dc:	f240 2132 	movw	r1, #562	; 0x232
 800a4e0:	4839      	ldr	r0, [pc, #228]	; (800a5c8 <__mdiff+0x110>)
 800a4e2:	f7fe faa7 	bl	8008a34 <__assert_func>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a4ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f0:	bfa4      	itt	ge
 800a4f2:	4643      	movge	r3, r8
 800a4f4:	46a0      	movge	r8, r4
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a4fc:	bfa6      	itte	ge
 800a4fe:	461c      	movge	r4, r3
 800a500:	2500      	movge	r5, #0
 800a502:	2501      	movlt	r5, #1
 800a504:	f7ff fcf0 	bl	8009ee8 <_Balloc>
 800a508:	b920      	cbnz	r0, 800a514 <__mdiff+0x5c>
 800a50a:	4b2e      	ldr	r3, [pc, #184]	; (800a5c4 <__mdiff+0x10c>)
 800a50c:	4602      	mov	r2, r0
 800a50e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a512:	e7e5      	b.n	800a4e0 <__mdiff+0x28>
 800a514:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a518:	6926      	ldr	r6, [r4, #16]
 800a51a:	60c5      	str	r5, [r0, #12]
 800a51c:	f104 0914 	add.w	r9, r4, #20
 800a520:	f108 0514 	add.w	r5, r8, #20
 800a524:	f100 0e14 	add.w	lr, r0, #20
 800a528:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a52c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a530:	f108 0210 	add.w	r2, r8, #16
 800a534:	46f2      	mov	sl, lr
 800a536:	2100      	movs	r1, #0
 800a538:	f859 3b04 	ldr.w	r3, [r9], #4
 800a53c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a540:	fa1f f883 	uxth.w	r8, r3
 800a544:	fa11 f18b 	uxtah	r1, r1, fp
 800a548:	0c1b      	lsrs	r3, r3, #16
 800a54a:	eba1 0808 	sub.w	r8, r1, r8
 800a54e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a552:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a556:	fa1f f888 	uxth.w	r8, r8
 800a55a:	1419      	asrs	r1, r3, #16
 800a55c:	454e      	cmp	r6, r9
 800a55e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a562:	f84a 3b04 	str.w	r3, [sl], #4
 800a566:	d8e7      	bhi.n	800a538 <__mdiff+0x80>
 800a568:	1b33      	subs	r3, r6, r4
 800a56a:	3b15      	subs	r3, #21
 800a56c:	f023 0303 	bic.w	r3, r3, #3
 800a570:	3304      	adds	r3, #4
 800a572:	3415      	adds	r4, #21
 800a574:	42a6      	cmp	r6, r4
 800a576:	bf38      	it	cc
 800a578:	2304      	movcc	r3, #4
 800a57a:	441d      	add	r5, r3
 800a57c:	4473      	add	r3, lr
 800a57e:	469e      	mov	lr, r3
 800a580:	462e      	mov	r6, r5
 800a582:	4566      	cmp	r6, ip
 800a584:	d30e      	bcc.n	800a5a4 <__mdiff+0xec>
 800a586:	f10c 0203 	add.w	r2, ip, #3
 800a58a:	1b52      	subs	r2, r2, r5
 800a58c:	f022 0203 	bic.w	r2, r2, #3
 800a590:	3d03      	subs	r5, #3
 800a592:	45ac      	cmp	ip, r5
 800a594:	bf38      	it	cc
 800a596:	2200      	movcc	r2, #0
 800a598:	441a      	add	r2, r3
 800a59a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a59e:	b17b      	cbz	r3, 800a5c0 <__mdiff+0x108>
 800a5a0:	6107      	str	r7, [r0, #16]
 800a5a2:	e7a3      	b.n	800a4ec <__mdiff+0x34>
 800a5a4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a5a8:	fa11 f288 	uxtah	r2, r1, r8
 800a5ac:	1414      	asrs	r4, r2, #16
 800a5ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a5b2:	b292      	uxth	r2, r2
 800a5b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a5b8:	f84e 2b04 	str.w	r2, [lr], #4
 800a5bc:	1421      	asrs	r1, r4, #16
 800a5be:	e7e0      	b.n	800a582 <__mdiff+0xca>
 800a5c0:	3f01      	subs	r7, #1
 800a5c2:	e7ea      	b.n	800a59a <__mdiff+0xe2>
 800a5c4:	0800c6d4 	.word	0x0800c6d4
 800a5c8:	0800c760 	.word	0x0800c760

0800a5cc <__ulp>:
 800a5cc:	b082      	sub	sp, #8
 800a5ce:	ed8d 0b00 	vstr	d0, [sp]
 800a5d2:	9b01      	ldr	r3, [sp, #4]
 800a5d4:	4912      	ldr	r1, [pc, #72]	; (800a620 <__ulp+0x54>)
 800a5d6:	4019      	ands	r1, r3
 800a5d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a5dc:	2900      	cmp	r1, #0
 800a5de:	dd05      	ble.n	800a5ec <__ulp+0x20>
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	ec43 2b10 	vmov	d0, r2, r3
 800a5e8:	b002      	add	sp, #8
 800a5ea:	4770      	bx	lr
 800a5ec:	4249      	negs	r1, r1
 800a5ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a5f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a5f6:	f04f 0200 	mov.w	r2, #0
 800a5fa:	f04f 0300 	mov.w	r3, #0
 800a5fe:	da04      	bge.n	800a60a <__ulp+0x3e>
 800a600:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a604:	fa41 f300 	asr.w	r3, r1, r0
 800a608:	e7ec      	b.n	800a5e4 <__ulp+0x18>
 800a60a:	f1a0 0114 	sub.w	r1, r0, #20
 800a60e:	291e      	cmp	r1, #30
 800a610:	bfda      	itte	le
 800a612:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a616:	fa20 f101 	lsrle.w	r1, r0, r1
 800a61a:	2101      	movgt	r1, #1
 800a61c:	460a      	mov	r2, r1
 800a61e:	e7e1      	b.n	800a5e4 <__ulp+0x18>
 800a620:	7ff00000 	.word	0x7ff00000

0800a624 <__b2d>:
 800a624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a626:	6905      	ldr	r5, [r0, #16]
 800a628:	f100 0714 	add.w	r7, r0, #20
 800a62c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a630:	1f2e      	subs	r6, r5, #4
 800a632:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a636:	4620      	mov	r0, r4
 800a638:	f7ff fd48 	bl	800a0cc <__hi0bits>
 800a63c:	f1c0 0320 	rsb	r3, r0, #32
 800a640:	280a      	cmp	r0, #10
 800a642:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a6c0 <__b2d+0x9c>
 800a646:	600b      	str	r3, [r1, #0]
 800a648:	dc14      	bgt.n	800a674 <__b2d+0x50>
 800a64a:	f1c0 0e0b 	rsb	lr, r0, #11
 800a64e:	fa24 f10e 	lsr.w	r1, r4, lr
 800a652:	42b7      	cmp	r7, r6
 800a654:	ea41 030c 	orr.w	r3, r1, ip
 800a658:	bf34      	ite	cc
 800a65a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a65e:	2100      	movcs	r1, #0
 800a660:	3015      	adds	r0, #21
 800a662:	fa04 f000 	lsl.w	r0, r4, r0
 800a666:	fa21 f10e 	lsr.w	r1, r1, lr
 800a66a:	ea40 0201 	orr.w	r2, r0, r1
 800a66e:	ec43 2b10 	vmov	d0, r2, r3
 800a672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a674:	42b7      	cmp	r7, r6
 800a676:	bf3a      	itte	cc
 800a678:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a67c:	f1a5 0608 	subcc.w	r6, r5, #8
 800a680:	2100      	movcs	r1, #0
 800a682:	380b      	subs	r0, #11
 800a684:	d017      	beq.n	800a6b6 <__b2d+0x92>
 800a686:	f1c0 0c20 	rsb	ip, r0, #32
 800a68a:	fa04 f500 	lsl.w	r5, r4, r0
 800a68e:	42be      	cmp	r6, r7
 800a690:	fa21 f40c 	lsr.w	r4, r1, ip
 800a694:	ea45 0504 	orr.w	r5, r5, r4
 800a698:	bf8c      	ite	hi
 800a69a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a69e:	2400      	movls	r4, #0
 800a6a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a6a4:	fa01 f000 	lsl.w	r0, r1, r0
 800a6a8:	fa24 f40c 	lsr.w	r4, r4, ip
 800a6ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a6b0:	ea40 0204 	orr.w	r2, r0, r4
 800a6b4:	e7db      	b.n	800a66e <__b2d+0x4a>
 800a6b6:	ea44 030c 	orr.w	r3, r4, ip
 800a6ba:	460a      	mov	r2, r1
 800a6bc:	e7d7      	b.n	800a66e <__b2d+0x4a>
 800a6be:	bf00      	nop
 800a6c0:	3ff00000 	.word	0x3ff00000

0800a6c4 <__d2b>:
 800a6c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6c8:	4689      	mov	r9, r1
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	ec57 6b10 	vmov	r6, r7, d0
 800a6d0:	4690      	mov	r8, r2
 800a6d2:	f7ff fc09 	bl	8009ee8 <_Balloc>
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	b930      	cbnz	r0, 800a6e8 <__d2b+0x24>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	4b25      	ldr	r3, [pc, #148]	; (800a774 <__d2b+0xb0>)
 800a6de:	4826      	ldr	r0, [pc, #152]	; (800a778 <__d2b+0xb4>)
 800a6e0:	f240 310a 	movw	r1, #778	; 0x30a
 800a6e4:	f7fe f9a6 	bl	8008a34 <__assert_func>
 800a6e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a6ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a6f0:	bb35      	cbnz	r5, 800a740 <__d2b+0x7c>
 800a6f2:	2e00      	cmp	r6, #0
 800a6f4:	9301      	str	r3, [sp, #4]
 800a6f6:	d028      	beq.n	800a74a <__d2b+0x86>
 800a6f8:	4668      	mov	r0, sp
 800a6fa:	9600      	str	r6, [sp, #0]
 800a6fc:	f7ff fd06 	bl	800a10c <__lo0bits>
 800a700:	9900      	ldr	r1, [sp, #0]
 800a702:	b300      	cbz	r0, 800a746 <__d2b+0x82>
 800a704:	9a01      	ldr	r2, [sp, #4]
 800a706:	f1c0 0320 	rsb	r3, r0, #32
 800a70a:	fa02 f303 	lsl.w	r3, r2, r3
 800a70e:	430b      	orrs	r3, r1
 800a710:	40c2      	lsrs	r2, r0
 800a712:	6163      	str	r3, [r4, #20]
 800a714:	9201      	str	r2, [sp, #4]
 800a716:	9b01      	ldr	r3, [sp, #4]
 800a718:	61a3      	str	r3, [r4, #24]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	bf14      	ite	ne
 800a71e:	2202      	movne	r2, #2
 800a720:	2201      	moveq	r2, #1
 800a722:	6122      	str	r2, [r4, #16]
 800a724:	b1d5      	cbz	r5, 800a75c <__d2b+0x98>
 800a726:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a72a:	4405      	add	r5, r0
 800a72c:	f8c9 5000 	str.w	r5, [r9]
 800a730:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a734:	f8c8 0000 	str.w	r0, [r8]
 800a738:	4620      	mov	r0, r4
 800a73a:	b003      	add	sp, #12
 800a73c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a740:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a744:	e7d5      	b.n	800a6f2 <__d2b+0x2e>
 800a746:	6161      	str	r1, [r4, #20]
 800a748:	e7e5      	b.n	800a716 <__d2b+0x52>
 800a74a:	a801      	add	r0, sp, #4
 800a74c:	f7ff fcde 	bl	800a10c <__lo0bits>
 800a750:	9b01      	ldr	r3, [sp, #4]
 800a752:	6163      	str	r3, [r4, #20]
 800a754:	2201      	movs	r2, #1
 800a756:	6122      	str	r2, [r4, #16]
 800a758:	3020      	adds	r0, #32
 800a75a:	e7e3      	b.n	800a724 <__d2b+0x60>
 800a75c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a760:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a764:	f8c9 0000 	str.w	r0, [r9]
 800a768:	6918      	ldr	r0, [r3, #16]
 800a76a:	f7ff fcaf 	bl	800a0cc <__hi0bits>
 800a76e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a772:	e7df      	b.n	800a734 <__d2b+0x70>
 800a774:	0800c6d4 	.word	0x0800c6d4
 800a778:	0800c760 	.word	0x0800c760

0800a77c <__ratio>:
 800a77c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a780:	4688      	mov	r8, r1
 800a782:	4669      	mov	r1, sp
 800a784:	4681      	mov	r9, r0
 800a786:	f7ff ff4d 	bl	800a624 <__b2d>
 800a78a:	a901      	add	r1, sp, #4
 800a78c:	4640      	mov	r0, r8
 800a78e:	ec55 4b10 	vmov	r4, r5, d0
 800a792:	f7ff ff47 	bl	800a624 <__b2d>
 800a796:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a79a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a79e:	eba3 0c02 	sub.w	ip, r3, r2
 800a7a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a7a6:	1a9b      	subs	r3, r3, r2
 800a7a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a7ac:	ec51 0b10 	vmov	r0, r1, d0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	bfd6      	itet	le
 800a7b4:	460a      	movle	r2, r1
 800a7b6:	462a      	movgt	r2, r5
 800a7b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a7bc:	468b      	mov	fp, r1
 800a7be:	462f      	mov	r7, r5
 800a7c0:	bfd4      	ite	le
 800a7c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a7c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	ee10 2a10 	vmov	r2, s0
 800a7d0:	465b      	mov	r3, fp
 800a7d2:	4639      	mov	r1, r7
 800a7d4:	f7f6 f83a 	bl	800084c <__aeabi_ddiv>
 800a7d8:	ec41 0b10 	vmov	d0, r0, r1
 800a7dc:	b003      	add	sp, #12
 800a7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a7e2 <__copybits>:
 800a7e2:	3901      	subs	r1, #1
 800a7e4:	b570      	push	{r4, r5, r6, lr}
 800a7e6:	1149      	asrs	r1, r1, #5
 800a7e8:	6914      	ldr	r4, [r2, #16]
 800a7ea:	3101      	adds	r1, #1
 800a7ec:	f102 0314 	add.w	r3, r2, #20
 800a7f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a7f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a7f8:	1f05      	subs	r5, r0, #4
 800a7fa:	42a3      	cmp	r3, r4
 800a7fc:	d30c      	bcc.n	800a818 <__copybits+0x36>
 800a7fe:	1aa3      	subs	r3, r4, r2
 800a800:	3b11      	subs	r3, #17
 800a802:	f023 0303 	bic.w	r3, r3, #3
 800a806:	3211      	adds	r2, #17
 800a808:	42a2      	cmp	r2, r4
 800a80a:	bf88      	it	hi
 800a80c:	2300      	movhi	r3, #0
 800a80e:	4418      	add	r0, r3
 800a810:	2300      	movs	r3, #0
 800a812:	4288      	cmp	r0, r1
 800a814:	d305      	bcc.n	800a822 <__copybits+0x40>
 800a816:	bd70      	pop	{r4, r5, r6, pc}
 800a818:	f853 6b04 	ldr.w	r6, [r3], #4
 800a81c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a820:	e7eb      	b.n	800a7fa <__copybits+0x18>
 800a822:	f840 3b04 	str.w	r3, [r0], #4
 800a826:	e7f4      	b.n	800a812 <__copybits+0x30>

0800a828 <__any_on>:
 800a828:	f100 0214 	add.w	r2, r0, #20
 800a82c:	6900      	ldr	r0, [r0, #16]
 800a82e:	114b      	asrs	r3, r1, #5
 800a830:	4298      	cmp	r0, r3
 800a832:	b510      	push	{r4, lr}
 800a834:	db11      	blt.n	800a85a <__any_on+0x32>
 800a836:	dd0a      	ble.n	800a84e <__any_on+0x26>
 800a838:	f011 011f 	ands.w	r1, r1, #31
 800a83c:	d007      	beq.n	800a84e <__any_on+0x26>
 800a83e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a842:	fa24 f001 	lsr.w	r0, r4, r1
 800a846:	fa00 f101 	lsl.w	r1, r0, r1
 800a84a:	428c      	cmp	r4, r1
 800a84c:	d10b      	bne.n	800a866 <__any_on+0x3e>
 800a84e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a852:	4293      	cmp	r3, r2
 800a854:	d803      	bhi.n	800a85e <__any_on+0x36>
 800a856:	2000      	movs	r0, #0
 800a858:	bd10      	pop	{r4, pc}
 800a85a:	4603      	mov	r3, r0
 800a85c:	e7f7      	b.n	800a84e <__any_on+0x26>
 800a85e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a862:	2900      	cmp	r1, #0
 800a864:	d0f5      	beq.n	800a852 <__any_on+0x2a>
 800a866:	2001      	movs	r0, #1
 800a868:	e7f6      	b.n	800a858 <__any_on+0x30>

0800a86a <_calloc_r>:
 800a86a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a86c:	fba1 2402 	umull	r2, r4, r1, r2
 800a870:	b94c      	cbnz	r4, 800a886 <_calloc_r+0x1c>
 800a872:	4611      	mov	r1, r2
 800a874:	9201      	str	r2, [sp, #4]
 800a876:	f000 f87b 	bl	800a970 <_malloc_r>
 800a87a:	9a01      	ldr	r2, [sp, #4]
 800a87c:	4605      	mov	r5, r0
 800a87e:	b930      	cbnz	r0, 800a88e <_calloc_r+0x24>
 800a880:	4628      	mov	r0, r5
 800a882:	b003      	add	sp, #12
 800a884:	bd30      	pop	{r4, r5, pc}
 800a886:	220c      	movs	r2, #12
 800a888:	6002      	str	r2, [r0, #0]
 800a88a:	2500      	movs	r5, #0
 800a88c:	e7f8      	b.n	800a880 <_calloc_r+0x16>
 800a88e:	4621      	mov	r1, r4
 800a890:	f7fc fb10 	bl	8006eb4 <memset>
 800a894:	e7f4      	b.n	800a880 <_calloc_r+0x16>
	...

0800a898 <_free_r>:
 800a898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a89a:	2900      	cmp	r1, #0
 800a89c:	d044      	beq.n	800a928 <_free_r+0x90>
 800a89e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8a2:	9001      	str	r0, [sp, #4]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f1a1 0404 	sub.w	r4, r1, #4
 800a8aa:	bfb8      	it	lt
 800a8ac:	18e4      	addlt	r4, r4, r3
 800a8ae:	f000 fed7 	bl	800b660 <__malloc_lock>
 800a8b2:	4a1e      	ldr	r2, [pc, #120]	; (800a92c <_free_r+0x94>)
 800a8b4:	9801      	ldr	r0, [sp, #4]
 800a8b6:	6813      	ldr	r3, [r2, #0]
 800a8b8:	b933      	cbnz	r3, 800a8c8 <_free_r+0x30>
 800a8ba:	6063      	str	r3, [r4, #4]
 800a8bc:	6014      	str	r4, [r2, #0]
 800a8be:	b003      	add	sp, #12
 800a8c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8c4:	f000 bed2 	b.w	800b66c <__malloc_unlock>
 800a8c8:	42a3      	cmp	r3, r4
 800a8ca:	d908      	bls.n	800a8de <_free_r+0x46>
 800a8cc:	6825      	ldr	r5, [r4, #0]
 800a8ce:	1961      	adds	r1, r4, r5
 800a8d0:	428b      	cmp	r3, r1
 800a8d2:	bf01      	itttt	eq
 800a8d4:	6819      	ldreq	r1, [r3, #0]
 800a8d6:	685b      	ldreq	r3, [r3, #4]
 800a8d8:	1949      	addeq	r1, r1, r5
 800a8da:	6021      	streq	r1, [r4, #0]
 800a8dc:	e7ed      	b.n	800a8ba <_free_r+0x22>
 800a8de:	461a      	mov	r2, r3
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	b10b      	cbz	r3, 800a8e8 <_free_r+0x50>
 800a8e4:	42a3      	cmp	r3, r4
 800a8e6:	d9fa      	bls.n	800a8de <_free_r+0x46>
 800a8e8:	6811      	ldr	r1, [r2, #0]
 800a8ea:	1855      	adds	r5, r2, r1
 800a8ec:	42a5      	cmp	r5, r4
 800a8ee:	d10b      	bne.n	800a908 <_free_r+0x70>
 800a8f0:	6824      	ldr	r4, [r4, #0]
 800a8f2:	4421      	add	r1, r4
 800a8f4:	1854      	adds	r4, r2, r1
 800a8f6:	42a3      	cmp	r3, r4
 800a8f8:	6011      	str	r1, [r2, #0]
 800a8fa:	d1e0      	bne.n	800a8be <_free_r+0x26>
 800a8fc:	681c      	ldr	r4, [r3, #0]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	6053      	str	r3, [r2, #4]
 800a902:	4421      	add	r1, r4
 800a904:	6011      	str	r1, [r2, #0]
 800a906:	e7da      	b.n	800a8be <_free_r+0x26>
 800a908:	d902      	bls.n	800a910 <_free_r+0x78>
 800a90a:	230c      	movs	r3, #12
 800a90c:	6003      	str	r3, [r0, #0]
 800a90e:	e7d6      	b.n	800a8be <_free_r+0x26>
 800a910:	6825      	ldr	r5, [r4, #0]
 800a912:	1961      	adds	r1, r4, r5
 800a914:	428b      	cmp	r3, r1
 800a916:	bf04      	itt	eq
 800a918:	6819      	ldreq	r1, [r3, #0]
 800a91a:	685b      	ldreq	r3, [r3, #4]
 800a91c:	6063      	str	r3, [r4, #4]
 800a91e:	bf04      	itt	eq
 800a920:	1949      	addeq	r1, r1, r5
 800a922:	6021      	streq	r1, [r4, #0]
 800a924:	6054      	str	r4, [r2, #4]
 800a926:	e7ca      	b.n	800a8be <_free_r+0x26>
 800a928:	b003      	add	sp, #12
 800a92a:	bd30      	pop	{r4, r5, pc}
 800a92c:	20000e8c 	.word	0x20000e8c

0800a930 <sbrk_aligned>:
 800a930:	b570      	push	{r4, r5, r6, lr}
 800a932:	4e0e      	ldr	r6, [pc, #56]	; (800a96c <sbrk_aligned+0x3c>)
 800a934:	460c      	mov	r4, r1
 800a936:	6831      	ldr	r1, [r6, #0]
 800a938:	4605      	mov	r5, r0
 800a93a:	b911      	cbnz	r1, 800a942 <sbrk_aligned+0x12>
 800a93c:	f000 fb5c 	bl	800aff8 <_sbrk_r>
 800a940:	6030      	str	r0, [r6, #0]
 800a942:	4621      	mov	r1, r4
 800a944:	4628      	mov	r0, r5
 800a946:	f000 fb57 	bl	800aff8 <_sbrk_r>
 800a94a:	1c43      	adds	r3, r0, #1
 800a94c:	d00a      	beq.n	800a964 <sbrk_aligned+0x34>
 800a94e:	1cc4      	adds	r4, r0, #3
 800a950:	f024 0403 	bic.w	r4, r4, #3
 800a954:	42a0      	cmp	r0, r4
 800a956:	d007      	beq.n	800a968 <sbrk_aligned+0x38>
 800a958:	1a21      	subs	r1, r4, r0
 800a95a:	4628      	mov	r0, r5
 800a95c:	f000 fb4c 	bl	800aff8 <_sbrk_r>
 800a960:	3001      	adds	r0, #1
 800a962:	d101      	bne.n	800a968 <sbrk_aligned+0x38>
 800a964:	f04f 34ff 	mov.w	r4, #4294967295
 800a968:	4620      	mov	r0, r4
 800a96a:	bd70      	pop	{r4, r5, r6, pc}
 800a96c:	20000e90 	.word	0x20000e90

0800a970 <_malloc_r>:
 800a970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a974:	1ccd      	adds	r5, r1, #3
 800a976:	f025 0503 	bic.w	r5, r5, #3
 800a97a:	3508      	adds	r5, #8
 800a97c:	2d0c      	cmp	r5, #12
 800a97e:	bf38      	it	cc
 800a980:	250c      	movcc	r5, #12
 800a982:	2d00      	cmp	r5, #0
 800a984:	4607      	mov	r7, r0
 800a986:	db01      	blt.n	800a98c <_malloc_r+0x1c>
 800a988:	42a9      	cmp	r1, r5
 800a98a:	d905      	bls.n	800a998 <_malloc_r+0x28>
 800a98c:	230c      	movs	r3, #12
 800a98e:	603b      	str	r3, [r7, #0]
 800a990:	2600      	movs	r6, #0
 800a992:	4630      	mov	r0, r6
 800a994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a998:	4e2e      	ldr	r6, [pc, #184]	; (800aa54 <_malloc_r+0xe4>)
 800a99a:	f000 fe61 	bl	800b660 <__malloc_lock>
 800a99e:	6833      	ldr	r3, [r6, #0]
 800a9a0:	461c      	mov	r4, r3
 800a9a2:	bb34      	cbnz	r4, 800a9f2 <_malloc_r+0x82>
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	4638      	mov	r0, r7
 800a9a8:	f7ff ffc2 	bl	800a930 <sbrk_aligned>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	d14d      	bne.n	800aa4e <_malloc_r+0xde>
 800a9b2:	6834      	ldr	r4, [r6, #0]
 800a9b4:	4626      	mov	r6, r4
 800a9b6:	2e00      	cmp	r6, #0
 800a9b8:	d140      	bne.n	800aa3c <_malloc_r+0xcc>
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	4631      	mov	r1, r6
 800a9be:	4638      	mov	r0, r7
 800a9c0:	eb04 0803 	add.w	r8, r4, r3
 800a9c4:	f000 fb18 	bl	800aff8 <_sbrk_r>
 800a9c8:	4580      	cmp	r8, r0
 800a9ca:	d13a      	bne.n	800aa42 <_malloc_r+0xd2>
 800a9cc:	6821      	ldr	r1, [r4, #0]
 800a9ce:	3503      	adds	r5, #3
 800a9d0:	1a6d      	subs	r5, r5, r1
 800a9d2:	f025 0503 	bic.w	r5, r5, #3
 800a9d6:	3508      	adds	r5, #8
 800a9d8:	2d0c      	cmp	r5, #12
 800a9da:	bf38      	it	cc
 800a9dc:	250c      	movcc	r5, #12
 800a9de:	4629      	mov	r1, r5
 800a9e0:	4638      	mov	r0, r7
 800a9e2:	f7ff ffa5 	bl	800a930 <sbrk_aligned>
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	d02b      	beq.n	800aa42 <_malloc_r+0xd2>
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	442b      	add	r3, r5
 800a9ee:	6023      	str	r3, [r4, #0]
 800a9f0:	e00e      	b.n	800aa10 <_malloc_r+0xa0>
 800a9f2:	6822      	ldr	r2, [r4, #0]
 800a9f4:	1b52      	subs	r2, r2, r5
 800a9f6:	d41e      	bmi.n	800aa36 <_malloc_r+0xc6>
 800a9f8:	2a0b      	cmp	r2, #11
 800a9fa:	d916      	bls.n	800aa2a <_malloc_r+0xba>
 800a9fc:	1961      	adds	r1, r4, r5
 800a9fe:	42a3      	cmp	r3, r4
 800aa00:	6025      	str	r5, [r4, #0]
 800aa02:	bf18      	it	ne
 800aa04:	6059      	strne	r1, [r3, #4]
 800aa06:	6863      	ldr	r3, [r4, #4]
 800aa08:	bf08      	it	eq
 800aa0a:	6031      	streq	r1, [r6, #0]
 800aa0c:	5162      	str	r2, [r4, r5]
 800aa0e:	604b      	str	r3, [r1, #4]
 800aa10:	4638      	mov	r0, r7
 800aa12:	f104 060b 	add.w	r6, r4, #11
 800aa16:	f000 fe29 	bl	800b66c <__malloc_unlock>
 800aa1a:	f026 0607 	bic.w	r6, r6, #7
 800aa1e:	1d23      	adds	r3, r4, #4
 800aa20:	1af2      	subs	r2, r6, r3
 800aa22:	d0b6      	beq.n	800a992 <_malloc_r+0x22>
 800aa24:	1b9b      	subs	r3, r3, r6
 800aa26:	50a3      	str	r3, [r4, r2]
 800aa28:	e7b3      	b.n	800a992 <_malloc_r+0x22>
 800aa2a:	6862      	ldr	r2, [r4, #4]
 800aa2c:	42a3      	cmp	r3, r4
 800aa2e:	bf0c      	ite	eq
 800aa30:	6032      	streq	r2, [r6, #0]
 800aa32:	605a      	strne	r2, [r3, #4]
 800aa34:	e7ec      	b.n	800aa10 <_malloc_r+0xa0>
 800aa36:	4623      	mov	r3, r4
 800aa38:	6864      	ldr	r4, [r4, #4]
 800aa3a:	e7b2      	b.n	800a9a2 <_malloc_r+0x32>
 800aa3c:	4634      	mov	r4, r6
 800aa3e:	6876      	ldr	r6, [r6, #4]
 800aa40:	e7b9      	b.n	800a9b6 <_malloc_r+0x46>
 800aa42:	230c      	movs	r3, #12
 800aa44:	603b      	str	r3, [r7, #0]
 800aa46:	4638      	mov	r0, r7
 800aa48:	f000 fe10 	bl	800b66c <__malloc_unlock>
 800aa4c:	e7a1      	b.n	800a992 <_malloc_r+0x22>
 800aa4e:	6025      	str	r5, [r4, #0]
 800aa50:	e7de      	b.n	800aa10 <_malloc_r+0xa0>
 800aa52:	bf00      	nop
 800aa54:	20000e8c 	.word	0x20000e8c

0800aa58 <__ssputs_r>:
 800aa58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa5c:	688e      	ldr	r6, [r1, #8]
 800aa5e:	429e      	cmp	r6, r3
 800aa60:	4682      	mov	sl, r0
 800aa62:	460c      	mov	r4, r1
 800aa64:	4690      	mov	r8, r2
 800aa66:	461f      	mov	r7, r3
 800aa68:	d838      	bhi.n	800aadc <__ssputs_r+0x84>
 800aa6a:	898a      	ldrh	r2, [r1, #12]
 800aa6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa70:	d032      	beq.n	800aad8 <__ssputs_r+0x80>
 800aa72:	6825      	ldr	r5, [r4, #0]
 800aa74:	6909      	ldr	r1, [r1, #16]
 800aa76:	eba5 0901 	sub.w	r9, r5, r1
 800aa7a:	6965      	ldr	r5, [r4, #20]
 800aa7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa84:	3301      	adds	r3, #1
 800aa86:	444b      	add	r3, r9
 800aa88:	106d      	asrs	r5, r5, #1
 800aa8a:	429d      	cmp	r5, r3
 800aa8c:	bf38      	it	cc
 800aa8e:	461d      	movcc	r5, r3
 800aa90:	0553      	lsls	r3, r2, #21
 800aa92:	d531      	bpl.n	800aaf8 <__ssputs_r+0xa0>
 800aa94:	4629      	mov	r1, r5
 800aa96:	f7ff ff6b 	bl	800a970 <_malloc_r>
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	b950      	cbnz	r0, 800aab4 <__ssputs_r+0x5c>
 800aa9e:	230c      	movs	r3, #12
 800aaa0:	f8ca 3000 	str.w	r3, [sl]
 800aaa4:	89a3      	ldrh	r3, [r4, #12]
 800aaa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaaa:	81a3      	strh	r3, [r4, #12]
 800aaac:	f04f 30ff 	mov.w	r0, #4294967295
 800aab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab4:	6921      	ldr	r1, [r4, #16]
 800aab6:	464a      	mov	r2, r9
 800aab8:	f7fc f9ee 	bl	8006e98 <memcpy>
 800aabc:	89a3      	ldrh	r3, [r4, #12]
 800aabe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aac6:	81a3      	strh	r3, [r4, #12]
 800aac8:	6126      	str	r6, [r4, #16]
 800aaca:	6165      	str	r5, [r4, #20]
 800aacc:	444e      	add	r6, r9
 800aace:	eba5 0509 	sub.w	r5, r5, r9
 800aad2:	6026      	str	r6, [r4, #0]
 800aad4:	60a5      	str	r5, [r4, #8]
 800aad6:	463e      	mov	r6, r7
 800aad8:	42be      	cmp	r6, r7
 800aada:	d900      	bls.n	800aade <__ssputs_r+0x86>
 800aadc:	463e      	mov	r6, r7
 800aade:	6820      	ldr	r0, [r4, #0]
 800aae0:	4632      	mov	r2, r6
 800aae2:	4641      	mov	r1, r8
 800aae4:	f000 fda2 	bl	800b62c <memmove>
 800aae8:	68a3      	ldr	r3, [r4, #8]
 800aaea:	1b9b      	subs	r3, r3, r6
 800aaec:	60a3      	str	r3, [r4, #8]
 800aaee:	6823      	ldr	r3, [r4, #0]
 800aaf0:	4433      	add	r3, r6
 800aaf2:	6023      	str	r3, [r4, #0]
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	e7db      	b.n	800aab0 <__ssputs_r+0x58>
 800aaf8:	462a      	mov	r2, r5
 800aafa:	f000 fdbd 	bl	800b678 <_realloc_r>
 800aafe:	4606      	mov	r6, r0
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d1e1      	bne.n	800aac8 <__ssputs_r+0x70>
 800ab04:	6921      	ldr	r1, [r4, #16]
 800ab06:	4650      	mov	r0, sl
 800ab08:	f7ff fec6 	bl	800a898 <_free_r>
 800ab0c:	e7c7      	b.n	800aa9e <__ssputs_r+0x46>
	...

0800ab10 <_svfiprintf_r>:
 800ab10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab14:	4698      	mov	r8, r3
 800ab16:	898b      	ldrh	r3, [r1, #12]
 800ab18:	061b      	lsls	r3, r3, #24
 800ab1a:	b09d      	sub	sp, #116	; 0x74
 800ab1c:	4607      	mov	r7, r0
 800ab1e:	460d      	mov	r5, r1
 800ab20:	4614      	mov	r4, r2
 800ab22:	d50e      	bpl.n	800ab42 <_svfiprintf_r+0x32>
 800ab24:	690b      	ldr	r3, [r1, #16]
 800ab26:	b963      	cbnz	r3, 800ab42 <_svfiprintf_r+0x32>
 800ab28:	2140      	movs	r1, #64	; 0x40
 800ab2a:	f7ff ff21 	bl	800a970 <_malloc_r>
 800ab2e:	6028      	str	r0, [r5, #0]
 800ab30:	6128      	str	r0, [r5, #16]
 800ab32:	b920      	cbnz	r0, 800ab3e <_svfiprintf_r+0x2e>
 800ab34:	230c      	movs	r3, #12
 800ab36:	603b      	str	r3, [r7, #0]
 800ab38:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3c:	e0d1      	b.n	800ace2 <_svfiprintf_r+0x1d2>
 800ab3e:	2340      	movs	r3, #64	; 0x40
 800ab40:	616b      	str	r3, [r5, #20]
 800ab42:	2300      	movs	r3, #0
 800ab44:	9309      	str	r3, [sp, #36]	; 0x24
 800ab46:	2320      	movs	r3, #32
 800ab48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab50:	2330      	movs	r3, #48	; 0x30
 800ab52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800acfc <_svfiprintf_r+0x1ec>
 800ab56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab5a:	f04f 0901 	mov.w	r9, #1
 800ab5e:	4623      	mov	r3, r4
 800ab60:	469a      	mov	sl, r3
 800ab62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab66:	b10a      	cbz	r2, 800ab6c <_svfiprintf_r+0x5c>
 800ab68:	2a25      	cmp	r2, #37	; 0x25
 800ab6a:	d1f9      	bne.n	800ab60 <_svfiprintf_r+0x50>
 800ab6c:	ebba 0b04 	subs.w	fp, sl, r4
 800ab70:	d00b      	beq.n	800ab8a <_svfiprintf_r+0x7a>
 800ab72:	465b      	mov	r3, fp
 800ab74:	4622      	mov	r2, r4
 800ab76:	4629      	mov	r1, r5
 800ab78:	4638      	mov	r0, r7
 800ab7a:	f7ff ff6d 	bl	800aa58 <__ssputs_r>
 800ab7e:	3001      	adds	r0, #1
 800ab80:	f000 80aa 	beq.w	800acd8 <_svfiprintf_r+0x1c8>
 800ab84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab86:	445a      	add	r2, fp
 800ab88:	9209      	str	r2, [sp, #36]	; 0x24
 800ab8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f000 80a2 	beq.w	800acd8 <_svfiprintf_r+0x1c8>
 800ab94:	2300      	movs	r3, #0
 800ab96:	f04f 32ff 	mov.w	r2, #4294967295
 800ab9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab9e:	f10a 0a01 	add.w	sl, sl, #1
 800aba2:	9304      	str	r3, [sp, #16]
 800aba4:	9307      	str	r3, [sp, #28]
 800aba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abaa:	931a      	str	r3, [sp, #104]	; 0x68
 800abac:	4654      	mov	r4, sl
 800abae:	2205      	movs	r2, #5
 800abb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abb4:	4851      	ldr	r0, [pc, #324]	; (800acfc <_svfiprintf_r+0x1ec>)
 800abb6:	f7f5 fb13 	bl	80001e0 <memchr>
 800abba:	9a04      	ldr	r2, [sp, #16]
 800abbc:	b9d8      	cbnz	r0, 800abf6 <_svfiprintf_r+0xe6>
 800abbe:	06d0      	lsls	r0, r2, #27
 800abc0:	bf44      	itt	mi
 800abc2:	2320      	movmi	r3, #32
 800abc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abc8:	0711      	lsls	r1, r2, #28
 800abca:	bf44      	itt	mi
 800abcc:	232b      	movmi	r3, #43	; 0x2b
 800abce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abd2:	f89a 3000 	ldrb.w	r3, [sl]
 800abd6:	2b2a      	cmp	r3, #42	; 0x2a
 800abd8:	d015      	beq.n	800ac06 <_svfiprintf_r+0xf6>
 800abda:	9a07      	ldr	r2, [sp, #28]
 800abdc:	4654      	mov	r4, sl
 800abde:	2000      	movs	r0, #0
 800abe0:	f04f 0c0a 	mov.w	ip, #10
 800abe4:	4621      	mov	r1, r4
 800abe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abea:	3b30      	subs	r3, #48	; 0x30
 800abec:	2b09      	cmp	r3, #9
 800abee:	d94e      	bls.n	800ac8e <_svfiprintf_r+0x17e>
 800abf0:	b1b0      	cbz	r0, 800ac20 <_svfiprintf_r+0x110>
 800abf2:	9207      	str	r2, [sp, #28]
 800abf4:	e014      	b.n	800ac20 <_svfiprintf_r+0x110>
 800abf6:	eba0 0308 	sub.w	r3, r0, r8
 800abfa:	fa09 f303 	lsl.w	r3, r9, r3
 800abfe:	4313      	orrs	r3, r2
 800ac00:	9304      	str	r3, [sp, #16]
 800ac02:	46a2      	mov	sl, r4
 800ac04:	e7d2      	b.n	800abac <_svfiprintf_r+0x9c>
 800ac06:	9b03      	ldr	r3, [sp, #12]
 800ac08:	1d19      	adds	r1, r3, #4
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	9103      	str	r1, [sp, #12]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	bfbb      	ittet	lt
 800ac12:	425b      	neglt	r3, r3
 800ac14:	f042 0202 	orrlt.w	r2, r2, #2
 800ac18:	9307      	strge	r3, [sp, #28]
 800ac1a:	9307      	strlt	r3, [sp, #28]
 800ac1c:	bfb8      	it	lt
 800ac1e:	9204      	strlt	r2, [sp, #16]
 800ac20:	7823      	ldrb	r3, [r4, #0]
 800ac22:	2b2e      	cmp	r3, #46	; 0x2e
 800ac24:	d10c      	bne.n	800ac40 <_svfiprintf_r+0x130>
 800ac26:	7863      	ldrb	r3, [r4, #1]
 800ac28:	2b2a      	cmp	r3, #42	; 0x2a
 800ac2a:	d135      	bne.n	800ac98 <_svfiprintf_r+0x188>
 800ac2c:	9b03      	ldr	r3, [sp, #12]
 800ac2e:	1d1a      	adds	r2, r3, #4
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	9203      	str	r2, [sp, #12]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	bfb8      	it	lt
 800ac38:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac3c:	3402      	adds	r4, #2
 800ac3e:	9305      	str	r3, [sp, #20]
 800ac40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad0c <_svfiprintf_r+0x1fc>
 800ac44:	7821      	ldrb	r1, [r4, #0]
 800ac46:	2203      	movs	r2, #3
 800ac48:	4650      	mov	r0, sl
 800ac4a:	f7f5 fac9 	bl	80001e0 <memchr>
 800ac4e:	b140      	cbz	r0, 800ac62 <_svfiprintf_r+0x152>
 800ac50:	2340      	movs	r3, #64	; 0x40
 800ac52:	eba0 000a 	sub.w	r0, r0, sl
 800ac56:	fa03 f000 	lsl.w	r0, r3, r0
 800ac5a:	9b04      	ldr	r3, [sp, #16]
 800ac5c:	4303      	orrs	r3, r0
 800ac5e:	3401      	adds	r4, #1
 800ac60:	9304      	str	r3, [sp, #16]
 800ac62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac66:	4826      	ldr	r0, [pc, #152]	; (800ad00 <_svfiprintf_r+0x1f0>)
 800ac68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac6c:	2206      	movs	r2, #6
 800ac6e:	f7f5 fab7 	bl	80001e0 <memchr>
 800ac72:	2800      	cmp	r0, #0
 800ac74:	d038      	beq.n	800ace8 <_svfiprintf_r+0x1d8>
 800ac76:	4b23      	ldr	r3, [pc, #140]	; (800ad04 <_svfiprintf_r+0x1f4>)
 800ac78:	bb1b      	cbnz	r3, 800acc2 <_svfiprintf_r+0x1b2>
 800ac7a:	9b03      	ldr	r3, [sp, #12]
 800ac7c:	3307      	adds	r3, #7
 800ac7e:	f023 0307 	bic.w	r3, r3, #7
 800ac82:	3308      	adds	r3, #8
 800ac84:	9303      	str	r3, [sp, #12]
 800ac86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac88:	4433      	add	r3, r6
 800ac8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac8c:	e767      	b.n	800ab5e <_svfiprintf_r+0x4e>
 800ac8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac92:	460c      	mov	r4, r1
 800ac94:	2001      	movs	r0, #1
 800ac96:	e7a5      	b.n	800abe4 <_svfiprintf_r+0xd4>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	3401      	adds	r4, #1
 800ac9c:	9305      	str	r3, [sp, #20]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	f04f 0c0a 	mov.w	ip, #10
 800aca4:	4620      	mov	r0, r4
 800aca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acaa:	3a30      	subs	r2, #48	; 0x30
 800acac:	2a09      	cmp	r2, #9
 800acae:	d903      	bls.n	800acb8 <_svfiprintf_r+0x1a8>
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d0c5      	beq.n	800ac40 <_svfiprintf_r+0x130>
 800acb4:	9105      	str	r1, [sp, #20]
 800acb6:	e7c3      	b.n	800ac40 <_svfiprintf_r+0x130>
 800acb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800acbc:	4604      	mov	r4, r0
 800acbe:	2301      	movs	r3, #1
 800acc0:	e7f0      	b.n	800aca4 <_svfiprintf_r+0x194>
 800acc2:	ab03      	add	r3, sp, #12
 800acc4:	9300      	str	r3, [sp, #0]
 800acc6:	462a      	mov	r2, r5
 800acc8:	4b0f      	ldr	r3, [pc, #60]	; (800ad08 <_svfiprintf_r+0x1f8>)
 800acca:	a904      	add	r1, sp, #16
 800accc:	4638      	mov	r0, r7
 800acce:	f7fc f999 	bl	8007004 <_printf_float>
 800acd2:	1c42      	adds	r2, r0, #1
 800acd4:	4606      	mov	r6, r0
 800acd6:	d1d6      	bne.n	800ac86 <_svfiprintf_r+0x176>
 800acd8:	89ab      	ldrh	r3, [r5, #12]
 800acda:	065b      	lsls	r3, r3, #25
 800acdc:	f53f af2c 	bmi.w	800ab38 <_svfiprintf_r+0x28>
 800ace0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ace2:	b01d      	add	sp, #116	; 0x74
 800ace4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace8:	ab03      	add	r3, sp, #12
 800acea:	9300      	str	r3, [sp, #0]
 800acec:	462a      	mov	r2, r5
 800acee:	4b06      	ldr	r3, [pc, #24]	; (800ad08 <_svfiprintf_r+0x1f8>)
 800acf0:	a904      	add	r1, sp, #16
 800acf2:	4638      	mov	r0, r7
 800acf4:	f7fc fc2a 	bl	800754c <_printf_i>
 800acf8:	e7eb      	b.n	800acd2 <_svfiprintf_r+0x1c2>
 800acfa:	bf00      	nop
 800acfc:	0800c8bc 	.word	0x0800c8bc
 800ad00:	0800c8c6 	.word	0x0800c8c6
 800ad04:	08007005 	.word	0x08007005
 800ad08:	0800aa59 	.word	0x0800aa59
 800ad0c:	0800c8c2 	.word	0x0800c8c2

0800ad10 <__sfputc_r>:
 800ad10:	6893      	ldr	r3, [r2, #8]
 800ad12:	3b01      	subs	r3, #1
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	b410      	push	{r4}
 800ad18:	6093      	str	r3, [r2, #8]
 800ad1a:	da08      	bge.n	800ad2e <__sfputc_r+0x1e>
 800ad1c:	6994      	ldr	r4, [r2, #24]
 800ad1e:	42a3      	cmp	r3, r4
 800ad20:	db01      	blt.n	800ad26 <__sfputc_r+0x16>
 800ad22:	290a      	cmp	r1, #10
 800ad24:	d103      	bne.n	800ad2e <__sfputc_r+0x1e>
 800ad26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad2a:	f000 b989 	b.w	800b040 <__swbuf_r>
 800ad2e:	6813      	ldr	r3, [r2, #0]
 800ad30:	1c58      	adds	r0, r3, #1
 800ad32:	6010      	str	r0, [r2, #0]
 800ad34:	7019      	strb	r1, [r3, #0]
 800ad36:	4608      	mov	r0, r1
 800ad38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad3c:	4770      	bx	lr

0800ad3e <__sfputs_r>:
 800ad3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad40:	4606      	mov	r6, r0
 800ad42:	460f      	mov	r7, r1
 800ad44:	4614      	mov	r4, r2
 800ad46:	18d5      	adds	r5, r2, r3
 800ad48:	42ac      	cmp	r4, r5
 800ad4a:	d101      	bne.n	800ad50 <__sfputs_r+0x12>
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	e007      	b.n	800ad60 <__sfputs_r+0x22>
 800ad50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad54:	463a      	mov	r2, r7
 800ad56:	4630      	mov	r0, r6
 800ad58:	f7ff ffda 	bl	800ad10 <__sfputc_r>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	d1f3      	bne.n	800ad48 <__sfputs_r+0xa>
 800ad60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad64 <_vfiprintf_r>:
 800ad64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad68:	460d      	mov	r5, r1
 800ad6a:	b09d      	sub	sp, #116	; 0x74
 800ad6c:	4614      	mov	r4, r2
 800ad6e:	4698      	mov	r8, r3
 800ad70:	4606      	mov	r6, r0
 800ad72:	b118      	cbz	r0, 800ad7c <_vfiprintf_r+0x18>
 800ad74:	6983      	ldr	r3, [r0, #24]
 800ad76:	b90b      	cbnz	r3, 800ad7c <_vfiprintf_r+0x18>
 800ad78:	f000 fb52 	bl	800b420 <__sinit>
 800ad7c:	4b89      	ldr	r3, [pc, #548]	; (800afa4 <_vfiprintf_r+0x240>)
 800ad7e:	429d      	cmp	r5, r3
 800ad80:	d11b      	bne.n	800adba <_vfiprintf_r+0x56>
 800ad82:	6875      	ldr	r5, [r6, #4]
 800ad84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad86:	07d9      	lsls	r1, r3, #31
 800ad88:	d405      	bmi.n	800ad96 <_vfiprintf_r+0x32>
 800ad8a:	89ab      	ldrh	r3, [r5, #12]
 800ad8c:	059a      	lsls	r2, r3, #22
 800ad8e:	d402      	bmi.n	800ad96 <_vfiprintf_r+0x32>
 800ad90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad92:	f000 fbe3 	bl	800b55c <__retarget_lock_acquire_recursive>
 800ad96:	89ab      	ldrh	r3, [r5, #12]
 800ad98:	071b      	lsls	r3, r3, #28
 800ad9a:	d501      	bpl.n	800ada0 <_vfiprintf_r+0x3c>
 800ad9c:	692b      	ldr	r3, [r5, #16]
 800ad9e:	b9eb      	cbnz	r3, 800addc <_vfiprintf_r+0x78>
 800ada0:	4629      	mov	r1, r5
 800ada2:	4630      	mov	r0, r6
 800ada4:	f000 f9ac 	bl	800b100 <__swsetup_r>
 800ada8:	b1c0      	cbz	r0, 800addc <_vfiprintf_r+0x78>
 800adaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adac:	07dc      	lsls	r4, r3, #31
 800adae:	d50e      	bpl.n	800adce <_vfiprintf_r+0x6a>
 800adb0:	f04f 30ff 	mov.w	r0, #4294967295
 800adb4:	b01d      	add	sp, #116	; 0x74
 800adb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adba:	4b7b      	ldr	r3, [pc, #492]	; (800afa8 <_vfiprintf_r+0x244>)
 800adbc:	429d      	cmp	r5, r3
 800adbe:	d101      	bne.n	800adc4 <_vfiprintf_r+0x60>
 800adc0:	68b5      	ldr	r5, [r6, #8]
 800adc2:	e7df      	b.n	800ad84 <_vfiprintf_r+0x20>
 800adc4:	4b79      	ldr	r3, [pc, #484]	; (800afac <_vfiprintf_r+0x248>)
 800adc6:	429d      	cmp	r5, r3
 800adc8:	bf08      	it	eq
 800adca:	68f5      	ldreq	r5, [r6, #12]
 800adcc:	e7da      	b.n	800ad84 <_vfiprintf_r+0x20>
 800adce:	89ab      	ldrh	r3, [r5, #12]
 800add0:	0598      	lsls	r0, r3, #22
 800add2:	d4ed      	bmi.n	800adb0 <_vfiprintf_r+0x4c>
 800add4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800add6:	f000 fbc2 	bl	800b55e <__retarget_lock_release_recursive>
 800adda:	e7e9      	b.n	800adb0 <_vfiprintf_r+0x4c>
 800addc:	2300      	movs	r3, #0
 800adde:	9309      	str	r3, [sp, #36]	; 0x24
 800ade0:	2320      	movs	r3, #32
 800ade2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ade6:	f8cd 800c 	str.w	r8, [sp, #12]
 800adea:	2330      	movs	r3, #48	; 0x30
 800adec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800afb0 <_vfiprintf_r+0x24c>
 800adf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adf4:	f04f 0901 	mov.w	r9, #1
 800adf8:	4623      	mov	r3, r4
 800adfa:	469a      	mov	sl, r3
 800adfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae00:	b10a      	cbz	r2, 800ae06 <_vfiprintf_r+0xa2>
 800ae02:	2a25      	cmp	r2, #37	; 0x25
 800ae04:	d1f9      	bne.n	800adfa <_vfiprintf_r+0x96>
 800ae06:	ebba 0b04 	subs.w	fp, sl, r4
 800ae0a:	d00b      	beq.n	800ae24 <_vfiprintf_r+0xc0>
 800ae0c:	465b      	mov	r3, fp
 800ae0e:	4622      	mov	r2, r4
 800ae10:	4629      	mov	r1, r5
 800ae12:	4630      	mov	r0, r6
 800ae14:	f7ff ff93 	bl	800ad3e <__sfputs_r>
 800ae18:	3001      	adds	r0, #1
 800ae1a:	f000 80aa 	beq.w	800af72 <_vfiprintf_r+0x20e>
 800ae1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae20:	445a      	add	r2, fp
 800ae22:	9209      	str	r2, [sp, #36]	; 0x24
 800ae24:	f89a 3000 	ldrb.w	r3, [sl]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f000 80a2 	beq.w	800af72 <_vfiprintf_r+0x20e>
 800ae2e:	2300      	movs	r3, #0
 800ae30:	f04f 32ff 	mov.w	r2, #4294967295
 800ae34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae38:	f10a 0a01 	add.w	sl, sl, #1
 800ae3c:	9304      	str	r3, [sp, #16]
 800ae3e:	9307      	str	r3, [sp, #28]
 800ae40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae44:	931a      	str	r3, [sp, #104]	; 0x68
 800ae46:	4654      	mov	r4, sl
 800ae48:	2205      	movs	r2, #5
 800ae4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae4e:	4858      	ldr	r0, [pc, #352]	; (800afb0 <_vfiprintf_r+0x24c>)
 800ae50:	f7f5 f9c6 	bl	80001e0 <memchr>
 800ae54:	9a04      	ldr	r2, [sp, #16]
 800ae56:	b9d8      	cbnz	r0, 800ae90 <_vfiprintf_r+0x12c>
 800ae58:	06d1      	lsls	r1, r2, #27
 800ae5a:	bf44      	itt	mi
 800ae5c:	2320      	movmi	r3, #32
 800ae5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae62:	0713      	lsls	r3, r2, #28
 800ae64:	bf44      	itt	mi
 800ae66:	232b      	movmi	r3, #43	; 0x2b
 800ae68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae70:	2b2a      	cmp	r3, #42	; 0x2a
 800ae72:	d015      	beq.n	800aea0 <_vfiprintf_r+0x13c>
 800ae74:	9a07      	ldr	r2, [sp, #28]
 800ae76:	4654      	mov	r4, sl
 800ae78:	2000      	movs	r0, #0
 800ae7a:	f04f 0c0a 	mov.w	ip, #10
 800ae7e:	4621      	mov	r1, r4
 800ae80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae84:	3b30      	subs	r3, #48	; 0x30
 800ae86:	2b09      	cmp	r3, #9
 800ae88:	d94e      	bls.n	800af28 <_vfiprintf_r+0x1c4>
 800ae8a:	b1b0      	cbz	r0, 800aeba <_vfiprintf_r+0x156>
 800ae8c:	9207      	str	r2, [sp, #28]
 800ae8e:	e014      	b.n	800aeba <_vfiprintf_r+0x156>
 800ae90:	eba0 0308 	sub.w	r3, r0, r8
 800ae94:	fa09 f303 	lsl.w	r3, r9, r3
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	9304      	str	r3, [sp, #16]
 800ae9c:	46a2      	mov	sl, r4
 800ae9e:	e7d2      	b.n	800ae46 <_vfiprintf_r+0xe2>
 800aea0:	9b03      	ldr	r3, [sp, #12]
 800aea2:	1d19      	adds	r1, r3, #4
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	9103      	str	r1, [sp, #12]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	bfbb      	ittet	lt
 800aeac:	425b      	neglt	r3, r3
 800aeae:	f042 0202 	orrlt.w	r2, r2, #2
 800aeb2:	9307      	strge	r3, [sp, #28]
 800aeb4:	9307      	strlt	r3, [sp, #28]
 800aeb6:	bfb8      	it	lt
 800aeb8:	9204      	strlt	r2, [sp, #16]
 800aeba:	7823      	ldrb	r3, [r4, #0]
 800aebc:	2b2e      	cmp	r3, #46	; 0x2e
 800aebe:	d10c      	bne.n	800aeda <_vfiprintf_r+0x176>
 800aec0:	7863      	ldrb	r3, [r4, #1]
 800aec2:	2b2a      	cmp	r3, #42	; 0x2a
 800aec4:	d135      	bne.n	800af32 <_vfiprintf_r+0x1ce>
 800aec6:	9b03      	ldr	r3, [sp, #12]
 800aec8:	1d1a      	adds	r2, r3, #4
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	9203      	str	r2, [sp, #12]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	bfb8      	it	lt
 800aed2:	f04f 33ff 	movlt.w	r3, #4294967295
 800aed6:	3402      	adds	r4, #2
 800aed8:	9305      	str	r3, [sp, #20]
 800aeda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800afc0 <_vfiprintf_r+0x25c>
 800aede:	7821      	ldrb	r1, [r4, #0]
 800aee0:	2203      	movs	r2, #3
 800aee2:	4650      	mov	r0, sl
 800aee4:	f7f5 f97c 	bl	80001e0 <memchr>
 800aee8:	b140      	cbz	r0, 800aefc <_vfiprintf_r+0x198>
 800aeea:	2340      	movs	r3, #64	; 0x40
 800aeec:	eba0 000a 	sub.w	r0, r0, sl
 800aef0:	fa03 f000 	lsl.w	r0, r3, r0
 800aef4:	9b04      	ldr	r3, [sp, #16]
 800aef6:	4303      	orrs	r3, r0
 800aef8:	3401      	adds	r4, #1
 800aefa:	9304      	str	r3, [sp, #16]
 800aefc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af00:	482c      	ldr	r0, [pc, #176]	; (800afb4 <_vfiprintf_r+0x250>)
 800af02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af06:	2206      	movs	r2, #6
 800af08:	f7f5 f96a 	bl	80001e0 <memchr>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d03f      	beq.n	800af90 <_vfiprintf_r+0x22c>
 800af10:	4b29      	ldr	r3, [pc, #164]	; (800afb8 <_vfiprintf_r+0x254>)
 800af12:	bb1b      	cbnz	r3, 800af5c <_vfiprintf_r+0x1f8>
 800af14:	9b03      	ldr	r3, [sp, #12]
 800af16:	3307      	adds	r3, #7
 800af18:	f023 0307 	bic.w	r3, r3, #7
 800af1c:	3308      	adds	r3, #8
 800af1e:	9303      	str	r3, [sp, #12]
 800af20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af22:	443b      	add	r3, r7
 800af24:	9309      	str	r3, [sp, #36]	; 0x24
 800af26:	e767      	b.n	800adf8 <_vfiprintf_r+0x94>
 800af28:	fb0c 3202 	mla	r2, ip, r2, r3
 800af2c:	460c      	mov	r4, r1
 800af2e:	2001      	movs	r0, #1
 800af30:	e7a5      	b.n	800ae7e <_vfiprintf_r+0x11a>
 800af32:	2300      	movs	r3, #0
 800af34:	3401      	adds	r4, #1
 800af36:	9305      	str	r3, [sp, #20]
 800af38:	4619      	mov	r1, r3
 800af3a:	f04f 0c0a 	mov.w	ip, #10
 800af3e:	4620      	mov	r0, r4
 800af40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af44:	3a30      	subs	r2, #48	; 0x30
 800af46:	2a09      	cmp	r2, #9
 800af48:	d903      	bls.n	800af52 <_vfiprintf_r+0x1ee>
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d0c5      	beq.n	800aeda <_vfiprintf_r+0x176>
 800af4e:	9105      	str	r1, [sp, #20]
 800af50:	e7c3      	b.n	800aeda <_vfiprintf_r+0x176>
 800af52:	fb0c 2101 	mla	r1, ip, r1, r2
 800af56:	4604      	mov	r4, r0
 800af58:	2301      	movs	r3, #1
 800af5a:	e7f0      	b.n	800af3e <_vfiprintf_r+0x1da>
 800af5c:	ab03      	add	r3, sp, #12
 800af5e:	9300      	str	r3, [sp, #0]
 800af60:	462a      	mov	r2, r5
 800af62:	4b16      	ldr	r3, [pc, #88]	; (800afbc <_vfiprintf_r+0x258>)
 800af64:	a904      	add	r1, sp, #16
 800af66:	4630      	mov	r0, r6
 800af68:	f7fc f84c 	bl	8007004 <_printf_float>
 800af6c:	4607      	mov	r7, r0
 800af6e:	1c78      	adds	r0, r7, #1
 800af70:	d1d6      	bne.n	800af20 <_vfiprintf_r+0x1bc>
 800af72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af74:	07d9      	lsls	r1, r3, #31
 800af76:	d405      	bmi.n	800af84 <_vfiprintf_r+0x220>
 800af78:	89ab      	ldrh	r3, [r5, #12]
 800af7a:	059a      	lsls	r2, r3, #22
 800af7c:	d402      	bmi.n	800af84 <_vfiprintf_r+0x220>
 800af7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af80:	f000 faed 	bl	800b55e <__retarget_lock_release_recursive>
 800af84:	89ab      	ldrh	r3, [r5, #12]
 800af86:	065b      	lsls	r3, r3, #25
 800af88:	f53f af12 	bmi.w	800adb0 <_vfiprintf_r+0x4c>
 800af8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af8e:	e711      	b.n	800adb4 <_vfiprintf_r+0x50>
 800af90:	ab03      	add	r3, sp, #12
 800af92:	9300      	str	r3, [sp, #0]
 800af94:	462a      	mov	r2, r5
 800af96:	4b09      	ldr	r3, [pc, #36]	; (800afbc <_vfiprintf_r+0x258>)
 800af98:	a904      	add	r1, sp, #16
 800af9a:	4630      	mov	r0, r6
 800af9c:	f7fc fad6 	bl	800754c <_printf_i>
 800afa0:	e7e4      	b.n	800af6c <_vfiprintf_r+0x208>
 800afa2:	bf00      	nop
 800afa4:	0800c8f0 	.word	0x0800c8f0
 800afa8:	0800c910 	.word	0x0800c910
 800afac:	0800c8d0 	.word	0x0800c8d0
 800afb0:	0800c8bc 	.word	0x0800c8bc
 800afb4:	0800c8c6 	.word	0x0800c8c6
 800afb8:	08007005 	.word	0x08007005
 800afbc:	0800ad3f 	.word	0x0800ad3f
 800afc0:	0800c8c2 	.word	0x0800c8c2

0800afc4 <_read_r>:
 800afc4:	b538      	push	{r3, r4, r5, lr}
 800afc6:	4d07      	ldr	r5, [pc, #28]	; (800afe4 <_read_r+0x20>)
 800afc8:	4604      	mov	r4, r0
 800afca:	4608      	mov	r0, r1
 800afcc:	4611      	mov	r1, r2
 800afce:	2200      	movs	r2, #0
 800afd0:	602a      	str	r2, [r5, #0]
 800afd2:	461a      	mov	r2, r3
 800afd4:	f7f7 fc34 	bl	8002840 <_read>
 800afd8:	1c43      	adds	r3, r0, #1
 800afda:	d102      	bne.n	800afe2 <_read_r+0x1e>
 800afdc:	682b      	ldr	r3, [r5, #0]
 800afde:	b103      	cbz	r3, 800afe2 <_read_r+0x1e>
 800afe0:	6023      	str	r3, [r4, #0]
 800afe2:	bd38      	pop	{r3, r4, r5, pc}
 800afe4:	20000e94 	.word	0x20000e94

0800afe8 <nan>:
 800afe8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aff0 <nan+0x8>
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop
 800aff0:	00000000 	.word	0x00000000
 800aff4:	7ff80000 	.word	0x7ff80000

0800aff8 <_sbrk_r>:
 800aff8:	b538      	push	{r3, r4, r5, lr}
 800affa:	4d06      	ldr	r5, [pc, #24]	; (800b014 <_sbrk_r+0x1c>)
 800affc:	2300      	movs	r3, #0
 800affe:	4604      	mov	r4, r0
 800b000:	4608      	mov	r0, r1
 800b002:	602b      	str	r3, [r5, #0]
 800b004:	f7f7 fc8a 	bl	800291c <_sbrk>
 800b008:	1c43      	adds	r3, r0, #1
 800b00a:	d102      	bne.n	800b012 <_sbrk_r+0x1a>
 800b00c:	682b      	ldr	r3, [r5, #0]
 800b00e:	b103      	cbz	r3, 800b012 <_sbrk_r+0x1a>
 800b010:	6023      	str	r3, [r4, #0]
 800b012:	bd38      	pop	{r3, r4, r5, pc}
 800b014:	20000e94 	.word	0x20000e94

0800b018 <strncmp>:
 800b018:	b510      	push	{r4, lr}
 800b01a:	b17a      	cbz	r2, 800b03c <strncmp+0x24>
 800b01c:	4603      	mov	r3, r0
 800b01e:	3901      	subs	r1, #1
 800b020:	1884      	adds	r4, r0, r2
 800b022:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b026:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b02a:	4290      	cmp	r0, r2
 800b02c:	d101      	bne.n	800b032 <strncmp+0x1a>
 800b02e:	42a3      	cmp	r3, r4
 800b030:	d101      	bne.n	800b036 <strncmp+0x1e>
 800b032:	1a80      	subs	r0, r0, r2
 800b034:	bd10      	pop	{r4, pc}
 800b036:	2800      	cmp	r0, #0
 800b038:	d1f3      	bne.n	800b022 <strncmp+0xa>
 800b03a:	e7fa      	b.n	800b032 <strncmp+0x1a>
 800b03c:	4610      	mov	r0, r2
 800b03e:	e7f9      	b.n	800b034 <strncmp+0x1c>

0800b040 <__swbuf_r>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	460e      	mov	r6, r1
 800b044:	4614      	mov	r4, r2
 800b046:	4605      	mov	r5, r0
 800b048:	b118      	cbz	r0, 800b052 <__swbuf_r+0x12>
 800b04a:	6983      	ldr	r3, [r0, #24]
 800b04c:	b90b      	cbnz	r3, 800b052 <__swbuf_r+0x12>
 800b04e:	f000 f9e7 	bl	800b420 <__sinit>
 800b052:	4b21      	ldr	r3, [pc, #132]	; (800b0d8 <__swbuf_r+0x98>)
 800b054:	429c      	cmp	r4, r3
 800b056:	d12b      	bne.n	800b0b0 <__swbuf_r+0x70>
 800b058:	686c      	ldr	r4, [r5, #4]
 800b05a:	69a3      	ldr	r3, [r4, #24]
 800b05c:	60a3      	str	r3, [r4, #8]
 800b05e:	89a3      	ldrh	r3, [r4, #12]
 800b060:	071a      	lsls	r2, r3, #28
 800b062:	d52f      	bpl.n	800b0c4 <__swbuf_r+0x84>
 800b064:	6923      	ldr	r3, [r4, #16]
 800b066:	b36b      	cbz	r3, 800b0c4 <__swbuf_r+0x84>
 800b068:	6923      	ldr	r3, [r4, #16]
 800b06a:	6820      	ldr	r0, [r4, #0]
 800b06c:	1ac0      	subs	r0, r0, r3
 800b06e:	6963      	ldr	r3, [r4, #20]
 800b070:	b2f6      	uxtb	r6, r6
 800b072:	4283      	cmp	r3, r0
 800b074:	4637      	mov	r7, r6
 800b076:	dc04      	bgt.n	800b082 <__swbuf_r+0x42>
 800b078:	4621      	mov	r1, r4
 800b07a:	4628      	mov	r0, r5
 800b07c:	f000 f93c 	bl	800b2f8 <_fflush_r>
 800b080:	bb30      	cbnz	r0, 800b0d0 <__swbuf_r+0x90>
 800b082:	68a3      	ldr	r3, [r4, #8]
 800b084:	3b01      	subs	r3, #1
 800b086:	60a3      	str	r3, [r4, #8]
 800b088:	6823      	ldr	r3, [r4, #0]
 800b08a:	1c5a      	adds	r2, r3, #1
 800b08c:	6022      	str	r2, [r4, #0]
 800b08e:	701e      	strb	r6, [r3, #0]
 800b090:	6963      	ldr	r3, [r4, #20]
 800b092:	3001      	adds	r0, #1
 800b094:	4283      	cmp	r3, r0
 800b096:	d004      	beq.n	800b0a2 <__swbuf_r+0x62>
 800b098:	89a3      	ldrh	r3, [r4, #12]
 800b09a:	07db      	lsls	r3, r3, #31
 800b09c:	d506      	bpl.n	800b0ac <__swbuf_r+0x6c>
 800b09e:	2e0a      	cmp	r6, #10
 800b0a0:	d104      	bne.n	800b0ac <__swbuf_r+0x6c>
 800b0a2:	4621      	mov	r1, r4
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	f000 f927 	bl	800b2f8 <_fflush_r>
 800b0aa:	b988      	cbnz	r0, 800b0d0 <__swbuf_r+0x90>
 800b0ac:	4638      	mov	r0, r7
 800b0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b0:	4b0a      	ldr	r3, [pc, #40]	; (800b0dc <__swbuf_r+0x9c>)
 800b0b2:	429c      	cmp	r4, r3
 800b0b4:	d101      	bne.n	800b0ba <__swbuf_r+0x7a>
 800b0b6:	68ac      	ldr	r4, [r5, #8]
 800b0b8:	e7cf      	b.n	800b05a <__swbuf_r+0x1a>
 800b0ba:	4b09      	ldr	r3, [pc, #36]	; (800b0e0 <__swbuf_r+0xa0>)
 800b0bc:	429c      	cmp	r4, r3
 800b0be:	bf08      	it	eq
 800b0c0:	68ec      	ldreq	r4, [r5, #12]
 800b0c2:	e7ca      	b.n	800b05a <__swbuf_r+0x1a>
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	f000 f81a 	bl	800b100 <__swsetup_r>
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	d0cb      	beq.n	800b068 <__swbuf_r+0x28>
 800b0d0:	f04f 37ff 	mov.w	r7, #4294967295
 800b0d4:	e7ea      	b.n	800b0ac <__swbuf_r+0x6c>
 800b0d6:	bf00      	nop
 800b0d8:	0800c8f0 	.word	0x0800c8f0
 800b0dc:	0800c910 	.word	0x0800c910
 800b0e0:	0800c8d0 	.word	0x0800c8d0

0800b0e4 <__ascii_wctomb>:
 800b0e4:	b149      	cbz	r1, 800b0fa <__ascii_wctomb+0x16>
 800b0e6:	2aff      	cmp	r2, #255	; 0xff
 800b0e8:	bf85      	ittet	hi
 800b0ea:	238a      	movhi	r3, #138	; 0x8a
 800b0ec:	6003      	strhi	r3, [r0, #0]
 800b0ee:	700a      	strbls	r2, [r1, #0]
 800b0f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0f4:	bf98      	it	ls
 800b0f6:	2001      	movls	r0, #1
 800b0f8:	4770      	bx	lr
 800b0fa:	4608      	mov	r0, r1
 800b0fc:	4770      	bx	lr
	...

0800b100 <__swsetup_r>:
 800b100:	4b32      	ldr	r3, [pc, #200]	; (800b1cc <__swsetup_r+0xcc>)
 800b102:	b570      	push	{r4, r5, r6, lr}
 800b104:	681d      	ldr	r5, [r3, #0]
 800b106:	4606      	mov	r6, r0
 800b108:	460c      	mov	r4, r1
 800b10a:	b125      	cbz	r5, 800b116 <__swsetup_r+0x16>
 800b10c:	69ab      	ldr	r3, [r5, #24]
 800b10e:	b913      	cbnz	r3, 800b116 <__swsetup_r+0x16>
 800b110:	4628      	mov	r0, r5
 800b112:	f000 f985 	bl	800b420 <__sinit>
 800b116:	4b2e      	ldr	r3, [pc, #184]	; (800b1d0 <__swsetup_r+0xd0>)
 800b118:	429c      	cmp	r4, r3
 800b11a:	d10f      	bne.n	800b13c <__swsetup_r+0x3c>
 800b11c:	686c      	ldr	r4, [r5, #4]
 800b11e:	89a3      	ldrh	r3, [r4, #12]
 800b120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b124:	0719      	lsls	r1, r3, #28
 800b126:	d42c      	bmi.n	800b182 <__swsetup_r+0x82>
 800b128:	06dd      	lsls	r5, r3, #27
 800b12a:	d411      	bmi.n	800b150 <__swsetup_r+0x50>
 800b12c:	2309      	movs	r3, #9
 800b12e:	6033      	str	r3, [r6, #0]
 800b130:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b134:	81a3      	strh	r3, [r4, #12]
 800b136:	f04f 30ff 	mov.w	r0, #4294967295
 800b13a:	e03e      	b.n	800b1ba <__swsetup_r+0xba>
 800b13c:	4b25      	ldr	r3, [pc, #148]	; (800b1d4 <__swsetup_r+0xd4>)
 800b13e:	429c      	cmp	r4, r3
 800b140:	d101      	bne.n	800b146 <__swsetup_r+0x46>
 800b142:	68ac      	ldr	r4, [r5, #8]
 800b144:	e7eb      	b.n	800b11e <__swsetup_r+0x1e>
 800b146:	4b24      	ldr	r3, [pc, #144]	; (800b1d8 <__swsetup_r+0xd8>)
 800b148:	429c      	cmp	r4, r3
 800b14a:	bf08      	it	eq
 800b14c:	68ec      	ldreq	r4, [r5, #12]
 800b14e:	e7e6      	b.n	800b11e <__swsetup_r+0x1e>
 800b150:	0758      	lsls	r0, r3, #29
 800b152:	d512      	bpl.n	800b17a <__swsetup_r+0x7a>
 800b154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b156:	b141      	cbz	r1, 800b16a <__swsetup_r+0x6a>
 800b158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b15c:	4299      	cmp	r1, r3
 800b15e:	d002      	beq.n	800b166 <__swsetup_r+0x66>
 800b160:	4630      	mov	r0, r6
 800b162:	f7ff fb99 	bl	800a898 <_free_r>
 800b166:	2300      	movs	r3, #0
 800b168:	6363      	str	r3, [r4, #52]	; 0x34
 800b16a:	89a3      	ldrh	r3, [r4, #12]
 800b16c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b170:	81a3      	strh	r3, [r4, #12]
 800b172:	2300      	movs	r3, #0
 800b174:	6063      	str	r3, [r4, #4]
 800b176:	6923      	ldr	r3, [r4, #16]
 800b178:	6023      	str	r3, [r4, #0]
 800b17a:	89a3      	ldrh	r3, [r4, #12]
 800b17c:	f043 0308 	orr.w	r3, r3, #8
 800b180:	81a3      	strh	r3, [r4, #12]
 800b182:	6923      	ldr	r3, [r4, #16]
 800b184:	b94b      	cbnz	r3, 800b19a <__swsetup_r+0x9a>
 800b186:	89a3      	ldrh	r3, [r4, #12]
 800b188:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b18c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b190:	d003      	beq.n	800b19a <__swsetup_r+0x9a>
 800b192:	4621      	mov	r1, r4
 800b194:	4630      	mov	r0, r6
 800b196:	f000 fa09 	bl	800b5ac <__smakebuf_r>
 800b19a:	89a0      	ldrh	r0, [r4, #12]
 800b19c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1a0:	f010 0301 	ands.w	r3, r0, #1
 800b1a4:	d00a      	beq.n	800b1bc <__swsetup_r+0xbc>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	60a3      	str	r3, [r4, #8]
 800b1aa:	6963      	ldr	r3, [r4, #20]
 800b1ac:	425b      	negs	r3, r3
 800b1ae:	61a3      	str	r3, [r4, #24]
 800b1b0:	6923      	ldr	r3, [r4, #16]
 800b1b2:	b943      	cbnz	r3, 800b1c6 <__swsetup_r+0xc6>
 800b1b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b1b8:	d1ba      	bne.n	800b130 <__swsetup_r+0x30>
 800b1ba:	bd70      	pop	{r4, r5, r6, pc}
 800b1bc:	0781      	lsls	r1, r0, #30
 800b1be:	bf58      	it	pl
 800b1c0:	6963      	ldrpl	r3, [r4, #20]
 800b1c2:	60a3      	str	r3, [r4, #8]
 800b1c4:	e7f4      	b.n	800b1b0 <__swsetup_r+0xb0>
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	e7f7      	b.n	800b1ba <__swsetup_r+0xba>
 800b1ca:	bf00      	nop
 800b1cc:	2000009c 	.word	0x2000009c
 800b1d0:	0800c8f0 	.word	0x0800c8f0
 800b1d4:	0800c910 	.word	0x0800c910
 800b1d8:	0800c8d0 	.word	0x0800c8d0

0800b1dc <abort>:
 800b1dc:	b508      	push	{r3, lr}
 800b1de:	2006      	movs	r0, #6
 800b1e0:	f000 faa2 	bl	800b728 <raise>
 800b1e4:	2001      	movs	r0, #1
 800b1e6:	f7f7 fb21 	bl	800282c <_exit>
	...

0800b1ec <__sflush_r>:
 800b1ec:	898a      	ldrh	r2, [r1, #12]
 800b1ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1f2:	4605      	mov	r5, r0
 800b1f4:	0710      	lsls	r0, r2, #28
 800b1f6:	460c      	mov	r4, r1
 800b1f8:	d458      	bmi.n	800b2ac <__sflush_r+0xc0>
 800b1fa:	684b      	ldr	r3, [r1, #4]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	dc05      	bgt.n	800b20c <__sflush_r+0x20>
 800b200:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b202:	2b00      	cmp	r3, #0
 800b204:	dc02      	bgt.n	800b20c <__sflush_r+0x20>
 800b206:	2000      	movs	r0, #0
 800b208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b20c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b20e:	2e00      	cmp	r6, #0
 800b210:	d0f9      	beq.n	800b206 <__sflush_r+0x1a>
 800b212:	2300      	movs	r3, #0
 800b214:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b218:	682f      	ldr	r7, [r5, #0]
 800b21a:	602b      	str	r3, [r5, #0]
 800b21c:	d032      	beq.n	800b284 <__sflush_r+0x98>
 800b21e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b220:	89a3      	ldrh	r3, [r4, #12]
 800b222:	075a      	lsls	r2, r3, #29
 800b224:	d505      	bpl.n	800b232 <__sflush_r+0x46>
 800b226:	6863      	ldr	r3, [r4, #4]
 800b228:	1ac0      	subs	r0, r0, r3
 800b22a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b22c:	b10b      	cbz	r3, 800b232 <__sflush_r+0x46>
 800b22e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b230:	1ac0      	subs	r0, r0, r3
 800b232:	2300      	movs	r3, #0
 800b234:	4602      	mov	r2, r0
 800b236:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b238:	6a21      	ldr	r1, [r4, #32]
 800b23a:	4628      	mov	r0, r5
 800b23c:	47b0      	blx	r6
 800b23e:	1c43      	adds	r3, r0, #1
 800b240:	89a3      	ldrh	r3, [r4, #12]
 800b242:	d106      	bne.n	800b252 <__sflush_r+0x66>
 800b244:	6829      	ldr	r1, [r5, #0]
 800b246:	291d      	cmp	r1, #29
 800b248:	d82c      	bhi.n	800b2a4 <__sflush_r+0xb8>
 800b24a:	4a2a      	ldr	r2, [pc, #168]	; (800b2f4 <__sflush_r+0x108>)
 800b24c:	40ca      	lsrs	r2, r1
 800b24e:	07d6      	lsls	r6, r2, #31
 800b250:	d528      	bpl.n	800b2a4 <__sflush_r+0xb8>
 800b252:	2200      	movs	r2, #0
 800b254:	6062      	str	r2, [r4, #4]
 800b256:	04d9      	lsls	r1, r3, #19
 800b258:	6922      	ldr	r2, [r4, #16]
 800b25a:	6022      	str	r2, [r4, #0]
 800b25c:	d504      	bpl.n	800b268 <__sflush_r+0x7c>
 800b25e:	1c42      	adds	r2, r0, #1
 800b260:	d101      	bne.n	800b266 <__sflush_r+0x7a>
 800b262:	682b      	ldr	r3, [r5, #0]
 800b264:	b903      	cbnz	r3, 800b268 <__sflush_r+0x7c>
 800b266:	6560      	str	r0, [r4, #84]	; 0x54
 800b268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b26a:	602f      	str	r7, [r5, #0]
 800b26c:	2900      	cmp	r1, #0
 800b26e:	d0ca      	beq.n	800b206 <__sflush_r+0x1a>
 800b270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b274:	4299      	cmp	r1, r3
 800b276:	d002      	beq.n	800b27e <__sflush_r+0x92>
 800b278:	4628      	mov	r0, r5
 800b27a:	f7ff fb0d 	bl	800a898 <_free_r>
 800b27e:	2000      	movs	r0, #0
 800b280:	6360      	str	r0, [r4, #52]	; 0x34
 800b282:	e7c1      	b.n	800b208 <__sflush_r+0x1c>
 800b284:	6a21      	ldr	r1, [r4, #32]
 800b286:	2301      	movs	r3, #1
 800b288:	4628      	mov	r0, r5
 800b28a:	47b0      	blx	r6
 800b28c:	1c41      	adds	r1, r0, #1
 800b28e:	d1c7      	bne.n	800b220 <__sflush_r+0x34>
 800b290:	682b      	ldr	r3, [r5, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d0c4      	beq.n	800b220 <__sflush_r+0x34>
 800b296:	2b1d      	cmp	r3, #29
 800b298:	d001      	beq.n	800b29e <__sflush_r+0xb2>
 800b29a:	2b16      	cmp	r3, #22
 800b29c:	d101      	bne.n	800b2a2 <__sflush_r+0xb6>
 800b29e:	602f      	str	r7, [r5, #0]
 800b2a0:	e7b1      	b.n	800b206 <__sflush_r+0x1a>
 800b2a2:	89a3      	ldrh	r3, [r4, #12]
 800b2a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2a8:	81a3      	strh	r3, [r4, #12]
 800b2aa:	e7ad      	b.n	800b208 <__sflush_r+0x1c>
 800b2ac:	690f      	ldr	r7, [r1, #16]
 800b2ae:	2f00      	cmp	r7, #0
 800b2b0:	d0a9      	beq.n	800b206 <__sflush_r+0x1a>
 800b2b2:	0793      	lsls	r3, r2, #30
 800b2b4:	680e      	ldr	r6, [r1, #0]
 800b2b6:	bf08      	it	eq
 800b2b8:	694b      	ldreq	r3, [r1, #20]
 800b2ba:	600f      	str	r7, [r1, #0]
 800b2bc:	bf18      	it	ne
 800b2be:	2300      	movne	r3, #0
 800b2c0:	eba6 0807 	sub.w	r8, r6, r7
 800b2c4:	608b      	str	r3, [r1, #8]
 800b2c6:	f1b8 0f00 	cmp.w	r8, #0
 800b2ca:	dd9c      	ble.n	800b206 <__sflush_r+0x1a>
 800b2cc:	6a21      	ldr	r1, [r4, #32]
 800b2ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2d0:	4643      	mov	r3, r8
 800b2d2:	463a      	mov	r2, r7
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	47b0      	blx	r6
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	dc06      	bgt.n	800b2ea <__sflush_r+0xfe>
 800b2dc:	89a3      	ldrh	r3, [r4, #12]
 800b2de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2e2:	81a3      	strh	r3, [r4, #12]
 800b2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e8:	e78e      	b.n	800b208 <__sflush_r+0x1c>
 800b2ea:	4407      	add	r7, r0
 800b2ec:	eba8 0800 	sub.w	r8, r8, r0
 800b2f0:	e7e9      	b.n	800b2c6 <__sflush_r+0xda>
 800b2f2:	bf00      	nop
 800b2f4:	20400001 	.word	0x20400001

0800b2f8 <_fflush_r>:
 800b2f8:	b538      	push	{r3, r4, r5, lr}
 800b2fa:	690b      	ldr	r3, [r1, #16]
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	460c      	mov	r4, r1
 800b300:	b913      	cbnz	r3, 800b308 <_fflush_r+0x10>
 800b302:	2500      	movs	r5, #0
 800b304:	4628      	mov	r0, r5
 800b306:	bd38      	pop	{r3, r4, r5, pc}
 800b308:	b118      	cbz	r0, 800b312 <_fflush_r+0x1a>
 800b30a:	6983      	ldr	r3, [r0, #24]
 800b30c:	b90b      	cbnz	r3, 800b312 <_fflush_r+0x1a>
 800b30e:	f000 f887 	bl	800b420 <__sinit>
 800b312:	4b14      	ldr	r3, [pc, #80]	; (800b364 <_fflush_r+0x6c>)
 800b314:	429c      	cmp	r4, r3
 800b316:	d11b      	bne.n	800b350 <_fflush_r+0x58>
 800b318:	686c      	ldr	r4, [r5, #4]
 800b31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d0ef      	beq.n	800b302 <_fflush_r+0xa>
 800b322:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b324:	07d0      	lsls	r0, r2, #31
 800b326:	d404      	bmi.n	800b332 <_fflush_r+0x3a>
 800b328:	0599      	lsls	r1, r3, #22
 800b32a:	d402      	bmi.n	800b332 <_fflush_r+0x3a>
 800b32c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b32e:	f000 f915 	bl	800b55c <__retarget_lock_acquire_recursive>
 800b332:	4628      	mov	r0, r5
 800b334:	4621      	mov	r1, r4
 800b336:	f7ff ff59 	bl	800b1ec <__sflush_r>
 800b33a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b33c:	07da      	lsls	r2, r3, #31
 800b33e:	4605      	mov	r5, r0
 800b340:	d4e0      	bmi.n	800b304 <_fflush_r+0xc>
 800b342:	89a3      	ldrh	r3, [r4, #12]
 800b344:	059b      	lsls	r3, r3, #22
 800b346:	d4dd      	bmi.n	800b304 <_fflush_r+0xc>
 800b348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b34a:	f000 f908 	bl	800b55e <__retarget_lock_release_recursive>
 800b34e:	e7d9      	b.n	800b304 <_fflush_r+0xc>
 800b350:	4b05      	ldr	r3, [pc, #20]	; (800b368 <_fflush_r+0x70>)
 800b352:	429c      	cmp	r4, r3
 800b354:	d101      	bne.n	800b35a <_fflush_r+0x62>
 800b356:	68ac      	ldr	r4, [r5, #8]
 800b358:	e7df      	b.n	800b31a <_fflush_r+0x22>
 800b35a:	4b04      	ldr	r3, [pc, #16]	; (800b36c <_fflush_r+0x74>)
 800b35c:	429c      	cmp	r4, r3
 800b35e:	bf08      	it	eq
 800b360:	68ec      	ldreq	r4, [r5, #12]
 800b362:	e7da      	b.n	800b31a <_fflush_r+0x22>
 800b364:	0800c8f0 	.word	0x0800c8f0
 800b368:	0800c910 	.word	0x0800c910
 800b36c:	0800c8d0 	.word	0x0800c8d0

0800b370 <std>:
 800b370:	2300      	movs	r3, #0
 800b372:	b510      	push	{r4, lr}
 800b374:	4604      	mov	r4, r0
 800b376:	e9c0 3300 	strd	r3, r3, [r0]
 800b37a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b37e:	6083      	str	r3, [r0, #8]
 800b380:	8181      	strh	r1, [r0, #12]
 800b382:	6643      	str	r3, [r0, #100]	; 0x64
 800b384:	81c2      	strh	r2, [r0, #14]
 800b386:	6183      	str	r3, [r0, #24]
 800b388:	4619      	mov	r1, r3
 800b38a:	2208      	movs	r2, #8
 800b38c:	305c      	adds	r0, #92	; 0x5c
 800b38e:	f7fb fd91 	bl	8006eb4 <memset>
 800b392:	4b05      	ldr	r3, [pc, #20]	; (800b3a8 <std+0x38>)
 800b394:	6263      	str	r3, [r4, #36]	; 0x24
 800b396:	4b05      	ldr	r3, [pc, #20]	; (800b3ac <std+0x3c>)
 800b398:	62a3      	str	r3, [r4, #40]	; 0x28
 800b39a:	4b05      	ldr	r3, [pc, #20]	; (800b3b0 <std+0x40>)
 800b39c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b39e:	4b05      	ldr	r3, [pc, #20]	; (800b3b4 <std+0x44>)
 800b3a0:	6224      	str	r4, [r4, #32]
 800b3a2:	6323      	str	r3, [r4, #48]	; 0x30
 800b3a4:	bd10      	pop	{r4, pc}
 800b3a6:	bf00      	nop
 800b3a8:	08007c05 	.word	0x08007c05
 800b3ac:	08007c27 	.word	0x08007c27
 800b3b0:	08007c5f 	.word	0x08007c5f
 800b3b4:	08007c83 	.word	0x08007c83

0800b3b8 <_cleanup_r>:
 800b3b8:	4901      	ldr	r1, [pc, #4]	; (800b3c0 <_cleanup_r+0x8>)
 800b3ba:	f000 b8af 	b.w	800b51c <_fwalk_reent>
 800b3be:	bf00      	nop
 800b3c0:	0800b2f9 	.word	0x0800b2f9

0800b3c4 <__sfmoreglue>:
 800b3c4:	b570      	push	{r4, r5, r6, lr}
 800b3c6:	2268      	movs	r2, #104	; 0x68
 800b3c8:	1e4d      	subs	r5, r1, #1
 800b3ca:	4355      	muls	r5, r2
 800b3cc:	460e      	mov	r6, r1
 800b3ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b3d2:	f7ff facd 	bl	800a970 <_malloc_r>
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	b140      	cbz	r0, 800b3ec <__sfmoreglue+0x28>
 800b3da:	2100      	movs	r1, #0
 800b3dc:	e9c0 1600 	strd	r1, r6, [r0]
 800b3e0:	300c      	adds	r0, #12
 800b3e2:	60a0      	str	r0, [r4, #8]
 800b3e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b3e8:	f7fb fd64 	bl	8006eb4 <memset>
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	bd70      	pop	{r4, r5, r6, pc}

0800b3f0 <__sfp_lock_acquire>:
 800b3f0:	4801      	ldr	r0, [pc, #4]	; (800b3f8 <__sfp_lock_acquire+0x8>)
 800b3f2:	f000 b8b3 	b.w	800b55c <__retarget_lock_acquire_recursive>
 800b3f6:	bf00      	nop
 800b3f8:	20000e99 	.word	0x20000e99

0800b3fc <__sfp_lock_release>:
 800b3fc:	4801      	ldr	r0, [pc, #4]	; (800b404 <__sfp_lock_release+0x8>)
 800b3fe:	f000 b8ae 	b.w	800b55e <__retarget_lock_release_recursive>
 800b402:	bf00      	nop
 800b404:	20000e99 	.word	0x20000e99

0800b408 <__sinit_lock_acquire>:
 800b408:	4801      	ldr	r0, [pc, #4]	; (800b410 <__sinit_lock_acquire+0x8>)
 800b40a:	f000 b8a7 	b.w	800b55c <__retarget_lock_acquire_recursive>
 800b40e:	bf00      	nop
 800b410:	20000e9a 	.word	0x20000e9a

0800b414 <__sinit_lock_release>:
 800b414:	4801      	ldr	r0, [pc, #4]	; (800b41c <__sinit_lock_release+0x8>)
 800b416:	f000 b8a2 	b.w	800b55e <__retarget_lock_release_recursive>
 800b41a:	bf00      	nop
 800b41c:	20000e9a 	.word	0x20000e9a

0800b420 <__sinit>:
 800b420:	b510      	push	{r4, lr}
 800b422:	4604      	mov	r4, r0
 800b424:	f7ff fff0 	bl	800b408 <__sinit_lock_acquire>
 800b428:	69a3      	ldr	r3, [r4, #24]
 800b42a:	b11b      	cbz	r3, 800b434 <__sinit+0x14>
 800b42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b430:	f7ff bff0 	b.w	800b414 <__sinit_lock_release>
 800b434:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b438:	6523      	str	r3, [r4, #80]	; 0x50
 800b43a:	4b13      	ldr	r3, [pc, #76]	; (800b488 <__sinit+0x68>)
 800b43c:	4a13      	ldr	r2, [pc, #76]	; (800b48c <__sinit+0x6c>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	62a2      	str	r2, [r4, #40]	; 0x28
 800b442:	42a3      	cmp	r3, r4
 800b444:	bf04      	itt	eq
 800b446:	2301      	moveq	r3, #1
 800b448:	61a3      	streq	r3, [r4, #24]
 800b44a:	4620      	mov	r0, r4
 800b44c:	f000 f820 	bl	800b490 <__sfp>
 800b450:	6060      	str	r0, [r4, #4]
 800b452:	4620      	mov	r0, r4
 800b454:	f000 f81c 	bl	800b490 <__sfp>
 800b458:	60a0      	str	r0, [r4, #8]
 800b45a:	4620      	mov	r0, r4
 800b45c:	f000 f818 	bl	800b490 <__sfp>
 800b460:	2200      	movs	r2, #0
 800b462:	60e0      	str	r0, [r4, #12]
 800b464:	2104      	movs	r1, #4
 800b466:	6860      	ldr	r0, [r4, #4]
 800b468:	f7ff ff82 	bl	800b370 <std>
 800b46c:	68a0      	ldr	r0, [r4, #8]
 800b46e:	2201      	movs	r2, #1
 800b470:	2109      	movs	r1, #9
 800b472:	f7ff ff7d 	bl	800b370 <std>
 800b476:	68e0      	ldr	r0, [r4, #12]
 800b478:	2202      	movs	r2, #2
 800b47a:	2112      	movs	r1, #18
 800b47c:	f7ff ff78 	bl	800b370 <std>
 800b480:	2301      	movs	r3, #1
 800b482:	61a3      	str	r3, [r4, #24]
 800b484:	e7d2      	b.n	800b42c <__sinit+0xc>
 800b486:	bf00      	nop
 800b488:	0800c488 	.word	0x0800c488
 800b48c:	0800b3b9 	.word	0x0800b3b9

0800b490 <__sfp>:
 800b490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b492:	4607      	mov	r7, r0
 800b494:	f7ff ffac 	bl	800b3f0 <__sfp_lock_acquire>
 800b498:	4b1e      	ldr	r3, [pc, #120]	; (800b514 <__sfp+0x84>)
 800b49a:	681e      	ldr	r6, [r3, #0]
 800b49c:	69b3      	ldr	r3, [r6, #24]
 800b49e:	b913      	cbnz	r3, 800b4a6 <__sfp+0x16>
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	f7ff ffbd 	bl	800b420 <__sinit>
 800b4a6:	3648      	adds	r6, #72	; 0x48
 800b4a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	d503      	bpl.n	800b4b8 <__sfp+0x28>
 800b4b0:	6833      	ldr	r3, [r6, #0]
 800b4b2:	b30b      	cbz	r3, 800b4f8 <__sfp+0x68>
 800b4b4:	6836      	ldr	r6, [r6, #0]
 800b4b6:	e7f7      	b.n	800b4a8 <__sfp+0x18>
 800b4b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b4bc:	b9d5      	cbnz	r5, 800b4f4 <__sfp+0x64>
 800b4be:	4b16      	ldr	r3, [pc, #88]	; (800b518 <__sfp+0x88>)
 800b4c0:	60e3      	str	r3, [r4, #12]
 800b4c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b4c6:	6665      	str	r5, [r4, #100]	; 0x64
 800b4c8:	f000 f847 	bl	800b55a <__retarget_lock_init_recursive>
 800b4cc:	f7ff ff96 	bl	800b3fc <__sfp_lock_release>
 800b4d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b4d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b4d8:	6025      	str	r5, [r4, #0]
 800b4da:	61a5      	str	r5, [r4, #24]
 800b4dc:	2208      	movs	r2, #8
 800b4de:	4629      	mov	r1, r5
 800b4e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b4e4:	f7fb fce6 	bl	8006eb4 <memset>
 800b4e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b4ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4f4:	3468      	adds	r4, #104	; 0x68
 800b4f6:	e7d9      	b.n	800b4ac <__sfp+0x1c>
 800b4f8:	2104      	movs	r1, #4
 800b4fa:	4638      	mov	r0, r7
 800b4fc:	f7ff ff62 	bl	800b3c4 <__sfmoreglue>
 800b500:	4604      	mov	r4, r0
 800b502:	6030      	str	r0, [r6, #0]
 800b504:	2800      	cmp	r0, #0
 800b506:	d1d5      	bne.n	800b4b4 <__sfp+0x24>
 800b508:	f7ff ff78 	bl	800b3fc <__sfp_lock_release>
 800b50c:	230c      	movs	r3, #12
 800b50e:	603b      	str	r3, [r7, #0]
 800b510:	e7ee      	b.n	800b4f0 <__sfp+0x60>
 800b512:	bf00      	nop
 800b514:	0800c488 	.word	0x0800c488
 800b518:	ffff0001 	.word	0xffff0001

0800b51c <_fwalk_reent>:
 800b51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b520:	4606      	mov	r6, r0
 800b522:	4688      	mov	r8, r1
 800b524:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b528:	2700      	movs	r7, #0
 800b52a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b52e:	f1b9 0901 	subs.w	r9, r9, #1
 800b532:	d505      	bpl.n	800b540 <_fwalk_reent+0x24>
 800b534:	6824      	ldr	r4, [r4, #0]
 800b536:	2c00      	cmp	r4, #0
 800b538:	d1f7      	bne.n	800b52a <_fwalk_reent+0xe>
 800b53a:	4638      	mov	r0, r7
 800b53c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b540:	89ab      	ldrh	r3, [r5, #12]
 800b542:	2b01      	cmp	r3, #1
 800b544:	d907      	bls.n	800b556 <_fwalk_reent+0x3a>
 800b546:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b54a:	3301      	adds	r3, #1
 800b54c:	d003      	beq.n	800b556 <_fwalk_reent+0x3a>
 800b54e:	4629      	mov	r1, r5
 800b550:	4630      	mov	r0, r6
 800b552:	47c0      	blx	r8
 800b554:	4307      	orrs	r7, r0
 800b556:	3568      	adds	r5, #104	; 0x68
 800b558:	e7e9      	b.n	800b52e <_fwalk_reent+0x12>

0800b55a <__retarget_lock_init_recursive>:
 800b55a:	4770      	bx	lr

0800b55c <__retarget_lock_acquire_recursive>:
 800b55c:	4770      	bx	lr

0800b55e <__retarget_lock_release_recursive>:
 800b55e:	4770      	bx	lr

0800b560 <__swhatbuf_r>:
 800b560:	b570      	push	{r4, r5, r6, lr}
 800b562:	460e      	mov	r6, r1
 800b564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b568:	2900      	cmp	r1, #0
 800b56a:	b096      	sub	sp, #88	; 0x58
 800b56c:	4614      	mov	r4, r2
 800b56e:	461d      	mov	r5, r3
 800b570:	da08      	bge.n	800b584 <__swhatbuf_r+0x24>
 800b572:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b576:	2200      	movs	r2, #0
 800b578:	602a      	str	r2, [r5, #0]
 800b57a:	061a      	lsls	r2, r3, #24
 800b57c:	d410      	bmi.n	800b5a0 <__swhatbuf_r+0x40>
 800b57e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b582:	e00e      	b.n	800b5a2 <__swhatbuf_r+0x42>
 800b584:	466a      	mov	r2, sp
 800b586:	f000 f8eb 	bl	800b760 <_fstat_r>
 800b58a:	2800      	cmp	r0, #0
 800b58c:	dbf1      	blt.n	800b572 <__swhatbuf_r+0x12>
 800b58e:	9a01      	ldr	r2, [sp, #4]
 800b590:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b594:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b598:	425a      	negs	r2, r3
 800b59a:	415a      	adcs	r2, r3
 800b59c:	602a      	str	r2, [r5, #0]
 800b59e:	e7ee      	b.n	800b57e <__swhatbuf_r+0x1e>
 800b5a0:	2340      	movs	r3, #64	; 0x40
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	b016      	add	sp, #88	; 0x58
 800b5a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b5ac <__smakebuf_r>:
 800b5ac:	898b      	ldrh	r3, [r1, #12]
 800b5ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5b0:	079d      	lsls	r5, r3, #30
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	460c      	mov	r4, r1
 800b5b6:	d507      	bpl.n	800b5c8 <__smakebuf_r+0x1c>
 800b5b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5bc:	6023      	str	r3, [r4, #0]
 800b5be:	6123      	str	r3, [r4, #16]
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	6163      	str	r3, [r4, #20]
 800b5c4:	b002      	add	sp, #8
 800b5c6:	bd70      	pop	{r4, r5, r6, pc}
 800b5c8:	ab01      	add	r3, sp, #4
 800b5ca:	466a      	mov	r2, sp
 800b5cc:	f7ff ffc8 	bl	800b560 <__swhatbuf_r>
 800b5d0:	9900      	ldr	r1, [sp, #0]
 800b5d2:	4605      	mov	r5, r0
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	f7ff f9cb 	bl	800a970 <_malloc_r>
 800b5da:	b948      	cbnz	r0, 800b5f0 <__smakebuf_r+0x44>
 800b5dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5e0:	059a      	lsls	r2, r3, #22
 800b5e2:	d4ef      	bmi.n	800b5c4 <__smakebuf_r+0x18>
 800b5e4:	f023 0303 	bic.w	r3, r3, #3
 800b5e8:	f043 0302 	orr.w	r3, r3, #2
 800b5ec:	81a3      	strh	r3, [r4, #12]
 800b5ee:	e7e3      	b.n	800b5b8 <__smakebuf_r+0xc>
 800b5f0:	4b0d      	ldr	r3, [pc, #52]	; (800b628 <__smakebuf_r+0x7c>)
 800b5f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	6020      	str	r0, [r4, #0]
 800b5f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5fc:	81a3      	strh	r3, [r4, #12]
 800b5fe:	9b00      	ldr	r3, [sp, #0]
 800b600:	6163      	str	r3, [r4, #20]
 800b602:	9b01      	ldr	r3, [sp, #4]
 800b604:	6120      	str	r0, [r4, #16]
 800b606:	b15b      	cbz	r3, 800b620 <__smakebuf_r+0x74>
 800b608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b60c:	4630      	mov	r0, r6
 800b60e:	f000 f8b9 	bl	800b784 <_isatty_r>
 800b612:	b128      	cbz	r0, 800b620 <__smakebuf_r+0x74>
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	f023 0303 	bic.w	r3, r3, #3
 800b61a:	f043 0301 	orr.w	r3, r3, #1
 800b61e:	81a3      	strh	r3, [r4, #12]
 800b620:	89a0      	ldrh	r0, [r4, #12]
 800b622:	4305      	orrs	r5, r0
 800b624:	81a5      	strh	r5, [r4, #12]
 800b626:	e7cd      	b.n	800b5c4 <__smakebuf_r+0x18>
 800b628:	0800b3b9 	.word	0x0800b3b9

0800b62c <memmove>:
 800b62c:	4288      	cmp	r0, r1
 800b62e:	b510      	push	{r4, lr}
 800b630:	eb01 0402 	add.w	r4, r1, r2
 800b634:	d902      	bls.n	800b63c <memmove+0x10>
 800b636:	4284      	cmp	r4, r0
 800b638:	4623      	mov	r3, r4
 800b63a:	d807      	bhi.n	800b64c <memmove+0x20>
 800b63c:	1e43      	subs	r3, r0, #1
 800b63e:	42a1      	cmp	r1, r4
 800b640:	d008      	beq.n	800b654 <memmove+0x28>
 800b642:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b64a:	e7f8      	b.n	800b63e <memmove+0x12>
 800b64c:	4402      	add	r2, r0
 800b64e:	4601      	mov	r1, r0
 800b650:	428a      	cmp	r2, r1
 800b652:	d100      	bne.n	800b656 <memmove+0x2a>
 800b654:	bd10      	pop	{r4, pc}
 800b656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b65a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b65e:	e7f7      	b.n	800b650 <memmove+0x24>

0800b660 <__malloc_lock>:
 800b660:	4801      	ldr	r0, [pc, #4]	; (800b668 <__malloc_lock+0x8>)
 800b662:	f7ff bf7b 	b.w	800b55c <__retarget_lock_acquire_recursive>
 800b666:	bf00      	nop
 800b668:	20000e98 	.word	0x20000e98

0800b66c <__malloc_unlock>:
 800b66c:	4801      	ldr	r0, [pc, #4]	; (800b674 <__malloc_unlock+0x8>)
 800b66e:	f7ff bf76 	b.w	800b55e <__retarget_lock_release_recursive>
 800b672:	bf00      	nop
 800b674:	20000e98 	.word	0x20000e98

0800b678 <_realloc_r>:
 800b678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b67c:	4680      	mov	r8, r0
 800b67e:	4614      	mov	r4, r2
 800b680:	460e      	mov	r6, r1
 800b682:	b921      	cbnz	r1, 800b68e <_realloc_r+0x16>
 800b684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b688:	4611      	mov	r1, r2
 800b68a:	f7ff b971 	b.w	800a970 <_malloc_r>
 800b68e:	b92a      	cbnz	r2, 800b69c <_realloc_r+0x24>
 800b690:	f7ff f902 	bl	800a898 <_free_r>
 800b694:	4625      	mov	r5, r4
 800b696:	4628      	mov	r0, r5
 800b698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b69c:	f000 f882 	bl	800b7a4 <_malloc_usable_size_r>
 800b6a0:	4284      	cmp	r4, r0
 800b6a2:	4607      	mov	r7, r0
 800b6a4:	d802      	bhi.n	800b6ac <_realloc_r+0x34>
 800b6a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b6aa:	d812      	bhi.n	800b6d2 <_realloc_r+0x5a>
 800b6ac:	4621      	mov	r1, r4
 800b6ae:	4640      	mov	r0, r8
 800b6b0:	f7ff f95e 	bl	800a970 <_malloc_r>
 800b6b4:	4605      	mov	r5, r0
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d0ed      	beq.n	800b696 <_realloc_r+0x1e>
 800b6ba:	42bc      	cmp	r4, r7
 800b6bc:	4622      	mov	r2, r4
 800b6be:	4631      	mov	r1, r6
 800b6c0:	bf28      	it	cs
 800b6c2:	463a      	movcs	r2, r7
 800b6c4:	f7fb fbe8 	bl	8006e98 <memcpy>
 800b6c8:	4631      	mov	r1, r6
 800b6ca:	4640      	mov	r0, r8
 800b6cc:	f7ff f8e4 	bl	800a898 <_free_r>
 800b6d0:	e7e1      	b.n	800b696 <_realloc_r+0x1e>
 800b6d2:	4635      	mov	r5, r6
 800b6d4:	e7df      	b.n	800b696 <_realloc_r+0x1e>

0800b6d6 <_raise_r>:
 800b6d6:	291f      	cmp	r1, #31
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	4604      	mov	r4, r0
 800b6dc:	460d      	mov	r5, r1
 800b6de:	d904      	bls.n	800b6ea <_raise_r+0x14>
 800b6e0:	2316      	movs	r3, #22
 800b6e2:	6003      	str	r3, [r0, #0]
 800b6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e8:	bd38      	pop	{r3, r4, r5, pc}
 800b6ea:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b6ec:	b112      	cbz	r2, 800b6f4 <_raise_r+0x1e>
 800b6ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6f2:	b94b      	cbnz	r3, 800b708 <_raise_r+0x32>
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f000 f831 	bl	800b75c <_getpid_r>
 800b6fa:	462a      	mov	r2, r5
 800b6fc:	4601      	mov	r1, r0
 800b6fe:	4620      	mov	r0, r4
 800b700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b704:	f000 b818 	b.w	800b738 <_kill_r>
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d00a      	beq.n	800b722 <_raise_r+0x4c>
 800b70c:	1c59      	adds	r1, r3, #1
 800b70e:	d103      	bne.n	800b718 <_raise_r+0x42>
 800b710:	2316      	movs	r3, #22
 800b712:	6003      	str	r3, [r0, #0]
 800b714:	2001      	movs	r0, #1
 800b716:	e7e7      	b.n	800b6e8 <_raise_r+0x12>
 800b718:	2400      	movs	r4, #0
 800b71a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b71e:	4628      	mov	r0, r5
 800b720:	4798      	blx	r3
 800b722:	2000      	movs	r0, #0
 800b724:	e7e0      	b.n	800b6e8 <_raise_r+0x12>
	...

0800b728 <raise>:
 800b728:	4b02      	ldr	r3, [pc, #8]	; (800b734 <raise+0xc>)
 800b72a:	4601      	mov	r1, r0
 800b72c:	6818      	ldr	r0, [r3, #0]
 800b72e:	f7ff bfd2 	b.w	800b6d6 <_raise_r>
 800b732:	bf00      	nop
 800b734:	2000009c 	.word	0x2000009c

0800b738 <_kill_r>:
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	4d07      	ldr	r5, [pc, #28]	; (800b758 <_kill_r+0x20>)
 800b73c:	2300      	movs	r3, #0
 800b73e:	4604      	mov	r4, r0
 800b740:	4608      	mov	r0, r1
 800b742:	4611      	mov	r1, r2
 800b744:	602b      	str	r3, [r5, #0]
 800b746:	f7f7 f861 	bl	800280c <_kill>
 800b74a:	1c43      	adds	r3, r0, #1
 800b74c:	d102      	bne.n	800b754 <_kill_r+0x1c>
 800b74e:	682b      	ldr	r3, [r5, #0]
 800b750:	b103      	cbz	r3, 800b754 <_kill_r+0x1c>
 800b752:	6023      	str	r3, [r4, #0]
 800b754:	bd38      	pop	{r3, r4, r5, pc}
 800b756:	bf00      	nop
 800b758:	20000e94 	.word	0x20000e94

0800b75c <_getpid_r>:
 800b75c:	f7f7 b84e 	b.w	80027fc <_getpid>

0800b760 <_fstat_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4d07      	ldr	r5, [pc, #28]	; (800b780 <_fstat_r+0x20>)
 800b764:	2300      	movs	r3, #0
 800b766:	4604      	mov	r4, r0
 800b768:	4608      	mov	r0, r1
 800b76a:	4611      	mov	r1, r2
 800b76c:	602b      	str	r3, [r5, #0]
 800b76e:	f7f7 f8ac 	bl	80028ca <_fstat>
 800b772:	1c43      	adds	r3, r0, #1
 800b774:	d102      	bne.n	800b77c <_fstat_r+0x1c>
 800b776:	682b      	ldr	r3, [r5, #0]
 800b778:	b103      	cbz	r3, 800b77c <_fstat_r+0x1c>
 800b77a:	6023      	str	r3, [r4, #0]
 800b77c:	bd38      	pop	{r3, r4, r5, pc}
 800b77e:	bf00      	nop
 800b780:	20000e94 	.word	0x20000e94

0800b784 <_isatty_r>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	4d06      	ldr	r5, [pc, #24]	; (800b7a0 <_isatty_r+0x1c>)
 800b788:	2300      	movs	r3, #0
 800b78a:	4604      	mov	r4, r0
 800b78c:	4608      	mov	r0, r1
 800b78e:	602b      	str	r3, [r5, #0]
 800b790:	f7f7 f8ab 	bl	80028ea <_isatty>
 800b794:	1c43      	adds	r3, r0, #1
 800b796:	d102      	bne.n	800b79e <_isatty_r+0x1a>
 800b798:	682b      	ldr	r3, [r5, #0]
 800b79a:	b103      	cbz	r3, 800b79e <_isatty_r+0x1a>
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	bd38      	pop	{r3, r4, r5, pc}
 800b7a0:	20000e94 	.word	0x20000e94

0800b7a4 <_malloc_usable_size_r>:
 800b7a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7a8:	1f18      	subs	r0, r3, #4
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	bfbc      	itt	lt
 800b7ae:	580b      	ldrlt	r3, [r1, r0]
 800b7b0:	18c0      	addlt	r0, r0, r3
 800b7b2:	4770      	bx	lr
 800b7b4:	0000      	movs	r0, r0
	...

0800b7b8 <atan>:
 800b7b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	ec55 4b10 	vmov	r4, r5, d0
 800b7c0:	4bc3      	ldr	r3, [pc, #780]	; (800bad0 <atan+0x318>)
 800b7c2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b7c6:	429e      	cmp	r6, r3
 800b7c8:	46ab      	mov	fp, r5
 800b7ca:	dd18      	ble.n	800b7fe <atan+0x46>
 800b7cc:	4bc1      	ldr	r3, [pc, #772]	; (800bad4 <atan+0x31c>)
 800b7ce:	429e      	cmp	r6, r3
 800b7d0:	dc01      	bgt.n	800b7d6 <atan+0x1e>
 800b7d2:	d109      	bne.n	800b7e8 <atan+0x30>
 800b7d4:	b144      	cbz	r4, 800b7e8 <atan+0x30>
 800b7d6:	4622      	mov	r2, r4
 800b7d8:	462b      	mov	r3, r5
 800b7da:	4620      	mov	r0, r4
 800b7dc:	4629      	mov	r1, r5
 800b7de:	f7f4 fd55 	bl	800028c <__adddf3>
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	460d      	mov	r5, r1
 800b7e6:	e006      	b.n	800b7f6 <atan+0x3e>
 800b7e8:	f1bb 0f00 	cmp.w	fp, #0
 800b7ec:	f300 8131 	bgt.w	800ba52 <atan+0x29a>
 800b7f0:	a59b      	add	r5, pc, #620	; (adr r5, 800ba60 <atan+0x2a8>)
 800b7f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b7f6:	ec45 4b10 	vmov	d0, r4, r5
 800b7fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7fe:	4bb6      	ldr	r3, [pc, #728]	; (800bad8 <atan+0x320>)
 800b800:	429e      	cmp	r6, r3
 800b802:	dc14      	bgt.n	800b82e <atan+0x76>
 800b804:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b808:	429e      	cmp	r6, r3
 800b80a:	dc0d      	bgt.n	800b828 <atan+0x70>
 800b80c:	a396      	add	r3, pc, #600	; (adr r3, 800ba68 <atan+0x2b0>)
 800b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b812:	ee10 0a10 	vmov	r0, s0
 800b816:	4629      	mov	r1, r5
 800b818:	f7f4 fd38 	bl	800028c <__adddf3>
 800b81c:	4baf      	ldr	r3, [pc, #700]	; (800badc <atan+0x324>)
 800b81e:	2200      	movs	r2, #0
 800b820:	f7f5 f97a 	bl	8000b18 <__aeabi_dcmpgt>
 800b824:	2800      	cmp	r0, #0
 800b826:	d1e6      	bne.n	800b7f6 <atan+0x3e>
 800b828:	f04f 3aff 	mov.w	sl, #4294967295
 800b82c:	e02b      	b.n	800b886 <atan+0xce>
 800b82e:	f000 f963 	bl	800baf8 <fabs>
 800b832:	4bab      	ldr	r3, [pc, #684]	; (800bae0 <atan+0x328>)
 800b834:	429e      	cmp	r6, r3
 800b836:	ec55 4b10 	vmov	r4, r5, d0
 800b83a:	f300 80bf 	bgt.w	800b9bc <atan+0x204>
 800b83e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b842:	429e      	cmp	r6, r3
 800b844:	f300 80a0 	bgt.w	800b988 <atan+0x1d0>
 800b848:	ee10 2a10 	vmov	r2, s0
 800b84c:	ee10 0a10 	vmov	r0, s0
 800b850:	462b      	mov	r3, r5
 800b852:	4629      	mov	r1, r5
 800b854:	f7f4 fd1a 	bl	800028c <__adddf3>
 800b858:	4ba0      	ldr	r3, [pc, #640]	; (800badc <atan+0x324>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	f7f4 fd14 	bl	8000288 <__aeabi_dsub>
 800b860:	2200      	movs	r2, #0
 800b862:	4606      	mov	r6, r0
 800b864:	460f      	mov	r7, r1
 800b866:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b86a:	4620      	mov	r0, r4
 800b86c:	4629      	mov	r1, r5
 800b86e:	f7f4 fd0d 	bl	800028c <__adddf3>
 800b872:	4602      	mov	r2, r0
 800b874:	460b      	mov	r3, r1
 800b876:	4630      	mov	r0, r6
 800b878:	4639      	mov	r1, r7
 800b87a:	f7f4 ffe7 	bl	800084c <__aeabi_ddiv>
 800b87e:	f04f 0a00 	mov.w	sl, #0
 800b882:	4604      	mov	r4, r0
 800b884:	460d      	mov	r5, r1
 800b886:	4622      	mov	r2, r4
 800b888:	462b      	mov	r3, r5
 800b88a:	4620      	mov	r0, r4
 800b88c:	4629      	mov	r1, r5
 800b88e:	f7f4 feb3 	bl	80005f8 <__aeabi_dmul>
 800b892:	4602      	mov	r2, r0
 800b894:	460b      	mov	r3, r1
 800b896:	4680      	mov	r8, r0
 800b898:	4689      	mov	r9, r1
 800b89a:	f7f4 fead 	bl	80005f8 <__aeabi_dmul>
 800b89e:	a374      	add	r3, pc, #464	; (adr r3, 800ba70 <atan+0x2b8>)
 800b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a4:	4606      	mov	r6, r0
 800b8a6:	460f      	mov	r7, r1
 800b8a8:	f7f4 fea6 	bl	80005f8 <__aeabi_dmul>
 800b8ac:	a372      	add	r3, pc, #456	; (adr r3, 800ba78 <atan+0x2c0>)
 800b8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b2:	f7f4 fceb 	bl	800028c <__adddf3>
 800b8b6:	4632      	mov	r2, r6
 800b8b8:	463b      	mov	r3, r7
 800b8ba:	f7f4 fe9d 	bl	80005f8 <__aeabi_dmul>
 800b8be:	a370      	add	r3, pc, #448	; (adr r3, 800ba80 <atan+0x2c8>)
 800b8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c4:	f7f4 fce2 	bl	800028c <__adddf3>
 800b8c8:	4632      	mov	r2, r6
 800b8ca:	463b      	mov	r3, r7
 800b8cc:	f7f4 fe94 	bl	80005f8 <__aeabi_dmul>
 800b8d0:	a36d      	add	r3, pc, #436	; (adr r3, 800ba88 <atan+0x2d0>)
 800b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d6:	f7f4 fcd9 	bl	800028c <__adddf3>
 800b8da:	4632      	mov	r2, r6
 800b8dc:	463b      	mov	r3, r7
 800b8de:	f7f4 fe8b 	bl	80005f8 <__aeabi_dmul>
 800b8e2:	a36b      	add	r3, pc, #428	; (adr r3, 800ba90 <atan+0x2d8>)
 800b8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e8:	f7f4 fcd0 	bl	800028c <__adddf3>
 800b8ec:	4632      	mov	r2, r6
 800b8ee:	463b      	mov	r3, r7
 800b8f0:	f7f4 fe82 	bl	80005f8 <__aeabi_dmul>
 800b8f4:	a368      	add	r3, pc, #416	; (adr r3, 800ba98 <atan+0x2e0>)
 800b8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fa:	f7f4 fcc7 	bl	800028c <__adddf3>
 800b8fe:	4642      	mov	r2, r8
 800b900:	464b      	mov	r3, r9
 800b902:	f7f4 fe79 	bl	80005f8 <__aeabi_dmul>
 800b906:	a366      	add	r3, pc, #408	; (adr r3, 800baa0 <atan+0x2e8>)
 800b908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90c:	4680      	mov	r8, r0
 800b90e:	4689      	mov	r9, r1
 800b910:	4630      	mov	r0, r6
 800b912:	4639      	mov	r1, r7
 800b914:	f7f4 fe70 	bl	80005f8 <__aeabi_dmul>
 800b918:	a363      	add	r3, pc, #396	; (adr r3, 800baa8 <atan+0x2f0>)
 800b91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91e:	f7f4 fcb3 	bl	8000288 <__aeabi_dsub>
 800b922:	4632      	mov	r2, r6
 800b924:	463b      	mov	r3, r7
 800b926:	f7f4 fe67 	bl	80005f8 <__aeabi_dmul>
 800b92a:	a361      	add	r3, pc, #388	; (adr r3, 800bab0 <atan+0x2f8>)
 800b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b930:	f7f4 fcaa 	bl	8000288 <__aeabi_dsub>
 800b934:	4632      	mov	r2, r6
 800b936:	463b      	mov	r3, r7
 800b938:	f7f4 fe5e 	bl	80005f8 <__aeabi_dmul>
 800b93c:	a35e      	add	r3, pc, #376	; (adr r3, 800bab8 <atan+0x300>)
 800b93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b942:	f7f4 fca1 	bl	8000288 <__aeabi_dsub>
 800b946:	4632      	mov	r2, r6
 800b948:	463b      	mov	r3, r7
 800b94a:	f7f4 fe55 	bl	80005f8 <__aeabi_dmul>
 800b94e:	a35c      	add	r3, pc, #368	; (adr r3, 800bac0 <atan+0x308>)
 800b950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b954:	f7f4 fc98 	bl	8000288 <__aeabi_dsub>
 800b958:	4632      	mov	r2, r6
 800b95a:	463b      	mov	r3, r7
 800b95c:	f7f4 fe4c 	bl	80005f8 <__aeabi_dmul>
 800b960:	4602      	mov	r2, r0
 800b962:	460b      	mov	r3, r1
 800b964:	4640      	mov	r0, r8
 800b966:	4649      	mov	r1, r9
 800b968:	f7f4 fc90 	bl	800028c <__adddf3>
 800b96c:	4622      	mov	r2, r4
 800b96e:	462b      	mov	r3, r5
 800b970:	f7f4 fe42 	bl	80005f8 <__aeabi_dmul>
 800b974:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b978:	4602      	mov	r2, r0
 800b97a:	460b      	mov	r3, r1
 800b97c:	d14b      	bne.n	800ba16 <atan+0x25e>
 800b97e:	4620      	mov	r0, r4
 800b980:	4629      	mov	r1, r5
 800b982:	f7f4 fc81 	bl	8000288 <__aeabi_dsub>
 800b986:	e72c      	b.n	800b7e2 <atan+0x2a>
 800b988:	ee10 0a10 	vmov	r0, s0
 800b98c:	4b53      	ldr	r3, [pc, #332]	; (800badc <atan+0x324>)
 800b98e:	2200      	movs	r2, #0
 800b990:	4629      	mov	r1, r5
 800b992:	f7f4 fc79 	bl	8000288 <__aeabi_dsub>
 800b996:	4b51      	ldr	r3, [pc, #324]	; (800badc <atan+0x324>)
 800b998:	4606      	mov	r6, r0
 800b99a:	460f      	mov	r7, r1
 800b99c:	2200      	movs	r2, #0
 800b99e:	4620      	mov	r0, r4
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	f7f4 fc73 	bl	800028c <__adddf3>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	4639      	mov	r1, r7
 800b9ae:	f7f4 ff4d 	bl	800084c <__aeabi_ddiv>
 800b9b2:	f04f 0a01 	mov.w	sl, #1
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	460d      	mov	r5, r1
 800b9ba:	e764      	b.n	800b886 <atan+0xce>
 800b9bc:	4b49      	ldr	r3, [pc, #292]	; (800bae4 <atan+0x32c>)
 800b9be:	429e      	cmp	r6, r3
 800b9c0:	da1d      	bge.n	800b9fe <atan+0x246>
 800b9c2:	ee10 0a10 	vmov	r0, s0
 800b9c6:	4b48      	ldr	r3, [pc, #288]	; (800bae8 <atan+0x330>)
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	4629      	mov	r1, r5
 800b9cc:	f7f4 fc5c 	bl	8000288 <__aeabi_dsub>
 800b9d0:	4b45      	ldr	r3, [pc, #276]	; (800bae8 <atan+0x330>)
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	460f      	mov	r7, r1
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	4620      	mov	r0, r4
 800b9da:	4629      	mov	r1, r5
 800b9dc:	f7f4 fe0c 	bl	80005f8 <__aeabi_dmul>
 800b9e0:	4b3e      	ldr	r3, [pc, #248]	; (800badc <atan+0x324>)
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f7f4 fc52 	bl	800028c <__adddf3>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	4639      	mov	r1, r7
 800b9f0:	f7f4 ff2c 	bl	800084c <__aeabi_ddiv>
 800b9f4:	f04f 0a02 	mov.w	sl, #2
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	460d      	mov	r5, r1
 800b9fc:	e743      	b.n	800b886 <atan+0xce>
 800b9fe:	462b      	mov	r3, r5
 800ba00:	ee10 2a10 	vmov	r2, s0
 800ba04:	4939      	ldr	r1, [pc, #228]	; (800baec <atan+0x334>)
 800ba06:	2000      	movs	r0, #0
 800ba08:	f7f4 ff20 	bl	800084c <__aeabi_ddiv>
 800ba0c:	f04f 0a03 	mov.w	sl, #3
 800ba10:	4604      	mov	r4, r0
 800ba12:	460d      	mov	r5, r1
 800ba14:	e737      	b.n	800b886 <atan+0xce>
 800ba16:	4b36      	ldr	r3, [pc, #216]	; (800baf0 <atan+0x338>)
 800ba18:	4e36      	ldr	r6, [pc, #216]	; (800baf4 <atan+0x33c>)
 800ba1a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ba1e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ba22:	e9da 2300 	ldrd	r2, r3, [sl]
 800ba26:	f7f4 fc2f 	bl	8000288 <__aeabi_dsub>
 800ba2a:	4622      	mov	r2, r4
 800ba2c:	462b      	mov	r3, r5
 800ba2e:	f7f4 fc2b 	bl	8000288 <__aeabi_dsub>
 800ba32:	4602      	mov	r2, r0
 800ba34:	460b      	mov	r3, r1
 800ba36:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ba3a:	f7f4 fc25 	bl	8000288 <__aeabi_dsub>
 800ba3e:	f1bb 0f00 	cmp.w	fp, #0
 800ba42:	4604      	mov	r4, r0
 800ba44:	460d      	mov	r5, r1
 800ba46:	f6bf aed6 	bge.w	800b7f6 <atan+0x3e>
 800ba4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba4e:	461d      	mov	r5, r3
 800ba50:	e6d1      	b.n	800b7f6 <atan+0x3e>
 800ba52:	a51d      	add	r5, pc, #116	; (adr r5, 800bac8 <atan+0x310>)
 800ba54:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba58:	e6cd      	b.n	800b7f6 <atan+0x3e>
 800ba5a:	bf00      	nop
 800ba5c:	f3af 8000 	nop.w
 800ba60:	54442d18 	.word	0x54442d18
 800ba64:	bff921fb 	.word	0xbff921fb
 800ba68:	8800759c 	.word	0x8800759c
 800ba6c:	7e37e43c 	.word	0x7e37e43c
 800ba70:	e322da11 	.word	0xe322da11
 800ba74:	3f90ad3a 	.word	0x3f90ad3a
 800ba78:	24760deb 	.word	0x24760deb
 800ba7c:	3fa97b4b 	.word	0x3fa97b4b
 800ba80:	a0d03d51 	.word	0xa0d03d51
 800ba84:	3fb10d66 	.word	0x3fb10d66
 800ba88:	c54c206e 	.word	0xc54c206e
 800ba8c:	3fb745cd 	.word	0x3fb745cd
 800ba90:	920083ff 	.word	0x920083ff
 800ba94:	3fc24924 	.word	0x3fc24924
 800ba98:	5555550d 	.word	0x5555550d
 800ba9c:	3fd55555 	.word	0x3fd55555
 800baa0:	2c6a6c2f 	.word	0x2c6a6c2f
 800baa4:	bfa2b444 	.word	0xbfa2b444
 800baa8:	52defd9a 	.word	0x52defd9a
 800baac:	3fadde2d 	.word	0x3fadde2d
 800bab0:	af749a6d 	.word	0xaf749a6d
 800bab4:	3fb3b0f2 	.word	0x3fb3b0f2
 800bab8:	fe231671 	.word	0xfe231671
 800babc:	3fbc71c6 	.word	0x3fbc71c6
 800bac0:	9998ebc4 	.word	0x9998ebc4
 800bac4:	3fc99999 	.word	0x3fc99999
 800bac8:	54442d18 	.word	0x54442d18
 800bacc:	3ff921fb 	.word	0x3ff921fb
 800bad0:	440fffff 	.word	0x440fffff
 800bad4:	7ff00000 	.word	0x7ff00000
 800bad8:	3fdbffff 	.word	0x3fdbffff
 800badc:	3ff00000 	.word	0x3ff00000
 800bae0:	3ff2ffff 	.word	0x3ff2ffff
 800bae4:	40038000 	.word	0x40038000
 800bae8:	3ff80000 	.word	0x3ff80000
 800baec:	bff00000 	.word	0xbff00000
 800baf0:	0800c950 	.word	0x0800c950
 800baf4:	0800c930 	.word	0x0800c930

0800baf8 <fabs>:
 800baf8:	ec51 0b10 	vmov	r0, r1, d0
 800bafc:	ee10 2a10 	vmov	r2, s0
 800bb00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb04:	ec43 2b10 	vmov	d0, r2, r3
 800bb08:	4770      	bx	lr

0800bb0a <atan2>:
 800bb0a:	f000 b82d 	b.w	800bb68 <__ieee754_atan2>

0800bb0e <sqrt>:
 800bb0e:	b538      	push	{r3, r4, r5, lr}
 800bb10:	ed2d 8b02 	vpush	{d8}
 800bb14:	ec55 4b10 	vmov	r4, r5, d0
 800bb18:	f000 f8f0 	bl	800bcfc <__ieee754_sqrt>
 800bb1c:	4622      	mov	r2, r4
 800bb1e:	462b      	mov	r3, r5
 800bb20:	4620      	mov	r0, r4
 800bb22:	4629      	mov	r1, r5
 800bb24:	eeb0 8a40 	vmov.f32	s16, s0
 800bb28:	eef0 8a60 	vmov.f32	s17, s1
 800bb2c:	f7f4 fffe 	bl	8000b2c <__aeabi_dcmpun>
 800bb30:	b990      	cbnz	r0, 800bb58 <sqrt+0x4a>
 800bb32:	2200      	movs	r2, #0
 800bb34:	2300      	movs	r3, #0
 800bb36:	4620      	mov	r0, r4
 800bb38:	4629      	mov	r1, r5
 800bb3a:	f7f4 ffcf 	bl	8000adc <__aeabi_dcmplt>
 800bb3e:	b158      	cbz	r0, 800bb58 <sqrt+0x4a>
 800bb40:	f7fb f980 	bl	8006e44 <__errno>
 800bb44:	2321      	movs	r3, #33	; 0x21
 800bb46:	6003      	str	r3, [r0, #0]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	4610      	mov	r0, r2
 800bb4e:	4619      	mov	r1, r3
 800bb50:	f7f4 fe7c 	bl	800084c <__aeabi_ddiv>
 800bb54:	ec41 0b18 	vmov	d8, r0, r1
 800bb58:	eeb0 0a48 	vmov.f32	s0, s16
 800bb5c:	eef0 0a68 	vmov.f32	s1, s17
 800bb60:	ecbd 8b02 	vpop	{d8}
 800bb64:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bb68 <__ieee754_atan2>:
 800bb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb6c:	ec57 6b11 	vmov	r6, r7, d1
 800bb70:	4273      	negs	r3, r6
 800bb72:	f8df e184 	ldr.w	lr, [pc, #388]	; 800bcf8 <__ieee754_atan2+0x190>
 800bb76:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bb7a:	4333      	orrs	r3, r6
 800bb7c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bb80:	4573      	cmp	r3, lr
 800bb82:	ec51 0b10 	vmov	r0, r1, d0
 800bb86:	ee11 8a10 	vmov	r8, s2
 800bb8a:	d80a      	bhi.n	800bba2 <__ieee754_atan2+0x3a>
 800bb8c:	4244      	negs	r4, r0
 800bb8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb92:	4304      	orrs	r4, r0
 800bb94:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bb98:	4574      	cmp	r4, lr
 800bb9a:	ee10 9a10 	vmov	r9, s0
 800bb9e:	468c      	mov	ip, r1
 800bba0:	d907      	bls.n	800bbb2 <__ieee754_atan2+0x4a>
 800bba2:	4632      	mov	r2, r6
 800bba4:	463b      	mov	r3, r7
 800bba6:	f7f4 fb71 	bl	800028c <__adddf3>
 800bbaa:	ec41 0b10 	vmov	d0, r0, r1
 800bbae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbb2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bbb6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bbba:	4334      	orrs	r4, r6
 800bbbc:	d103      	bne.n	800bbc6 <__ieee754_atan2+0x5e>
 800bbbe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbc2:	f7ff bdf9 	b.w	800b7b8 <atan>
 800bbc6:	17bc      	asrs	r4, r7, #30
 800bbc8:	f004 0402 	and.w	r4, r4, #2
 800bbcc:	ea53 0909 	orrs.w	r9, r3, r9
 800bbd0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bbd4:	d107      	bne.n	800bbe6 <__ieee754_atan2+0x7e>
 800bbd6:	2c02      	cmp	r4, #2
 800bbd8:	d060      	beq.n	800bc9c <__ieee754_atan2+0x134>
 800bbda:	2c03      	cmp	r4, #3
 800bbdc:	d1e5      	bne.n	800bbaa <__ieee754_atan2+0x42>
 800bbde:	a142      	add	r1, pc, #264	; (adr r1, 800bce8 <__ieee754_atan2+0x180>)
 800bbe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbe4:	e7e1      	b.n	800bbaa <__ieee754_atan2+0x42>
 800bbe6:	ea52 0808 	orrs.w	r8, r2, r8
 800bbea:	d106      	bne.n	800bbfa <__ieee754_atan2+0x92>
 800bbec:	f1bc 0f00 	cmp.w	ip, #0
 800bbf0:	da5f      	bge.n	800bcb2 <__ieee754_atan2+0x14a>
 800bbf2:	a13f      	add	r1, pc, #252	; (adr r1, 800bcf0 <__ieee754_atan2+0x188>)
 800bbf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbf8:	e7d7      	b.n	800bbaa <__ieee754_atan2+0x42>
 800bbfa:	4572      	cmp	r2, lr
 800bbfc:	d10f      	bne.n	800bc1e <__ieee754_atan2+0xb6>
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	f104 34ff 	add.w	r4, r4, #4294967295
 800bc04:	d107      	bne.n	800bc16 <__ieee754_atan2+0xae>
 800bc06:	2c02      	cmp	r4, #2
 800bc08:	d84c      	bhi.n	800bca4 <__ieee754_atan2+0x13c>
 800bc0a:	4b35      	ldr	r3, [pc, #212]	; (800bce0 <__ieee754_atan2+0x178>)
 800bc0c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bc10:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bc14:	e7c9      	b.n	800bbaa <__ieee754_atan2+0x42>
 800bc16:	2c02      	cmp	r4, #2
 800bc18:	d848      	bhi.n	800bcac <__ieee754_atan2+0x144>
 800bc1a:	4b32      	ldr	r3, [pc, #200]	; (800bce4 <__ieee754_atan2+0x17c>)
 800bc1c:	e7f6      	b.n	800bc0c <__ieee754_atan2+0xa4>
 800bc1e:	4573      	cmp	r3, lr
 800bc20:	d0e4      	beq.n	800bbec <__ieee754_atan2+0x84>
 800bc22:	1a9b      	subs	r3, r3, r2
 800bc24:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bc28:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bc2c:	da1e      	bge.n	800bc6c <__ieee754_atan2+0x104>
 800bc2e:	2f00      	cmp	r7, #0
 800bc30:	da01      	bge.n	800bc36 <__ieee754_atan2+0xce>
 800bc32:	323c      	adds	r2, #60	; 0x3c
 800bc34:	db1e      	blt.n	800bc74 <__ieee754_atan2+0x10c>
 800bc36:	4632      	mov	r2, r6
 800bc38:	463b      	mov	r3, r7
 800bc3a:	f7f4 fe07 	bl	800084c <__aeabi_ddiv>
 800bc3e:	ec41 0b10 	vmov	d0, r0, r1
 800bc42:	f7ff ff59 	bl	800baf8 <fabs>
 800bc46:	f7ff fdb7 	bl	800b7b8 <atan>
 800bc4a:	ec51 0b10 	vmov	r0, r1, d0
 800bc4e:	2c01      	cmp	r4, #1
 800bc50:	d013      	beq.n	800bc7a <__ieee754_atan2+0x112>
 800bc52:	2c02      	cmp	r4, #2
 800bc54:	d015      	beq.n	800bc82 <__ieee754_atan2+0x11a>
 800bc56:	2c00      	cmp	r4, #0
 800bc58:	d0a7      	beq.n	800bbaa <__ieee754_atan2+0x42>
 800bc5a:	a319      	add	r3, pc, #100	; (adr r3, 800bcc0 <__ieee754_atan2+0x158>)
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	f7f4 fb12 	bl	8000288 <__aeabi_dsub>
 800bc64:	a318      	add	r3, pc, #96	; (adr r3, 800bcc8 <__ieee754_atan2+0x160>)
 800bc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6a:	e014      	b.n	800bc96 <__ieee754_atan2+0x12e>
 800bc6c:	a118      	add	r1, pc, #96	; (adr r1, 800bcd0 <__ieee754_atan2+0x168>)
 800bc6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc72:	e7ec      	b.n	800bc4e <__ieee754_atan2+0xe6>
 800bc74:	2000      	movs	r0, #0
 800bc76:	2100      	movs	r1, #0
 800bc78:	e7e9      	b.n	800bc4e <__ieee754_atan2+0xe6>
 800bc7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc7e:	4619      	mov	r1, r3
 800bc80:	e793      	b.n	800bbaa <__ieee754_atan2+0x42>
 800bc82:	a30f      	add	r3, pc, #60	; (adr r3, 800bcc0 <__ieee754_atan2+0x158>)
 800bc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc88:	f7f4 fafe 	bl	8000288 <__aeabi_dsub>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	a10d      	add	r1, pc, #52	; (adr r1, 800bcc8 <__ieee754_atan2+0x160>)
 800bc92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc96:	f7f4 faf7 	bl	8000288 <__aeabi_dsub>
 800bc9a:	e786      	b.n	800bbaa <__ieee754_atan2+0x42>
 800bc9c:	a10a      	add	r1, pc, #40	; (adr r1, 800bcc8 <__ieee754_atan2+0x160>)
 800bc9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bca2:	e782      	b.n	800bbaa <__ieee754_atan2+0x42>
 800bca4:	a10c      	add	r1, pc, #48	; (adr r1, 800bcd8 <__ieee754_atan2+0x170>)
 800bca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcaa:	e77e      	b.n	800bbaa <__ieee754_atan2+0x42>
 800bcac:	2000      	movs	r0, #0
 800bcae:	2100      	movs	r1, #0
 800bcb0:	e77b      	b.n	800bbaa <__ieee754_atan2+0x42>
 800bcb2:	a107      	add	r1, pc, #28	; (adr r1, 800bcd0 <__ieee754_atan2+0x168>)
 800bcb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcb8:	e777      	b.n	800bbaa <__ieee754_atan2+0x42>
 800bcba:	bf00      	nop
 800bcbc:	f3af 8000 	nop.w
 800bcc0:	33145c07 	.word	0x33145c07
 800bcc4:	3ca1a626 	.word	0x3ca1a626
 800bcc8:	54442d18 	.word	0x54442d18
 800bccc:	400921fb 	.word	0x400921fb
 800bcd0:	54442d18 	.word	0x54442d18
 800bcd4:	3ff921fb 	.word	0x3ff921fb
 800bcd8:	54442d18 	.word	0x54442d18
 800bcdc:	3fe921fb 	.word	0x3fe921fb
 800bce0:	0800c970 	.word	0x0800c970
 800bce4:	0800c988 	.word	0x0800c988
 800bce8:	54442d18 	.word	0x54442d18
 800bcec:	c00921fb 	.word	0xc00921fb
 800bcf0:	54442d18 	.word	0x54442d18
 800bcf4:	bff921fb 	.word	0xbff921fb
 800bcf8:	7ff00000 	.word	0x7ff00000

0800bcfc <__ieee754_sqrt>:
 800bcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd00:	ec55 4b10 	vmov	r4, r5, d0
 800bd04:	4e55      	ldr	r6, [pc, #340]	; (800be5c <__ieee754_sqrt+0x160>)
 800bd06:	43ae      	bics	r6, r5
 800bd08:	ee10 0a10 	vmov	r0, s0
 800bd0c:	ee10 3a10 	vmov	r3, s0
 800bd10:	462a      	mov	r2, r5
 800bd12:	4629      	mov	r1, r5
 800bd14:	d110      	bne.n	800bd38 <__ieee754_sqrt+0x3c>
 800bd16:	ee10 2a10 	vmov	r2, s0
 800bd1a:	462b      	mov	r3, r5
 800bd1c:	f7f4 fc6c 	bl	80005f8 <__aeabi_dmul>
 800bd20:	4602      	mov	r2, r0
 800bd22:	460b      	mov	r3, r1
 800bd24:	4620      	mov	r0, r4
 800bd26:	4629      	mov	r1, r5
 800bd28:	f7f4 fab0 	bl	800028c <__adddf3>
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	460d      	mov	r5, r1
 800bd30:	ec45 4b10 	vmov	d0, r4, r5
 800bd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd38:	2d00      	cmp	r5, #0
 800bd3a:	dc10      	bgt.n	800bd5e <__ieee754_sqrt+0x62>
 800bd3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bd40:	4330      	orrs	r0, r6
 800bd42:	d0f5      	beq.n	800bd30 <__ieee754_sqrt+0x34>
 800bd44:	b15d      	cbz	r5, 800bd5e <__ieee754_sqrt+0x62>
 800bd46:	ee10 2a10 	vmov	r2, s0
 800bd4a:	462b      	mov	r3, r5
 800bd4c:	ee10 0a10 	vmov	r0, s0
 800bd50:	f7f4 fa9a 	bl	8000288 <__aeabi_dsub>
 800bd54:	4602      	mov	r2, r0
 800bd56:	460b      	mov	r3, r1
 800bd58:	f7f4 fd78 	bl	800084c <__aeabi_ddiv>
 800bd5c:	e7e6      	b.n	800bd2c <__ieee754_sqrt+0x30>
 800bd5e:	1512      	asrs	r2, r2, #20
 800bd60:	d074      	beq.n	800be4c <__ieee754_sqrt+0x150>
 800bd62:	07d4      	lsls	r4, r2, #31
 800bd64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bd68:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800bd6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bd70:	bf5e      	ittt	pl
 800bd72:	0fda      	lsrpl	r2, r3, #31
 800bd74:	005b      	lslpl	r3, r3, #1
 800bd76:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800bd7a:	2400      	movs	r4, #0
 800bd7c:	0fda      	lsrs	r2, r3, #31
 800bd7e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800bd82:	107f      	asrs	r7, r7, #1
 800bd84:	005b      	lsls	r3, r3, #1
 800bd86:	2516      	movs	r5, #22
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bd8e:	1886      	adds	r6, r0, r2
 800bd90:	428e      	cmp	r6, r1
 800bd92:	bfde      	ittt	le
 800bd94:	1b89      	suble	r1, r1, r6
 800bd96:	18b0      	addle	r0, r6, r2
 800bd98:	18a4      	addle	r4, r4, r2
 800bd9a:	0049      	lsls	r1, r1, #1
 800bd9c:	3d01      	subs	r5, #1
 800bd9e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800bda2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800bda6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bdaa:	d1f0      	bne.n	800bd8e <__ieee754_sqrt+0x92>
 800bdac:	462a      	mov	r2, r5
 800bdae:	f04f 0e20 	mov.w	lr, #32
 800bdb2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bdb6:	4281      	cmp	r1, r0
 800bdb8:	eb06 0c05 	add.w	ip, r6, r5
 800bdbc:	dc02      	bgt.n	800bdc4 <__ieee754_sqrt+0xc8>
 800bdbe:	d113      	bne.n	800bde8 <__ieee754_sqrt+0xec>
 800bdc0:	459c      	cmp	ip, r3
 800bdc2:	d811      	bhi.n	800bde8 <__ieee754_sqrt+0xec>
 800bdc4:	f1bc 0f00 	cmp.w	ip, #0
 800bdc8:	eb0c 0506 	add.w	r5, ip, r6
 800bdcc:	da43      	bge.n	800be56 <__ieee754_sqrt+0x15a>
 800bdce:	2d00      	cmp	r5, #0
 800bdd0:	db41      	blt.n	800be56 <__ieee754_sqrt+0x15a>
 800bdd2:	f100 0801 	add.w	r8, r0, #1
 800bdd6:	1a09      	subs	r1, r1, r0
 800bdd8:	459c      	cmp	ip, r3
 800bdda:	bf88      	it	hi
 800bddc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800bde0:	eba3 030c 	sub.w	r3, r3, ip
 800bde4:	4432      	add	r2, r6
 800bde6:	4640      	mov	r0, r8
 800bde8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bdec:	f1be 0e01 	subs.w	lr, lr, #1
 800bdf0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800bdf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bdf8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bdfc:	d1db      	bne.n	800bdb6 <__ieee754_sqrt+0xba>
 800bdfe:	430b      	orrs	r3, r1
 800be00:	d006      	beq.n	800be10 <__ieee754_sqrt+0x114>
 800be02:	1c50      	adds	r0, r2, #1
 800be04:	bf13      	iteet	ne
 800be06:	3201      	addne	r2, #1
 800be08:	3401      	addeq	r4, #1
 800be0a:	4672      	moveq	r2, lr
 800be0c:	f022 0201 	bicne.w	r2, r2, #1
 800be10:	1063      	asrs	r3, r4, #1
 800be12:	0852      	lsrs	r2, r2, #1
 800be14:	07e1      	lsls	r1, r4, #31
 800be16:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800be1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800be1e:	bf48      	it	mi
 800be20:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800be24:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800be28:	4614      	mov	r4, r2
 800be2a:	e781      	b.n	800bd30 <__ieee754_sqrt+0x34>
 800be2c:	0ad9      	lsrs	r1, r3, #11
 800be2e:	3815      	subs	r0, #21
 800be30:	055b      	lsls	r3, r3, #21
 800be32:	2900      	cmp	r1, #0
 800be34:	d0fa      	beq.n	800be2c <__ieee754_sqrt+0x130>
 800be36:	02cd      	lsls	r5, r1, #11
 800be38:	d50a      	bpl.n	800be50 <__ieee754_sqrt+0x154>
 800be3a:	f1c2 0420 	rsb	r4, r2, #32
 800be3e:	fa23 f404 	lsr.w	r4, r3, r4
 800be42:	1e55      	subs	r5, r2, #1
 800be44:	4093      	lsls	r3, r2
 800be46:	4321      	orrs	r1, r4
 800be48:	1b42      	subs	r2, r0, r5
 800be4a:	e78a      	b.n	800bd62 <__ieee754_sqrt+0x66>
 800be4c:	4610      	mov	r0, r2
 800be4e:	e7f0      	b.n	800be32 <__ieee754_sqrt+0x136>
 800be50:	0049      	lsls	r1, r1, #1
 800be52:	3201      	adds	r2, #1
 800be54:	e7ef      	b.n	800be36 <__ieee754_sqrt+0x13a>
 800be56:	4680      	mov	r8, r0
 800be58:	e7bd      	b.n	800bdd6 <__ieee754_sqrt+0xda>
 800be5a:	bf00      	nop
 800be5c:	7ff00000 	.word	0x7ff00000

0800be60 <_init>:
 800be60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be62:	bf00      	nop
 800be64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be66:	bc08      	pop	{r3}
 800be68:	469e      	mov	lr, r3
 800be6a:	4770      	bx	lr

0800be6c <_fini>:
 800be6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6e:	bf00      	nop
 800be70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be72:	bc08      	pop	{r3}
 800be74:	469e      	mov	lr, r3
 800be76:	4770      	bx	lr
